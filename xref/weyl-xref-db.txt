(clear-tables)
(setf (source-file 'VARIABLE-MINIMAL-POLYNOMIAL) '("algebraic-extension.lisp"))
(setf (source-file 'MINIMAL-POLYNOMIAL) '("algebraic-extension.lisp"
                                          "algebraic-extension.lisp"
                                          "algebraic-extension.lisp"
                                          "algebraic-extension.lisp"))
(setf (source-file 'SET-MINIMAL-POLYNOMIAL) '("algebraic-extension.lisp"
                                              "algebraic-extension.lisp"))
(setf (source-file 'MAKE-POLYNOMIAL) '("polynomials/mpolynomial.lisp"
                                       "polynomials/mpolynomial.lisp"
                                       "polynomials/epolynomial.lisp"
                                       "algebraic-extension.lisp"))
(setf (source-file 'ALG-POLY-TIMES) '("algebraic-extension.lisp"))
(setf (source-file 'EXPT) '("polynomials/upolynomial.lisp"
                            "polynomials/mpolynomial.lisp"
                            "polynomials/mpolynomial.lisp"
                            "polynomials/epolynomial.lisp"
                            "numbers/numbers.lisp" "numbers/numbers.lisp"
                            "numbers/numbers.lisp" "numbers/numbers.lisp"
                            "numbers/numbers.lisp" "numbers/numbers.lisp"
                            "numbers/numbers.lisp" "numbers/numbers.lisp"
                            "numbers/numbers.lisp" "numbers/numbers.lisp"
                            "numbers/numbers.lisp" "numbers/numbers.lisp"
                            "numbers/numbers.lisp" "numbers/numbers.lisp"
                            "numbers/gfp.lisp" "numbers/gfp.lisp"
                            "numbers/gfp.lisp" "classes/algebraic-domains.lisp"
                            "tpower.lisp" "rational-functions.lisp"
                            "rational-functions.lisp" "quotient-fields.lisp"
                            "quotient-fields.lisp" "functions.lisp"
                            "functions.lisp" "functions.lisp" "functions.lisp"
                            "algebraic-extension.lisp"))
(setf (source-file 'CHOOSE) '("avl.lisp"))
(setf (source-file '%CHOOSE) '("avl.lisp" "avl.lisp"))
(setf (source-file 'PICK) '("avl.lisp" "avl.lisp" "avl.lisp"))
(setf (source-file 'PICK-NULL) '("avl.lisp"))
(setf (source-file '%CHOOSE-REPEATS) '("avl.lisp" "avl.lisp"))
(setf (source-file 'PERMUTE) '("avl.lisp"))
(setf (source-file 'PERMUTE%) '("avl.lisp" "avl.lisp"))
(setf (source-file '%PARTITION1) '("avl.lisp"))
(setf (source-file 'PART-INT) '("avl.lisp" "avl.lisp"))
(setf (source-file '%PARTITION2) '("avl.lisp"))
(setf (source-file 'PARTITION) '("avl.lisp"))
(setf (source-file 'MAP-OVER-TREE) '("avl.lisp"))
(setf (source-file 'AVL-TREE) '("avl.lisp"))
(setf (source-file 'AVL-NODE) '("avl.lisp"))
(setf (source-file 'AVL-TREE-ELEMENTS-AS-SINGLETONS) '("avl.lisp"))
(setf (source-file 'AVL-NODE-AS-PAIRS) '("avl.lisp"))
(setf (source-file 'AVL-TREE-ELEMENTS-AS-PAIRS) '("avl.lisp"))
(setf (source-file 'SIMPLE-AVL-TREE) '("avl.lisp"))
(setf (source-file 'AVL-TREE-OF-PAIRS) '("avl.lisp"))
(setf (source-file 'AVL-SIZE) '("avl.lisp" "avl.lisp" "avl.lisp"))
(setf (source-file 'PRINT-OBJECT) '("vector-spaces/vector.lisp"
                                    "polynomials/upolynomial.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "polynomials/epolynomial.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/numbers.lisp" "numbers/gfp.lisp"
                                    "numbers/gfp.lisp" "numbers/gfp.lisp"
                                    "numbers/bigfloat.lisp" "tpower.lisp"
                                    "topology.lisp" "topology.lisp"
                                    "topology.lisp" "topology.lisp"
                                    "topology.lisp" "sets.lisp" "sets.lisp"
                                    "sets.lisp" "rational-functions.lisp"
                                    "quotient-fields.lisp" "new-domains.lisp"
                                    "new-domains.lisp" "multipole.lisp"
                                    "morphisms.lisp" "matrix.lisp"
                                    "matrix.lisp" "general.lisp" "general.lisp"
                                    "general.lisp" "general.lisp"
                                    "general.lisp" "general.lisp"
                                    "general.lisp" "general.lisp"
                                    "general.lisp" "general.lisp"
                                    "funct-spaces.lisp" "functions.lisp"
                                    "fourier.lisp" "fourier.lisp"
                                    "domain-support.lisp" "direct-sums.lisp"
                                    "avl.lisp" "avl.lisp"))
(setf (source-file 'UPDATE-NODE) '("avl.lisp" "avl.lisp"))
(setf (source-file 'EMPTY?) '("avl.lisp"))
(setf (source-file 'AVL-HEIGHT) '("avl.lisp" "avl.lisp" "avl.lisp"))
(setf (source-file 'LEFT-MOST) '("avl.lisp" "avl.lisp"))
(setf (source-file 'FIND-LEFT-MOST) '("avl.lisp"))
(setf (source-file 'AVL-MAXIMUM) '("avl.lisp"))
(setf (source-file 'MAP-OVER-EACH-NODE) '("avl.lisp" "avl.lisp"))
(setf (source-file 'MAP-OVER) '("avl.lisp"))
(setf (source-file 'MAKE-GENERATOR) '("sets.lisp" "avl.lisp" "avl.lisp"))
(setf (source-file 'CURRENT-STATE) '("avl.lisp"))
(setf (source-file 'SET-CURRENT-STATE) '("avl.lisp"))
(setf (source-file 'CURRENT-NODE) '("avl.lisp"))
(setf (source-file 'NEW-NODE) '("avl.lisp"))
(setf (source-file 'SCAN) '("avl.lisp"))
(setf (source-file 'RIGHT-MOST) '("avl.lisp" "avl.lisp"))
(setf (source-file 'FIND-RIGHT-MOST) '("avl.lisp"))
(setf (source-file 'AVL-MINIMUM) '("avl.lisp"))
(setf (source-file 'AVL-NEXT) '("avl.lisp" "avl.lisp" "avl.lisp"))
(setf (source-file 'NEXT-LOOP) '("lisp-support.lisp" "lisp-support.lisp"
                                 "lisp-support.lisp" "lisp-support.lisp"
                                 "lisp-support.lisp" "lisp-support.lisp"
                                 "lisp-support.lisp" "lisp-support.lisp"
                                 "avl.lisp" "avl.lisp"))
(setf (source-file 'AVL-PREVIOUS) '("avl.lisp" "avl.lisp" "avl.lisp"))
(setf (source-file 'BALANCE-RIGHT) '("avl.lisp" "avl.lisp"))
(setf (source-file 'BALANCE-LEFT) '("avl.lisp" "avl.lisp"))
(setf (source-file 'INSERT) '("topology.lisp" "topology.lisp" "sets.lisp"
                              "sets.lisp" "mesh.lisp" "mesh.lisp" "mesh.lisp"
                              "mesh.lisp" "mesh.lisp" "avl.lisp" "avl.lisp"))
(setf (source-file 'AVL-INSERT) '("avl.lisp"))
(setf (source-file 'DELETE-HEAD) '("avl.lisp" "avl.lisp" "avl.lisp"))
(setf (source-file 'DELETE-TAIL) '("avl.lisp" "avl.lisp" "avl.lisp"))
(setf (source-file 'ERASE-NODE) '("avl.lisp" "avl.lisp"))
(setf (source-file 'DELETE) '("sets.lisp" "sets.lisp" "avl.lisp"))
(setf (source-file 'DELETE-LEFT) '("avl.lisp"))
(setf (source-file 'DELETE-RIGHT) '("avl.lisp"))
(setf (source-file 'AVL-DELETE) '("avl.lisp"))
(setf (source-file 'MEMBER) '("topology.lisp" "sets.lisp" "sets.lisp"
                              "avl.lisp"))
(setf (source-file 'SEARCH-NODE) '("avl.lisp"))
(setf (source-file 'MAKE-ELEMENT) '("vector-spaces/vector.lisp"
                                    "vector-spaces/vector.lisp"
                                    "vector-spaces/quaternions.lisp"
                                    "vector-spaces/quaternions.lisp"
                                    "vector-spaces/quaternions.lisp"
                                    "vector-spaces/quaternions.lisp"
                                    "vector-spaces/projective-space.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/numbers.lisp" "numbers/gfp.lisp"
                                    "numbers/gfp.lisp" "numbers/gfp.lisp"
                                    "classes/algebraic-domains.lisp"
                                    "topology.lisp" "sets.lisp" "sets.lisp"
                                    "matrix.lisp" "matrix.lisp" "matrix.lisp"
                                    "matrix.lisp" "general.lisp" "general.lisp"
                                    "general.lisp" "general.lisp" "avl.lisp"
                                    "avl.lisp"))
(setf (source-file 'RING-VARIABLES) '("rational-functions.lisp"
                                      "differential-domains.lisp"))
(setf (source-file 'VARIABLE-DERIVATION) '("differential-domains.lisp"
                                           "differential-domains.lisp"))
(setf (source-file 'SET-VARIABLE-DERIVATION) '("differential-domains.lisp"
                                               "differential-domains.lisp"
                                               "differential-domains.lisp"
                                               "differential-domains.lisp"))
(setf (source-file 'DIFFERENTIAL-RING-PRINT-OBJECT) '("differential-domains.lisp"))
(setf (source-file 'COERCE) '("vector-spaces/quaternions.lisp"
                              "polynomials/upolynomial.lisp"
                              "polynomials/mpolynomial.lisp"
                              "polynomials/mpolynomial.lisp"
                              "polynomials/mpolynomial.lisp"
                              "polynomials/mpolynomial.lisp"
                              "polynomials/mpolynomial.lisp"
                              "polynomials/epolynomial.lisp"
                              "numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/gfp.lisp" "numbers/gfp.lisp"
                              "numbers/gfp.lisp" "numbers/gfp.lisp"
                              "numbers/gfp.lisp" "numbers/gfp.lisp"
                              "numbers/gfp.lisp" "numbers/gfp.lisp"
                              "tpower.lisp" "tpower.lisp" "tpower.lisp"
                              "tpower.lisp" "tpower.lisp" "tpower.lisp"
                              "topology.lisp" "topology.lisp" "topology.lisp"
                              "topology.lisp" "topology.lisp" "topology.lisp"
                              "rational-functions.lisp" "quotient-fields.lisp"
                              "quotient-fields.lisp" "quotient-fields.lisp"
                              "morphisms.lisp" "morphisms.lisp"
                              "morphisms.lisp" "matrix.lisp" "general.lisp"
                              "general.lisp" "general.lisp" "general.lisp"
                              "general.lisp" "general.lisp" "general.lisp"
                              "general.lisp" "general.lisp"
                              "domain-support.lisp" "differential-domains.lisp"))
(setf (source-file 'VARIABLE-DERIVATIVE-ORDER) '("differential-domains.lisp"))
(setf (source-file 'ADD-NEW-VARIABLE) '("polynomials/poly-tools.lisp"
                                        "polynomials/poly-tools.lisp"
                                        "differential-domains.lisp"))
(setf (source-file 'STANDARD-DERIVATION) '("differential-domains.lisp"))
(setf (source-file 'POLY-DERIVATION) '("differential-domains.lisp"))
(setf (source-file 'POLY-DIFFERENTIATE-COEFS) '("differential-domains.lisp"))
(setf (source-file 'DERIVATION) '("vector-spaces/vector.lisp"
                                  "polynomials/upolynomial.lisp"
                                  "differential-domains.lisp"
                                  "differential-domains.lisp"))
(setf (source-file 'DIMENSION-OF) '("vector-spaces/vector.lisp" "topology.lisp"
                                    "topology.lisp" "topology.lisp" "mesh.lisp"
                                    "mesh.lisp" "direct-sums.lisp"))
(setf (source-file 'INITIALIZE-INSTANCE) '("polynomials/poly-tools.lisp"
                                           "polynomials/mpolynomial.lisp"
                                           "polynomials/grobner.lisp"
                                           "polynomials/grobner.lisp"
                                           "classes/space-classes.lisp"
                                           "classes/space-classes.lisp"
                                           "classes/space-classes.lisp"
                                           "classes/space-classes.lisp"
                                           "classes/space-classes.lisp"
                                           "classes/algebraic-domains.lisp"
                                           "classes/algebraic-domains.lisp"
                                           "classes/algebraic-domains.lisp"
                                           "classes/algebraic-domains.lisp"
                                           "classes/algebraic-domains.lisp"
                                           "classes/algebraic-domains.lisp"
                                           "tpower.lisp" "sets.lisp"
                                           "sets.lisp"
                                           "rational-functions.lisp"
                                           "mesh.lisp" "general.lisp"
                                           "domain-support.lisp"
                                           "direct-sums.lisp"))
(setf (source-file 'DIRECT-SUM-PRINT-OBJECT) '("direct-sums.lisp"))
(setf (source-file '%MAKE-DIRECT-SUM) '("direct-sums.lisp"))
(setf (source-file 'DEFINE-DIRECT-SUM) '("direct-sums.lisp"))
(setf (source-file 'MAKE-DIRECT-SUM*) '("direct-sums.lisp"))
(setf (source-file 'ITERATE) '("lisp-support.lisp" "direct-sums.lisp"))
(setf (source-file 'MAKE-DIRECT-SUM) '("direct-sums.lisp"))
(setf (source-file '%MAKE-DIRECT-SUM-INTERNAL) '("direct-sums.lisp"))
(setf (source-file 'DOMAIN-LIST) '("direct-sums.lisp"))
(setf (source-file 'GET-DIRECT-SUM) '("direct-sums.lisp"))
(setf (source-file 'ONE) '("polynomials/poly-tools.lisp" "numbers/numbers.lisp"
                           "classes/algebraic-domains.lisp"
                           "classes/algebraic-domains.lisp"
                           "quotient-fields.lisp" "matrix.lisp"
                           "direct-sums.lisp"))
(setf (source-file '0?) '("vector-spaces/vector.lisp"
                          "polynomials/upolynomial.lisp"
                          "polynomials/mpolynomial.lisp"
                          "polynomials/epolynomial.lisp" "numbers/numbers.lisp"
                          "numbers/numbers.lisp" "numbers/numbers.lisp"
                          "numbers/numbers.lisp" "numbers/numbers.lisp"
                          "numbers/numbers.lisp" "numbers/numbers.lisp"
                          "numbers/gfp.lisp" "numbers/gfp.lisp"
                          "classes/algebraic-domains.lisp"
                          "rational-functions.lisp" "quotient-fields.lisp"
                          "functions.lisp" "direct-sums.lisp"))
(setf (source-file 'RECIP) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                             "numbers/numbers.lisp" "numbers/numbers.lisp"
                             "numbers/gfp.lisp" "numbers/gfp.lisp"
                             "numbers/gfp.lisp"
                             "classes/algebraic-domains.lisp"
                             "rational-functions.lisp" "quotient-fields.lisp"
                             "matrix.lisp" "matrix.lisp" "general.lisp"
                             "general.lisp" "general.lisp" "functions.lisp"
                             "functions.lisp" "direct-sums.lisp"))
(setf (source-file 'ZERO) '("vector-spaces/vector.lisp"
                            "polynomials/poly-tools.lisp"
                            "numbers/numbers.lisp"
                            "classes/algebraic-domains.lisp"
                            "classes/algebraic-domains.lisp" "topology.lisp"
                            "quotient-fields.lisp" "direct-sums.lisp"))
(setf (source-file '1?) '("polynomials/upolynomial.lisp"
                          "polynomials/mpolynomial.lisp"
                          "polynomials/epolynomial.lisp" "numbers/numbers.lisp"
                          "numbers/numbers.lisp" "numbers/numbers.lisp"
                          "numbers/numbers.lisp" "numbers/numbers.lisp"
                          "numbers/numbers.lisp" "numbers/numbers.lisp"
                          "numbers/gfp.lisp" "numbers/gfp.lisp"
                          "classes/algebraic-domains.lisp"
                          "rational-functions.lisp" "quotient-fields.lisp"
                          "functions.lisp" "direct-sums.lisp"))
(setf (source-file 'MINUS) '("vector-spaces/vector.lisp"
                             "polynomials/upolynomial.lisp"
                             "polynomials/mpolynomial.lisp"
                             "polynomials/epolynomial.lisp"
                             "numbers/numbers.lisp" "numbers/numbers.lisp"
                             "numbers/numbers.lisp" "numbers/numbers.lisp"
                             "numbers/numbers.lisp" "numbers/numbers.lisp"
                             "numbers/gfp.lisp" "numbers/gfp.lisp"
                             "classes/algebraic-domains.lisp" "tpower.lisp"
                             "topology.lisp" "rational-functions.lisp"
                             "quotient-fields.lisp" "general.lisp"
                             "general.lisp" "general.lisp" "funct-spaces.lisp"
                             "functions.lisp" "functions.lisp"
                             "direct-sums.lisp"))
(setf (source-file 'HAS-PROPERTY-LIST) '("domain-support.lisp"))
(setf (source-file 'GETF) '("domain-support.lisp"))
(setf (source-file 'PUTF) '("domain-support.lisp"))
(setf (source-file 'DOMAIN-PRINT-OBJECT) '("domain-support.lisp"))
(setf (source-file 'DOMAIN) '("new-domains.lisp" "domain-support.lisp"))
(setf (source-file 'DEFINE-OPERATIONS) '("domain-support.lisp"))
(setf (source-file 'PARSE-OPERATION-LIST) '("domain-support.lisp"
                                            "domain-support.lisp"))
(setf (source-file 'PARSE-OPERATIONS) '("domain-support.lisp"))
(setf (source-file 'LIST-OPERATIONS) '("domain-support.lisp"
                                       "domain-support.lisp"))
(setf (source-file 'OPERATION-ARGUMENTS) '("domain-support.lisp"
                                           "domain-support.lisp"))
(setf (source-file 'OPERATION-VALUES) '("domain-support.lisp"
                                        "domain-support.lisp"))
(setf (source-file 'DESCRIBE-OPERATIONS) '("domain-support.lisp"
                                           "domain-support.lisp"))
(setf (source-file 'CANONICALIZE-CLASS) '("domain-support.lisp"
                                          "domain-support.lisp"))
(setf (source-file 'REQUIRED-OPERATIONS) '("domain-support.lisp"
                                           "domain-support.lisp"))
(setf (source-file 'MAP-OVER-ARGLIST-COMBINATIONS) '("domain-support.lisp"))
(setf (source-file 'RECUR) '("domain-support.lisp"))
(setf (source-file 'CHECK-DOMAIN) '("general.lisp" "domain-support.lisp"))
(setf (source-file 'RESET-DOMAINS) '("domain-support.lisp"))
(setf (source-file 'ADD-DOMAIN) '("domain-support.lisp"))
(setf (source-file 'ADD-DOMAIN-INTERNAL) '("domain-support.lisp"))
(setf (source-file 'FALSE) '("domain-support.lisp"))
(setf (source-file 'TRUE) '("domain-support.lisp"))
(setf (source-file 'DEFINE-DOMAIN-CREATOR) '("new-domains.lisp"
                                             "domain-support.lisp"))
(setf (source-file 'PARSE-ARGS) '("domain-support.lisp"))
(setf (source-file 'WITH-NEW-WEYL-CONTEXT) '("domain-support.lisp"))
(setf (source-file 'DOMAIN-ELEMENT) '("domain-support.lisp"))
(setf (source-file 'DEFINE-DOMAIN-ELEMENT-CLASSES) '("domain-support.lisp"))
(setf (source-file 'DOMAIN-ELEMENT-CLASSES) '("domain-support.lisp"))
(setf (source-file 'COERCIBLE?) '("morphisms.lisp" "domain-support.lisp"))
(setf (source-file 'DEFMETHOD-SD) '("domain-support.lisp"))
(setf (source-file '%BIND-DYNAMIC-DOMAIN-CONTEXT) '("classes/algebraic-domains.lisp"
                                                    "domain-support.lisp"))
(setf (source-file 'BIND-DOMAIN-CONTEXT) '("domain-support.lisp"))
(setf (source-file 'MAKE-GE-FOURIER) '("fourier.lisp" "fourier.lisp"))
(setf (source-file 'GE-EQUAL) '("general.lisp" "general.lisp" "general.lisp"
                                "general.lisp" "general.lisp" "general.lisp"
                                "general.lisp" "general.lisp" "general.lisp"
                                "general.lisp" "general.lisp" "general.lisp"
                                "general.lisp" "general.lisp" "general.lisp"
                                "general.lisp" "fourier.lisp"))
(setf (source-file 'GE-GREAT) '("general.lisp" "general.lisp" "general.lisp"
                                "general.lisp" "general.lisp" "general.lisp"
                                "general.lisp" "general.lisp" "general.lisp"
                                "general.lisp" "general.lisp" "general.lisp"
                                "general.lisp" "general.lisp" "general.lisp"
                                "general.lisp" "general.lisp" "fourier.lisp"))
(setf (source-file 'GE-FOURIER) '("classes/general-classes.lisp" "fourier.lisp"
                                  "fourier.lisp" "fourier.lisp" "fourier.lisp"
                                  "fourier.lisp" "fourier.lisp" "fourier.lisp"))
(setf (source-file 'FOURIER) '("fourier.lisp" "fourier.lisp" "fourier.lisp"
                               "fourier.lisp" "fourier.lisp"))
(setf (source-file 'MAKE-GE-IFOURIER) '("fourier.lisp" "fourier.lisp"))
(setf (source-file 'MAKE-APP-FUNCTION) '("functions.lisp"))
(setf (source-file 'APPLY) '("topology.lisp" "general.lisp" "functions.lisp"))
(setf (source-file 'CANONICALIZE-FUNCTIONS) '("functions.lisp"))
(setf (source-file 'DEFINE-APPLICABLE-FUNCTION-BINARY) '("functions.lisp"))
(setf (source-file 'DERIV) '("vector-spaces/vector.lisp"
                             "polynomials/mpolynomial.lisp" "topology.lisp"
                             "taylor.lisp" "rational-functions.lisp"
                             "general.lisp" "general.lisp" "general.lisp"
                             "general.lisp" "general.lisp" "general.lisp"
                             "funct-spaces.lisp" "functions.lisp"))
(setf (source-file 'DEF-GE-1OPER) '("functions.lisp"))
(setf (source-file 'DEFSIMPLIFY-FUNCT) '("functions.lisp"))
(setf (source-file 'DEFDERIV-FUNCT) '("functions.lisp"))
(setf (source-file 'NORM) '("funct-spaces.lisp"))
(setf (source-file 'CHECK-CACHED-VECTOR) '("funct-spaces.lisp"))
(setf (source-file 'EQUAL-VECTOR) '("funct-spaces.lisp"))
(setf (source-file 'SAMPLED-FUNCTION) '("funct-spaces.lisp"))
(setf (source-file 'MAKE-SAMPLED-FUNCTION) '("funct-spaces.lisp"
                                             "funct-spaces.lisp"))
(setf (source-file 'PRINT-TABLE) '("funct-spaces.lisp"))
(setf (source-file 'MAKE-SAMPLED-FUNCTION-1) '("funct-spaces.lisp"
                                               "funct-spaces.lisp"
                                               "funct-spaces.lisp"))
(setf (source-file 'RESAMPLE) '("funct-spaces.lisp"))
(setf (source-file 'SMOOTH2) '("funct-spaces.lisp" "funct-spaces.lisp"))
(setf (source-file 'EVALUATE-AT) '("funct-spaces.lisp"))
(setf (source-file 'POLYNOMIAL-INTERPOLATE) '("funct-spaces.lisp"))
(setf (source-file 'MAP) '("sets.lisp" "funct-spaces.lisp"))
(setf (source-file 'TIMES) '("vector-spaces/vector.lisp"
                             "vector-spaces/vector.lisp"
                             "polynomials/grobner.lisp" "numbers/numbers.lisp"
                             "numbers/gfp.lisp" "numbers/gfp.lisp"
                             "classes/algebraic-domains.lisp" "topology.lisp"
                             "topology.lisp" "topology.lisp" "topology.lisp"
                             "taylor.lisp" "taylor.lisp" "matrix.lisp"
                             "matrix.lisp" "matrix.lisp" "matrix.lisp"
                             "funct-spaces.lisp" "funct-spaces.lisp"
                             "funct-spaces.lisp" "funct-spaces.lisp"))
(setf (source-file 'QUOTIENT) '("vector-spaces/vector.lisp"
                                "numbers/numbers.lisp" "numbers/gfp.lisp"
                                "tpower.lisp" "taylor.lisp" "taylor.lisp"
                                "funct-spaces.lisp" "funct-spaces.lisp"))
(setf (source-file 'CONJUGATE) '("vector-spaces/vector.lisp"
                                 "vector-spaces/quaternions.lisp"
                                 "numbers/numbers.lisp" "numbers/numbers.lisp"
                                 "numbers/numbers.lisp" "numbers/numbers.lisp"
                                 "numbers/numbers.lisp" "numbers/numbers.lisp"
                                 "numbers/numbers.lisp" "funct-spaces.lisp"))
(setf (source-file 'REALPART) '("vector-spaces/vector.lisp"
                                "numbers/numbers.lisp" "numbers/numbers.lisp"
                                "funct-spaces.lisp"))
(setf (source-file 'IMAGPART) '("vector-spaces/vector.lisp"
                                "numbers/numbers.lisp" "numbers/numbers.lisp"
                                "funct-spaces.lisp"))
(setf (source-file 'DERIV-2POINT) '("funct-spaces.lisp"))
(setf (source-file 'TRAPEZOIDAL) '("funct-spaces.lisp"))
(setf (source-file 'INTEGRAL) '("funct-spaces.lisp" "funct-spaces.lisp"))
(setf (source-file 'SIMPSON) '("funct-spaces.lisp"))
(setf (source-file 'INDEF-INTEGRAL) '("funct-spaces.lisp"))
(setf (source-file 'SET-MEMOIZATION) '("general.lisp" "general.lisp"
                                       "general.lisp"))
(setf (source-file 'GET-MEMOIZATION) '("general.lisp" "general.lisp"
                                       "general.lisp"))
(setf (source-file '%MEMOIZE) '("general.lisp"))
(setf (source-file 'MEMOIZE) '("general.lisp"))
(setf (source-file 'DISPLAY) '("general.lisp"))
(setf (source-file 'SIMPLIFY) '("general.lisp" "general.lisp" "general.lisp"
                                "general.lisp" "general.lisp" "general.lisp"
                                "general.lisp" "general.lisp" "general.lisp"
                                "general.lisp" "general.lisp"))
(setf (source-file 'MAKE-QUOTIENT-ELEMENT) '("numbers/numbers.lisp"
                                             "numbers/numbers.lisp"
                                             "numbers/gfp.lisp"
                                             "rational-functions.lisp"
                                             "quotient-fields.lisp"
                                             "quotient-fields.lisp"
                                             "general.lisp"))
(setf (source-file 'REPARSE-PRINT-STRING) '("general.lisp" "general.lisp"))
(setf (source-file 'MAKE-GE-VARIABLE) '("general.lisp" "general.lisp"))
(setf (source-file 'ADD-SUBSCRIPTS) '("general.lisp" "general.lisp"
                                      "general.lisp"))
(setf (source-file 'SEARCH-FOR-FUNCTION) '("general.lisp"))
(setf (source-file 'GET-FUNCTION) '("general.lisp" "general.lisp"
                                    "general.lisp"))
(setf (source-file 'MAKE-FUNCTION) '("general.lisp" "general.lisp"
                                     "general.lisp"))
(setf (source-file 'DERIVS-OF) '("general.lisp"))
(setf (source-file 'ADD-FUNCTION-TO-DOMAIN) '("general.lisp"))
(setf (source-file 'MINUS?) '("polynomials/upolynomial.lisp"
                              "polynomials/mpolynomial.lisp"
                              "numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/gfp.lisp" "numbers/gfp.lisp"
                              "quotient-fields.lisp" "quotient-fields.lisp"
                              "general.lisp"))
(setf (source-file 'MINUSP) '("general.lisp"))
(setf (source-file 'PLUSP) '("general.lisp"))
(setf (source-file 'ZEROP) '("general.lisp"))
(setf (source-file 'MAKE-FUNCTION-DERIV) '("general.lisp" "general.lisp"
                                           "general.lisp"))
(setf (source-file 'MAKE-FUNCTION-INTEGRATE) '("general.lisp" "general.lisp"))
(setf (source-file 'MAKE-GE-FUNCT) '("general.lisp" "general.lisp"))
(setf (source-file 'FUNCT) '("general.lisp"))
(setf (source-file 'DISPLAY-LIST) '("general.lisp" "general.lisp"))
(setf (source-file 'INITIALIZE-CONTEXTS) '("general.lisp"))
(setf (source-file 'WITH-NEW-CONTEXT) '("general.lisp"))
(setf (source-file 'CHECK-POINT-CONTEXT) '("general.lisp"))
(setf (source-file 'MAKE-GE-PLUS) '("general.lisp" "general.lisp"))
(setf (source-file 'MAKE-GE-TIMES) '("general.lisp" "general.lisp"))
(setf (source-file 'MAKE-GE-EXPT) '("general.lisp" "general.lisp"))
(setf (source-file 'COERCE-OBJ) '("general.lisp"))
(setf (source-file 'PARENTHESIZED-DISPLAY) '("general.lisp"))
(setf (source-file 'SAFE-DISPLAY) '("general.lisp"))
(setf (source-file 'GE-LEQUAL) '("general.lisp"))
(setf (source-file 'GE-LGREAT) '("general.lisp"))
(setf (source-file 'REAL?) '("general.lisp"))
(setf (source-file 'GE-MINUS?) '("general.lisp"))
(setf (source-file 'MERGE-TERMS-IN-SUM) '("general.lisp"))
(setf (source-file 'SIMP-PLUS-TERMS) '("general.lisp"))
(setf (source-file 'LOOP-OVER-TERMS) '("general.lisp" "general.lisp"))
(setf (source-file 'SIMP-TIMES-TERMS) '("general.lisp"))
(setf (source-file 'GET-VARIABLE-PROPERTY) '("polynomials/poly-tools.lisp"
                                             "general.lisp" "general.lisp"
                                             "general.lisp"))
(setf (source-file 'SET-VARIABLE-PROPERTY) '("polynomials/poly-tools.lisp"
                                             "general.lisp" "general.lisp"
                                             "general.lisp"))
(setf (source-file 'DECLARE-DEPENDENCIES) '("general.lisp" "general.lisp"))
(setf (source-file 'DEPENDS-ON?) '("general.lisp" "general.lisp" "general.lisp"
                                   "general.lisp" "general.lisp" "general.lisp"
                                   "general.lisp" "general.lisp" "general.lisp"
                                   "general.lisp"))
(setf (source-file 'GE-DERIV) '("general.lisp" "general.lisp"))
(setf (source-file 'MAKE-GE-EQN=) '("general.lisp" "general.lisp"))
(setf (source-file 'EQN=) '("general.lisp" "general.lisp"))
(setf (source-file 'MAKE-GE-EQN>) '("general.lisp" "general.lisp"))
(setf (source-file 'EQN>) '("general.lisp" "general.lisp"))
(setf (source-file 'MAKE-GE-EQN>=) '("general.lisp" "general.lisp"))
(setf (source-file 'EQN>=) '("general.lisp" "general.lisp"))
(setf (source-file 'DEFINE-GE2-STANDARD-METHODS) '("general.lisp"))
(setf (source-file 'MAKE-UNION) '("general.lisp" "general.lisp" "general.lisp"))
(setf (source-file 'MAKE-UNIVERSAL-QUANTIFIED-SET) '("general.lisp"))
(setf (source-file 'UQ-SET-PRINT-OBJECT) '("general.lisp"))
(setf (source-file 'MERGE-BOUND-VARS) '("general.lisp"))
(setf (source-file 'MERGE-NEW-BV) '("general.lisp"))
(setf (source-file 'DIFFERENT-KERNELS) '("general.lisp" "general.lisp"
                                         "general.lisp" "general.lisp"
                                         "general.lisp" "general.lisp"
                                         "general.lisp"))
(setf (source-file 'SUBSTITUTE) '("vector-spaces/vector.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/mpolynomial.lisp" "taylor.lisp"
                                  "taylor.lisp" "rational-functions.lisp"
                                  "rational-functions.lisp" "matrix.lisp"
                                  "matrix.lisp" "general.lisp" "general.lisp"
                                  "general.lisp" "general.lisp" "general.lisp"
                                  "general.lisp" "general.lisp" "general.lisp"
                                  "general.lisp" "general.lisp" "general.lisp"
                                  "general.lisp"))
(setf (source-file 'EXPAND) '("general.lisp" "general.lisp" "general.lisp"
                              "general.lisp"))
(setf (source-file 'EXPAND-PRODUCT1) '("general.lisp"))
(setf (source-file 'EXPAND-PLUS) '("general.lisp"))
(setf (source-file 'EXPAND-OTHER) '("general.lisp"))
(setf (source-file 'EXPAND-PRODUCT) '("general.lisp"))
(setf (source-file 'EXPAND-BINOMIAL-FORM) '("general.lisp"))
(setf (source-file 'NUMERATOR) '("numbers/numbers.lisp" "numbers/gfp.lisp"
                                 "rational-functions.lisp"
                                 "quotient-fields.lisp" "lisp-numbers.lisp"))
(setf (source-file 'DENOMINATOR) '("numbers/numbers.lisp" "numbers/gfp.lisp"
                                   "rational-functions.lisp"
                                   "quotient-fields.lisp" "lisp-numbers.lisp"))
(setf (source-file 'FACTORIAL) '("lisp-numbers.lisp" "lisp-numbers.lisp"))
(setf (source-file 'FACT) '("lisp-numbers.lisp"))
(setf (source-file 'POCHHAMMER) '("lisp-numbers.lisp" "lisp-numbers.lisp"))
(setf (source-file 'COMBINATIONS) '("lisp-numbers.lisp"))
(setf (source-file 'FASTER-ISQRT) '("lisp-numbers.lisp"))
(setf (source-file 'INTEGER-NTH-ROOT) '("lisp-numbers.lisp"))
(setf (source-file 'REDUCE-MODULO-INTEGER) '("lisp-numbers.lisp"))
(setf (source-file 'EXPT-MODULO-INTEGER) '("lisp-numbers.lisp"))
(setf (source-file 'PRIME?) '("lisp-numbers.lisp" "lisp-numbers.lisp"))
(setf (source-file 'FIND-SMALLER-PRIME) '("lisp-numbers.lisp"))
(setf (source-file 'NEWPRIME) '("lisp-numbers.lisp"))
(setf (source-file 'CHOICE-PRIMES) '("lisp-numbers.lisp"))
(setf (source-file 'SYM-MOD) '("lisp-numbers.lisp"))
(setf (source-file 'REPEATED-SQUARING) '("lisp-numbers.lisp"))
(setf (source-file 'POWER-OF?) '("lisp-numbers.lisp" "lisp-numbers.lisp"))
(setf (source-file 'COUNT-MULTIPLE-INTEGER-FACTORS) '("lisp-numbers.lisp"))
(setf (source-file 'UNIFORMIZE-FACTOR-LIST) '("lisp-numbers.lisp"))
(setf (source-file 'FACTOR) '("polynomials/upolynomial.lisp"
                              "lisp-numbers.lisp" "lisp-numbers.lisp"))
(setf (source-file 'ALL-DIVISORS) '("lisp-numbers.lisp"))
(setf (source-file 'SIMPLE-INTEGER-FACTOR) '("lisp-numbers.lisp"))
(setf (source-file 'SIMPLE-INTEGER-FACTOR-INTERNAL) '("lisp-numbers.lisp"))
(setf (source-file 'FERMAT-INTEGER-FACTOR) '("lisp-numbers.lisp"))
(setf (source-file 'TOTIENT) '("lisp-numbers.lisp"))
(setf (source-file 'SIN) '("numbers/numbers.lisp" "numbers/bigfloat.lisp"
                           "lisp-numbers.lisp"))
(setf (source-file 'COS) '("numbers/numbers.lisp" "numbers/bigfloat.lisp"
                           "lisp-numbers.lisp"))
(setf (source-file 'TAN) '("numbers/numbers.lisp" "numbers/bigfloat.lisp"
                           "lisp-numbers.lisp"))
(setf (source-file 'ASIN) '("numbers/numbers.lisp" "numbers/bigfloat.lisp"
                            "lisp-numbers.lisp"))
(setf (source-file 'ACOS) '("numbers/numbers.lisp" "numbers/bigfloat.lisp"
                            "lisp-numbers.lisp"))
(setf (source-file 'ATAN) '("numbers/bigfloat.lisp" "lisp-numbers.lisp"
                            "lisp-numbers.lisp"))
(setf (source-file 'SINH) '("numbers/numbers.lisp" "lisp-numbers.lisp"))
(setf (source-file 'COSH) '("numbers/numbers.lisp" "lisp-numbers.lisp"))
(setf (source-file 'TANH) '("numbers/numbers.lisp" "lisp-numbers.lisp"))
(setf (source-file 'ASINH) '("numbers/numbers.lisp" "lisp-numbers.lisp"))
(setf (source-file 'ACOSH) '("numbers/numbers.lisp" "lisp-numbers.lisp"))
(setf (source-file 'ATANH) '("numbers/numbers.lisp" "lisp-numbers.lisp"))
(setf (source-file 'EXP) '("numbers/numbers.lisp" "numbers/bigfloat.lisp"
                           "lisp-numbers.lisp"))
(setf (source-file 'LOG2) '("lisp-numbers.lisp"))
(setf (source-file 'LOG) '("numbers/numbers.lisp" "numbers/bigfloat.lisp"
                           "lisp-numbers.lisp"))
(setf (source-file 'SIGNUM) '("lisp-numbers.lisp"))
(setf (source-file 'WEYLI::SUBCLASS-OF?) '("lisp-support.lisp"))
(setf (source-file 'SEARCH-LIST) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::%APPLY) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::ACCUM-APPLY-ARGS) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::APPLY) '("lisp-support.lisp" "lisp-support.lisp"))
(setf (source-file 'WEYLI::%FUNCALL) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::FUNCALL) '("lisp-support.lisp" "lisp-support.lisp"))
(setf (source-file 'WEYLI::%GETF) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::GETF) '("lisp-support.lisp" "lisp-support.lisp"
                                   "lisp-support.lisp"))
(setf (source-file 'WEYLI::PUTF) '("lisp-support.lisp" "lisp-support.lisp"
                                   "lisp-support.lisp"))
(setf (source-file 'WEYLI:DELETE) '("lisp-support.lisp" "lisp-support.lisp"))
(setf (source-file 'WEYLI:MEMBER) '("lisp-support.lisp" "lisp-support.lisp"))
(setf (source-file 'WEYLI:REPLACE) '("lisp-support.lisp" "lisp-support.lisp"))
(setf (source-file 'WEYLI:SUBSTITUTE) '("lisp-support.lisp" "lisp-support.lisp"))
(setf (source-file 'WEYLI:MAP) '("lisp-support.lisp" "lisp-support.lisp"))
(setf (source-file 'WEYLI::REDUCE) '("lisp-support.lisp" "lisp-support.lisp"))
(setf (source-file 'WEYLI::UNION) '("lisp-support.lisp" "lisp-support.lisp"))
(setf (source-file 'WEYLI::INTERSECTION) '("lisp-support.lisp"
                                           "lisp-support.lisp"))
(setf (source-file 'WEYLI::DEFSUBST) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::%COPY-ARRAY-CONTENTS*) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::COPY-ARRAY-CONTENTS) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::CIRCULAR-LIST) '("lisp-support.lisp"))
(setf (source-file 'STRUCTURE-OF) '("lisp-support.lisp"))
(setf (source-file 'ASSOCIATE-PREDICATE) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:<) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:=) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:>) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:<=) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:>=) '("lisp-support.lisp"))
(setf (source-file 'ASSOCIATE-OPERATION) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:MAX) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:%MAX) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:MIN) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:%MIN) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:+) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:%PLUS) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:-) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:%DIFFERENCE) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:*) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:%TIMES) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:/) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:%QUOTIENT) '("lisp-support.lisp"))
(setf (source-file 'WEYLI:GCD) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::%GCD) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::LCM) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::%LCM) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::FLOOR) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::CEILING) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::ROUND) '("lisp-support.lisp"))
(setf (source-file 'WEYLI::TRUNCATE) '("lisp-support.lisp"))
(setf (source-file 'MATRIX-SPACE-PRINT-OBJECT) '("matrix.lisp"))
(setf (source-file 'WEYL:MAKE-ELEMENT) '("vector-spaces/vector.lisp"
                                         "vector-spaces/quaternions.lisp"
                                         "vector-spaces/quaternions.lisp"
                                         "vector-spaces/quaternions.lisp"
                                         "vector-spaces/quaternions.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/gfp.lisp" "numbers/gfp.lisp"
                                         "numbers/gfp.lisp" "matrix.lisp"
                                         "matrix.lisp" "matrix.lisp"
                                         "matrix.lisp"))
(setf (source-file 'MATRIX-DIMENSIONS) '("matrix.lisp" "matrix.lisp"
                                         "matrix.lisp"))
(setf (source-file 'DIMENSIONS) '("vector-spaces/vector.lisp"
                                  "classes/algebraic-domains.lisp"
                                  "classes/algebraic-domains.lisp"
                                  "matrix.lisp"))
(setf (source-file 'WITH-MATRIX-DIMENSIONS) '("matrix.lisp"))
(setf (source-file 'REF) '("vector-spaces/projective-space.lisp" "sets.lisp"
                           "sets.lisp" "matrix.lisp"))
(setf (source-file 'SET-REF) '("sets.lisp" "sets.lisp" "matrix.lisp"))
(setf (source-file 'ZERO-MATRIX) '("matrix.lisp"))
(setf (source-file 'ONE-MATRIX) '("matrix.lisp" "matrix.lisp" "matrix.lisp"))
(setf (source-file 'PLUS) '("polynomials/grobner.lisp" "numbers/numbers.lisp"
                            "numbers/gfp.lisp" "numbers/gfp.lisp"
                            "classes/algebraic-domains.lisp" "taylor.lisp"
                            "taylor.lisp" "multipole.lisp" "matrix.lisp"))
(setf (source-file 'DIFFERENCE) '("numbers/numbers.lisp" "numbers/gfp.lisp"
                                  "numbers/gfp.lisp"
                                  "classes/algebraic-domains.lisp"
                                  "taylor.lisp" "taylor.lisp" "matrix.lisp"))
(setf (source-file 'ARRAY-TIMES) '("matrix.lisp"))
(setf (source-file 'TIMES-ARRAY) '("matrix.lisp"))
(setf (source-file 'MATRIX-FME-TIMES) '("matrix.lisp"))
(setf (source-file 'FME-MATRIX-TIMES) '("matrix.lisp"))
(setf (source-file 'TRANSPOSE) '("matrix.lisp" "matrix.lisp"))
(setf (source-file 'INVERT-ARRAY) '("matrix.lisp" "matrix.lisp"))
(setf (source-file 'EXCHANGE-ROWS) '("matrix.lisp" "matrix.lisp" "matrix.lisp"))
(setf (source-file 'FIND-PIVOT-ORDERED) '("matrix.lisp"))
(setf (source-file 'FIND-PIVOT-UNORDERED) '("matrix.lisp"))
(setf (source-file 'SUBTRACT-ROWS) '("matrix.lisp"))
(setf (source-file 'JACOBIAN) '("matrix.lisp"))
(setf (source-file 'GL-N-PRINT-OBJECT) '("matrix.lisp"))
(setf (source-file 'PSL-N-PRINT-OBJECT) '("matrix.lisp"))
(setf (source-file 'SL-N-PRINT-OBJECT) '("matrix.lisp"))
(setf (source-file 'DETERMINANT) '("matrix.lisp" "matrix.lisp" "matrix.lisp"))
(setf (source-file 'O-N-PRINT-OBJECT) '("matrix.lisp"))
(setf (source-file 'SO-N-PRINT-OBJECT) '("matrix.lisp"))
(setf (source-file 'WITH-OPEN-MODULAR-ARITH) '("matrix.lisp"))
(setf (source-file 'DETERMINANT*) '("matrix.lisp" "matrix.lisp" "matrix.lisp"
                                    "matrix.lisp" "matrix.lisp"))
(setf (source-file 'DEGREE-BOUNDS) '("matrix.lisp" "matrix.lisp"))
(setf (source-file 'EVALUATE-MATRIX) '("matrix.lisp"))
(setf (source-file 'HADAMARD-BOUND) '("matrix.lisp" "matrix.lisp"))
(setf (source-file 'FIND-PIVOT) '("matrix.lisp" "matrix.lisp" "matrix.lisp"
                                  "matrix.lisp"))
(setf (source-file 'SPARSE-DETERMINANT) '("matrix.lisp"))
(setf (source-file 'SPARSE-DET) '("matrix.lisp"))
(setf (source-file 'INDEPENDENT-ROWS) '("matrix.lisp" "matrix.lisp"))
(setf (source-file 'INDEPENDENT-COLS) '("matrix.lisp" "matrix.lisp"))
(setf (source-file 'SUBDETERMINANT) '("matrix.lisp" "matrix.lisp"))
(setf (source-file 'SUBDETERMINANT*) '("matrix.lisp" "matrix.lisp"
                                       "matrix.lisp"))
(setf (source-file 'HERMITE*) '("matrix.lisp" "matrix.lisp"))
(setf (source-file 'HERMITE) '("matrix.lisp"))
(setf (source-file 'HERMITE-ARRAY) '("matrix.lisp"))
(setf (source-file 'SMITH) '("matrix.lisp" "matrix.lisp"))
(setf (source-file 'SMITH*) '("matrix.lisp" "matrix.lisp"))
(setf (source-file 'SMITH-ARRAY) '("matrix.lisp"))
(setf (source-file 'PROCESSI) '("matrix.lisp"))
(setf (source-file 'HAS-HOME-SPACE) '("mesh.lisp"))
(setf (source-file 'CURVED-SIMPLEX) '("mesh.lisp"))
(setf (source-file 'HOME-OF) '("mesh.lisp"))
(setf (source-file 'TRIANGULATION) '("mesh.lisp"))
(setf (source-file 'C-TRIANGULATION) '("mesh.lisp"))
(setf (source-file 'CDT) '("mesh.lisp"))
(setf (source-file 'NAMED-SIMPLICIAL-COMPLEX) '("mesh.lisp"))
(setf (source-file 'MESH) '("mesh.lisp"))
(setf (source-file 'NAME) '("mesh.lisp" "mesh.lisp" "mesh.lisp" "mesh.lisp"))
(setf (source-file '%SET-NAME) '("mesh.lisp" "mesh.lisp" "mesh.lisp"
                                 "mesh.lisp"))
(setf (source-file 'DELETE-MAXIMAL-CELL) '("topology.lisp" "mesh.lisp"
                                           "mesh.lisp"))
(setf (source-file 'ALL-NAMES) '("mesh.lisp" "mesh.lisp" "mesh.lisp"))
(setf (source-file 'ROTATE-LIST) '("mesh.lisp"))
(setf (source-file 'MEMBER-ROTATE) '("mesh.lisp"))
(setf (source-file 'COMPLEXER) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'COORDINATE-LIST) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'SQR) '("mesh.lisp"))
(setf (source-file 'QUEUE) '("mesh.lisp"))
(setf (source-file 'MAKE-QUEUE) '("mesh.lisp"))
(setf (source-file 'CLEARQ) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'INSERTQ) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'GETQ) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'EMPTYQ?) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'COMPLEX-CIRCUMCENTER) '("mesh.lisp"))
(setf (source-file 'CIRCLE-CENTER) '("mesh.lisp"))
(setf (source-file 'MAKE-MEAN-POINT) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'ANGLE) '("mesh.lisp" "mesh.lisp" "mesh.lisp"))
(setf (source-file 'MAKE-PARAMETER-SPACE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'SPLIT) '("mesh.lisp" "mesh.lisp" "mesh.lisp" "mesh.lisp"
                             "mesh.lisp" "mesh.lisp"))
(setf (source-file 'SIMPLEX-SIZE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'BEND) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'DISTANCE) '("mesh.lisp" "mesh.lisp" "mesh.lisp" "mesh.lisp"))
(setf (source-file 'EDGES-CROSS?) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'BOUNDING-BOX) '("mesh.lisp" "mesh.lisp" "mesh.lisp"
                                    "mesh.lisp" "mesh.lisp"))
(setf (source-file 'MEASURE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'ARC) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'MAKE-CURVED-SEGMENT) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'COMMON-ENDPOINT) '("mesh.lisp"))
(setf (source-file 'POINT-VS-TRIANGLE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'CCW-SIDE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'TRIANGULATE-TRIPLES) '("mesh.lisp"))
(setf (source-file 'STAR-TRIANGULATE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'FLAT-TRIANGULATE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'CIRCUMCENTER) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'CIRCUMRADIUS) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'ANGLES) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'VERTICES-SORTED-BY-ANGLE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'NEIGHBORS) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'NEIGHBOR) '("mesh.lisp" "mesh.lisp" "mesh.lisp"))
(setf (source-file 'NEIGHBORHOOD) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'NEAR-BASE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'DIRECTED-LOCATE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'LOCATE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'TRIANGLES) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'ADJ-VERTICES) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'FLIP-OK?) '("mesh.lisp" "mesh.lisp" "mesh.lisp"))
(setf (source-file 'DELAUNAY?) '("mesh.lisp" "mesh.lisp" "mesh.lisp"))
(setf (source-file 'FLIP) '("mesh.lisp" "mesh.lisp" "mesh.lisp"))
(setf (source-file 'SPLIT-EDGE) '("mesh.lisp" "mesh.lisp" "mesh.lisp"
                                  "mesh.lisp"))
(setf (source-file 'FORCE-EDGE) '("mesh.lisp" "mesh.lisp" "mesh.lisp"))
(setf (source-file 'REMOVE-VERTEX) '("mesh.lisp" "mesh.lisp" "mesh.lisp"
                                     "mesh.lisp"))
(setf (source-file 'PLACE) '("mesh.lisp" "mesh.lisp" "mesh.lisp" "mesh.lisp"
                             "mesh.lisp"))
(setf (source-file 'CONSTRAINT) '("mesh.lisp" "mesh.lisp"))
(setf (source-file '%SPLIT-CONSTRAINT-ONE-SIDE) '("mesh.lisp" "mesh.lisp"
                                                  "mesh.lisp"))
(setf (source-file '%DELETE-TOO-CLOSE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'TRIANGLE-CENTER) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'TOO-BIG?) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'GRADE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'IMPROVE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'DO-BACKGROUND-BOX) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'BUILD-CDT-FROM-BOUNDARIES) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'REFINE-MESH-PREP) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'BOUNDARY-COMPLEX-OF) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'CREATE-MESH) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'INSERT-BOUNDARY) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'NAME-REGION) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'REFINE-MESH) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'MAKE-MESH) '("mesh.lisp"))
(setf (source-file '%MM-GET-POINT) '("mesh.lisp"))
(setf (source-file '%MM-BOUNDARY) '("mesh.lisp"))
(setf (source-file 'DEFUN-BOUNDARY) '("mesh.lisp"))
(setf (source-file 'DEFMESH) '("mesh.lisp"))
(setf (source-file 'MAKE-MESH-FROM-FILE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'READ-POINT) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'READ-VERTEX-SET) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'READ-SIMPLICIAL-COMPLEX) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'READ-BOUNDARY-SIMPLICIAL-COMPLEX) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'READ-REGION-POINTS) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'READ-SIZE-TABLE) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'FWRITE) '("mesh.lisp" "mesh.lisp" "mesh.lisp" "mesh.lisp"
                              "mesh.lisp"))
(setf (source-file 'WRITE-VERTEX-SET) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'WRITE-MESH) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'READ-MESH) '("mesh.lisp" "mesh.lisp"))
(setf (source-file 'COMPOSE) '("morphisms.lisp" "morphisms.lisp"))
(setf (source-file 'GET-MORPHISMS) '("morphisms.lisp"))
(setf (source-file 'GET-MORPHISMS-FROM) '("morphisms.lisp"))
(setf (source-file 'GET-MORPHISMS-TO) '("morphisms.lisp"))
(setf (source-file 'MAKE-MORPHISM) '("morphisms.lisp"))
(setf (source-file 'DELETE-MORPHISM) '("morphisms.lisp" "morphisms.lisp"))
(setf (source-file 'MAKE-HOMOMORPHISM) '("morphisms.lisp"))
(setf (source-file 'GET-HOMOMORPHISMS) '("morphisms.lisp"))
(setf (source-file 'GET-EMBEDDABLE-DOMAINS) '("morphisms.lisp"))
(setf (source-file 'MAKE-AUTOMORPHISM) '("morphisms.lisp"))
(setf (source-file 'GET-AUTOMORPHISMS) '("morphisms.lisp"))
(setf (source-file 'APPLY-MORPHISM) '("morphisms.lisp" "morphisms.lisp"
                                      "morphisms.lisp"))
(setf (source-file 'CANONICALIZE-NUMBER) '("morphisms.lisp" "morphisms.lisp"
                                           "morphisms.lisp" "morphisms.lisp"
                                           "morphisms.lisp" "morphisms.lisp"
                                           "morphisms.lisp" "morphisms.lisp"
                                           "morphisms.lisp" "morphisms.lisp"
                                           "morphisms.lisp" "morphisms.lisp"))
(setf (source-file 'REACHABLE-DOMAINS) '("morphisms.lisp"))
(setf (source-file 'NEXT-DOMAINS) '("morphisms.lisp" "morphisms.lisp"))
(setf (source-file 'FIND-COMMON-DOMAINS) '("morphisms.lisp"))
(setf (source-file 'DEF-BINARY-COERCION) '("morphisms.lisp"))
(setf (source-file 'MULTIPOLE-RING) '("multipole.lisp"))
(setf (source-file 'MULTIPOLE-EXPANSION) '("multipole.lisp"))
(setf (source-file 'MAKE-MULTIPOLE-EXPANSION) '("multipole.lisp"))
(setf (source-file 'SHIFT-MULTIPOLE) '("multipole.lisp"))
(setf (source-file 'LOCAL-FIELD) '("multipole.lisp"))
(setf (source-file 'SHIFT-LOCAL-FIELD) '("multipole.lisp"))
(setf (source-file 'LOCALIZE) '("multipole.lisp"))
(setf (source-file 'IN-BOUND?) '("multipole.lisp" "multipole.lisp"
                                 "multipole.lisp"))
(setf (source-file 'THE-KTHTERM) '("multipole.lisp"))
(setf (source-file 'KTHTERM) '("multipole.lisp"))
(setf (source-file 'SHIFT-M-FORM) '("multipole.lisp"))
(setf (source-file 'SHIFT-M-FORM*) '("multipole.lisp"))
(setf (source-file 'WHAT-IS-THE-LTHTERM) '("multipole.lisp"))
(setf (source-file 'DIST) '("multipole.lisp"))
(setf (source-file 'MPEF-PAIRWISE-M-SUM) '("multipole.lisp"))
(setf (source-file 'SHIFT-L-FORM) '("multipole.lisp"))
(setf (source-file 'SHIFT-L-FORM*) '("multipole.lisp"))
(setf (source-file 'WHAT-IS-THE-LTHTERM2) '("multipole.lisp"))
(setf (source-file 'LOCALIZE-FORM) '("multipole.lisp"))
(setf (source-file 'LOCALIZE-FORM*) '("multipole.lisp"))
(setf (source-file 'REST-OF-LOCAL) '("multipole.lisp"))
(setf (source-file 'LTH-LOCAL-TERM) '("multipole.lisp"))
(setf (source-file 'MATH-OPERATOR) '("new-domains.lisp" "new-domains.lisp"))
(setf (source-file 'DEFINE-MATH-OPERATOR-ACCESSORS) '("new-domains.lisp"))
(setf (source-file 'INTERNAL-NAME) '("new-domains.lisp"))
(setf (source-file 'EXTERNAL-NAME) '("new-domains.lisp"))
(setf (source-file 'DEFINE-MATH-OPERATOR) '("new-domains.lisp"))
(setf (source-file 'COMPARE-PTERM-LISTS) '("new-domains.lisp"))
(setf (source-file 'ASSERT-PROPERTY) '("new-domains.lisp"))
(setf (source-file 'TEST-PROPERTY) '("new-domains.lisp"))
(setf (source-file 'DELETE-PROPERTY) '("new-domains.lisp"))
(setf (source-file '%MAP-OVER-PROPERTIES) '("new-domains.lisp"))
(setf (source-file 'MAP-OVER-PROPERTIES) '("new-domains.lisp"))
(setf (source-file 'SHOW-PROPERTIES) '("new-domains.lisp"))
(setf (source-file 'DELETE-DOMAIN) '("new-domains.lisp"))
(setf (source-file 'DEFINE-PRIMITIVE-PROPERTY) '("new-domains.lisp"))
(setf (source-file 'MAKE-PREDICATE) '("new-domains.lisp"))
(setf (source-file 'ASSERT-FUNCTION-NAME) '("new-domains.lisp"))
(setf (source-file 'PREDICATE-FUNCTION-NAME) '("new-domains.lisp"))
(setf (source-file 'DEFINE-MATH-PROPERTY) '("classes/algebraic-domains.lisp"
                                            "new-domains.lisp"))
(setf (source-file 'USE-WEYLI-PACKAGE) '("packages.lisp"))
(setf (source-file 'USE-WEYL-PACKAGE) '("packages.lisp"))
(setf (source-file 'INTERN-IN-PACKAGE) '("packages.lisp"))
(setf (source-file '"WEYLI") '("packages.lisp"))
(setf (source-file '"WEYL") '("packages.lisp"))
(setf (source-file 'MAKE-QUOTIENT-FIELD) '("quotient-fields.lisp"))
(setf (source-file 'GET-QUOTIENT-FIELD) '("numbers/numbers.lisp"
                                          "quotient-fields.lisp"))
(setf (source-file 'QUOTIENT-FIELD-PRINT-OBJECT) '("quotient-fields.lisp"))
(setf (source-file 'HEIGHT) '("polynomials/mpolynomial.lisp"
                              "numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/gfp.lisp" "quotient-fields.lisp"
                              "quotient-fields.lisp"))
(setf (source-file 'QUOTIENT-REDUCE*) '("quotient-fields.lisp"))
(setf (source-file 'QUOTIENT-REDUCE) '("rational-functions.lisp"
                                       "quotient-fields.lisp"
                                       "quotient-fields.lisp"))
(setf (source-file 'EXPT-QUOTIENT) '("quotient-fields.lisp"))
(setf (source-file 'RATFUN-FIELD-PRINT-OBJECT) '("rational-functions.lisp"))
(setf (source-file 'MAKE-RATIONAL-FUNCTION*) '("rational-functions.lisp"
                                               "rational-functions.lisp"))
(setf (source-file 'RATFUN-REDUCE) '("rational-functions.lisp"))
(setf (source-file 'LIST-OF-VARIABLES) '("vector-spaces/vector.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "rational-functions.lisp"))
(setf (source-file 'RATIONAL-POLY-SUBST) '("rational-functions.lisp"))
(setf (source-file 'RATIONAL-TERMS-HORNERS-RULE) '("rational-functions.lisp"))
(setf (source-file 'PARTIAL-DERIV) '("polynomials/mpolynomial.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "rational-functions.lisp"
                                     "rational-functions.lisp"
                                     "rational-functions.lisp"
                                     "rational-functions.lisp"
                                     "rational-functions.lisp"))
(setf (source-file 'TUPLE) '("sets.lisp"))
(setf (source-file 'TUPLE-VALUE) '("sets.lisp"))
(setf (source-file '(VECT &REST INDICES)) '("sets.lisp"))
(setf (source-file 'LIST-OF-ELEMENTS) '("sets.lisp" "sets.lisp"))
(setf (source-file 'MAP-WITH-DOMAIN) '("sets.lisp" "sets.lisp"))
(setf (source-file 'BINARY=) '("polynomials/grobner.lisp"
                               "polynomials/epolynomial.lisp"
                               "numbers/numbers.lisp" "numbers/numbers.lisp"
                               "numbers/numbers.lisp" "numbers/numbers.lisp"
                               "classes/algebraic-domains.lisp" "topology.lisp"
                               "sets.lisp" "sets.lisp"))
(setf (source-file 'BINARY>) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                               "numbers/numbers.lisp"
                               "classes/algebraic-domains.lisp" "sets.lisp"
                               "sets.lisp"))
(setf (source-file 'SET-ELEMENTS) '("sets.lisp"))
(setf (source-file 'SET-WITH-ELEMENT-LIST-PRINT-OBJECT) '("sets.lisp"))
(setf (source-file 'NOT-AN-ELEMENT) '("sets.lisp" "sets.lisp"))
(setf (source-file 'MAP-OVER-ELEMENTS) '("sets.lisp" "sets.lisp"))
(setf (source-file 'SIZE) '("sets.lisp"))
(setf (source-file 'RANDOM) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/gfp.lisp" "sets.lisp" "sets.lisp"))
(setf (source-file 'DEFINE-TAYLOR-EXPANSION-FUN) '("taylor.lisp"))
(setf (source-file 'TAYLOR-EXP) '("taylor.lisp"))
(setf (source-file 'TAYLOR) '("taylor.lisp" "taylor.lisp"))
(setf (source-file 'TAYLOR1) '("taylor.lisp" "taylor.lisp" "taylor.lisp"
                               "taylor.lisp" "taylor.lisp" "taylor.lisp"
                               "taylor.lisp"))
(setf (source-file 'GET-DEFAULT-TAYLOR-EXPANSION) '("taylor.lisp"))
(setf (source-file 'TPS-DERIV1) '("taylor.lisp"))
(setf (source-file 'TPS-DERIV2) '("taylor.lisp"))
(setf (source-file 'REVERSION) '("taylor.lisp"))
(setf (source-file 'SOLVE-FOR-COEFFS) '("taylor.lisp" "taylor.lisp"))
(setf (source-file 'EUCLIDEAN-SPACE-PRINT-OBJECT) '("topology.lisp"))
(setf (source-file 'MAKE-POINT) '("topology.lisp" "topology.lisp"
                                  "topology.lisp" "topology.lisp"
                                  "topology.lisp"))
(setf (source-file 'MAKE-SIMPLEX) '("topology.lisp" "topology.lisp"))
(setf (source-file 'CELL-ID) '("topology.lisp" "topology.lisp" "topology.lisp"))
(setf (source-file 'FACETS) '("topology.lisp" "topology.lisp" "topology.lisp"
                              "topology.lisp" "topology.lisp"))
(setf (source-file 'OPPOSITE) '("topology.lisp" "topology.lisp" "topology.lisp"))
(setf (source-file 'FACE?) '("topology.lisp" "topology.lisp" "topology.lisp"))
(setf (source-file 'SEGMENT?) '("topology.lisp"))
(setf (source-file 'TRIANGLE?) '("topology.lisp"))
(setf (source-file 'TETRAHEDRON?) '("topology.lisp"))
(setf (source-file 'SIGN-OF-PERMUTATION) '("topology.lisp"))
(setf (source-file 'MAP-OVER-ORIENTED-FACETS) '("topology.lisp"))
(setf (source-file 'MAP-OVER-ORIENTED-COFACETS) '("topology.lisp"))
(setf (source-file 'GET-CELL) '("topology.lisp" "topology.lisp" "topology.lisp"))
(setf (source-file 'COFACETS) '("topology.lisp" "topology.lisp" "topology.lisp"))
(setf (source-file 'MAXIMAL-CELL?) '("topology.lisp" "topology.lisp"))
(setf (source-file '%INSERT) '("topology.lisp"))
(setf (source-file '%DELETE) '("topology.lisp"))
(setf (source-file '%MAP-OVER-CELLS) '("topology.lisp" "topology.lisp"))
(setf (source-file 'MAP-OVER-CELLS) '("topology.lisp"))
(setf (source-file 'MAP-OVER-MAXIMAL-CELLS) '("topology.lisp"))
(setf (source-file 'UNION) '("topology.lisp"))
(setf (source-file 'INTERSECTION) '("topology.lisp"))
(setf (source-file 'VERTEX-SET) '("topology.lisp"))
(setf (source-file 'MAKE-SIMPLICIAL-COMPLEX) '("topology.lisp"))
(setf (source-file 'MAX-DIMENSION-OF) '("topology.lisp" "topology.lisp"))
(setf (source-file '%SET-COERCE) '("topology.lisp" "topology.lisp"))
(setf (source-file 'CHAIN-MODULE-PRINT-OBJECT) '("topology.lisp"))
(setf (source-file 'COCHAIN-MODULE-PRINT-OBJECT) '("topology.lisp"))
(setf (source-file 'COMPLEX-OF) '("topology.lisp"))
(setf (source-file 'GET-CHAIN-MODULE) '("topology.lisp" "topology.lisp"))
(setf (source-file 'GET-COCHAIN-MODULE) '("topology.lisp" "topology.lisp"))
(setf (source-file 'BOUNDARY-DOMAIN) '("topology.lisp" "topology.lisp"
                                       "topology.lisp" "topology.lisp"
                                       "topology.lisp"))
(setf (source-file 'COBOUNDARY-DOMAIN) '("topology.lisp" "topology.lisp"
                                         "topology.lisp"))
(setf (source-file 'PRINT-TERM) '("polynomials/upolynomial.lisp"
                                  "polynomials/mpolynomial.lisp" "tpower.lisp"
                                  "topology.lisp"))
(setf (source-file 'CANONICAL) '("topology.lisp"))
(setf (source-file 'POINTS-ORDER) '("topology.lisp"))
(setf (source-file 'CELL-ORDER) '("topology.lisp" "topology.lisp"))
(setf (source-file 'MAKE-CHAIN-OR-COCHAIN) '("topology.lisp"))
(setf (source-file 'MAKE-CHAIN) '("topology.lisp"))
(setf (source-file 'MAKE-COCHAIN) '("topology.lisp"))
(setf (source-file 'FREE-GROUP-PLUS) '("topology.lisp"))
(setf (source-file 'FREE-GROUP-DIFFERENCE) '("topology.lisp"))
(setf (source-file 'FREE-GROUP-MINUS) '("topology.lisp"))
(setf (source-file 'FREE-GROUP-SCALAR-TIMES) '("topology.lisp"))
(setf (source-file 'CHAIN-TERMS-TIMES) '("topology.lisp"))
(setf (source-file 'BOUNDARY) '("topology.lisp" "topology.lisp" "topology.lisp"
                                "topology.lisp"))
(setf (source-file 'BOUNDARY-SET) '("topology.lisp"))
(setf (source-file 'COBOUNDARY) '("topology.lisp"))
(setf (source-file 'TP-FIELD-PRINT-OBJECT) '("tpower.lisp"))
(setf (source-file 'TP-RING-PRINT-OBJECT) '("tpower.lisp"))
(setf (source-file 'GET-TPOWER-SERIES-DOMAIN) '("tpower.lisp"))
(setf (source-file 'MAKE-TPOWER-SERIES) '("tpower.lisp" "tpower.lisp"
                                          "tpower.lisp" "tpower.lisp"
                                          "tpower.lisp"))
(setf (source-file 'TRIM-ZEROES) '("tpower.lisp"))
(setf (source-file 'PRINT-GROUPED) '("tpower.lisp"))
(setf (source-file 'GROUPED?) '("tpower.lisp"))
(setf (source-file 'PRINT-EXPONENT) '("tpower.lisp"))
(setf (source-file 'PRINT-TPOWER-SERIES) '("tpower.lisp"))
(setf (source-file 'TPS-SPREAD-COEFFS) '("tpower.lisp"))
(setf (source-file 'TPS-VAR-VAL) '("tpower.lisp"))
(setf (source-file 'TPS-VAR-BO) '("tpower.lisp"))
(setf (source-file 'TPS-VAR-ORDER) '("tpower.lisp"))
(setf (source-file 'TPS-VAR-COEFFS) '("tpower.lisp"))
(setf (source-file 'WITH-TPOWER-SERIES) '("tpower.lisp"))
(setf (source-file 'MODIFY-BRANCH-ORDER) '("tpower.lisp" "tpower.lisp"))
(setf (source-file 'SET-BRANCH-ORDER) '("tpower.lisp" "tpower.lisp"))
(setf (source-file 'BRANCH-ORDER) '("tpower.lisp"))
(setf (source-file 'MAP-TPOWER-SERIES) '("tpower.lisp"))
(setf (source-file 'LARGEST-STORED-COEFF) '("tpower.lisp"))
(setf (source-file 'TRUNCATE-ORDER) '("tpower.lisp"))
(setf (source-file 'SET) '("classes/algebraic-domains.lisp"))
(setf (source-file 'HAS-NAME) '("classes/space-classes.lisp"
                                "classes/algebraic-domains.lisp"))
(setf (source-file 'BINARY>=) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                                "numbers/numbers.lisp"
                                "classes/algebraic-domains.lisp"))
(setf (source-file 'HAS-EQUALITY) '("classes/algebraic-domains.lisp"))
(setf (source-file 'HAS-COMPARISON) '("classes/algebraic-domains.lisp"))
(setf (source-file 'NON-STRICT-DOMAIN) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SEMIGROUP) '("classes/algebraic-domains.lisp"))
(setf (source-file 'MONOID) '("classes/algebraic-domains.lisp"))
(setf (source-file 'GROUP) '("classes/algebraic-domains.lisp"))
(setf (source-file 'ABELIAN-SEMIGROUP) '("classes/algebraic-domains.lisp"))
(setf (source-file 'ABELIAN-MONOID) '("classes/algebraic-domains.lisp"))
(setf (source-file 'ABELIAN-GROUP) '("classes/algebraic-domains.lisp"))
(setf (source-file 'RNG) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SIMPLE-RING) '("classes/algebraic-domains.lisp"))
(setf (source-file 'HAS-COEFFICIENT-DOMAIN) '("classes/algebraic-domains.lisp"))
(setf (source-file 'MODULE) '("classes/algebraic-domains.lisp"))
(setf (source-file 'CHARACTERISTIC) '("classes/algebraic-domains.lisp"
                                      "classes/algebraic-domains.lisp"
                                      "classes/algebraic-domains.lisp"
                                      "classes/algebraic-domains.lisp"
                                      "classes/algebraic-domains.lisp"
                                      "classes/algebraic-domains.lisp"
                                      "classes/algebraic-domains.lisp"))
(setf (source-file 'ALGEBRA) '("classes/algebraic-domains.lisp"))
(setf (source-file 'RING) '("classes/algebraic-domains.lisp"))
(setf (source-file 'BINARY-GCD) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                                  "numbers/numbers.lisp" "numbers/gfp.lisp"
                                  "numbers/gfp.lisp"
                                  "classes/algebraic-domains.lisp"))
(setf (source-file 'BINARY-LCM) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                                  "numbers/gfp.lisp"
                                  "classes/algebraic-domains.lisp"))
(setf (source-file 'FIELD) '("classes/algebraic-domains.lisp"))
(setf (source-file 'FINITE-FIELD) '("classes/algebraic-domains.lisp"))
(setf (source-file 'FACTOR-DOMAIN) '("classes/algebraic-domains.lisp"))
(setf (source-file 'FACTOR-DOMAIN-PRINT-OBJECT) '("classes/algebraic-domains.lisp"
                                                  "classes/algebraic-domains.lisp"))
(setf (source-file 'FACTOR-GROUP) '("classes/algebraic-domains.lisp"))
(setf (source-file 'FACTOR-MODULE) '("classes/algebraic-domains.lisp"))
(setf (source-file 'FACTOR-RING) '("classes/algebraic-domains.lisp"))
(setf (source-file 'ALGEBRAIC-EXTENSION) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SIMPLE-FIELD-EXTENSION) '("classes/algebraic-domains.lisp"))
(setf (source-file 'DIMENSIONAL-DOMAIN) '("classes/algebraic-domains.lisp"))
(setf (source-file 'FREE-MODULE) '("classes/algebraic-domains.lisp"))
(setf (source-file 'VECTOR-SPACE) '("classes/algebraic-domains.lisp"))
(setf (source-file 'PROJECTIVE-SPACE) '("classes/algebraic-domains.lisp"))
(setf (source-file 'DIFFERENTIAL-RING) '("classes/algebraic-domains.lisp"))
(setf (source-file 'QUOTIENT-RING) '("classes/algebraic-domains.lisp"))
(setf (source-file 'QUOTIENT-FIELD) '("classes/algebraic-domains.lisp"))
(setf (source-file 'QUOTIENT-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'WITH-NUMERATOR-AND-DENOMINATOR) '("classes/algebraic-domains.lisp"))
(setf (source-file 'MUTABLE-SET) '("classes/algebraic-domains.lisp"))
(setf (source-file 'FINITE-SET) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SET-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SET-ELEMENT1) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SET-ELEMENT2) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SET-ELEMENTS-AS-SINGLETONS) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SET-ELEMENTS-AS-PAIRS) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SET-WITH-ELEMENT-LIST) '("classes/algebraic-domains.lisp"))
(setf (source-file 'MUTABLE-SET-WITH-ELEMENT-LIST) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SET-WITH-SORTED-ELEMENT-LIST) '("classes/algebraic-domains.lisp"))
(setf (source-file 'MUTABLE-SET-WITH-SORTED-ELEMENT-LIST) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SIMPLE-SET) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SET-OF-PAIRS) '("classes/algebraic-domains.lisp"))
(setf (source-file 'ORDERED-SIMPLE-SET) '("classes/algebraic-domains.lisp"))
(setf (source-file 'ORDERED-SET-OF-PAIRS) '("classes/algebraic-domains.lisp"))
(setf (source-file 'GE-OR-NUMERIC) '("classes/algebraic-domains.lisp"))
(setf (source-file 'NUMERIC) '("classes/algebraic-domains.lisp"))
(setf (source-file 'NUMERIC-DOMAIN) '("classes/algebraic-domains.lisp"))
(setf (source-file 'RATIONAL-INTEGERS) '("classes/algebraic-domains.lisp"))
(setf (source-file 'RATIONAL-INTEGER) '("classes/algebraic-domains.lisp"))
(setf (source-file 'REAL-NUMBERS) '("classes/algebraic-domains.lisp"))
(setf (source-file 'REAL-NUMBER) '("classes/algebraic-domains.lisp"))
(setf (source-file 'FLOATING-POINT-NUMBER) '("classes/algebraic-domains.lisp"))
(setf (source-file 'BIGFLOAT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'COMPLEX-NUMBERS) '("classes/algebraic-domains.lisp"))
(setf (source-file 'COMPLEX-NUMBER) '("classes/algebraic-domains.lisp"))
(setf (source-file 'RATIONAL-NUMBERS) '("classes/algebraic-domains.lisp"))
(setf (source-file 'RATIONAL-NUMBER) '("classes/algebraic-domains.lisp"))
(setf (source-file 'GFP) '("classes/algebraic-domains.lisp"))
(setf (source-file 'GFQ) '("classes/algebraic-domains.lisp"))
(setf (source-file 'GFP-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'GF2^N) '("classes/algebraic-domains.lisp"))
(setf (source-file 'GFM) '("classes/algebraic-domains.lisp"))
(setf (source-file 'GFM-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'HAS-RING-VARIABLES) '("classes/algebraic-domains.lisp"))
(setf (source-file 'POLYNOMIAL-RING) '("classes/algebraic-domains.lisp"))
(setf (source-file 'VARIABLE-HASH-TABLE) '("classes/algebraic-domains.lisp"))
(setf (source-file 'CACHING-ZERO-AND-ONE) '("classes/algebraic-domains.lisp"))
(setf (source-file 'MULTIVARIATE-POLYNOMIAL-RING) '("classes/algebraic-domains.lisp"))
(setf (source-file 'POLYNOMIAL) '("classes/algebraic-domains.lisp"))
(setf (source-file 'MPOLYNOMIAL) '("classes/algebraic-domains.lisp"))
(setf (source-file 'EPOLYNOMIAL) '("classes/algebraic-domains.lisp"))
(setf (source-file 'UPOLYNOMIAL) '("classes/algebraic-domains.lisp"))
(setf (source-file 'POWER-SERIES-DOMAIN) '("classes/algebraic-domains.lisp"))
(setf (source-file 'TPOWER-SERIES-DOMAIN) '("classes/algebraic-domains.lisp"))
(setf (source-file 'TPOWER-SERIES-RING) '("classes/algebraic-domains.lisp"))
(setf (source-file 'TPOWER-SERIES-FIELD) '("classes/algebraic-domains.lisp"))
(setf (source-file 'POWER-SERIES) '("classes/algebraic-domains.lisp"))
(setf (source-file 'TPOWER-SERIES) '("classes/algebraic-domains.lisp"))
(setf (source-file 'RATIONAL-FUNCTION-FIELD) '("classes/algebraic-domains.lisp"))
(setf (source-file 'RATIONAL-FUNCTION) '("classes/algebraic-domains.lisp"))
(setf (source-file 'MORPHISM) '("classes/algebraic-domains.lisp"))
(setf (source-file 'HOMOMORPHISM) '("classes/algebraic-domains.lisp"))
(setf (source-file 'AUTOMORPHISM) '("classes/algebraic-domains.lisp"))
(setf (source-file 'DIFFERENTIAL-POLYNOMIAL-RING) '("classes/algebraic-domains.lisp"))
(setf (source-file 'IDEAL) '("classes/algebraic-domains.lisp"))
(setf (source-file 'PID-IDEAL) '("classes/algebraic-domains.lisp"))
(setf (source-file 'GROBNER-BASIS) '("classes/algebraic-domains.lisp"))
(setf (source-file 'ALGEBRAIC-EXTENSION-RING) '("classes/algebraic-domains.lisp"))
(setf (source-file 'ALGEBRAIC-OBJECT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'DIRECT-SUM) '("classes/algebraic-domains.lisp"))
(setf (source-file 'DIRECT-SUM-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'FREE-MODULE-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'VECTOR-SPACE-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'LISP-VECTOR-SPACE) '("classes/algebraic-domains.lisp"))
(setf (source-file 'LISP-VECTOR) '("classes/algebraic-domains.lisp"))
(setf (source-file 'PROJECTIVE-SPACE-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'MATRIX-SPACE) '("classes/algebraic-domains.lisp"))
(setf (source-file 'REAL-MATRIX-SPACE) '("classes/algebraic-domains.lisp"))
(setf (source-file 'COMPLEX-MATRIX-SPACE) '("classes/algebraic-domains.lisp"))
(setf (source-file 'GL-N) '("classes/algebraic-domains.lisp"))
(setf (source-file 'PSL-N) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SL-N) '("classes/algebraic-domains.lisp"))
(setf (source-file 'O-N) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SO-N) '("classes/algebraic-domains.lisp"))
(setf (source-file 'MATRIX-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'MATRIX-SPACE-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'REAL-MATRIX-SPACE-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'COMPLEX-MATRIX-SPACE-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'GL-N-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'PSL-N-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SL-N-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'O-N-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'SO-N-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'QUATERNION-DOMAIN) '("classes/algebraic-domains.lisp"))
(setf (source-file 'UNIT-QUATERNION-DOMAIN) '("classes/algebraic-domains.lisp"))
(setf (source-file 'QUATERNION-WITH-MULTIPLICATION) '("classes/algebraic-domains.lisp"))
(setf (source-file 'QUATERNION-DOMAIN-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'UNIT-QUATERNION-DOMAIN-ELEMENT) '("classes/algebraic-domains.lisp"))
(setf (source-file 'HAS-MEMOIZATION) '("classes/general-classes.lisp"))
(setf (source-file 'GENERAL-EXPRESSIONS) '("classes/general-classes.lisp"))
(setf (source-file 'GENERAL-EXPRESSION) '("classes/general-classes.lisp"))
(setf (source-file 'GE-ATOM) '("classes/general-classes.lisp"))
(setf (source-file 'GE-VARIABLE) '("classes/general-classes.lisp"))
(setf (source-file 'GE-NARY) '("classes/general-classes.lisp"))
(setf (source-file 'GE-PLUS) '("classes/general-classes.lisp"))
(setf (source-file 'GE-TIMES) '("classes/general-classes.lisp"))
(setf (source-file 'GE-EXPT) '("classes/general-classes.lisp"))
(setf (source-file 'ABSTRACT-FUNCTION) '("classes/general-classes.lisp"))
(setf (source-file 'HAS-BOUND-VARIABLES) '("classes/general-classes.lisp"))
(setf (source-file 'APPLICABLE-FUNCTION) '("classes/general-classes.lisp"))
(setf (source-file 'GE-FUNCTION) '("classes/general-classes.lisp"))
(setf (source-file 'GE-FUNCTION-DERIV) '("classes/general-classes.lisp"))
(setf (source-file 'GE-APPLICATION) '("classes/general-classes.lisp"))
(setf (source-file 'GE-EQUATION) '("classes/general-classes.lisp"))
(setf (source-file 'GE-EQN=) '("classes/general-classes.lisp"))
(setf (source-file 'GE-EQN>) '("classes/general-classes.lisp"))
(setf (source-file 'GE-EQN>=) '("classes/general-classes.lisp"))
(setf (source-file 'UNIVERSAL-QUANTIFIED-SET) '("classes/general-classes.lisp"))
(setf (source-file 'GE-IFOURIER) '("classes/general-classes.lisp"))
(setf (source-file 'ABSTRACT-SPACE) '("classes/space-classes.lisp"))
(setf (source-file 'DIMENSIONAL-SPACE) '("classes/space-classes.lisp"))
(setf (source-file 'EUCLIDEAN-SPACE) '("classes/space-classes.lisp"))
(setf (source-file 'HAS-COERCION-CACHE) '("classes/space-classes.lisp"))
(setf (source-file 'HAS-ID-NUMBER) '("classes/space-classes.lisp"))
(setf (source-file 'ABSTRACT-POINT) '("classes/space-classes.lisp"))
(setf (source-file 'NAMED-POINT) '("classes/space-classes.lisp"))
(setf (source-file 'GENERAL-POINT) '("classes/space-classes.lisp"))
(setf (source-file 'POINT) '("classes/space-classes.lisp"))
(setf (source-file 'CELL) '("classes/space-classes.lisp"))
(setf (source-file 'SIMPLEX) '("classes/space-classes.lisp"))
(setf (source-file 'ORIENTED-SORT) '("classes/space-classes.lisp"))
(setf (source-file 'POLYGON) '("classes/space-classes.lisp"))
(setf (source-file 'CELL-COMPLEX) '("classes/space-classes.lisp"))
(setf (source-file 'SIMPLICIAL-COMPLEX) '("classes/space-classes.lisp"))
(setf (source-file 'CHAIN-MODULE) '("classes/space-classes.lisp"))
(setf (source-file 'COCHAIN-MODULE) '("classes/space-classes.lisp"))
(setf (source-file 'CHAIN) '("classes/space-classes.lisp"))
(setf (source-file 'COCHAIN) '("classes/space-classes.lisp"))
(setf (source-file 'FUNCTION-SPACE) '("classes/space-classes.lisp"))
(setf (source-file 'FUNCTION-SPACE-ELEMENT) '("classes/space-classes.lisp"))
(setf (source-file 'FUNCTION-SPACE-PRINT-OBJECT) '("classes/space-classes.lisp"))
(setf (source-file 'BANACH-SPACE) '("classes/space-classes.lisp"))
(setf (source-file 'HILBERT-SPACE) '("classes/space-classes.lisp"))
(setf (source-file 'HILBERT-SPACE-ELEMENT) '("classes/space-classes.lisp"))
(setf (source-file 'HILBERT-SPACE-PRINT-OBJECT) '("classes/space-classes.lisp"))
(setf (source-file 'BIGFLOATP) '("numbers/bigfloat.lisp"))
(setf (source-file 'DECPREC!) '("numbers/bigfloat.lisp"))
(setf (source-file 'INCPREC!) '("numbers/bigfloat.lisp"))
(setf (source-file 'CONV!MT) '("numbers/bigfloat.lisp"))
(setf (source-file 'CONV!EP) '("numbers/bigfloat.lisp"))
(setf (source-file 'CUT!MT) '("numbers/bigfloat.lisp"))
(setf (source-file 'CUT!EP) '("numbers/bigfloat.lisp"))
(setf (source-file 'PRECI!) '("numbers/bigfloat.lisp"))
(setf (source-file 'ORDER!) '("numbers/bigfloat.lisp"))
(setf (source-file 'CONVERT-NUMBER->CHARACTERS) '("numbers/bigfloat.lisp"))
(setf (source-file 'ROUND!LAST) '("numbers/bigfloat.lisp"))
(setf (source-file 'ROUND!MT) '("numbers/bigfloat.lisp"))
(setf (source-file 'ROUND!EP) '("numbers/bigfloat.lisp"))
(setf (source-file 'BFPRIN1) '("numbers/bigfloat.lisp"))
(setf (source-file 'READ!LNUM) '("numbers/bigfloat.lisp"))
(setf (source-file 'READ!NUM) '("numbers/bigfloat.lisp"))
(setf (source-file 'CONVERT-TO-BIGFLOAT) '("numbers/bigfloat.lisp"
                                           "numbers/bigfloat.lisp"
                                           "numbers/bigfloat.lisp"
                                           "numbers/bigfloat.lisp"))
(setf (source-file 'BF-ABS) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-MINUS) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-PLUS) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-DIFFERENCE) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-TIMES) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-QUOTIENT) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-EXPT) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-FLOOR) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-INTEGER-PART) '("numbers/bigfloat.lisp"))
(setf (source-file 'FLOOR1) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/numbers.lisp" "numbers/bigfloat.lisp"
                              "numbers/bigfloat.lisp"))
(setf (source-file 'FLOOR2) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/bigfloat.lisp"))
(setf (source-file 'CEILING1) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                                "numbers/numbers.lisp" "numbers/numbers.lisp"
                                "numbers/numbers.lisp" "numbers/bigfloat.lisp"
                                "numbers/bigfloat.lisp"))
(setf (source-file 'CEILING2) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                                "numbers/numbers.lisp" "numbers/numbers.lisp"
                                "numbers/bigfloat.lisp"))
(setf (source-file 'ROUND1) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/numbers.lisp" "numbers/bigfloat.lisp"
                              "numbers/bigfloat.lisp"))
(setf (source-file 'ROUND2) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/numbers.lisp" "numbers/numbers.lisp"
                              "numbers/bigfloat.lisp"))
(setf (source-file 'TRUNCATE1) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                                 "numbers/numbers.lisp" "numbers/numbers.lisp"
                                 "numbers/numbers.lisp" "numbers/bigfloat.lisp"
                                 "numbers/bigfloat.lisp"))
(setf (source-file 'TRUNCATE2) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                                 "numbers/numbers.lisp" "numbers/numbers.lisp"
                                 "numbers/bigfloat.lisp"))
(setf (source-file 'BF-BINARY=) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-BINARY>=) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-BINARY>) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-INTEGERP) '("numbers/bigfloat.lisp"))
(setf (source-file 'GET!CONST) '("numbers/bigfloat.lisp"))
(setf (source-file 'SAVE!CONST) '("numbers/bigfloat.lisp"))
(setf (source-file 'SET!CONST) '("numbers/bigfloat.lisp"))
(setf (source-file 'DEFINE-BFLOAT-CONSTANT) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-PI-MACHIN) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-SQRT) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-PI-AGM) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-PI) '("numbers/bigfloat.lisp"))
(setf (source-file 'PI-VALUE) '("numbers/bigfloat.lisp" "numbers/bigfloat.lisp"))
(setf (source-file 'BF-E) '("numbers/bigfloat.lisp"))
(setf (source-file 'E-VALUE) '("numbers/bigfloat.lisp" "numbers/bigfloat.lisp"))
(setf (source-file 'BF-EXP) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-LOG) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-COS) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-SIN) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-TAN) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-ATAN) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-ASIN) '("numbers/bigfloat.lisp"))
(setf (source-file 'BF-ACOS) '("numbers/bigfloat.lisp"))
(setf (source-file 'NUMBER-OF-ELEMENTS) '("numbers/gfp.lisp" "numbers/gfp.lisp"
                                          "numbers/gfp.lisp"))
(setf (source-file 'MAKE-GFP-DOMAIN) '("numbers/gfp.lisp" "numbers/gfp.lisp"
                                       "numbers/gfp.lisp"))
(setf (source-file 'GFP-PRINT-OBJECT) '("numbers/gfp.lisp"))
(setf (source-file 'COMPUTE-INVERSE) '("numbers/gfp.lisp"))
(setf (source-file 'PLUS?) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                             "numbers/numbers.lisp" "numbers/numbers.lisp"
                             "numbers/numbers.lisp" "numbers/numbers.lisp"
                             "numbers/numbers.lisp" "numbers/gfp.lisp"
                             "numbers/gfp.lisp"))
(setf (source-file 'REMAINDER) '("numbers/numbers.lisp" "numbers/gfp.lisp"
                                 "numbers/gfp.lisp"))
(setf (source-file 'MULTIPLICATIVE-ORDER) '("numbers/gfp.lisp"
                                            "numbers/gfp.lisp"
                                            "numbers/gfp.lisp"
                                            "numbers/gfp.lisp"))
(setf (source-file 'GF2^N-PRINT-OBJECT) '("numbers/gfp.lisp"))
(setf (source-file 'GF2^N-ELEMENT) '("numbers/gfp.lisp"))
(setf (source-file 'MAKE-GFM-DOMAIN) '("numbers/gfp.lisp"))
(setf (source-file 'MAKE-FINITE-FIELD*) '("numbers/gfp.lisp"))
(setf (source-file 'MAKE-FINITE-FIELD) '("numbers/gfp.lisp"))
(setf (source-file 'GET-FINITE-FIELD) '("numbers/gfp.lisp"))
(setf (source-file 'GET-FACTOR-RING) '("numbers/gfp.lisp" "numbers/gfp.lisp"))
(setf (source-file 'USE-CHINESE-REMAINDER) '("numbers/gfp.lisp"
                                             "numbers/gfp.lisp"))
(setf (source-file 'COMPUTE-RESULT) '("numbers/gfp.lisp" "numbers/gfp.lisp"))
(setf (source-file 'RATIONAL-INTEGERS-PRINT-OBJECT) '("numbers/numbers.lisp"))
(setf (source-file 'RATIONAL-NUMBERS-PRINT-OBJECT) '("numbers/numbers.lisp"))
(setf (source-file 'REAL-NUMBERS-PRINT-OBJECT) '("numbers/numbers.lisp"))
(setf (source-file 'COMPLEX-NUMBERS-PRINT-OBJECT) '("numbers/numbers.lisp"))
(setf (source-file 'DEF-REALIMAG-PART) '("numbers/numbers.lisp"))
(setf (source-file 'ABS) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                           "numbers/numbers.lisp" "numbers/numbers.lisp"
                           "numbers/numbers.lisp" "numbers/numbers.lisp"))
(setf (source-file 'PHASE) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                             "numbers/numbers.lisp" "numbers/numbers.lisp"
                             "numbers/numbers.lisp" "numbers/numbers.lisp"
                             "numbers/numbers.lisp"))
(setf (source-file 'RANDOM-CONSTANT) '("numbers/numbers.lisp"
                                       "numbers/numbers.lisp"))
(setf (source-file 'RANDOM-FLOATING-NUMBER) '("numbers/numbers.lisp"))
(setf (source-file 'CONVERT-TO-LISP-NUMBER) '("numbers/numbers.lisp"
                                              "numbers/numbers.lisp"
                                              "numbers/numbers.lisp"
                                              "numbers/numbers.lisp"
                                              "numbers/numbers.lisp"
                                              "numbers/numbers.lisp"
                                              "numbers/numbers.lisp"))
(setf (source-file 'PARSE-NUMERIC-OBJ) '("numbers/numbers.lisp"))
(setf (source-file 'INTEGER?) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                                "numbers/numbers.lisp" "numbers/numbers.lisp"))
(setf (source-file 'SQRT) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                            "numbers/numbers.lisp" "numbers/numbers.lisp"
                            "numbers/numbers.lisp" "numbers/numbers.lisp"
                            "numbers/numbers.lisp" "numbers/numbers.lisp"))
(setf (source-file 'WITH-CONTAGION) '("numbers/numbers.lisp"))
(setf (source-file 'DEFINE-BINARY-CONTAGIONS) '("numbers/numbers.lisp"))
(setf (source-file 'CONTAGION) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                                 "numbers/numbers.lisp" "numbers/numbers.lisp"))
(setf (source-file 'MAX-PAIR) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                                "numbers/numbers.lisp"))
(setf (source-file 'MIN-PAIR) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                                "numbers/numbers.lisp"))
(setf (source-file 'EVEN?) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                             "numbers/numbers.lisp"))
(setf (source-file 'ODDP?) '("numbers/numbers.lisp" "numbers/numbers.lisp"
                             "numbers/numbers.lisp"))
(setf (source-file 'EXTENDED-GCD*) '("numbers/numbers.lisp"))
(setf (source-file 'EXTENDED-GCD) '("polynomials/upolynomial.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/numbers.lisp"))
(setf (source-file 'MAKE-EPOLYNOMIAL*) '("polynomials/epolynomial.lisp"
                                         "polynomials/epolynomial.lisp"))
(setf (source-file 'MAKE-EPOLYNOMIAL) '("polynomials/epolynomial.lisp"
                                        "polynomials/epolynomial.lisp"
                                        "polynomials/epolynomial.lisp"
                                        "polynomials/epolynomial.lisp"
                                        "polynomials/epolynomial.lisp"))
(setf (source-file 'SCAN-POLY-FORM) '("polynomials/epolynomial.lisp"))
(setf (source-file 'GET-COMPARISON-FUN) '("polynomials/epolynomial.lisp"))
(setf (source-file 'MAKE-COMPARISON-FUN) '("polynomials/epolynomial.lisp"))
(setf (source-file 'CONVERT-TERM) '("polynomials/epolynomial.lisp"
                                    "polynomials/epolynomial.lisp"))
(setf (source-file 'TRANSFORM-TERM) '("polynomials/epolynomial.lisp"))
(setf (source-file 'SAME-GREATER-FUNCTIONS) '("polynomials/epolynomial.lisp"))
(setf (source-file 'MAKE-ETERM) '("polynomials/epolynomial.lisp"))
(setf (source-file 'GTERMS-PLUS) '("polynomials/epolynomial.lisp"))
(setf (source-file 'COLLECT-TERM) '("polynomials/epolynomial.lisp"
                                    "polynomials/epolynomial.lisp"))
(setf (source-file 'COLLECT-OLD-TERM) '("polynomials/epolynomial.lisp"
                                        "polynomials/epolynomial.lisp"))
(setf (source-file 'GTERMS-MINUS) '("polynomials/epolynomial.lisp"))
(setf (source-file 'GTERMS-DIFFERENCE) '("polynomials/epolynomial.lisp"))
(setf (source-file 'GTERMS-MON-TIMES) '("polynomials/epolynomial.lisp"))
(setf (source-file 'GTERM-TIMES) '("polynomials/epolynomial.lisp"))
(setf (source-file 'GTERM-QUOT) '("polynomials/epolynomial.lisp"))
(setf (source-file 'GTERM-LCM) '("polynomials/epolynomial.lisp"))
(setf (source-file 'GTERM-DISJOINT) '("polynomials/epolynomial.lisp"))
(setf (source-file 'GTERM-DOMINATES) '("polynomials/epolynomial.lisp"))
(setf (source-file 'GTERM-EQUAL) '("polynomials/epolynomial.lisp"))
(setf (source-file 'GTERM-CONSTANT?) '("polynomials/epolynomial.lisp"))
(setf (source-file 'GTERMS-TIMES) '("polynomials/epolynomial.lisp"))
(setf (source-file 'GTERMS-EXPT) '("polynomials/epolynomial.lisp"))
(setf (source-file 'MAKE-MPOLYNOMIAL) '("polynomials/epolynomial.lisp"))
(setf (source-file 'IDEAL-PRINT-OBJECT) '("polynomials/grobner.lisp"))
(setf (source-file 'MAKE-IDEAL) '("polynomials/grobner.lisp"
                                  "polynomials/grobner.lisp"
                                  "polynomials/grobner.lisp"
                                  "polynomials/grobner.lisp"
                                  "polynomials/grobner.lisp"))
(setf (source-file 'REDUCE-BASIS) '("polynomials/grobner.lisp"
                                    "polynomials/grobner.lisp"))
(setf (source-file 'WITH-GROBNER-OPERATIONS) '("polynomials/grobner.lisp"))
(setf (source-file 'CHECK-SAME-DOMAIN) '("polynomials/grobner.lisp"))
(setf (source-file '(SETF GREATER-FUNCTION)) '("polynomials/grobner.lisp"))
(setf (source-file 'CONVERT-LIST) '("polynomials/grobner.lisp"))
(setf (source-file 'ADD-RELATION) '("polynomials/grobner.lisp"
                                    "polynomials/grobner.lisp"
                                    "polynomials/grobner.lisp"))
(setf (source-file 'GENERATORS-OF) '("polynomials/grobner.lisp"))
(setf (source-file 'RESET-GROBNER-BASIS) '("polynomials/grobner.lisp"))
(setf (source-file 'TERMS-S-POLY) '("polynomials/grobner.lisp"))
(setf (source-file 'CRITERION1) '("polynomials/grobner.lisp"))
(setf (source-file 'REDUCE-ALL) '("polynomials/grobner.lisp"
                                  "polynomials/grobner.lisp"))
(setf (source-file 'NEW-BASIS) '("polynomials/grobner.lisp"
                                 "polynomials/grobner.lisp"))
(setf (source-file 'ADD-UNDONE) '("polynomials/grobner.lisp"))
(setf (source-file 'TERMS-REDUCE) '("polynomials/grobner.lisp"))
(setf (source-file 'GTERMS-PRIM*) '("polynomials/grobner.lisp"))
(setf (source-file 'POLYNOMIAL-RING-PRINT-OBJECT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'GET-POLYNOMIAL-RING) '("polynomials/mpolynomial.lisp"
                                           "polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-ORDER-NUMBER) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-TERMS) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-COEF?) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'SCALAR?) '("polynomials/upolynomial.lisp"
                               "polynomials/mpolynomial.lisp"
                               "polynomials/mpolynomial.lisp"))
(setf (source-file 'MAKE-POLY-FORM) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'VARIABLE-SYMBOL) '("polynomials/poly-tools.lisp"
                                       "polynomials/poly-tools.lisp"
                                       "polynomials/mpolynomial.lisp"))
(setf (source-file 'MORE-MAIN-ORDER-NUMBER?) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'LE) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'LC) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'LT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'RED) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'MAKE-TERMS) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'MAKE-MANY-TERMS) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS0?) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS0) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'MAKE-POLY) '("polynomials/mpolynomial.lisp"
                                 "polynomials/mpolynomial.lisp"))
(setf (source-file 'MAP-OVER-EACH-TERM) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'PAIR-UP-TERMS) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'ACCUMULATE-TERMS) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'INSERT-INTO-ACCUMULATION-LIST) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'ACCUMULATE-ACCUMULATION-LIST) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'E=) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'E>) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'E<) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'E0) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'E0?) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'E1) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'E1?) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'E+) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'E1+) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'E1-) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'E-) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'E*) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'E/) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'EMINUS?) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'EODDP) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'EMINUS) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'EMAX) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'MAKE-POLYNOMIAL-MORPHISM) '("polynomials/mpolynomial.lisp"
                                                "polynomials/mpolynomial.lisp"
                                                "polynomials/mpolynomial.lisp"))
(setf (source-file 'TRANSFORM) '("polynomials/mpolynomial.lisp"
                                 "polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-MONOMIAL?) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'PRINT-MPOLYNOMIAL-FORM) '("polynomials/mpolynomial.lisp"
                                              "polynomials/mpolynomial.lisp"))
(setf (source-file 'PRINT-FORM) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-SIMP) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-TERM) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-PLUS) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-PLUS) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-MINUS) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-MINUS) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-MINUS?) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-MINUS?) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-DIFFERENCE) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-DIFFERENCE) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-MON-TIMES) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-TIMES) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-TIMES) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-EXPTSQ) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-EXPT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-QUOTIENT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-QUOTIENT*) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-QUOTIENT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-CQUOTIENT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-TEST-QUOTIENT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-PSEUDO-REMAINDER) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-PSEUDO-REMAINDER) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-COEF-REMAINDER) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-TRUNCATE2) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-HEIGHT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-FACTOR-CBOUND) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-CONTENT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-CONTENT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-GCD) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-LCM) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-SPLIT-ON-VARS) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-FIND-COMMON-VARS) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-MGCD) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-CONTENT-AND-PRIM-PART) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-PRIM-PART) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-PRIM-PART) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-MONICIZE) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-MONICIZE) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-EUCLIDEAN-GCD) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-EUCLIDEAN-GCD) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-PRIMITIVE-GCD) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-PRIMITIVE-GCD) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-REDUCED-GCD) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-REDUCED-GCD) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-SUBRESULTANT-GCD) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'RESULTANT) '("polynomials/mpolynomial.lisp"
                                 "polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-RESULTANT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-SUBRESULTANT-GCD) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-COERCE) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-COERCE) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-SUBST) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-SUBST) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-HORNERS-RULE) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-VARIABLE-LIST) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-DERIVATIVE) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-DERIVATIVE) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-MAX-COEFFICIENT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-MAX-COEFFICIENT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'DEGREE) '("polynomials/upolynomial.lisp"
                              "polynomials/mpolynomial.lisp"
                              "polynomials/mpolynomial.lisp"
                              "polynomials/mpolynomial.lisp"
                              "polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-DEGREE) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-DEGREE-VECTOR) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'ADD-VARIABLE-DEGREE) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-DEGREE-VECTOR) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-LIST-OF-VARIABLES) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'TERMS-LIST-OF-VARS) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'P-LIST-OF-VARS) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'COEFFICIENT) '("polynomials/mpolynomial.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-COEFFICIENT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-C-COEFFICIENT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'POLY-LEADING-COEFFICIENT) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'GET-VARIABLE-NAME) '("polynomials/mpolynomial.lisp"
                                         "polynomials/mpolynomial.lisp"))
(setf (source-file 'VARIABLE-INDEX) '("polynomials/poly-tools.lisp"
                                      "polynomials/poly-tools.lisp"
                                      "polynomials/poly-tools.lisp"
                                      "polynomials/mpolynomial.lisp"))
(setf (source-file 'PARSE-LINEAR-EQUATION) '("polynomials/mpolynomial.lisp"))
(setf (source-file 'GET-VARIABLE-NUMBER-PROPERTY) '("polynomials/poly-tools.lisp"
                                                    "polynomials/poly-tools.lisp"
                                                    "polynomials/poly-tools.lisp"))
(setf (source-file 'SET-VARIABLE-NUMBER-PROPERTY) '("polynomials/poly-tools.lisp"
                                                    "polynomials/poly-tools.lisp"
                                                    "polynomials/poly-tools.lisp"))
(setf (source-file 'WITH-LINEAR-SUPPORT) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'TERMS-INTERPOLATE) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'POLY-INTERPOLATE) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'INTERPOLATE) '("polynomials/sparsegcd.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/sparsegcd.lisp"))
(setf (source-file 'EXPT-LIST) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'BOUND-DEGREE-TERM-COUNT) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'DEGREE-PARTITION) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'MAKE-DEGREE-MATRIX) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'COMPUTE-VANDERMONDE-Q) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'SOLVE-VANDERMONDE) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'SOLVE-VANDERMONDET) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'SOLVE-VANDERMONDETD) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'POLY-SKELETON) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'PSKELETON) '("polynomials/sparsegcd.lisp"
                                 "polynomials/sparsegcd.lisp"))
(setf (source-file 'SPARSEINTERPSTAGE) '("polynomials/sparsegcd.lisp"
                                         "polynomials/sparsegcd.lisp"))
(setf (source-file 'SPARSEINTERPSTAGEI) '("polynomials/sparsegcd.lisp"
                                          "polynomials/sparsegcd.lisp"
                                          "polynomials/sparsegcd.lisp"))
(setf (source-file 'INITY) '("polynomials/sparsegcd.lisp"
                             "polynomials/sparsegcd.lisp"))
(setf (source-file 'LIST-COERCE) '("polynomials/sparsegcd.lisp"
                                   "polynomials/sparsegcd.lisp"))
(setf (source-file 'SPMOD-GCD) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'SPMOD-GCD1) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'SPMOD-GCD2) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'NON-ZERO-RANDOM) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'SPMOD-GCD3) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'CHECK-DEGREE) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'EVAL-MONOMIAL) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'INTERPOLATE-FROM-SKEL) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'MAKE-MONOMIAL) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'DENSE-INTERPOLATE-COEFFICIENTS) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'POLY-GCDU) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'TERMS-GCDU) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'TERMS-GCDU+) '("polynomials/sparsegcd.lisp"))
(setf (source-file 'COEF-LIST0) '("polynomials/upolynomial.lisp"))
(setf (source-file 'COEF-LIST1) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-X) '("polynomials/upolynomial.lisp"))
(setf (source-file 'COPY-CLIST) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-DEGREE) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-ZERO-DEG?) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-LENGTH) '("polynomials/upolynomial.lisp"))
(setf (source-file 'MAKE-CLIST) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-GET) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-SUBSEQ) '("polynomials/upolynomial.lisp"))
(setf (source-file 'WEYL:MAKE-UPOLYNOMIAL) '("polynomials/upolynomial.lisp"
                                             "polynomials/upolynomial.lisp"
                                             "polynomials/upolynomial.lisp"))
(setf (source-file 'MAKE-UPOLYNOMIAL) '("polynomials/upolynomial.lisp"
                                        "polynomials/upolynomial.lisp"
                                        "polynomials/upolynomial.lisp"
                                        "polynomials/upolynomial.lisp"
                                        "polynomials/upolynomial.lisp"))
(setf (source-file 'PRINT-UPOLYNOMIAL) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-SIMPLIFY) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-PLUS) '("polynomials/upolynomial.lisp"))
(setf (source-file 'ZIPPER-SUM) '("polynomials/upolynomial.lisp"
                                  "polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-MINUS) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-MINUS?) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-DIFFERENCE) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-TIMES) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-EXPTSQ) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-QUOTIENT) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-REMAINDER) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-DIVIDE) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-GCD) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-LCM) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-EXTENDED-GCD) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CFACTOR) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-FACTOR) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-PRIMITIVE-PART!) '("polynomials/upolynomial.lisp"))
(setf (source-file 'SQUARE-FREE) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-SQFR-DECOMPOSE) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-DERIV) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-PTH-ROOT) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-FACTOR-SQUAREFREE) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-EXPT-MOD-POLY) '("polynomials/upolynomial.lisp"))
(setf (source-file 'CLIST-FACTOR-PRODUCT-NTH-DEGREES) '("polynomials/upolynomial.lisp"))
(setf (source-file 'PROJECTIVE-SPACE-PRINT-OBJECT) '("vector-spaces/projective-space.lisp"))
(setf (source-file 'MAKE-PROJECTIVE-SPACE-ELEMENT) '("vector-spaces/projective-space.lisp"))
(setf (source-file 'VECTOR-SET-REF) '("vector-spaces/projective-space.lisp"))
(setf (source-file 'MAKE-AFFINE-SPACE) '("vector-spaces/projective-space.lisp"))
(setf (source-file 'PROJECT) '("vector-spaces/projective-space.lisp"))
(setf (source-file 'MAP-FUN) '("vector-spaces/projective-space.lisp"))
(setf (source-file 'QUATERNION-DOMAIN-PRINT-OBJECT) '("vector-spaces/quaternions.lisp"))
(setf (source-file 'UNIT-QUATERNION-DOMAIN-PRINT-OBJECT) '("vector-spaces/quaternions.lisp"))
(setf (source-file 'CREATE-UNIT-QUATERNION) '("vector-spaces/quaternions.lisp"))
(setf (source-file 'LOOP-VECTOR-BIND) '("vector-spaces/vector.lisp"))
(setf (source-file 'FREE-MODULE-PRINT-OBJECT) '("vector-spaces/vector.lisp"))
(setf (source-file 'MAKE-ELEMENT-FREE-MODULE-VECTOR) '("vector-spaces/vector.lisp"))
(setf (source-file 'PRINT-FREE-MODULE-ELEMENT) '("vector-spaces/vector.lisp"))
(setf (source-file 'MULTIPLY-VECTOR-BY-SCALAR) '("vector-spaces/vector.lisp"))
(setf (source-file 'CROSS-PRODUCT) '("vector-spaces/vector.lisp"
                                     "vector-spaces/vector.lisp"))
(setf (source-file 'TILDE) '("vector-spaces/vector.lisp"
                             "vector-spaces/vector.lisp"))
(setf (callers-list 'IN-PACKAGE :file) '("vector-spaces/vector.lisp"
                                         "vector-spaces/quaternions.lisp"
                                         "vector-spaces/projective-space.lisp"
                                         "polynomials/upolynomial.lisp"
                                         "polynomials/sparsegcd.lisp"
                                         "polynomials/poly-tools.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "polynomials/grobner.lisp"
                                         "polynomials/epolynomial.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/gfp.lisp"
                                         "numbers/bigfloat.lisp"
                                         "classes/space-classes.lisp"
                                         "classes/general-classes.lisp"
                                         "classes/algebraic-domains.lisp"
                                         "tpower.lisp" "topology.lisp"
                                         "taylor.lisp" "sets.lisp"
                                         "rational-functions.lisp"
                                         "quotient-fields.lisp" "packages.lisp"
                                         "new-domains.lisp" "multipole.lisp"
                                         "morphisms.lisp" "mesh.lisp"
                                         "matrix.lisp" "lisp-support.lisp"
                                         "lisp-numbers.lisp" "general.lisp"
                                         "funct-spaces.lisp" "functions.lisp"
                                         "fourier.lisp" "domain-support.lisp"
                                         "direct-sums.lisp"
                                         "differential-domains.lisp" "avl.lisp"
                                         "algebraic-extension.lisp"))
(setf (callers-list 'EVAL-WHEN :file) '("vector-spaces/vector.lisp"
                                        "vector-spaces/quaternions.lisp"
                                        "vector-spaces/projective-space.lisp"
                                        "polynomials/mpolynomial.lisp"
                                        "numbers/numbers.lisp"
                                        "numbers/bigfloat.lisp" "tpower.lisp"
                                        "topology.lisp" "matrix.lisp"
                                        "funct-spaces.lisp"
                                        "differential-domains.lisp"
                                        "algebraic-extension.lisp"))
(setf (callers-list 'DEFINE-DOMAIN-CREATOR :file) '("vector-spaces/vector.lisp"
                                                    "vector-spaces/quaternions.lisp"
                                                    "vector-spaces/projective-space.lisp"
                                                    "polynomials/mpolynomial.lisp"
                                                    "numbers/numbers.lisp"
                                                    "tpower.lisp"
                                                    "topology.lisp"
                                                    "rational-functions.lisp"
                                                    "quotient-fields.lisp"
                                                    "new-domains.lisp"
                                                    "multipole.lisp"
                                                    "matrix.lisp"
                                                    "funct-spaces.lisp"
                                                    "differential-domains.lisp"
                                                    "algebraic-extension.lisp"))
(setf (callers-list 'FACTOR-RING :file) '("algebraic-extension.lisp"))
(setf (callers-list '(RING RING) :file) '("quotient-fields.lisp" "matrix.lisp"
                                          "algebraic-extension.lisp"))
(setf (callers-list 'IDEAL :file) '("polynomials/grobner.lisp"
                                    "numbers/gfp.lisp"
                                    "algebraic-extension.lisp"))
(setf (callers-list 'COND :file) '("vector-spaces/vector.lisp"
                                   "vector-spaces/projective-space.lisp"
                                   "polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/numbers.lisp" "numbers/gfp.lisp"
                                   "numbers/bigfloat.lisp" "tpower.lisp"
                                   "topology.lisp" "taylor.lisp" "sets.lisp"
                                   "rational-functions.lisp"
                                   "quotient-fields.lisp" "new-domains.lisp"
                                   "multipole.lisp" "morphisms.lisp"
                                   "mesh.lisp" "matrix.lisp"
                                   "lisp-support.lisp" "lisp-numbers.lisp"
                                   "general.lisp" "funct-spaces.lisp"
                                   "functions.lisp" "fourier.lisp"
                                   "domain-support.lisp" "direct-sums.lisp"
                                   "differential-domains.lisp" "avl.lisp"
                                   "algebraic-extension.lisp"))
(setf (callers-list 'EQL :file) '("vector-spaces/vector.lisp"
                                  "vector-spaces/quaternions.lisp"
                                  "vector-spaces/projective-space.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/grobner.lisp"
                                  "polynomials/epolynomial.lisp"
                                  "numbers/numbers.lisp" "numbers/gfp.lisp"
                                  "numbers/bigfloat.lisp" "tpower.lisp"
                                  "topology.lisp" "rational-functions.lisp"
                                  "quotient-fields.lisp" "new-domains.lisp"
                                  "morphisms.lisp" "mesh.lisp" "matrix.lisp"
                                  "lisp-support.lisp" "general.lisp"
                                  "funct-spaces.lisp" "functions.lisp"
                                  "fourier.lisp" "domain-support.lisp"
                                  "direct-sums.lisp"
                                  "differential-domains.lisp" "avl.lisp"
                                  "algebraic-extension.lisp"))
(setf (callers-list 'RING-OF :file) '("polynomials/grobner.lisp"
                                      "numbers/gfp.lisp"
                                      "algebraic-extension.lisp"))
(setf (callers-list 'RING :file) '("polynomials/sparsegcd.lisp"
                                   "polynomials/poly-tools.lisp"
                                   "polynomials/grobner.lisp"
                                   "numbers/gfp.lisp" "topology.lisp"
                                   "rational-functions.lisp"
                                   "quotient-fields.lisp" "matrix.lisp"
                                   "direct-sums.lisp"
                                   "differential-domains.lisp"
                                   "algebraic-extension.lisp"))
(setf (callers-list 'MAKE-INSTANCE :file) '("vector-spaces/vector.lisp"
                                            "vector-spaces/quaternions.lisp"
                                            "vector-spaces/projective-space.lisp"
                                            "polynomials/upolynomial.lisp"
                                            "polynomials/mpolynomial.lisp"
                                            "polynomials/grobner.lisp"
                                            "polynomials/epolynomial.lisp"
                                            "numbers/numbers.lisp"
                                            "numbers/gfp.lisp"
                                            "numbers/bigfloat.lisp"
                                            "tpower.lisp" "topology.lisp"
                                            "sets.lisp"
                                            "rational-functions.lisp"
                                            "quotient-fields.lisp"
                                            "multipole.lisp" "morphisms.lisp"
                                            "mesh.lisp" "matrix.lisp"
                                            "general.lisp" "funct-spaces.lisp"
                                            "functions.lisp" "fourier.lisp"
                                            "direct-sums.lisp"
                                            "differential-domains.lisp"
                                            "avl.lisp"
                                            "algebraic-extension.lisp"))
(setf (callers-list 'ERROR :file) '("vector-spaces/vector.lisp"
                                    "vector-spaces/quaternions.lisp"
                                    "vector-spaces/projective-space.lisp"
                                    "polynomials/upolynomial.lisp"
                                    "polynomials/sparsegcd.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "polynomials/grobner.lisp"
                                    "polynomials/epolynomial.lisp"
                                    "numbers/numbers.lisp" "numbers/gfp.lisp"
                                    "numbers/bigfloat.lisp" "tpower.lisp"
                                    "topology.lisp" "taylor.lisp" "sets.lisp"
                                    "rational-functions.lisp"
                                    "quotient-fields.lisp" "new-domains.lisp"
                                    "multipole.lisp" "morphisms.lisp"
                                    "mesh.lisp" "matrix.lisp"
                                    "lisp-support.lisp" "lisp-numbers.lisp"
                                    "general.lisp" "funct-spaces.lisp"
                                    "functions.lisp" "fourier.lisp"
                                    "domain-support.lisp" "direct-sums.lisp"
                                    "differential-domains.lisp" "avl.lisp"
                                    "algebraic-extension.lisp"))
(setf (callers-list 'FUNCTION :file) '("vector-spaces/vector.lisp"
                                       "vector-spaces/quaternions.lisp"
                                       "vector-spaces/projective-space.lisp"
                                       "polynomials/upolynomial.lisp"
                                       "polynomials/poly-tools.lisp"
                                       "polynomials/mpolynomial.lisp"
                                       "polynomials/grobner.lisp"
                                       "numbers/numbers.lisp"
                                       "numbers/gfp.lisp"
                                       "numbers/bigfloat.lisp" "tpower.lisp"
                                       "topology.lisp" "sets.lisp"
                                       "rational-functions.lisp"
                                       "quotient-fields.lisp"
                                       "new-domains.lisp" "multipole.lisp"
                                       "mesh.lisp" "matrix.lisp"
                                       "lisp-support.lisp" "lisp-numbers.lisp"
                                       "general.lisp" "funct-spaces.lisp"
                                       "fourier.lisp" "domain-support.lisp"
                                       "direct-sums.lisp"
                                       "differential-domains.lisp" "avl.lisp"
                                       "algebraic-extension.lisp"))
(setf (callers-list ':UNNAMED-LAMBDA :file) '("vector-spaces/vector.lisp"
                                              "vector-spaces/quaternions.lisp"
                                              "vector-spaces/projective-space.lisp"
                                              "polynomials/upolynomial.lisp"
                                              "polynomials/sparsegcd.lisp"
                                              "polynomials/mpolynomial.lisp"
                                              "polynomials/grobner.lisp"
                                              "numbers/numbers.lisp"
                                              "numbers/gfp.lisp"
                                              "numbers/bigfloat.lisp"
                                              "tpower.lisp" "topology.lisp"
                                              "taylor.lisp"
                                              "rational-functions.lisp"
                                              "quotient-fields.lisp"
                                              "new-domains.lisp"
                                              "multipole.lisp" "mesh.lisp"
                                              "matrix.lisp" "lisp-numbers.lisp"
                                              "general.lisp"
                                              "funct-spaces.lisp"
                                              "functions.lisp"
                                              "domain-support.lisp"
                                              "direct-sums.lisp"
                                              "differential-domains.lisp"
                                              "algebraic-extension.lisp"))
(setf (callers-list 'LAMBDA :file) '("vector-spaces/vector.lisp"
                                     "vector-spaces/quaternions.lisp"
                                     "vector-spaces/projective-space.lisp"
                                     "polynomials/upolynomial.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/grobner.lisp"
                                     "numbers/numbers.lisp" "numbers/gfp.lisp"
                                     "numbers/bigfloat.lisp" "tpower.lisp"
                                     "topology.lisp" "taylor.lisp" "sets.lisp"
                                     "rational-functions.lisp"
                                     "quotient-fields.lisp" "new-domains.lisp"
                                     "multipole.lisp" "morphisms.lisp"
                                     "mesh.lisp" "matrix.lisp"
                                     "lisp-numbers.lisp" "general.lisp"
                                     "funct-spaces.lisp" "functions.lisp"
                                     "domain-support.lisp" "direct-sums.lisp"
                                     "differential-domains.lisp"
                                     "algebraic-extension.lisp"))
(setf (callers-list 'D :file) '("vector-spaces/vector.lisp"
                                "vector-spaces/quaternions.lisp"
                                "vector-spaces/projective-space.lisp"
                                "polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/numbers.lisp" "numbers/gfp.lisp"
                                "classes/algebraic-domains.lisp" "tpower.lisp"
                                "topology.lisp" "quotient-fields.lisp"
                                "morphisms.lisp" "mesh.lisp" "matrix.lisp"
                                "funct-spaces.lisp" "domain-support.lisp"
                                "direct-sums.lisp" "differential-domains.lisp"
                                "algebraic-extension.lisp"))
(setf (callers-list 'AND :file) '("vector-spaces/vector.lisp"
                                  "vector-spaces/quaternions.lisp"
                                  "vector-spaces/projective-space.lisp"
                                  "polynomials/upolynomial.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/grobner.lisp"
                                  "polynomials/epolynomial.lisp"
                                  "numbers/numbers.lisp" "numbers/gfp.lisp"
                                  "numbers/bigfloat.lisp" "tpower.lisp"
                                  "topology.lisp" "rational-functions.lisp"
                                  "quotient-fields.lisp" "multipole.lisp"
                                  "morphisms.lisp" "mesh.lisp" "matrix.lisp"
                                  "lisp-numbers.lisp" "general.lisp"
                                  "funct-spaces.lisp" "functions.lisp"
                                  "fourier.lisp" "domain-support.lisp"
                                  "direct-sums.lisp"
                                  "differential-domains.lisp" "avl.lisp"
                                  "algebraic-extension.lisp"))
(setf (callers-list 'TYPEP :file) '("vector-spaces/vector.lisp"
                                    "polynomials/upolynomial.lisp"
                                    "polynomials/sparsegcd.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "numbers/numbers.lisp" "numbers/gfp.lisp"
                                    "classes/general-classes.lisp"
                                    "classes/algebraic-domains.lisp"
                                    "tpower.lisp" "topology.lisp" "taylor.lisp"
                                    "sets.lisp" "rational-functions.lisp"
                                    "quotient-fields.lisp" "morphisms.lisp"
                                    "mesh.lisp" "matrix.lisp"
                                    "lisp-numbers.lisp" "general.lisp"
                                    "funct-spaces.lisp" "functions.lisp"
                                    "direct-sums.lisp"
                                    "differential-domains.lisp"
                                    "algebraic-extension.lisp"))
(setf (callers-list 'QUOTE :file) '("vector-spaces/vector.lisp"
                                    "vector-spaces/quaternions.lisp"
                                    "vector-spaces/projective-space.lisp"
                                    "polynomials/upolynomial.lisp"
                                    "polynomials/sparsegcd.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "polynomials/grobner.lisp"
                                    "polynomials/epolynomial.lisp"
                                    "numbers/numbers.lisp" "numbers/gfp.lisp"
                                    "numbers/bigfloat.lisp"
                                    "classes/space-classes.lisp"
                                    "classes/general-classes.lisp"
                                    "classes/algebraic-domains.lisp"
                                    "tpower.lisp" "topology.lisp" "taylor.lisp"
                                    "sets.lisp" "rational-functions.lisp"
                                    "quotient-fields.lisp" "packages.lisp"
                                    "new-domains.lisp" "multipole.lisp"
                                    "morphisms.lisp" "mesh.lisp" "matrix.lisp"
                                    "lisp-support.lisp" "lisp-numbers.lisp"
                                    "general.lisp" "funct-spaces.lisp"
                                    "functions.lisp" "domain-support.lisp"
                                    "direct-sums.lisp"
                                    "differential-domains.lisp" "avl.lisp"
                                    "algebraic-extension.lisp"))
(setf (callers-list 'FACTOR-NUMER-OF :file) '("classes/algebraic-domains.lisp"
                                              "algebraic-extension.lisp"))
(setf (callers-list '= :file) '("vector-spaces/vector.lisp"
                                "vector-spaces/quaternions.lisp"
                                "vector-spaces/projective-space.lisp"
                                "polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/grobner.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/numbers.lisp" "numbers/gfp.lisp"
                                "numbers/bigfloat.lisp"
                                "classes/space-classes.lisp" "tpower.lisp"
                                "topology.lisp" "taylor.lisp" "sets.lisp"
                                "rational-functions.lisp" "packages.lisp"
                                "new-domains.lisp" "multipole.lisp" "mesh.lisp"
                                "matrix.lisp" "lisp-numbers.lisp"
                                "general.lisp" "funct-spaces.lisp"
                                "functions.lisp" "direct-sums.lisp"
                                "differential-domains.lisp" "avl.lisp"
                                "algebraic-extension.lisp"))
(setf (callers-list 'FACTOR-DENOM-OF :file) '("classes/algebraic-domains.lisp"
                                              "algebraic-extension.lisp"))
(setf (callers-list 'ALGEBRAIC-EXTENSION :file) '("algebraic-extension.lisp"))
(setf (callers-list '(COEFFICIENT-DOMAIN RING) :file) '("differential-domains.lisp"
                                                        "algebraic-extension.lisp"))
(setf (callers-list 'VARIABLES :file) '("vector-spaces/vector.lisp"
                                        "polynomials/poly-tools.lisp"
                                        "polynomials/mpolynomial.lisp"
                                        "polynomials/epolynomial.lisp"
                                        "tpower.lisp" "rational-functions.lisp"
                                        "matrix.lisp" "general.lisp"
                                        "fourier.lisp"
                                        "differential-domains.lisp" "avl.lisp"
                                        "algebraic-extension.lisp"))
(setf (callers-list 'PROGN :file) '("polynomials/mpolynomial.lisp"
                                    "tpower.lisp" "quotient-fields.lisp"
                                    "general.lisp" "differential-domains.lisp"
                                    "algebraic-extension.lisp"))
(setf (callers-list 'UNLESS :file) '("vector-spaces/vector.lisp"
                                     "vector-spaces/quaternions.lisp"
                                     "vector-spaces/projective-space.lisp"
                                     "polynomials/upolynomial.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "polynomials/poly-tools.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/grobner.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "numbers/numbers.lisp" "numbers/gfp.lisp"
                                     "numbers/bigfloat.lisp" "tpower.lisp"
                                     "topology.lisp" "rational-functions.lisp"
                                     "quotient-fields.lisp" "new-domains.lisp"
                                     "morphisms.lisp" "mesh.lisp" "matrix.lisp"
                                     "lisp-numbers.lisp" "general.lisp"
                                     "funct-spaces.lisp" "functions.lisp"
                                     "fourier.lisp" "domain-support.lisp"
                                     "differential-domains.lisp" "avl.lisp"
                                     "algebraic-extension.lisp"))
(setf (callers-list 'INTEGRAL-DOMAIN? :file) '("algebraic-extension.lisp"))
(setf (callers-list 'COEFFICIENT-DOMAIN :file) '("polynomials/upolynomial.lisp"
                                                 "polynomials/mpolynomial.lisp"
                                                 "polynomials/grobner.lisp"
                                                 "tpower.lisp" "multipole.lisp"
                                                 "matrix.lisp"
                                                 "differential-domains.lisp"
                                                 "algebraic-extension.lisp"))
(setf (callers-list 'LET :file) '("vector-spaces/vector.lisp"
                                  "vector-spaces/quaternions.lisp"
                                  "vector-spaces/projective-space.lisp"
                                  "polynomials/upolynomial.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "polynomials/poly-tools.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/grobner.lisp"
                                  "polynomials/epolynomial.lisp"
                                  "numbers/numbers.lisp" "numbers/gfp.lisp"
                                  "numbers/bigfloat.lisp"
                                  "classes/algebraic-domains.lisp"
                                  "tpower.lisp" "topology.lisp" "taylor.lisp"
                                  "sets.lisp" "rational-functions.lisp"
                                  "quotient-fields.lisp" "new-domains.lisp"
                                  "multipole.lisp" "morphisms.lisp" "mesh.lisp"
                                  "matrix.lisp" "lisp-support.lisp"
                                  "lisp-numbers.lisp" "general.lisp"
                                  "funct-spaces.lisp" "functions.lisp"
                                  "fourier.lisp" "domain-support.lisp"
                                  "direct-sums.lisp"
                                  "differential-domains.lisp" "avl.lisp"
                                  "algebraic-extension.lisp"))
(setf (callers-list 'DOMAIN :file) '("vector-spaces/vector.lisp"
                                     "vector-spaces/quaternions.lisp"
                                     "vector-spaces/projective-space.lisp"
                                     "polynomials/upolynomial.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "polynomials/poly-tools.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/grobner.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "numbers/numbers.lisp" "numbers/gfp.lisp"
                                     "numbers/bigfloat.lisp"
                                     "classes/algebraic-domains.lisp"
                                     "tpower.lisp" "topology.lisp"
                                     "taylor.lisp" "sets.lisp"
                                     "rational-functions.lisp"
                                     "quotient-fields.lisp" "new-domains.lisp"
                                     "multipole.lisp" "morphisms.lisp"
                                     "matrix.lisp" "general.lisp"
                                     "funct-spaces.lisp" "functions.lisp"
                                     "fourier.lisp" "domain-support.lisp"
                                     "direct-sums.lisp"
                                     "differential-domains.lisp"
                                     "algebraic-extension.lisp"))
(setf (callers-list 'ALGEBRAIC-EXTENSION-RING :file) '("algebraic-extension.lisp"))
(setf (callers-list 'LOOP :file) '("vector-spaces/vector.lisp"
                                   "vector-spaces/quaternions.lisp"
                                   "vector-spaces/projective-space.lisp"
                                   "polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/poly-tools.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                   "classes/space-classes.lisp"
                                   "classes/algebraic-domains.lisp"
                                   "tpower.lisp" "topology.lisp" "taylor.lisp"
                                   "sets.lisp" "rational-functions.lisp"
                                   "packages.lisp" "new-domains.lisp"
                                   "multipole.lisp" "morphisms.lisp"
                                   "mesh.lisp" "matrix.lisp"
                                   "lisp-support.lisp" "lisp-numbers.lisp"
                                   "general.lisp" "funct-spaces.lisp"
                                   "functions.lisp" "fourier.lisp"
                                   "domain-support.lisp" "direct-sums.lisp"
                                   "differential-domains.lisp" "avl.lisp"
                                   "algebraic-extension.lisp"))
(setf (callers-list 'FOR :file) '("vector-spaces/vector.lisp"
                                  "vector-spaces/quaternions.lisp"
                                  "vector-spaces/projective-space.lisp"
                                  "polynomials/upolynomial.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "polynomials/poly-tools.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/grobner.lisp"
                                  "polynomials/epolynomial.lisp"
                                  "numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                  "classes/space-classes.lisp"
                                  "classes/algebraic-domains.lisp"
                                  "tpower.lisp" "topology.lisp" "taylor.lisp"
                                  "sets.lisp" "rational-functions.lisp"
                                  "packages.lisp" "new-domains.lisp"
                                  "multipole.lisp" "morphisms.lisp" "mesh.lisp"
                                  "matrix.lisp" "lisp-support.lisp"
                                  "lisp-numbers.lisp" "general.lisp"
                                  "funct-spaces.lisp" "functions.lisp"
                                  "fourier.lisp" "domain-support.lisp"
                                  "direct-sums.lisp"
                                  "differential-domains.lisp" "avl.lisp"
                                  "algebraic-extension.lisp"))
(setf (callers-list 'VAR :file) '("vector-spaces/vector.lisp"
                                  "polynomials/upolynomial.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "polynomials/poly-tools.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/epolynomial.lisp" "tpower.lisp"
                                  "taylor.lisp" "rational-functions.lisp"
                                  "matrix.lisp" "general.lisp"
                                  "differential-domains.lisp" "avl.lisp"
                                  "algebraic-extension.lisp"))
(setf (callers-list 'IN :file) '("vector-spaces/vector.lisp"
                                 "vector-spaces/projective-space.lisp"
                                 "polynomials/upolynomial.lisp"
                                 "polynomials/sparsegcd.lisp"
                                 "polynomials/poly-tools.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "polynomials/grobner.lisp"
                                 "polynomials/epolynomial.lisp"
                                 "numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                 "classes/algebraic-domains.lisp" "tpower.lisp"
                                 "topology.lisp" "taylor.lisp" "sets.lisp"
                                 "rational-functions.lisp" "packages.lisp"
                                 "new-domains.lisp" "multipole.lisp"
                                 "morphisms.lisp" "mesh.lisp" "matrix.lisp"
                                 "lisp-support.lisp" "lisp-numbers.lisp"
                                 "general.lisp" "functions.lisp" "fourier.lisp"
                                 "domain-support.lisp" "direct-sums.lisp"
                                 "differential-domains.lisp" "avl.lisp"
                                 "algebraic-extension.lisp"))
(setf (callers-list 'COLLECT :file) '("vector-spaces/vector.lisp"
                                      "vector-spaces/projective-space.lisp"
                                      "polynomials/upolynomial.lisp"
                                      "polynomials/sparsegcd.lisp"
                                      "polynomials/poly-tools.lisp"
                                      "polynomials/mpolynomial.lisp"
                                      "polynomials/grobner.lisp"
                                      "polynomials/epolynomial.lisp"
                                      "numbers/gfp.lisp"
                                      "classes/algebraic-domains.lisp"
                                      "topology.lisp" "taylor.lisp" "sets.lisp"
                                      "rational-functions.lisp" "packages.lisp"
                                      "new-domains.lisp" "morphisms.lisp"
                                      "mesh.lisp" "matrix.lisp"
                                      "lisp-support.lisp" "lisp-numbers.lisp"
                                      "general.lisp" "functions.lisp"
                                      "fourier.lisp" "direct-sums.lisp"
                                      "differential-domains.lisp"
                                      "algebraic-extension.lisp"))
(setf (callers-list 'COERCE :file) '("vector-spaces/vector.lisp"
                                     "vector-spaces/quaternions.lisp"
                                     "vector-spaces/projective-space.lisp"
                                     "polynomials/upolynomial.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "polynomials/poly-tools.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/grobner.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "numbers/numbers.lisp" "numbers/gfp.lisp"
                                     "numbers/bigfloat.lisp"
                                     "classes/algebraic-domains.lisp"
                                     "tpower.lisp" "topology.lisp"
                                     "taylor.lisp" "sets.lisp"
                                     "rational-functions.lisp"
                                     "quotient-fields.lisp" "multipole.lisp"
                                     "morphisms.lisp" "mesh.lisp" "matrix.lisp"
                                     "lisp-numbers.lisp" "general.lisp"
                                     "functions.lisp" "fourier.lisp"
                                     "direct-sums.lisp"
                                     "differential-domains.lisp"
                                     "algebraic-extension.lisp"))
(setf (callers-list 'MAKE-HOMOMORPHISM :file) '("polynomials/mpolynomial.lisp"
                                                "numbers/numbers.lisp"
                                                "numbers/gfp.lisp"
                                                "tpower.lisp"
                                                "rational-functions.lisp"
                                                "quotient-fields.lisp"
                                                "multipole.lisp"
                                                "morphisms.lisp" "mesh.lisp"
                                                "direct-sums.lisp"
                                                "algebraic-extension.lisp"))
(setf (callers-list 'C :file) '("polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/epolynomial.lisp" "tpower.lisp"
                                "topology.lisp" "rational-functions.lisp"
                                "multipole.lisp" "mesh.lisp" "matrix.lisp"
                                "lisp-support.lisp" "lisp-numbers.lisp"
                                "general.lisp" "funct-spaces.lisp"
                                "differential-domains.lisp"
                                "algebraic-extension.lisp"))
(setf (callers-list 'MAKE-POLYNOMIAL :file) '("polynomials/sparsegcd.lisp"
                                              "polynomials/mpolynomial.lisp"
                                              "polynomials/epolynomial.lisp"
                                              "rational-functions.lisp"
                                              "differential-domains.lisp"
                                              "algebraic-extension.lisp"))
(setf (callers-list 'COEFFICIENT-DOMAIN-OF :file) '("vector-spaces/vector.lisp"
                                                    "vector-spaces/quaternions.lisp"
                                                    "vector-spaces/projective-space.lisp"
                                                    "polynomials/upolynomial.lisp"
                                                    "polynomials/sparsegcd.lisp"
                                                    "polynomials/mpolynomial.lisp"
                                                    "polynomials/grobner.lisp"
                                                    "polynomials/epolynomial.lisp"
                                                    "classes/algebraic-domains.lisp"
                                                    "tpower.lisp"
                                                    "topology.lisp"
                                                    "taylor.lisp"
                                                    "rational-functions.lisp"
                                                    "multipole.lisp"
                                                    "matrix.lisp"
                                                    "differential-domains.lisp"
                                                    "algebraic-extension.lisp"))
(setf (callers-list 'EQUAL :file) '("polynomials/mpolynomial.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/bigfloat.lisp" "tpower.lisp"
                                    "topology.lisp" "lisp-support.lisp"
                                    "general.lisp" "domain-support.lisp"
                                    "algebraic-extension.lisp"))
(setf (callers-list 'RING-VARIABLES :file) '("polynomials/upolynomial.lisp"
                                             "polynomials/sparsegcd.lisp"
                                             "polynomials/mpolynomial.lisp"
                                             "polynomials/grobner.lisp"
                                             "polynomials/epolynomial.lisp"
                                             "tpower.lisp" "taylor.lisp"
                                             "rational-functions.lisp"
                                             "matrix.lisp"
                                             "differential-domains.lisp"
                                             "algebraic-extension.lisp"))
(setf (callers-list 'DEFMACRO :file) '("vector-spaces/vector.lisp"
                                       "polynomials/upolynomial.lisp"
                                       "polynomials/sparsegcd.lisp"
                                       "polynomials/mpolynomial.lisp"
                                       "polynomials/grobner.lisp"
                                       "polynomials/epolynomial.lisp"
                                       "numbers/numbers.lisp"
                                       "numbers/bigfloat.lisp"
                                       "classes/algebraic-domains.lisp"
                                       "tpower.lisp" "topology.lisp"
                                       "taylor.lisp" "new-domains.lisp"
                                       "morphisms.lisp" "mesh.lisp"
                                       "matrix.lisp" "lisp-support.lisp"
                                       "lisp-numbers.lisp" "general.lisp"
                                       "funct-spaces.lisp" "functions.lisp"
                                       "domain-support.lisp" "direct-sums.lisp"
                                       "differential-domains.lisp" "avl.lisp"
                                       "algebraic-extension.lisp"))
(setf (callers-list 'SB-INT:QUASIQUOTE :file) '("vector-spaces/vector.lisp"
                                                "polynomials/upolynomial.lisp"
                                                "polynomials/sparsegcd.lisp"
                                                "polynomials/mpolynomial.lisp"
                                                "polynomials/grobner.lisp"
                                                "polynomials/epolynomial.lisp"
                                                "numbers/numbers.lisp"
                                                "numbers/bigfloat.lisp"
                                                "classes/algebraic-domains.lisp"
                                                "tpower.lisp" "topology.lisp"
                                                "taylor.lisp"
                                                "new-domains.lisp"
                                                "morphisms.lisp" "mesh.lisp"
                                                "matrix.lisp"
                                                "lisp-support.lisp"
                                                "lisp-numbers.lisp"
                                                "general.lisp"
                                                "funct-spaces.lisp"
                                                "functions.lisp"
                                                "domain-support.lisp"
                                                "direct-sums.lisp"
                                                "differential-domains.lisp"
                                                "avl.lisp"
                                                "algebraic-extension.lisp"))
(setf (callers-list 'LIST* :file) '("vector-spaces/vector.lisp"
                                    "polynomials/upolynomial.lisp"
                                    "polynomials/sparsegcd.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "polynomials/grobner.lisp"
                                    "polynomials/epolynomial.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/bigfloat.lisp"
                                    "classes/algebraic-domains.lisp"
                                    "tpower.lisp" "topology.lisp" "taylor.lisp"
                                    "new-domains.lisp" "morphisms.lisp"
                                    "mesh.lisp" "matrix.lisp"
                                    "lisp-support.lisp" "lisp-numbers.lisp"
                                    "general.lisp" "funct-spaces.lisp"
                                    "functions.lisp" "domain-support.lisp"
                                    "direct-sums.lisp"
                                    "differential-domains.lisp" "avl.lisp"
                                    "algebraic-extension.lisp"))
(setf (callers-list 'LIST :file) '("vector-spaces/vector.lisp"
                                   "polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/poly-tools.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/numbers.lisp"
                                   "numbers/bigfloat.lisp"
                                   "classes/space-classes.lisp"
                                   "classes/algebraic-domains.lisp"
                                   "tpower.lisp" "topology.lisp" "taylor.lisp"
                                   "sets.lisp" "rational-functions.lisp"
                                   "quotient-fields.lisp" "new-domains.lisp"
                                   "multipole.lisp" "morphisms.lisp"
                                   "mesh.lisp" "matrix.lisp"
                                   "lisp-support.lisp" "lisp-numbers.lisp"
                                   "general.lisp" "funct-spaces.lisp"
                                   "functions.lisp" "domain-support.lisp"
                                   "direct-sums.lisp"
                                   "differential-domains.lisp" "avl.lisp"
                                   "algebraic-extension.lisp"))
(setf (callers-list 'DEFGENERIC :file) '("polynomials/upolynomial.lisp"
                                         "polynomials/sparsegcd.lisp"
                                         "polynomials/poly-tools.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "polynomials/grobner.lisp"
                                         "polynomials/epolynomial.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/gfp.lisp"
                                         "numbers/bigfloat.lisp"
                                         "classes/algebraic-domains.lisp"
                                         "tpower.lisp" "topology.lisp"
                                         "taylor.lisp" "sets.lisp"
                                         "rational-functions.lisp"
                                         "quotient-fields.lisp"
                                         "morphisms.lisp" "mesh.lisp"
                                         "matrix.lisp" "lisp-support.lisp"
                                         "lisp-numbers.lisp" "general.lisp"
                                         "funct-spaces.lisp" "fourier.lisp"
                                         "domain-support.lisp"
                                         "direct-sums.lisp"
                                         "differential-domains.lisp" "avl.lisp"
                                         "algebraic-extension.lisp"))
(setf (callers-list 'VARIABLE :file) '("polynomials/poly-tools.lisp"
                                       "polynomials/mpolynomial.lisp"
                                       "tpower.lisp" "taylor.lisp"
                                       "rational-functions.lisp" "general.lisp"
                                       "differential-domains.lisp"
                                       "algebraic-extension.lisp"))
(setf (callers-list 'DEFMETHOD :file) '("vector-spaces/vector.lisp"
                                        "vector-spaces/quaternions.lisp"
                                        "vector-spaces/projective-space.lisp"
                                        "polynomials/upolynomial.lisp"
                                        "polynomials/sparsegcd.lisp"
                                        "polynomials/poly-tools.lisp"
                                        "polynomials/mpolynomial.lisp"
                                        "polynomials/grobner.lisp"
                                        "polynomials/epolynomial.lisp"
                                        "numbers/numbers.lisp"
                                        "numbers/gfp.lisp"
                                        "numbers/bigfloat.lisp"
                                        "classes/space-classes.lisp"
                                        "classes/algebraic-domains.lisp"
                                        "tpower.lisp" "topology.lisp"
                                        "taylor.lisp" "sets.lisp"
                                        "rational-functions.lisp"
                                        "quotient-fields.lisp"
                                        "new-domains.lisp" "multipole.lisp"
                                        "morphisms.lisp" "mesh.lisp"
                                        "matrix.lisp" "lisp-support.lisp"
                                        "lisp-numbers.lisp" "general.lisp"
                                        "funct-spaces.lisp" "functions.lisp"
                                        "fourier.lisp" "domain-support.lisp"
                                        "direct-sums.lisp"
                                        "differential-domains.lisp" "avl.lisp"
                                        "algebraic-extension.lisp"))
(setf (callers-list 'WITH-SLOTS :file) '("polynomials/poly-tools.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "polynomials/grobner.lisp"
                                         "polynomials/epolynomial.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/gfp.lisp"
                                         "numbers/bigfloat.lisp"
                                         "classes/space-classes.lisp"
                                         "classes/algebraic-domains.lisp"
                                         "tpower.lisp" "topology.lisp"
                                         "sets.lisp" "rational-functions.lisp"
                                         "quotient-fields.lisp" "mesh.lisp"
                                         "matrix.lisp" "general.lisp"
                                         "domain-support.lisp"
                                         "direct-sums.lisp"
                                         "differential-domains.lisp"
                                         "algebraic-extension.lisp"))
(setf (callers-list 'MEMBER :file) '("vector-spaces/vector.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "polynomials/poly-tools.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/grobner.lisp" "topology.lisp"
                                     "sets.lisp" "rational-functions.lisp"
                                     "new-domains.lisp" "morphisms.lisp"
                                     "mesh.lisp" "lisp-support.lisp"
                                     "general.lisp" "domain-support.lisp"
                                     "differential-domains.lisp" "avl.lisp"
                                     "algebraic-extension.lisp"))
(setf (callers-list 'GE-EQUAL :file) '("polynomials/poly-tools.lisp"
                                       "polynomials/mpolynomial.lisp"
                                       "tpower.lisp" "taylor.lisp"
                                       "rational-functions.lisp" "general.lisp"
                                       "functions.lisp" "fourier.lisp"
                                       "differential-domains.lisp"
                                       "algebraic-extension.lisp"))
(setf (callers-list 'GET-VARIABLE-NUMBER-PROPERTY :file) '("polynomials/poly-tools.lisp"
                                                           "differential-domains.lisp"
                                                           "algebraic-extension.lisp"))
(setf (callers-list 'VARIABLE-INDEX :file) '("polynomials/poly-tools.lisp"
                                             "polynomials/mpolynomial.lisp"
                                             "rational-functions.lisp"
                                             "differential-domains.lisp"
                                             "algebraic-extension.lisp"))
(setf (callers-list 'SETQ :file) '("vector-spaces/vector.lisp"
                                   "vector-spaces/quaternions.lisp"
                                   "vector-spaces/projective-space.lisp"
                                   "polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/poly-tools.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/numbers.lisp" "numbers/gfp.lisp"
                                   "numbers/bigfloat.lisp" "tpower.lisp"
                                   "topology.lisp" "taylor.lisp" "sets.lisp"
                                   "rational-functions.lisp"
                                   "quotient-fields.lisp" "new-domains.lisp"
                                   "morphisms.lisp" "mesh.lisp" "matrix.lisp"
                                   "lisp-support.lisp" "lisp-numbers.lisp"
                                   "general.lisp" "funct-spaces.lisp"
                                   "functions.lisp" "fourier.lisp"
                                   "domain-support.lisp"
                                   "differential-domains.lisp" "avl.lisp"
                                   "algebraic-extension.lisp"))
(setf (callers-list 'DOMAIN-OF :file) '("vector-spaces/vector.lisp"
                                        "vector-spaces/quaternions.lisp"
                                        "polynomials/upolynomial.lisp"
                                        "polynomials/sparsegcd.lisp"
                                        "polynomials/mpolynomial.lisp"
                                        "polynomials/grobner.lisp"
                                        "polynomials/epolynomial.lisp"
                                        "numbers/numbers.lisp"
                                        "numbers/gfp.lisp"
                                        "numbers/bigfloat.lisp" "tpower.lisp"
                                        "topology.lisp" "taylor.lisp"
                                        "sets.lisp" "rational-functions.lisp"
                                        "quotient-fields.lisp" "multipole.lisp"
                                        "morphisms.lisp" "mesh.lisp"
                                        "matrix.lisp" "general.lisp"
                                        "funct-spaces.lisp" "functions.lisp"
                                        "fourier.lisp" "direct-sums.lisp"
                                        "differential-domains.lisp"
                                        "algebraic-extension.lisp"))
(setf (callers-list 'MINIMAL-POLYNOMIAL :file) '("algebraic-extension.lisp"))
(setf (callers-list 'POLY-FORM :file) '("polynomials/upolynomial.lisp"
                                        "polynomials/sparsegcd.lisp"
                                        "polynomials/mpolynomial.lisp"
                                        "polynomials/grobner.lisp"
                                        "polynomials/epolynomial.lisp"
                                        "tpower.lisp" "rational-functions.lisp"
                                        "differential-domains.lisp"
                                        "algebraic-extension.lisp"))
(setf (callers-list 'VAR-INDEX :file) '("polynomials/epolynomial.lisp"
                                        "algebraic-extension.lisp"))
(setf (callers-list 'POLY-ORDER-NUMBER :file) '("polynomials/sparsegcd.lisp"
                                                "polynomials/mpolynomial.lisp"
                                                "polynomials/epolynomial.lisp"
                                                "rational-functions.lisp"
                                                "differential-domains.lisp"
                                                "algebraic-extension.lisp"))
(setf (callers-list 'WITH-OUTPUT-TO-STRING :file) '("algebraic-extension.lisp"))
(setf (callers-list 'STRING :file) '("mesh.lisp" "general.lisp"
                                     "functions.lisp"
                                     "algebraic-extension.lisp"))
(setf (callers-list 'DISPLAY :file) '("polynomials/upolynomial.lisp"
                                      "polynomials/mpolynomial.lisp"
                                      "polynomials/epolynomial.lisp"
                                      "tpower.lisp" "algebraic-extension.lisp"))
(setf (callers-list 'SETF :file) '("vector-spaces/vector.lisp"
                                   "vector-spaces/quaternions.lisp"
                                   "vector-spaces/projective-space.lisp"
                                   "polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/poly-tools.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/bigfloat.lisp"
                                   "classes/space-classes.lisp"
                                   "classes/algebraic-domains.lisp"
                                   "tpower.lisp" "topology.lisp" "taylor.lisp"
                                   "sets.lisp" "rational-functions.lisp"
                                   "new-domains.lisp" "multipole.lisp"
                                   "morphisms.lisp" "mesh.lisp" "matrix.lisp"
                                   "lisp-support.lisp" "general.lisp"
                                   "funct-spaces.lisp" "domain-support.lisp"
                                   "direct-sums.lisp"
                                   "differential-domains.lisp" "avl.lisp"
                                   "algebraic-extension.lisp"))
(setf (callers-list 'POLY-TERMS :file) '("polynomials/upolynomial.lisp"
                                         "polynomials/sparsegcd.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "polynomials/epolynomial.lisp"
                                         "tpower.lisp"
                                         "rational-functions.lisp"
                                         "differential-domains.lisp"
                                         "algebraic-extension.lisp"))
(setf (callers-list 'DEFSETF :file) '("polynomials/poly-tools.lisp"
                                      "tpower.lisp" "topology.lisp" "sets.lisp"
                                      "mesh.lisp" "lisp-support.lisp"
                                      "general.lisp"
                                      "differential-domains.lisp"
                                      "algebraic-extension.lisp"))
(setf (callers-list 'ALGEBRAIC-OBJECT :file) '("algebraic-extension.lisp"))
(setf (callers-list 'FORM :file) '("polynomials/upolynomial.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/bigfloat.lisp" "tpower.lisp"
                                   "multipole.lisp" "domain-support.lisp"
                                   "algebraic-extension.lisp"))
(setf (callers-list 'DEFMETHOD-SD :file) '("vector-spaces/vector.lisp"
                                           "vector-spaces/quaternions.lisp"
                                           "polynomials/upolynomial.lisp"
                                           "polynomials/mpolynomial.lisp"
                                           "polynomials/epolynomial.lisp"
                                           "numbers/numbers.lisp"
                                           "numbers/gfp.lisp"
                                           "numbers/bigfloat.lisp"
                                           "classes/algebraic-domains.lisp"
                                           "tpower.lisp" "topology.lisp"
                                           "sets.lisp"
                                           "rational-functions.lisp"
                                           "quotient-fields.lisp"
                                           "multipole.lisp" "matrix.lisp"
                                           "general.lisp" "funct-spaces.lisp"
                                           "functions.lisp" "direct-sums.lisp"
                                           "algebraic-extension.lisp"))
(setf (callers-list 'TIMES :file) '("vector-spaces/quaternions.lisp"
                                    "polynomials/upolynomial.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "polynomials/epolynomial.lisp"
                                    "numbers/numbers.lisp" "numbers/gfp.lisp"
                                    "classes/algebraic-domains.lisp"
                                    "tpower.lisp" "topology.lisp"
                                    "rational-functions.lisp"
                                    "quotient-fields.lisp" "morphisms.lisp"
                                    "matrix.lisp" "lisp-numbers.lisp"
                                    "general.lisp" "funct-spaces.lisp"
                                    "functions.lisp" "direct-sums.lisp"
                                    "algebraic-extension.lisp"))
(setf (callers-list '(X ALGEBRAIC-OBJECT) :file) '("algebraic-extension.lisp"))
(setf (callers-list 'Y :file) '("polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/grobner.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/numbers.lisp" "numbers/gfp.lisp"
                                "numbers/bigfloat.lisp"
                                "classes/algebraic-domains.lisp"
                                "topology.lisp" "matrix.lisp"
                                "lisp-support.lisp" "lisp-numbers.lisp"
                                "general.lisp" "funct-spaces.lisp"
                                "functions.lisp" "fourier.lisp"
                                "domain-support.lisp"
                                "algebraic-extension.lisp"))
(setf (callers-list 'BIND-DOMAIN-CONTEXT :file) '("polynomials/upolynomial.lisp"
                                                  "polynomials/sparsegcd.lisp"
                                                  "polynomials/mpolynomial.lisp"
                                                  "polynomials/epolynomial.lisp"
                                                  "numbers/numbers.lisp"
                                                  "numbers/bigfloat.lisp"
                                                  "rational-functions.lisp"
                                                  "differential-domains.lisp"
                                                  "algebraic-extension.lisp"))
(setf (callers-list 'ALG-POLY-TIMES :file) '("algebraic-extension.lisp"))
(setf (callers-list 'X :file) '("polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/grobner.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/numbers.lisp" "numbers/gfp.lisp"
                                "numbers/bigfloat.lisp"
                                "classes/general-classes.lisp"
                                "classes/algebraic-domains.lisp" "tpower.lisp"
                                "topology.lisp" "taylor.lisp"
                                "rational-functions.lisp"
                                "quotient-fields.lisp" "morphisms.lisp"
                                "mesh.lisp" "matrix.lisp" "lisp-support.lisp"
                                "lisp-numbers.lisp" "general.lisp"
                                "funct-spaces.lisp" "functions.lisp"
                                "fourier.lisp" "domain-support.lisp"
                                "direct-sums.lisp" "algebraic-extension.lisp"))
(setf (callers-list 'DEFUN :file) '("vector-spaces/vector.lisp"
                                    "vector-spaces/quaternions.lisp"
                                    "vector-spaces/projective-space.lisp"
                                    "polynomials/upolynomial.lisp"
                                    "polynomials/sparsegcd.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "polynomials/grobner.lisp"
                                    "polynomials/epolynomial.lisp"
                                    "numbers/numbers.lisp" "numbers/gfp.lisp"
                                    "numbers/bigfloat.lisp"
                                    "classes/space-classes.lisp" "tpower.lisp"
                                    "topology.lisp" "taylor.lisp" "sets.lisp"
                                    "rational-functions.lisp"
                                    "quotient-fields.lisp" "packages.lisp"
                                    "new-domains.lisp" "multipole.lisp"
                                    "morphisms.lisp" "mesh.lisp" "matrix.lisp"
                                    "lisp-support.lisp" "lisp-numbers.lisp"
                                    "general.lisp" "funct-spaces.lisp"
                                    "functions.lisp" "domain-support.lisp"
                                    "direct-sums.lisp"
                                    "differential-domains.lisp" "avl.lisp"
                                    "algebraic-extension.lisp"))
(setf (callers-list 'POLY-COEF? :file) '("polynomials/upolynomial.lisp"
                                         "polynomials/sparsegcd.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "polynomials/epolynomial.lisp"
                                         "rational-functions.lisp"
                                         "differential-domains.lisp"
                                         "algebraic-extension.lisp"))
(setf (callers-list 'IF :file) '("vector-spaces/vector.lisp"
                                 "vector-spaces/quaternions.lisp"
                                 "polynomials/upolynomial.lisp"
                                 "polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "polynomials/grobner.lisp"
                                 "polynomials/epolynomial.lisp"
                                 "numbers/numbers.lisp" "numbers/gfp.lisp"
                                 "numbers/bigfloat.lisp"
                                 "classes/algebraic-domains.lisp" "tpower.lisp"
                                 "topology.lisp" "taylor.lisp" "sets.lisp"
                                 "rational-functions.lisp"
                                 "quotient-fields.lisp" "new-domains.lisp"
                                 "multipole.lisp" "morphisms.lisp" "mesh.lisp"
                                 "matrix.lisp" "lisp-support.lisp"
                                 "lisp-numbers.lisp" "general.lisp"
                                 "funct-spaces.lisp" "functions.lisp"
                                 "domain-support.lisp" "direct-sums.lisp"
                                 "differential-domains.lisp" "avl.lisp"
                                 "algebraic-extension.lisp"))
(setf (callers-list '* :file) '("vector-spaces/vector.lisp"
                                "vector-spaces/quaternions.lisp"
                                "polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/grobner.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/numbers.lisp" "numbers/gfp.lisp"
                                "numbers/bigfloat.lisp" "tpower.lisp"
                                "topology.lisp" "taylor.lisp"
                                "rational-functions.lisp"
                                "quotient-fields.lisp" "multipole.lisp"
                                "mesh.lisp" "matrix.lisp" "lisp-numbers.lisp"
                                "general.lisp" "funct-spaces.lisp"
                                "algebraic-extension.lisp"))
(setf (callers-list 'POLY-SIMP :file) '("polynomials/sparsegcd.lisp"
                                        "polynomials/mpolynomial.lisp"
                                        "algebraic-extension.lisp"))
(setf (callers-list 'TERMS-MON-TIMES :file) '("polynomials/sparsegcd.lisp"
                                              "polynomials/mpolynomial.lisp"
                                              "algebraic-extension.lisp"))
(setf (callers-list 'E0 :file) '("polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "algebraic-extension.lisp"))
(setf (callers-list 'SAME-VARIABLE? :file) '("polynomials/sparsegcd.lisp"
                                             "polynomials/mpolynomial.lisp"
                                             "algebraic-extension.lisp"))
(setf (callers-list 'MIN-POLY :file) '("numbers/gfp.lisp"
                                       "algebraic-extension.lisp"))
(setf (callers-list '*DOMAIN* :file) '("polynomials/upolynomial.lisp"
                                       "numbers/bigfloat.lisp"
                                       "rational-functions.lisp"
                                       "domain-support.lisp"
                                       "differential-domains.lisp"
                                       "algebraic-extension.lisp"))
(setf (callers-list 'TERMS-PSEUDO-REMAINDER :file) '("polynomials/sparsegcd.lisp"
                                                     "polynomials/mpolynomial.lisp"
                                                     "algebraic-extension.lisp"))
(setf (callers-list 'TERMS-TIMES :file) '("polynomials/sparsegcd.lisp"
                                          "polynomials/mpolynomial.lisp"
                                          "algebraic-extension.lisp"))
(setf (callers-list 'MORE-MAIN? :file) '("polynomials/sparsegcd.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "algebraic-extension.lisp"))
(setf (callers-list 'BASE :file) '("polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                   "lisp-numbers.lisp" "general.lisp"
                                   "algebraic-extension.lisp"))
(setf (callers-list '%FUNCALL :file) '("polynomials/upolynomial.lisp"
                                       "polynomials/sparsegcd.lisp"
                                       "polynomials/mpolynomial.lisp"
                                       "polynomials/grobner.lisp"
                                       "polynomials/epolynomial.lisp"
                                       "numbers/gfp.lisp"
                                       "numbers/bigfloat.lisp" "sets.lisp"
                                       "morphisms.lisp" "lisp-numbers.lisp"
                                       "domain-support.lisp"
                                       "differential-domains.lisp" "avl.lisp"
                                       "algebraic-extension.lisp"))
(setf (callers-list 'REPEATED-SQUARING :file) '("polynomials/upolynomial.lisp"
                                                "polynomials/mpolynomial.lisp"
                                                "numbers/gfp.lisp"
                                                "numbers/bigfloat.lisp"
                                                "lisp-numbers.lisp"
                                                "algebraic-extension.lisp"))
(setf (callers-list 'ONE :file) '("vector-spaces/projective-space.lisp"
                                  "polynomials/upolynomial.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "polynomials/poly-tools.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/grobner.lisp"
                                  "polynomials/epolynomial.lisp"
                                  "numbers/numbers.lisp"
                                  "numbers/bigfloat.lisp"
                                  "classes/algebraic-domains.lisp"
                                  "tpower.lisp" "topology.lisp" "taylor.lisp"
                                  "rational-functions.lisp"
                                  "quotient-fields.lisp" "matrix.lisp"
                                  "lisp-numbers.lisp" "direct-sums.lisp"
                                  "differential-domains.lisp"
                                  "algebraic-extension.lisp"))
(setf (callers-list '*COEFFICIENT-DOMAIN* :file) '("polynomials/upolynomial.lisp"
                                                   "polynomials/sparsegcd.lisp"
                                                   "polynomials/mpolynomial.lisp"
                                                   "polynomials/epolynomial.lisp"
                                                   "classes/algebraic-domains.lisp"
                                                   "multipole.lisp"
                                                   "differential-domains.lisp"
                                                   "algebraic-extension.lisp"))
(setf (callers-list 'EXPT :file) '("polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/numbers.lisp" "numbers/gfp.lisp"
                                   "numbers/bigfloat.lisp"
                                   "classes/algebraic-domains.lisp"
                                   "tpower.lisp" "taylor.lisp"
                                   "rational-functions.lisp"
                                   "quotient-fields.lisp" "multipole.lisp"
                                   "morphisms.lisp" "matrix.lisp"
                                   "lisp-numbers.lisp" "general.lisp"
                                   "functions.lisp" "algebraic-extension.lisp"))
(setf (callers-list 'SEQ :file) '("sets.lisp" "lisp-support.lisp" "avl.lisp"))
(setf (callers-list '%GETF :file) '("polynomials/poly-tools.lisp" "sets.lisp"
                                    "general.lisp" "domain-support.lisp"
                                    "avl.lisp"))
(setf (callers-list 'OPTIONS :file) '("tpower.lisp" "mesh.lisp"
                                      "lisp-support.lisp" "avl.lisp"))
(setf (callers-list 'N :file) '("vector-spaces/projective-space.lisp"
                                "polynomials/upolynomial.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/numbers.lisp" "numbers/bigfloat.lisp"
                                "tpower.lisp" "topology.lisp" "multipole.lisp"
                                "mesh.lisp" "matrix.lisp" "lisp-numbers.lisp"
                                "general.lisp" "funct-spaces.lisp"
                                "differential-domains.lisp" "avl.lisp"))
(setf (callers-list 'BODY :file) '("vector-spaces/vector.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/numbers.lisp"
                                   "classes/algebraic-domains.lisp"
                                   "tpower.lisp" "topology.lisp" "taylor.lisp"
                                   "new-domains.lisp" "mesh.lisp" "matrix.lisp"
                                   "lisp-support.lisp" "general.lisp"
                                   "functions.lisp" "domain-support.lisp"
                                   "avl.lisp"))
(setf (callers-list 'NUMBER :file) '("numbers/numbers.lisp" "numbers/gfp.lisp"
                                     "numbers/bigfloat.lisp"
                                     "lisp-numbers.lisp" "avl.lisp"))
(setf (callers-list 'OR :file) '("vector-spaces/vector.lisp"
                                 "polynomials/upolynomial.lisp"
                                 "polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "polynomials/grobner.lisp"
                                 "polynomials/epolynomial.lisp"
                                 "numbers/numbers.lisp" "numbers/bigfloat.lisp"
                                 "classes/algebraic-domains.lisp" "tpower.lisp"
                                 "topology.lisp" "sets.lisp"
                                 "rational-functions.lisp" "new-domains.lisp"
                                 "multipole.lisp" "morphisms.lisp" "mesh.lisp"
                                 "lisp-support.lisp" "lisp-numbers.lisp"
                                 "general.lisp" "funct-spaces.lisp"
                                 "functions.lisp" "domain-support.lisp"
                                 "differential-domains.lisp" "avl.lisp"))
(setf (callers-list 'NULL :file) '("vector-spaces/vector.lisp"
                                   "vector-spaces/quaternions.lisp"
                                   "vector-spaces/projective-space.lisp"
                                   "polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/poly-tools.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/numbers.lisp" "numbers/gfp.lisp"
                                   "numbers/bigfloat.lisp"
                                   "classes/space-classes.lisp" "tpower.lisp"
                                   "topology.lisp" "taylor.lisp" "sets.lisp"
                                   "rational-functions.lisp"
                                   "quotient-fields.lisp" "new-domains.lisp"
                                   "multipole.lisp" "morphisms.lisp"
                                   "mesh.lisp" "matrix.lisp"
                                   "lisp-support.lisp" "lisp-numbers.lisp"
                                   "general.lisp" "funct-spaces.lisp"
                                   "fourier.lisp" "domain-support.lisp"
                                   "direct-sums.lisp"
                                   "differential-domains.lisp" "avl.lisp"))
(setf (callers-list 'INTEGERP :file) '("numbers/numbers.lisp"
                                       "numbers/gfp.lisp"
                                       "numbers/bigfloat.lisp" "tpower.lisp"
                                       "general.lisp" "avl.lisp"))
(setf (callers-list 'LABELS :file) '("vector-spaces/projective-space.lisp"
                                     "polynomials/upolynomial.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "tpower.lisp" "topology.lisp"
                                     "new-domains.lisp" "morphisms.lisp"
                                     "matrix.lisp" "lisp-support.lisp"
                                     "lisp-numbers.lisp" "general.lisp"
                                     "domain-support.lisp" "direct-sums.lisp"
                                     "avl.lisp"))
(setf (callers-list 'VARS :file) '("vector-spaces/vector.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/poly-tools.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "topology.lisp" "taylor.lisp"
                                   "rational-functions.lisp" "matrix.lisp"
                                   "general.lisp" "functions.lisp"
                                   "fourier.lisp" "differential-domains.lisp"
                                   "avl.lisp"))
(setf (callers-list 'SO-FAR :file) '("avl.lisp"))
(setf (callers-list 'ZEROP :file) '("polynomials/upolynomial.lisp"
                                    "polynomials/epolynomial.lisp"
                                    "numbers/numbers.lisp" "numbers/gfp.lisp"
                                    "numbers/bigfloat.lisp" "tpower.lisp"
                                    "lisp-numbers.lisp" "funct-spaces.lisp"
                                    "avl.lisp"))
(setf (callers-list 'FN :file) '("avl.lisp"))
(setf (callers-list 'PICK :file) '("avl.lisp"))
(setf (callers-list 'REST :file) '("polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/numbers.lisp" "numbers/gfp.lisp"
                                   "numbers/bigfloat.lisp"
                                   "classes/space-classes.lisp"
                                   "classes/algebraic-domains.lisp"
                                   "tpower.lisp" "topology.lisp" "sets.lisp"
                                   "new-domains.lisp" "multipole.lisp"
                                   "morphisms.lisp" "mesh.lisp" "matrix.lisp"
                                   "lisp-support.lisp" "lisp-numbers.lisp"
                                   "general.lisp" "domain-support.lisp"
                                   "direct-sums.lisp" "avl.lisp"))
(setf (callers-list '1- :file) '("vector-spaces/vector.lisp"
                                 "vector-spaces/projective-space.lisp"
                                 "polynomials/upolynomial.lisp"
                                 "polynomials/sparsegcd.lisp"
                                 "numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                 "tpower.lisp" "topology.lisp" "mesh.lisp"
                                 "matrix.lisp" "lisp-numbers.lisp"
                                 "funct-spaces.lisp" "direct-sums.lisp"
                                 "avl.lisp"))
(setf (callers-list 'CONS :file) '("vector-spaces/projective-space.lisp"
                                   "polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/numbers.lisp"
                                   "numbers/bigfloat.lisp" "topology.lisp"
                                   "sets.lisp" "new-domains.lisp"
                                   "multipole.lisp" "mesh.lisp" "matrix.lisp"
                                   "lisp-support.lisp" "lisp-numbers.lisp"
                                   "general.lisp" "functions.lisp"
                                   "fourier.lisp" "domain-support.lisp"
                                   "direct-sums.lisp"
                                   "differential-domains.lisp" "avl.lisp"))
(setf (callers-list 'FIRST :file) '("vector-spaces/vector.lisp"
                                    "vector-spaces/quaternions.lisp"
                                    "vector-spaces/projective-space.lisp"
                                    "polynomials/upolynomial.lisp"
                                    "polynomials/sparsegcd.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "polynomials/grobner.lisp"
                                    "polynomials/epolynomial.lisp"
                                    "numbers/numbers.lisp" "numbers/gfp.lisp"
                                    "numbers/bigfloat.lisp"
                                    "classes/space-classes.lisp" "tpower.lisp"
                                    "topology.lisp" "sets.lisp"
                                    "rational-functions.lisp"
                                    "new-domains.lisp" "multipole.lisp"
                                    "morphisms.lisp" "mesh.lisp" "matrix.lisp"
                                    "lisp-support.lisp" "lisp-numbers.lisp"
                                    "general.lisp" "domain-support.lisp"
                                    "direct-sums.lisp"
                                    "differential-domains.lisp" "avl.lisp"))
(setf (callers-list '> :file) '("polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/numbers.lisp" "numbers/gfp.lisp"
                                "numbers/bigfloat.lisp"
                                "classes/algebraic-domains.lisp"
                                "topology.lisp" "taylor.lisp" "sets.lisp"
                                "multipole.lisp" "mesh.lisp" "matrix.lisp"
                                "lisp-numbers.lisp" "general.lisp"
                                "funct-spaces.lisp" "avl.lisp"))
(setf (callers-list 'LENGTH :file) '("vector-spaces/vector.lisp"
                                     "vector-spaces/quaternions.lisp"
                                     "vector-spaces/projective-space.lisp"
                                     "polynomials/upolynomial.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "polynomials/poly-tools.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/grobner.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "numbers/gfp.lisp" "tpower.lisp"
                                     "topology.lisp" "taylor.lisp" "sets.lisp"
                                     "mesh.lisp" "matrix.lisp" "general.lisp"
                                     "funct-spaces.lisp" "functions.lisp"
                                     "direct-sums.lisp" "avl.lisp"))
(setf (callers-list 'WHEN :file) '("vector-spaces/vector.lisp"
                                   "vector-spaces/projective-space.lisp"
                                   "polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/poly-tools.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/numbers.lisp" "numbers/gfp.lisp"
                                   "numbers/bigfloat.lisp"
                                   "classes/space-classes.lisp" "tpower.lisp"
                                   "topology.lisp" "sets.lisp"
                                   "rational-functions.lisp"
                                   "quotient-fields.lisp" "new-domains.lisp"
                                   "multipole.lisp" "morphisms.lisp"
                                   "mesh.lisp" "matrix.lisp"
                                   "lisp-support.lisp" "lisp-numbers.lisp"
                                   "general.lisp" "funct-spaces.lisp"
                                   "functions.lisp" "fourier.lisp"
                                   "domain-support.lisp" "direct-sums.lisp"
                                   "differential-domains.lisp" "avl.lisp"))
(setf (callers-list 'NEW-SO-FAR :file) '("avl.lisp"))
(setf (callers-list 'PICK-NULL :file) '("avl.lisp"))
(setf (callers-list 'LEN :file) '("polynomials/upolynomial.lisp"
                                  "numbers/bigfloat.lisp" "tpower.lisp"
                                  "funct-spaces.lisp" "avl.lisp"))
(setf (callers-list 'MINUSP :file) '("polynomials/upolynomial.lisp"
                                     "numbers/numbers.lisp" "numbers/gfp.lisp"
                                     "numbers/bigfloat.lisp"
                                     "rational-functions.lisp"
                                     "lisp-numbers.lisp" "general.lisp"
                                     "funct-spaces.lisp" "functions.lisp"
                                     "avl.lisp"))
(setf (callers-list '+ :file) '("vector-spaces/vector.lisp"
                                "vector-spaces/quaternions.lisp"
                                "polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/poly-tools.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/grobner.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/numbers.lisp" "numbers/gfp.lisp"
                                "numbers/bigfloat.lisp" "tpower.lisp"
                                "topology.lisp" "taylor.lisp"
                                "rational-functions.lisp"
                                "quotient-fields.lisp" "multipole.lisp"
                                "mesh.lisp" "matrix.lisp" "lisp-numbers.lisp"
                                "general.lisp" "funct-spaces.lisp"
                                "functions.lisp" "avl.lisp"))
(setf (callers-list 'WHILE :file) '("polynomials/upolynomial.lisp"
                                    "polynomials/sparsegcd.lisp"
                                    "polynomials/grobner.lisp"
                                    "numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                    "tpower.lisp" "mesh.lisp" "matrix.lisp"
                                    "general.lisp" "avl.lisp"))
(setf (callers-list 'DO :file) '("vector-spaces/vector.lisp"
                                 "vector-spaces/quaternions.lisp"
                                 "vector-spaces/projective-space.lisp"
                                 "polynomials/upolynomial.lisp"
                                 "polynomials/sparsegcd.lisp"
                                 "polynomials/poly-tools.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "polynomials/grobner.lisp"
                                 "polynomials/epolynomial.lisp"
                                 "numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                 "classes/space-classes.lisp" "tpower.lisp"
                                 "topology.lisp" "taylor.lisp" "sets.lisp"
                                 "rational-functions.lisp" "new-domains.lisp"
                                 "multipole.lisp" "morphisms.lisp" "mesh.lisp"
                                 "matrix.lisp" "lisp-numbers.lisp"
                                 "general.lisp" "funct-spaces.lisp"
                                 "functions.lisp" "fourier.lisp"
                                 "domain-support.lisp" "direct-sums.lisp"
                                 "differential-domains.lisp" "avl.lisp"))
(setf (callers-list 'SEQUENCE :file) '("sets.lisp" "lisp-support.lisp"
                                       "avl.lisp"))
(setf (callers-list 'FUN :file) '("general.lisp" "funct-spaces.lisp"
                                  "functions.lisp" "domain-support.lisp"
                                  "avl.lisp"))
(setf (callers-list 'V :file) '("vector-spaces/vector.lisp"
                                "vector-spaces/quaternions.lisp"
                                "vector-spaces/projective-space.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                "classes/space-classes.lisp" "tpower.lisp"
                                "topology.lisp" "taylor.lisp" "sets.lisp"
                                "mesh.lisp" "matrix.lisp" "lisp-numbers.lisp"
                                "general.lisp" "functions.lisp"
                                "direct-sums.lisp" "differential-domains.lisp"
                                "avl.lisp"))
(setf (callers-list 'REMOVE :file) '("topology.lisp" "mesh.lisp" "matrix.lisp"
                                     "general.lisp" "fourier.lisp" "avl.lisp"))
(setf (callers-list 'MIN :file) '("vector-spaces/vector.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "numbers/bigfloat.lisp" "tpower.lisp"
                                  "multipole.lisp" "mesh.lisp" "matrix.lisp"
                                  "funct-spaces.lisp" "avl.lisp"))
(setf (callers-list 'FUNCALL :file) '("topology.lisp" "new-domains.lisp"
                                      "mesh.lisp" "general.lisp"
                                      "funct-spaces.lisp" "functions.lisp"
                                      "domain-support.lisp" "avl.lisp"))
(setf (callers-list 'I :file) '("vector-spaces/vector.lisp"
                                "vector-spaces/quaternions.lisp"
                                "vector-spaces/projective-space.lisp"
                                "polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/poly-tools.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                "tpower.lisp" "topology.lisp" "taylor.lisp"
                                "sets.lisp" "multipole.lisp" "mesh.lisp"
                                "matrix.lisp" "lisp-numbers.lisp"
                                "general.lisp" "funct-spaces.lisp"
                                "functions.lisp" "direct-sums.lisp"
                                "differential-domains.lisp" "avl.lisp"))
(setf (callers-list 'FIXNUM :file) '("vector-spaces/vector.lisp"
                                     "polynomials/upolynomial.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "tpower.lisp" "topology.lisp" "sets.lisp"
                                     "multipole.lisp" "matrix.lisp" "avl.lisp"))
(setf (callers-list 'UPFROM :file) '("vector-spaces/vector.lisp"
                                     "vector-spaces/quaternions.lisp"
                                     "polynomials/upolynomial.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "polynomials/poly-tools.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "tpower.lisp" "matrix.lisp"
                                     "lisp-numbers.lisp" "funct-spaces.lisp"
                                     "functions.lisp" "avl.lisp"))
(setf (callers-list 'BELOW :file) '("vector-spaces/vector.lisp"
                                    "vector-spaces/quaternions.lisp"
                                    "vector-spaces/projective-space.lisp"
                                    "polynomials/upolynomial.lisp"
                                    "polynomials/sparsegcd.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "polynomials/epolynomial.lisp"
                                    "numbers/gfp.lisp" "tpower.lisp"
                                    "topology.lisp" "taylor.lisp" "sets.lisp"
                                    "multipole.lisp" "mesh.lisp" "matrix.lisp"
                                    "lisp-numbers.lisp" "general.lisp"
                                    "funct-spaces.lisp" "direct-sums.lisp"
                                    "differential-domains.lisp" "avl.lisp"))
(setf (callers-list 'PART-INT :file) '("avl.lisp"))
(setf (callers-list '- :file) '("vector-spaces/vector.lisp"
                                "vector-spaces/quaternions.lisp"
                                "polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/grobner.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/numbers.lisp" "numbers/gfp.lisp"
                                "numbers/bigfloat.lisp" "tpower.lisp"
                                "topology.lisp" "taylor.lisp"
                                "rational-functions.lisp"
                                "quotient-fields.lisp" "multipole.lisp"
                                "mesh.lisp" "matrix.lisp" "lisp-numbers.lisp"
                                "general.lisp" "funct-spaces.lisp"
                                "functions.lisp" "avl.lisp"))
(setf (callers-list 'VALUES :file) '("vector-spaces/vector.lisp"
                                     "vector-spaces/quaternions.lisp"
                                     "vector-spaces/projective-space.lisp"
                                     "polynomials/upolynomial.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "numbers/numbers.lisp" "numbers/gfp.lisp"
                                     "numbers/bigfloat.lisp"
                                     "classes/space-classes.lisp" "tpower.lisp"
                                     "topology.lisp" "sets.lisp"
                                     "rational-functions.lisp" "mesh.lisp"
                                     "matrix.lisp" "lisp-support.lisp"
                                     "lisp-numbers.lisp" "general.lisp"
                                     "funct-spaces.lisp" "functions.lisp"
                                     "domain-support.lisp" "direct-sums.lisp"
                                     "avl.lisp"))
(setf (callers-list 'NUM-PARTS :file) '("avl.lisp"))
(setf (callers-list 'MINIMUM-PART :file) '("avl.lisp"))
(setf (callers-list 'MAXIMUM-PART :file) '("avl.lisp"))
(setf (callers-list 'DISTINCT? :file) '("avl.lisp"))
(setf (callers-list 'PARTS :file) '("avl.lisp"))
(setf (callers-list 'NOT :file) '("vector-spaces/vector.lisp"
                                  "polynomials/upolynomial.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/grobner.lisp"
                                  "polynomials/epolynomial.lisp"
                                  "numbers/numbers.lisp" "numbers/gfp.lisp"
                                  "numbers/bigfloat.lisp" "tpower.lisp"
                                  "topology.lisp" "taylor.lisp"
                                  "rational-functions.lisp"
                                  "quotient-fields.lisp" "multipole.lisp"
                                  "morphisms.lisp" "mesh.lisp" "matrix.lisp"
                                  "lisp-numbers.lisp" "general.lisp"
                                  "functions.lisp" "direct-sums.lisp"
                                  "differential-domains.lisp" "avl.lisp"))
(setf (callers-list 'PLUSP :file) '("polynomials/upolynomial.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/bigfloat.lisp" "taylor.lisp"
                                    "mesh.lisp" "lisp-numbers.lisp" "avl.lisp"))
(setf (callers-list '1+ :file) '("vector-spaces/projective-space.lisp"
                                 "polynomials/upolynomial.lisp"
                                 "polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "polynomials/epolynomial.lisp"
                                 "numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                 "tpower.lisp" "topology.lisp" "matrix.lisp"
                                 "lisp-numbers.lisp" "general.lisp"
                                 "funct-spaces.lisp"
                                 "differential-domains.lisp" "avl.lisp"))
(setf (callers-list 'GETF :file) '("taylor.lisp" "new-domains.lisp"
                                   "lisp-support.lisp" "general.lisp"
                                   "domain-support.lisp" "avl.lisp"))
(setf (callers-list 'KEYWORD :file) '("classes/algebraic-domains.lisp"
                                      "avl.lisp"))
(setf (callers-list 'ON :file) '("polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "polynomials/epolynomial.lisp"
                                 "numbers/bigfloat.lisp"
                                 "classes/space-classes.lisp" "tpower.lisp"
                                 "topology.lisp" "sets.lisp"
                                 "lisp-support.lisp" "lisp-numbers.lisp"
                                 "fourier.lisp" "domain-support.lisp"
                                 "avl.lisp"))
(setf (callers-list 'BY :file) '("polynomials/mpolynomial.lisp" "matrix.lisp"
                                 "fourier.lisp" "domain-support.lisp"
                                 "avl.lisp"))
(setf (callers-list 'CDDR :file) '("polynomials/mpolynomial.lisp"
                                   "fourier.lisp" "avl.lisp"))
(setf (callers-list 'WITH :file) '("vector-spaces/vector.lisp"
                                   "vector-spaces/quaternions.lisp"
                                   "vector-spaces/projective-space.lisp"
                                   "polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/bigfloat.lisp"
                                   "classes/space-classes.lisp" "tpower.lisp"
                                   "topology.lisp" "taylor.lisp" "sets.lisp"
                                   "rational-functions.lisp" "packages.lisp"
                                   "new-domains.lisp" "mesh.lisp" "matrix.lisp"
                                   "lisp-numbers.lisp" "general.lisp"
                                   "direct-sums.lisp" "avl.lisp"))
(setf (callers-list 'BAD-KEYWORDS :file) '("avl.lisp"))
(setf (callers-list 'PUSH :file) '("vector-spaces/vector.lisp"
                                   "polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/bigfloat.lisp" "topology.lisp"
                                   "sets.lisp" "rational-functions.lisp"
                                   "new-domains.lisp" "morphisms.lisp"
                                   "mesh.lisp" "lisp-numbers.lisp"
                                   "general.lisp" "functions.lisp"
                                   "domain-support.lisp" "avl.lisp"))
(setf (callers-list 'FINALLY :file) '("vector-spaces/vector.lisp"
                                      "vector-spaces/quaternions.lisp"
                                      "polynomials/upolynomial.lisp"
                                      "polynomials/sparsegcd.lisp"
                                      "polynomials/mpolynomial.lisp"
                                      "polynomials/grobner.lisp"
                                      "polynomials/epolynomial.lisp"
                                      "numbers/bigfloat.lisp"
                                      "classes/space-classes.lisp"
                                      "tpower.lisp" "topology.lisp"
                                      "taylor.lisp" "sets.lisp"
                                      "new-domains.lisp" "mesh.lisp"
                                      "matrix.lisp" "lisp-numbers.lisp"
                                      "general.lisp" "funct-spaces.lisp"
                                      "functions.lisp" "fourier.lisp"
                                      "direct-sums.lisp"
                                      "differential-domains.lisp" "avl.lisp"))
(setf (callers-list 'NODE :file) '("avl.lisp"))
(setf (callers-list 'COLLECTION-FUN :file) '("avl.lisp"))
(setf (callers-list 'BREADTH-FIRST? :file) '("avl.lisp"))
(setf (callers-list 'DEPTH-FIRST? :file) '("avl.lisp"))
(setf (callers-list 'ROOT :file) '("polynomials/upolynomial.lisp"
                                   "numbers/numbers.lisp" "lisp-numbers.lisp"
                                   "avl.lisp"))
(setf (callers-list 'APPEND :file) '("vector-spaces/vector.lisp"
                                     "polynomials/upolynomial.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "polynomials/poly-tools.lisp"
                                     "polynomials/grobner.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "numbers/numbers.lisp"
                                     "classes/algebraic-domains.lisp"
                                     "tpower.lisp" "topology.lisp"
                                     "taylor.lisp" "new-domains.lisp"
                                     "multipole.lisp" "mesh.lisp" "matrix.lisp"
                                     "lisp-numbers.lisp" "general.lisp"
                                     "domain-support.lisp" "direct-sums.lisp"
                                     "avl.lisp"))
(setf (callers-list 'DEFCLASS :file) '("numbers/gfp.lisp"
                                       "classes/space-classes.lisp"
                                       "classes/general-classes.lisp"
                                       "classes/algebraic-domains.lisp"
                                       "sets.lisp" "new-domains.lisp"
                                       "multipole.lisp" "mesh.lisp"
                                       "funct-spaces.lisp"
                                       "domain-support.lisp" "avl.lisp"))
(setf (callers-list 'TREE :file) '("avl.lisp"))
(setf (callers-list 'AVL-ROOT :file) '("avl.lisp"))
(setf (callers-list 'AVL-SIZE :file) '("avl.lisp"))
(setf (callers-list 'LEFT :file) '("mesh.lisp" "avl.lisp"))
(setf (callers-list 'AVL-LEFT :file) '("avl.lisp"))
(setf (callers-list 'RIGHT :file) '("mesh.lisp" "avl.lisp"))
(setf (callers-list 'AVL-RIGHT :file) '("avl.lisp"))
(setf (callers-list 'FORMAT :file) '("vector-spaces/vector.lisp"
                                     "vector-spaces/quaternions.lisp"
                                     "vector-spaces/projective-space.lisp"
                                     "polynomials/upolynomial.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/grobner.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "numbers/numbers.lisp" "numbers/gfp.lisp"
                                     "classes/space-classes.lisp"
                                     "classes/algebraic-domains.lisp"
                                     "tpower.lisp" "topology.lisp"
                                     "taylor.lisp" "sets.lisp"
                                     "rational-functions.lisp"
                                     "quotient-fields.lisp" "new-domains.lisp"
                                     "multipole.lisp" "morphisms.lisp"
                                     "mesh.lisp" "matrix.lisp" "general.lisp"
                                     "funct-spaces.lisp" "functions.lisp"
                                     "fourier.lisp" "domain-support.lisp"
                                     "direct-sums.lisp"
                                     "differential-domains.lisp" "avl.lisp"))
(setf (callers-list 'STREAM :file) '("vector-spaces/vector.lisp"
                                     "vector-spaces/quaternions.lisp"
                                     "vector-spaces/projective-space.lisp"
                                     "polynomials/upolynomial.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/grobner.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "numbers/numbers.lisp" "numbers/gfp.lisp"
                                     "numbers/bigfloat.lisp"
                                     "classes/space-classes.lisp"
                                     "classes/algebraic-domains.lisp"
                                     "tpower.lisp" "topology.lisp" "sets.lisp"
                                     "rational-functions.lisp"
                                     "quotient-fields.lisp" "new-domains.lisp"
                                     "multipole.lisp" "morphisms.lisp"
                                     "mesh.lisp" "matrix.lisp" "general.lisp"
                                     "funct-spaces.lisp" "functions.lisp"
                                     "fourier.lisp" "domain-support.lisp"
                                     "direct-sums.lisp"
                                     "differential-domains.lisp" "avl.lisp"))
(setf (callers-list 'AVL-BALANCE :file) '("avl.lisp"))
(setf (callers-list 'ELEMENT-KEY :file) '("sets.lisp" "avl.lisp"))
(setf (callers-list 'BALANCE :file) '("avl.lisp"))
(setf (callers-list 'ARGS :file) '("vector-spaces/projective-space.lisp"
                                   "polynomials/upolynomial.lisp"
                                   "numbers/numbers.lisp" "topology.lisp"
                                   "sets.lisp" "new-domains.lisp" "mesh.lisp"
                                   "matrix.lisp" "lisp-support.lisp"
                                   "general.lisp" "functions.lisp"
                                   "domain-support.lisp" "avl.lisp"))
(setf (callers-list 'AVL-HEIGHT :file) '("avl.lisp"))
(setf (callers-list 'HL :file) '("mesh.lisp" "avl.lisp"))
(setf (callers-list 'HR :file) '("avl.lisp"))
(setf (callers-list 'ABS :file) '("polynomials/mpolynomial.lisp"
                                  "numbers/numbers.lisp"
                                  "numbers/bigfloat.lisp" "multipole.lisp"
                                  "mesh.lisp" "matrix.lisp" "lisp-numbers.lisp"
                                  "funct-spaces.lisp" "functions.lisp"
                                  "avl.lisp"))
(setf (callers-list 'MAX :file) '("vector-spaces/vector.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "polynomials/poly-tools.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/epolynomial.lisp"
                                  "numbers/numbers.lisp"
                                  "numbers/bigfloat.lisp" "tpower.lisp"
                                  "topology.lisp" "quotient-fields.lisp"
                                  "multipole.lisp" "mesh.lisp" "matrix.lisp"
                                  "funct-spaces.lisp" "avl.lisp"))
(setf (callers-list 'FIND-LEFT-MOST :file) '("avl.lisp"))
(setf (callers-list 'MAP-OVER :file) '("avl.lisp"))
(setf (callers-list 'STACK :file) '("mesh.lisp" "avl.lisp"))
(setf (callers-list 'MACROLET :file) '("polynomials/epolynomial.lisp"
                                       "avl.lisp"))
(setf (callers-list 'STATE :file) '("avl.lisp"))
(setf (callers-list 'CURRENT-STATE :file) '("avl.lisp"))
(setf (callers-list 'CURRENT-NODE :file) '("avl.lisp"))
(setf (callers-list 'SET-CURRENT-STATE :file) '("avl.lisp"))
(setf (callers-list 'NEW-NODE :file) '("avl.lisp"))
(setf (callers-list 'SCAN :file) '("avl.lisp"))
(setf (callers-list 'POP :file) '("polynomials/grobner.lisp" "sets.lisp"
                                  "mesh.lisp" "matrix.lisp" "lisp-numbers.lisp"
                                  "general.lisp" "avl.lisp"))
(setf (callers-list 'PROG1 :file) '("differential-domains.lisp" "avl.lisp"))
(setf (callers-list 'FIND-RIGHT-MOST :file) '("avl.lisp"))
(setf (callers-list 'KEY :file) '("sets.lisp" "new-domains.lisp" "mesh.lisp"
                                  "general.lisp" "domain-support.lisp"
                                  "avl.lisp"))
(setf (callers-list 'TREE-OR-NODE :file) '("avl.lisp"))
(setf (callers-list 'AVL-NEXT :file) '("avl.lisp"))
(setf (callers-list 'NEXT-LOOP :file) '("lisp-support.lisp" "avl.lisp"))
(setf (callers-list 'AVL-PREVIOUS :file) '("avl.lisp"))
(setf (callers-list 'HEIGHT-CHANGE :file) '("avl.lisp"))
(setf (callers-list 'R :file) '("polynomials/upolynomial.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/numbers.lisp" "numbers/bigfloat.lisp"
                                "rational-functions.lisp"
                                "quotient-fields.lisp" "matrix.lisp"
                                "lisp-numbers.lisp" "avl.lisp"))
(setf (callers-list 'UPDATE-NODE :file) '("avl.lisp"))
(setf (callers-list 'LR :file) '("avl.lisp"))
(setf (callers-list 'L :file) '("polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "numbers/bigfloat.lisp" "sets.lisp"
                                "multipole.lisp" "matrix.lisp" "avl.lisp"))
(setf (callers-list 'RL :file) '("avl.lisp"))
(setf (callers-list 'ITEM :file) '("sets.lisp" "mesh.lisp" "lisp-support.lisp"
                                   "avl.lisp"))
(setf (callers-list '%APPLY :file) '("vector-spaces/vector.lisp"
                                     "vector-spaces/quaternions.lisp"
                                     "vector-spaces/projective-space.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "numbers/gfp.lisp" "topology.lisp"
                                     "sets.lisp" "matrix.lisp" "general.lisp"
                                     "direct-sums.lisp" "avl.lisp"))
(setf (callers-list 'MAKE-ELEMENT :file) '("vector-spaces/vector.lisp"
                                           "vector-spaces/quaternions.lisp"
                                           "vector-spaces/projective-space.lisp"
                                           "polynomials/mpolynomial.lisp"
                                           "numbers/numbers.lisp"
                                           "numbers/gfp.lisp" "taylor.lisp"
                                           "sets.lisp" "quotient-fields.lisp"
                                           "morphisms.lisp" "mesh.lisp"
                                           "matrix.lisp" "general.lisp"
                                           "functions.lisp" "fourier.lisp"
                                           "avl.lisp"))
(setf (callers-list 'MULTIPLE-VALUE-BIND :file) '("polynomials/upolynomial.lisp"
                                                  "polynomials/sparsegcd.lisp"
                                                  "polynomials/mpolynomial.lisp"
                                                  "numbers/numbers.lisp"
                                                  "numbers/bigfloat.lisp"
                                                  "classes/space-classes.lisp"
                                                  "tpower.lisp" "topology.lisp"
                                                  "taylor.lisp" "mesh.lisp"
                                                  "matrix.lisp" "general.lisp"
                                                  "funct-spaces.lisp"
                                                  "avl.lisp"))
(setf (callers-list 'SUBTREE :file) '("avl.lisp"))
(setf (callers-list 'AVL-INSERT :file) '("avl.lisp"))
(setf (callers-list 'BALANCE-RIGHT :file) '("avl.lisp"))
(setf (callers-list '< :file) '("vector-spaces/vector.lisp"
                                "polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                "classes/space-classes.lisp" "tpower.lisp"
                                "topology.lisp" "multipole.lisp" "mesh.lisp"
                                "matrix.lisp" "lisp-numbers.lisp"
                                "general.lisp" "funct-spaces.lisp"
                                "functions.lisp" "avl.lisp"))
(setf (callers-list 'BALANCE-LEFT :file) '("avl.lisp"))
(setf (callers-list 'TAIL :file) '("avl.lisp"))
(setf (callers-list 'NEW-ROOT :file) '("lisp-numbers.lisp" "avl.lisp"))
(setf (callers-list 'DELETE-HEAD :file) '("avl.lisp"))
(setf (callers-list 'HEAD-VALUE :file) '("avl.lisp"))
(setf (callers-list 'SUBNODE :file) '("avl.lisp"))
(setf (callers-list 'MULTIPLE-VALUE-SETQ :file) '("polynomials/sparsegcd.lisp"
                                                  "numbers/bigfloat.lisp"
                                                  "matrix.lisp"
                                                  "lisp-numbers.lisp"
                                                  "avl.lisp"))
(setf (callers-list 'DELETE-TAIL :file) '("avl.lisp"))
(setf (callers-list 'TAIL-VALUE :file) '("avl.lisp"))
(setf (callers-list 'HEAD-NODE :file) '("avl.lisp"))
(setf (callers-list 'TAIL-NODE :file) '("avl.lisp"))
(setf (callers-list 'PARENT :file) '("avl.lisp"))
(setf (callers-list 'NEW-LEFT :file) '("avl.lisp"))
(setf (callers-list 'ERASE-NODE :file) '("avl.lisp"))
(setf (callers-list 'AVL-DELETE :file) '("avl.lisp"))
(setf (callers-list 'NEW-RIGHT :file) '("avl.lisp"))
(setf (callers-list 'DELETE-RIGHT :file) '("avl.lisp"))
(setf (callers-list 'DELETE-LEFT :file) '("avl.lisp"))
(setf (callers-list 'SEARCH-NODE :file) '("avl.lisp"))
(setf (callers-list 'AVL-NODE :file) '("avl.lisp"))
(setf (callers-list 'AVL-NODE-AS-PAIRS :file) '("avl.lisp"))
(setf (callers-list 'ATOM :file) '("vector-spaces/vector.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "numbers/numbers.lisp"
                                   "numbers/bigfloat.lisp" "tpower.lisp"
                                   "new-domains.lisp" "mesh.lisp" "matrix.lisp"
                                   "general.lisp" "domain-support.lisp"
                                   "differential-domains.lisp"))
(setf (callers-list 'DIFFERENTIAL-RING :file) '("classes/algebraic-domains.lisp"
                                                "differential-domains.lisp"))
(setf (callers-list 'DIFFERENTIAL-POLYNOMIAL-RING :file) '("differential-domains.lisp"))
(setf (callers-list 'VARIABLE-DERIVATION :file) '("differential-domains.lisp"))
(setf (callers-list 'CLASS-NAME :file) '("vector-spaces/vector.lisp"
                                         "vector-spaces/quaternions.lisp"
                                         "vector-spaces/projective-space.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/gfp.lisp"
                                         "numbers/bigfloat.lisp"
                                         "topology.lisp" "sets.lisp"
                                         "matrix.lisp" "funct-spaces.lisp"
                                         "domain-support.lisp"
                                         "differential-domains.lisp"))
(setf (callers-list 'CLASS-OF :file) '("vector-spaces/vector.lisp"
                                       "vector-spaces/quaternions.lisp"
                                       "vector-spaces/projective-space.lisp"
                                       "numbers/numbers.lisp"
                                       "numbers/gfp.lisp"
                                       "numbers/bigfloat.lisp" "topology.lisp"
                                       "sets.lisp" "mesh.lisp" "matrix.lisp"
                                       "general.lisp" "funct-spaces.lisp"
                                       "domain-support.lisp"
                                       "differential-domains.lisp"))
(setf (callers-list 'DISPLAY-LIST :file) '("polynomials/mpolynomial.lisp"
                                           "rational-functions.lisp"
                                           "general.lisp"
                                           "differential-domains.lisp"))
(setf (callers-list 'PRINC :file) '("vector-spaces/vector.lisp"
                                    "polynomials/upolynomial.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "polynomials/epolynomial.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/bigfloat.lisp" "tpower.lisp"
                                    "topology.lisp" "sets.lisp"
                                    "rational-functions.lisp"
                                    "quotient-fields.lisp" "new-domains.lisp"
                                    "matrix.lisp" "general.lisp"
                                    "differential-domains.lisp"))
(setf (callers-list 'MAKE-TERMS :file) '("polynomials/sparsegcd.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "polynomials/epolynomial.lisp"
                                         "differential-domains.lisp"))
(setf (callers-list 'THIRD :file) '("vector-spaces/quaternions.lisp"
                                    "polynomials/grobner.lisp" "mesh.lisp"
                                    "domain-support.lisp"
                                    "differential-domains.lisp"))
(setf (callers-list 'P :file) '("vector-spaces/quaternions.lisp"
                                "polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/grobner.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/gfp.lisp" "tpower.lisp"
                                "rational-functions.lisp" "mesh.lisp"
                                "matrix.lisp" "lisp-numbers.lisp"
                                "funct-spaces.lisp" "differential-domains.lisp"))
(setf (callers-list 'DERIV :file) '("vector-spaces/vector.lisp"
                                    "polynomials/upolynomial.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "classes/algebraic-domains.lisp"
                                    "topology.lisp" "taylor.lisp"
                                    "rational-functions.lisp" "general.lisp"
                                    "functions.lisp"
                                    "differential-domains.lisp"))
(setf (callers-list 'SECOND :file) '("vector-spaces/vector.lisp"
                                     "vector-spaces/quaternions.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/grobner.lisp"
                                     "numbers/numbers.lisp"
                                     "numbers/bigfloat.lisp" "topology.lisp"
                                     "sets.lisp" "rational-functions.lisp"
                                     "morphisms.lisp" "mesh.lisp" "matrix.lisp"
                                     "lisp-numbers.lisp" "general.lisp"
                                     "domain-support.lisp"
                                     "differential-domains.lisp"))
(setf (callers-list 'THEN :file) '("polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/gfp.lisp" "matrix.lisp"
                                   "lisp-numbers.lisp"
                                   "differential-domains.lisp"))
(setf (callers-list 'RETURN :file) '("vector-spaces/vector.lisp"
                                     "vector-spaces/quaternions.lisp"
                                     "polynomials/upolynomial.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "polynomials/poly-tools.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/grobner.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                     "classes/space-classes.lisp" "tpower.lisp"
                                     "topology.lisp" "taylor.lisp" "sets.lisp"
                                     "new-domains.lisp" "mesh.lisp"
                                     "matrix.lisp" "lisp-support.lisp"
                                     "lisp-numbers.lisp" "general.lisp"
                                     "funct-spaces.lisp" "functions.lisp"
                                     "fourier.lisp" "direct-sums.lisp"
                                     "differential-domains.lisp"))
(setf (callers-list 'COERCIBLE? :file) '("vector-spaces/vector.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "polynomials/epolynomial.lisp"
                                         "tpower.lisp" "taylor.lisp"
                                         "rational-functions.lisp"
                                         "quotient-fields.lisp"
                                         "differential-domains.lisp"))
(setf (callers-list 'CALL-NEXT-METHOD :file) '("vector-spaces/vector.lisp"
                                               "polynomials/mpolynomial.lisp"
                                               "polynomials/grobner.lisp"
                                               "polynomials/epolynomial.lisp"
                                               "numbers/numbers.lisp"
                                               "classes/algebraic-domains.lisp"
                                               "tpower.lisp" "topology.lisp"
                                               "rational-functions.lisp"
                                               "quotient-fields.lisp"
                                               "morphisms.lisp" "mesh.lisp"
                                               "general.lisp" "functions.lisp"
                                               "fourier.lisp"
                                               "differential-domains.lisp"))
(setf (callers-list 'DERIVATION :file) '("differential-domains.lisp"))
(setf (callers-list '*GENERAL* :file) '("polynomials/sparsegcd.lisp"
                                        "topology.lisp" "general.lisp"
                                        "fourier.lisp" "domain-support.lisp"
                                        "differential-domains.lisp"))
(setf (callers-list 'ZERO :file) '("vector-spaces/vector.lisp"
                                   "polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/poly-tools.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "numbers/numbers.lisp"
                                   "classes/algebraic-domains.lisp"
                                   "tpower.lisp" "topology.lisp" "taylor.lisp"
                                   "rational-functions.lisp"
                                   "quotient-fields.lisp" "multipole.lisp"
                                   "matrix.lisp" "general.lisp"
                                   "functions.lisp" "direct-sums.lisp"
                                   "differential-domains.lisp"))
(setf (callers-list 'LET* :file) '("vector-spaces/vector.lisp"
                                   "vector-spaces/quaternions.lisp"
                                   "vector-spaces/projective-space.lisp"
                                   "polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/poly-tools.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/numbers.lisp" "numbers/gfp.lisp"
                                   "numbers/bigfloat.lisp" "tpower.lisp"
                                   "topology.lisp" "taylor.lisp"
                                   "rational-functions.lisp" "multipole.lisp"
                                   "mesh.lisp" "matrix.lisp"
                                   "lisp-numbers.lisp" "general.lisp"
                                   "funct-spaces.lisp" "functions.lisp"
                                   "domain-support.lisp"
                                   "differential-domains.lisp"))
(setf (callers-list 'OLD-VAR :file) '("differential-domains.lisp"))
(setf (callers-list 'VARIABLE-SYMBOL :file) '("polynomials/mpolynomial.lisp"
                                              "rational-functions.lisp"
                                              "differential-domains.lisp"))
(setf (callers-list 'NEW-ORDER :file) '("taylor.lisp"
                                        "differential-domains.lisp"))
(setf (callers-list 'GE-VARIABLE? :file) '("general.lisp"
                                           "differential-domains.lisp"))
(setf (callers-list 'NEW-VAR :file) '("functions.lisp"
                                      "differential-domains.lisp"))
(setf (callers-list 'NEW-VAR-NUM :file) '("differential-domains.lisp"))
(setf (callers-list 'ADD-NEW-VARIABLE :file) '("polynomials/mpolynomial.lisp"
                                               "rational-functions.lisp"
                                               "differential-domains.lisp"))
(setf (callers-list 'STANDARD-DERIVATION :file) '("differential-domains.lisp"))
(setf (callers-list 'TEMP :file) '("polynomials/sparsegcd.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp" "taylor.lisp"
                                   "rational-functions.lisp"
                                   "quotient-fields.lisp" "lisp-numbers.lisp"
                                   "general.lisp" "differential-domains.lisp"))
(setf (callers-list 'POLY-PLUS :file) '("polynomials/sparsegcd.lisp"
                                        "polynomials/mpolynomial.lisp"
                                        "polynomials/epolynomial.lisp"
                                        "rational-functions.lisp"
                                        "differential-domains.lisp"))
(setf (callers-list 'POLY-0? :file) '("polynomials/sparsegcd.lisp"
                                      "polynomials/mpolynomial.lisp"
                                      "rational-functions.lisp"
                                      "differential-domains.lisp"))
(setf (callers-list 'POLY-TIMES :file) '("polynomials/sparsegcd.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "rational-functions.lisp"
                                         "differential-domains.lisp"))
(setf (callers-list 'MAKE-POLY-FORM :file) '("polynomials/mpolynomial.lisp"
                                             "differential-domains.lisp"))
(setf (callers-list 'MAP-OVER-EACH-TERM :file) '("polynomials/upolynomial.lisp"
                                                 "polynomials/sparsegcd.lisp"
                                                 "polynomials/mpolynomial.lisp"
                                                 "polynomials/epolynomial.lisp"
                                                 "rational-functions.lisp"
                                                 "differential-domains.lisp"))
(setf (callers-list 'E :file) '("vector-spaces/vector.lisp"
                                "polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/grobner.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/numbers.lisp" "numbers/gfp.lisp"
                                "tpower.lisp" "rational-functions.lisp"
                                "mesh.lisp" "general.lisp"
                                "differential-domains.lisp"))
(setf (callers-list 'E0? :file) '("polynomials/sparsegcd.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/epolynomial.lisp"
                                  "differential-domains.lisp"))
(setf (callers-list 'COLLECT-TERM :file) '("polynomials/mpolynomial.lisp"
                                           "polynomials/epolynomial.lisp"
                                           "topology.lisp"
                                           "differential-domains.lisp"))
(setf (callers-list 'E1- :file) '("polynomials/mpolynomial.lisp"
                                  "differential-domains.lisp"))
(setf (callers-list 'POLY-DIFFERENTIATE-COEFS :file) '("differential-domains.lisp"))
(setf (callers-list 'DC :file) '("polynomials/mpolynomial.lisp"
                                 "differential-domains.lisp"))
(setf (callers-list 'TERMS :file) '("polynomials/sparsegcd.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "polynomials/grobner.lisp"
                                    "polynomials/epolynomial.lisp"
                                    "tpower.lisp" "topology.lisp"
                                    "rational-functions.lisp"
                                    "new-domains.lisp" "general.lisp"
                                    "fourier.lisp" "differential-domains.lisp"))
(setf (callers-list 'SUM :file) '("polynomials/mpolynomial.lisp"
                                  "polynomials/grobner.lisp"
                                  "polynomials/epolynomial.lisp" "tpower.lisp"
                                  "taylor.lisp" "mesh.lisp" "general.lisp"
                                  "funct-spaces.lisp"
                                  "differential-domains.lisp"))
(setf (callers-list 'LE :file) '("polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "polynomials/epolynomial.lisp"
                                 "rational-functions.lisp"
                                 "differential-domains.lisp"))
(setf (callers-list 'POLY-DERIVATION :file) '("differential-domains.lisp"))
(setf (callers-list 'LC :file) '("polynomials/upolynomial.lisp"
                                 "polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "polynomials/epolynomial.lisp"
                                 "rational-functions.lisp"
                                 "differential-domains.lisp"))
(setf (callers-list 'RED :file) '("polynomials/sparsegcd.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/grobner.lisp"
                                  "polynomials/epolynomial.lisp"
                                  "rational-functions.lisp"
                                  "differential-domains.lisp"))
(setf (callers-list 'POLY :file) '("polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/gfp.lisp" "rational-functions.lisp"
                                   "matrix.lisp" "differential-domains.lisp"))
(setf (callers-list 'RAT :file) '("differential-domains.lisp"))
(setf (callers-list 'QF-RING :file) '("classes/algebraic-domains.lisp"
                                      "taylor.lisp" "rational-functions.lisp"
                                      "quotient-fields.lisp"
                                      "differential-domains.lisp"))
(setf (callers-list 'WITH-NUMERATOR-AND-DENOMINATOR :file) '("numbers/numbers.lisp"
                                                             "rational-functions.lisp"
                                                             "quotient-fields.lisp"
                                                             "differential-domains.lisp"))
(setf (callers-list 'RATFUN-REDUCE :file) '("rational-functions.lisp"
                                            "differential-domains.lisp"))
(setf (callers-list 'POLY-DIFFERENCE :file) '("polynomials/mpolynomial.lisp"
                                              "rational-functions.lisp"
                                              "differential-domains.lisp"))
(setf (callers-list 'TUPLE-VALUE :file) '("vector-spaces/vector.lisp"
                                          "vector-spaces/quaternions.lisp"
                                          "vector-spaces/projective-space.lisp"
                                          "polynomials/mpolynomial.lisp"
                                          "topology.lisp" "direct-sums.lisp"))
(setf (callers-list 'PRINT-FUNCTION :file) '("polynomials/grobner.lisp"
                                             "classes/space-classes.lisp"
                                             "classes/algebraic-domains.lisp"
                                             "sets.lisp"
                                             "rational-functions.lisp"
                                             "domain-support.lisp"
                                             "direct-sums.lisp"))
(setf (callers-list 'ARRAY-DIMENSION :file) '("vector-spaces/vector.lisp"
                                              "vector-spaces/quaternions.lisp"
                                              "polynomials/upolynomial.lisp"
                                              "polynomials/sparsegcd.lisp"
                                              "polynomials/mpolynomial.lisp"
                                              "polynomials/epolynomial.lisp"
                                              "tpower.lisp" "topology.lisp"
                                              "taylor.lisp" "sets.lisp"
                                              "matrix.lisp" "funct-spaces.lisp"
                                              "direct-sums.lisp"))
(setf (callers-list 'AREF :file) '("vector-spaces/vector.lisp"
                                   "vector-spaces/quaternions.lisp"
                                   "vector-spaces/projective-space.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/poly-tools.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/bigfloat.lisp" "tpower.lisp"
                                   "topology.lisp" "taylor.lisp" "sets.lisp"
                                   "mesh.lisp" "matrix.lisp"
                                   "lisp-support.lisp" "funct-spaces.lisp"
                                   "direct-sums.lisp"))
(setf (callers-list 'DOMAIN1 :file) '("direct-sums.lisp"))
(setf (callers-list 'DOMAIN2 :file) '("direct-sums.lisp"))
(setf (callers-list 'DOMAIN-NAME :file) '("direct-sums.lisp"))
(setf (callers-list 'CLASSES :file) '("direct-sums.lisp"))
(setf (callers-list 'OTHER-DOMAIN-CLASSES :file) '("direct-sums.lisp"))
(setf (callers-list 'OTHER-ELT-CLASSES :file) '("direct-sums.lisp"))
(setf (callers-list 'DS-DOMAIN :file) '("direct-sums.lisp"))
(setf (callers-list 'INTERN :file) '("vector-spaces/vector.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "classes/algebraic-domains.lisp"
                                     "tpower.lisp" "taylor.lisp"
                                     "packages.lisp" "new-domains.lisp"
                                     "functions.lisp" "domain-support.lisp"
                                     "direct-sums.lisp"))
(setf (callers-list 'DS-DOMAIN-ELT :file) '("direct-sums.lisp"))
(setf (callers-list 'NAME :file) '("polynomials/epolynomial.lisp"
                                   "numbers/bigfloat.lisp" "taylor.lisp"
                                   "new-domains.lisp" "mesh.lisp"
                                   "general.lisp" "functions.lisp"
                                   "domain-support.lisp" "direct-sums.lisp"))
(setf (callers-list 'DOMAINS :file) '("morphisms.lisp" "direct-sums.lisp"))
(setf (callers-list '%MAKE-DIRECT-SUM :file) '("direct-sums.lisp"))
(setf (callers-list 'ITERATE :file) '("lisp-support.lisp" "direct-sums.lisp"))
(setf (callers-list 'Z :file) '("numbers/numbers.lisp" "numbers/gfp.lisp"
                                "numbers/bigfloat.lisp" "direct-sums.lisp"))
(setf (callers-list 'GET-RATIONAL-INTEGERS :file) '("numbers/numbers.lisp"
                                                    "numbers/gfp.lisp"
                                                    "topology.lisp"
                                                    "morphisms.lisp"
                                                    "direct-sums.lisp"))
(setf (callers-list 'MAP-WITH-DOMAIN :file) '("direct-sums.lisp"))
(setf (callers-list 'DOMAIN-ELEMENT-CLASSES :file) '("vector-spaces/vector.lisp"
                                                     "vector-spaces/quaternions.lisp"
                                                     "matrix.lisp"
                                                     "direct-sums.lisp"))
(setf (callers-list 'ADD-DOMAIN :file) '("polynomials/mpolynomial.lisp"
                                         "numbers/gfp.lisp" "tpower.lisp"
                                         "direct-sums.lisp"))
(setf (callers-list 'FALSE :file) '("numbers/gfp.lisp" "direct-sums.lisp"))
(setf (callers-list 'MAKE-DIRECT-SUM* :file) '("direct-sums.lisp"))
(setf (callers-list 'TYPE :file) '("polynomials/sparsegcd.lisp"
                                   "numbers/numbers.lisp" "sets.lisp"
                                   "morphisms.lisp" "mesh.lisp" "general.lisp"
                                   "domain-support.lisp" "direct-sums.lisp"))
(setf (callers-list 'A :file) '("vector-spaces/vector.lisp"
                                "polynomials/upolynomial.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/grobner.lisp"
                                "numbers/numbers.lisp" "numbers/gfp.lisp"
                                "numbers/bigfloat.lisp" "tpower.lisp"
                                "topology.lisp" "taylor.lisp"
                                "rational-functions.lisp" "new-domains.lisp"
                                "mesh.lisp" "matrix.lisp" "lisp-support.lisp"
                                "lisp-numbers.lisp" "general.lisp"
                                "funct-spaces.lisp" "functions.lisp"
                                "domain-support.lisp" "direct-sums.lisp"))
(setf (callers-list 'B :file) '("vector-spaces/vector.lisp"
                                "polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/grobner.lisp"
                                "numbers/numbers.lisp" "numbers/gfp.lisp"
                                "numbers/bigfloat.lisp" "tpower.lisp"
                                "topology.lisp" "rational-functions.lisp"
                                "new-domains.lisp" "mesh.lisp" "matrix.lisp"
                                "lisp-support.lisp" "lisp-numbers.lisp"
                                "general.lisp" "funct-spaces.lisp"
                                "domain-support.lisp" "direct-sums.lisp"))
(setf (callers-list 'FLET :file) '("polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/grobner.lisp"
                                   "numbers/bigfloat.lisp" "topology.lisp"
                                   "sets.lisp" "new-domains.lisp"
                                   "morphisms.lisp" "matrix.lisp"
                                   "lisp-numbers.lisp" "general.lisp"
                                   "funct-spaces.lisp" "direct-sums.lisp"))
(setf (callers-list 'DIMENSION-OF :file) '("vector-spaces/vector.lisp"
                                           "vector-spaces/quaternions.lisp"
                                           "vector-spaces/projective-space.lisp"
                                           "classes/algebraic-domains.lisp"
                                           "topology.lisp" "mesh.lisp"
                                           "matrix.lisp" "direct-sums.lisp"))
(setf (callers-list 'REF :file) '("vector-spaces/vector.lisp"
                                  "vector-spaces/quaternions.lisp"
                                  "vector-spaces/projective-space.lisp"
                                  "taylor.lisp" "sets.lisp" "mesh.lisp"
                                  "matrix.lisp" "direct-sums.lisp"))
(setf (callers-list 'NCONC :file) '("polynomials/poly-tools.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "lisp-support.lisp" "lisp-numbers.lisp"
                                    "direct-sums.lisp"))
(setf (callers-list 'DOMAIN-LIST :file) '("direct-sums.lisp"))
(setf (callers-list 'DOM :file) '("general.lisp" "direct-sums.lisp"))
(setf (callers-list 'DEFINE-DIRECT-SUM :file) '("direct-sums.lisp"))
(setf (callers-list 'SEMIGROUP :file) '("classes/algebraic-domains.lisp"
                                        "direct-sums.lisp"))
(setf (callers-list '(A DIRECT-SUM-SEMIGROUP-ELT) :file) '("direct-sums.lisp"))
(setf (callers-list 'DIRECT-SUM-SEMIGROUP-ELT :file) '("direct-sums.lisp"))
(setf (callers-list 'MONOID :file) '("classes/algebraic-domains.lisp"
                                     "direct-sums.lisp"))
(setf (callers-list 'MAP :file) '("tpower.lisp" "morphisms.lisp" "mesh.lisp"
                                  "lisp-support.lisp" "funct-spaces.lisp"
                                  "direct-sums.lisp"))
(setf (callers-list '0? :file) '("vector-spaces/vector.lisp"
                                 "polynomials/upolynomial.lisp"
                                 "polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "polynomials/grobner.lisp"
                                 "polynomials/epolynomial.lisp"
                                 "numbers/numbers.lisp" "numbers/gfp.lisp"
                                 "numbers/bigfloat.lisp"
                                 "classes/algebraic-domains.lisp" "tpower.lisp"
                                 "topology.lisp" "quotient-fields.lisp"
                                 "mesh.lisp" "matrix.lisp" "general.lisp"
                                 "functions.lisp" "direct-sums.lisp"))
(setf (callers-list 'GROUP :file) '("classes/algebraic-domains.lisp"
                                    "direct-sums.lisp"))
(setf (callers-list 'QUOTIENT :file) '("polynomials/upolynomial.lisp"
                                       "polynomials/mpolynomial.lisp"
                                       "numbers/numbers.lisp"
                                       "numbers/gfp.lisp"
                                       "classes/algebraic-domains.lisp"
                                       "rational-functions.lisp"
                                       "quotient-fields.lisp" "morphisms.lisp"
                                       "general.lisp" "functions.lisp"
                                       "direct-sums.lisp"))
(setf (callers-list '(A DIRECT-SUM-GROUP-ELT) :file) '("direct-sums.lisp"))
(setf (callers-list 'DIRECT-SUM-GROUP-ELT :file) '("direct-sums.lisp"))
(setf (callers-list 'RECIP :file) '("polynomials/mpolynomial.lisp"
                                    "numbers/numbers.lisp" "numbers/gfp.lisp"
                                    "classes/algebraic-domains.lisp"
                                    "taylor.lisp" "rational-functions.lisp"
                                    "quotient-fields.lisp" "multipole.lisp"
                                    "matrix.lisp" "general.lisp"
                                    "functions.lisp" "direct-sums.lisp"))
(setf (callers-list 'ABELIAN-SEMIGROUP :file) '("classes/algebraic-domains.lisp"
                                                "direct-sums.lisp"))
(setf (callers-list 'PLUS :file) '("vector-spaces/vector.lisp"
                                   "polynomials/upolynomial.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/numbers.lisp" "numbers/gfp.lisp"
                                   "classes/algebraic-domains.lisp"
                                   "tpower.lisp" "topology.lisp"
                                   "rational-functions.lisp"
                                   "quotient-fields.lisp" "multipole.lisp"
                                   "morphisms.lisp" "general.lisp"
                                   "funct-spaces.lisp" "functions.lisp"
                                   "direct-sums.lisp"))
(setf (callers-list 'ABELIAN-MONOID :file) '("classes/algebraic-domains.lisp"
                                             "direct-sums.lisp"))
(setf (callers-list '1? :file) '("polynomials/upolynomial.lisp"
                                 "polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "polynomials/grobner.lisp"
                                 "polynomials/epolynomial.lisp"
                                 "numbers/numbers.lisp" "numbers/gfp.lisp"
                                 "classes/algebraic-domains.lisp" "tpower.lisp"
                                 "topology.lisp" "rational-functions.lisp"
                                 "quotient-fields.lisp" "matrix.lisp"
                                 "lisp-numbers.lisp" "general.lisp"
                                 "functions.lisp" "direct-sums.lisp"))
(setf (callers-list 'ABELIAN-GROUP :file) '("classes/algebraic-domains.lisp"
                                            "direct-sums.lisp"))
(setf (callers-list 'DIFFERENCE :file) '("vector-spaces/vector.lisp"
                                         "polynomials/upolynomial.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "polynomials/epolynomial.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/gfp.lisp"
                                         "classes/algebraic-domains.lisp"
                                         "tpower.lisp" "topology.lisp"
                                         "rational-functions.lisp"
                                         "quotient-fields.lisp"
                                         "multipole.lisp" "morphisms.lisp"
                                         "general.lisp" "funct-spaces.lisp"
                                         "functions.lisp" "direct-sums.lisp"))
(setf (callers-list '(A DIRECT-SUM-ABELIAN-GROUP-ELT) :file) '("direct-sums.lisp"))
(setf (callers-list 'DIRECT-SUM-ABELIAN-GROUP-ELT :file) '("direct-sums.lisp"))
(setf (callers-list 'MINUS :file) '("vector-spaces/vector.lisp"
                                    "polynomials/upolynomial.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "polynomials/epolynomial.lisp"
                                    "classes/algebraic-domains.lisp"
                                    "tpower.lisp" "topology.lisp"
                                    "quotient-fields.lisp" "multipole.lisp"
                                    "matrix.lisp" "general.lisp"
                                    "functions.lisp" "direct-sums.lisp"))
(setf (callers-list 'MODULE :file) '("direct-sums.lisp"))
(setf (callers-list 'HAS-COEFFICIENT-DOMAIN :file) '("direct-sums.lisp"))
(setf (callers-list 'ALGEBRA :file) '("direct-sums.lisp"))
(setf (callers-list 'PROPERTY-LIST-OF :file) '("domain-support.lisp"))
(setf (callers-list 'OBJ :file) '("classes/space-classes.lisp"
                                  "classes/algebraic-domains.lisp"
                                  "new-domains.lisp" "funct-spaces.lisp"
                                  "domain-support.lisp"))
(setf (callers-list 'DEFAULT :file) '("sets.lisp" "lisp-support.lisp"
                                      "domain-support.lisp"))
(setf (callers-list 'VALUE :file) '("vector-spaces/vector.lisp"
                                    "vector-spaces/quaternions.lisp"
                                    "vector-spaces/projective-space.lisp"
                                    "polynomials/poly-tools.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "numbers/gfp.lisp" "tpower.lisp"
                                    "topology.lisp" "taylor.lisp" "sets.lisp"
                                    "rational-functions.lisp"
                                    "new-domains.lisp" "matrix.lisp"
                                    "lisp-support.lisp" "lisp-numbers.lisp"
                                    "general.lisp" "domain-support.lisp"))
(setf (callers-list 'OPERATIONS :file) '("domain-support.lisp"))
(setf (callers-list 'OPERATION-LIST :file) '("domain-support.lisp"))
(setf (callers-list '(OPERATION . ARGUMENTS) :file) '("domain-support.lisp"))
(setf (callers-list 'CDDDR :file) '("domain-support.lisp"))
(setf (callers-list 'GETHASH :file) '("topology.lisp" "new-domains.lisp"
                                      "morphisms.lisp" "mesh.lisp"
                                      "general.lisp" "domain-support.lisp"))
(setf (callers-list 'OPERATION :file) '("lisp-support.lisp"
                                        "domain-support.lisp"))
(setf (callers-list 'OPERATION-TABLE :file) '("domain-support.lisp"))
(setf (callers-list 'ARGUMENTS :file) '("new-domains.lisp" "lisp-support.lisp"
                                        "domain-support.lisp"))
(setf (callers-list 'PARSE-OPERATIONS :file) '("domain-support.lisp"))
(setf (callers-list 'OPS :file) '("domain-support.lisp"))
(setf (callers-list 'MAPHASH :file) '("topology.lisp" "new-domains.lisp"
                                      "mesh.lisp" "domain-support.lisp"))
(setf (callers-list 'SUBST :file) '("polynomials/sparsegcd.lisp" "mesh.lisp"
                                    "domain-support.lisp"))
(setf (callers-list 'NO-COMPLAINTS :file) '("domain-support.lisp"))
(setf (callers-list 'ELEMENT-CLASSES :file) '("domain-support.lisp"))
(setf (callers-list 'GET :file) '("numbers/bigfloat.lisp" "domain-support.lisp"))
(setf (callers-list 'DOMAIN-ELEMENT :file) '("classes/algebraic-domains.lisp"
                                             "functions.lisp"
                                             "domain-support.lisp"))
(setf (callers-list 'MAPCAR :file) '("polynomials/upolynomial.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "topology.lisp" "taylor.lisp"
                                     "new-domains.lisp" "mesh.lisp"
                                     "general.lisp" "funct-spaces.lisp"
                                     "functions.lisp" "domain-support.lisp"))
(setf (callers-list 'CANONICALIZE-CLASS :file) '("domain-support.lisp"))
(setf (callers-list 'FRESH-LINE :file) '("domain-support.lisp"))
(setf (callers-list 'SELF :file) '("classes/space-classes.lisp"
                                   "classes/algebraic-domains.lisp" "sets.lisp"
                                   "domain-support.lisp"))
(setf (callers-list 'ARGLIST :file) '("domain-support.lisp"))
(setf (callers-list 'TYPES :file) '("domain-support.lisp"))
(setf (callers-list 'REVERSE :file) '("polynomials/upolynomial.lisp"
                                      "polynomials/sparsegcd.lisp"
                                      "polynomials/mpolynomial.lisp"
                                      "polynomials/epolynomial.lisp"
                                      "numbers/bigfloat.lisp"
                                      "new-domains.lisp" "mesh.lisp"
                                      "functions.lisp" "domain-support.lisp"))
(setf (callers-list 'RECUR :file) '("domain-support.lisp"))
(setf (callers-list 'DEFVAR :file) '("polynomials/mpolynomial.lisp"
                                     "numbers/numbers.lisp" "numbers/gfp.lisp"
                                     "classes/general-classes.lisp"
                                     "classes/algebraic-domains.lisp"
                                     "packages.lisp" "new-domains.lisp"
                                     "multipole.lisp" "morphisms.lisp"
                                     "mesh.lisp" "matrix.lisp"
                                     "lisp-support.lisp" "lisp-numbers.lisp"
                                     "general.lisp" "funct-spaces.lisp"
                                     "domain-support.lisp"))
(setf (callers-list '*DOMAINS* :file) '("morphisms.lisp" "domain-support.lisp"))
(setf (callers-list 'DOMAIN-MORPHISMS-FROM :file) '("morphisms.lisp"
                                                    "domain-support.lisp"))
(setf (callers-list 'DOMAIN-MORPHISMS-TO :file) '("morphisms.lisp"
                                                  "domain-support.lisp"))
(setf (callers-list 'PREDICATE :file) '("new-domains.lisp" "lisp-support.lisp"
                                        "domain-support.lisp"))
(setf (callers-list 'FIND :file) '("polynomials/mpolynomial.lisp"
                                   "rational-functions.lisp" "mesh.lisp"
                                   "domain-support.lisp"))
(setf (callers-list 'CREATOR :file) '("domain-support.lisp"))
(setf (callers-list 'PARSE-ARGS :file) '("domain-support.lisp"))
(setf (callers-list 'INTERNAL-FUN :file) '("domain-support.lisp"))
(setf (callers-list 'TRUE-ARGS :file) '("domain-support.lisp"))
(setf (callers-list 'PLIST :file) '("tpower.lisp" "sets.lisp"
                                    "domain-support.lisp"))
(setf (callers-list 'ELT :file) '("vector-spaces/vector.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/grobner.lisp"
                                  "polynomials/epolynomial.lisp"
                                  "numbers/numbers.lisp" "numbers/gfp.lisp"
                                  "tpower.lisp" "sets.lisp" "morphisms.lisp"
                                  "matrix.lisp" "functions.lisp"
                                  "domain-support.lisp"))
(setf (callers-list 'OP :file) '("polynomials/mpolynomial.lisp"
                                 "new-domains.lisp" "morphisms.lisp"
                                 "general.lisp" "domain-support.lisp"))
(setf (callers-list 'X-SPEC :file) '("domain-support.lisp"))
(setf (callers-list 'Y-SPEC :file) '("domain-support.lisp"))
(setf (callers-list 'ARGUMENT :file) '("morphisms.lisp" "fourier.lisp"))
(setf (callers-list 'SVAR :file) '("fourier.lisp"))
(setf (callers-list 'FVAR :file) '("fourier.lisp"))
(setf (callers-list 'GE-FOURIER :file) '("fourier.lisp"))
(setf (callers-list 'ARGUMENT-OF :file) '("fourier.lisp"))
(setf (callers-list 'EXPR :file) '("general.lisp" "fourier.lisp"))
(setf (callers-list 'SPACE-VAR-OF :file) '("fourier.lisp"))
(setf (callers-list 'FREQ-VAR-OF :file) '("fourier.lisp"))
(setf (callers-list 'GE-GREAT :file) '("general.lisp" "fourier.lisp"))
(setf (callers-list 'EXP :file) '("polynomials/upolynomial.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/grobner.lisp"
                                  "polynomials/epolynomial.lisp"
                                  "numbers/numbers.lisp"
                                  "classes/general-classes.lisp" "tpower.lisp"
                                  "taylor.lisp" "rational-functions.lisp"
                                  "quotient-fields.lisp" "lisp-numbers.lisp"
                                  "general.lisp" "functions.lisp"
                                  "fourier.lisp"))
(setf (callers-list 'MAKE-GE-FOURIER :file) '("fourier.lisp"))
(setf (callers-list 'DEPENDS-ON? :file) '("polynomials/mpolynomial.lisp"
                                          "rational-functions.lisp"
                                          "general.lisp" "fourier.lisp"))
(setf (callers-list 'SIMPLIFY :file) '("quotient-fields.lisp" "general.lisp"
                                       "functions.lisp" "fourier.lisp"))
(setf (callers-list 'MAKE-GE-PLUS :file) '("polynomials/mpolynomial.lisp"
                                           "general.lisp" "fourier.lisp"))
(setf (callers-list 'TERMS-OF :file) '("polynomials/mpolynomial.lisp"
                                       "tpower.lisp" "taylor.lisp"
                                       "general.lisp" "fourier.lisp"))
(setf (callers-list 'DEPEND-TERM :file) '("fourier.lisp"))
(setf (callers-list 'FREE-TERMS :file) '("fourier.lisp"))
(setf (callers-list 'TERM :file) '("polynomials/sparsegcd.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "numbers/bigfloat.lisp" "topology.lisp"
                                   "new-domains.lisp" "general.lisp"
                                   "fourier.lisp"))
(setf (callers-list 'MAKE-GE-TIMES :file) '("polynomials/mpolynomial.lisp"
                                            "quotient-fields.lisp"
                                            "general.lisp" "functions.lisp"
                                            "fourier.lisp"))
(setf (callers-list 'EXPRESSION :file) '("general.lisp" "fourier.lisp"))
(setf (callers-list 'SV :file) '("fourier.lisp"))
(setf (callers-list 'FV :file) '("fourier.lisp"))
(setf (callers-list 'GE-IFOURIER :file) '("fourier.lisp"))
(setf (callers-list 'OLD-VARS :file) '("functions.lisp"))
(setf (callers-list 'NEW-VARS :file) '("functions.lisp"))
(setf (callers-list 'SUBSTITUTE :file) '("vector-spaces/vector.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "topology.lisp" "taylor.lisp"
                                         "rational-functions.lisp"
                                         "matrix.lisp" "lisp-support.lisp"
                                         "general.lisp" "functions.lisp"))
(setf (callers-list 'EXPAND :file) '("general.lisp" "functions.lisp"))
(setf (callers-list 'ARGS-OF :file) '("taylor.lisp" "general.lisp"
                                      "functions.lisp"))
(setf (callers-list 'FUNCT-OF :file) '("taylor.lisp" "general.lisp"
                                       "functions.lisp"))
(setf (callers-list 'APPLICABLE-FUNCTION :file) '("functions.lisp"))
(setf (callers-list 'BOUND-VARS-OF :file) '("general.lisp" "functions.lisp"))
(setf (callers-list 'BODY-OF :file) '("functions.lisp"))
(setf (callers-list 'ACCUM-APPLY-ARGS :file) '("topology.lisp" "general.lisp"
                                               "functions.lisp"))
(setf (callers-list 'NARGS-OF :file) '("new-domains.lisp" "general.lisp"
                                       "functions.lisp"))
(setf (callers-list 'ARG :file) '("taylor.lisp" "new-domains.lisp"
                                  "general.lisp" "functions.lisp"))
(setf (callers-list 'X-BODY :file) '("functions.lisp"))
(setf (callers-list 'Y-BODY :file) '("functions.lisp"))
(setf (callers-list 'X-ARG :file) '("functions.lisp"))
(setf (callers-list 'Y-ARG :file) '("functions.lisp"))
(setf (callers-list 'OPERATOR :file) '("functions.lisp"))
(setf (callers-list 'DEFINE-APPLICABLE-FUNCTION-BINARY :file) '("functions.lisp"))
(setf (callers-list 'MAKE-APP-FUNCTION :file) '("functions.lisp"))
(setf (callers-list '(X APPLICABLE-FUNCTION) :file) '("functions.lisp"))
(setf (callers-list '(X GE-FUNCTION) :file) '("functions.lisp"))
(setf (callers-list 'APPLY :file) '("polynomials/grobner.lisp" "tpower.lisp"
                                    "topology.lisp" "taylor.lisp" "mesh.lisp"
                                    "lisp-support.lisp" "general.lisp"
                                    "functions.lisp"))
(setf (callers-list 'MAKER-NAME :file) '("taylor.lisp" "functions.lisp"))
(setf (callers-list 'PREDICATE-NAME :file) '("classes/algebraic-domains.lisp"
                                             "new-domains.lisp"
                                             "functions.lisp"))
(setf (callers-list 'SIMP-NAME :file) '("functions.lisp"))
(setf (callers-list 'FUN-NAME :file) '("functions.lisp"))
(setf (callers-list 'DEF-GE-1OPER :file) '("functions.lisp"))
(setf (callers-list 'REALPART :file) '("vector-spaces/vector.lisp"
                                       "polynomials/mpolynomial.lisp"
                                       "numbers/numbers.lisp" "morphisms.lisp"
                                       "mesh.lisp" "general.lisp"
                                       "funct-spaces.lisp" "functions.lisp"))
(setf (callers-list 'IMAGPART :file) '("vector-spaces/vector.lisp"
                                       "polynomials/mpolynomial.lisp"
                                       "numbers/numbers.lisp" "morphisms.lisp"
                                       "mesh.lisp" "general.lisp"
                                       "funct-spaces.lisp" "functions.lisp"))
(setf (callers-list 'DEFSIMPLIFY-FUNCT :file) '("functions.lisp"))
(setf (callers-list 'WHOLE :file) '("functions.lisp"))
(setf (callers-list 'DECLARE :file) '("taylor.lisp" "matrix.lisp"
                                      "functions.lisp"))
(setf (callers-list 'GE-ABS? :file) '("functions.lisp"))
(setf (callers-list 'GE-REALPART? :file) '("functions.lisp"))
(setf (callers-list 'GE-IMAGPART? :file) '("functions.lisp"))
(setf (callers-list 'LOG :file) '("numbers/numbers.lisp"
                                  "numbers/bigfloat.lisp" "taylor.lisp"
                                  "functions.lisp"))
(setf (callers-list 'FLOATP :file) '("functions.lisp"))
(setf (callers-list 'GE-EXPT? :file) '("polynomials/mpolynomial.lisp"
                                       "classes/general-classes.lisp"
                                       "tpower.lisp" "general.lisp"
                                       "functions.lisp"))
(setf (callers-list 'EXPONENT-OF :file) '("polynomials/mpolynomial.lisp"
                                          "tpower.lisp" "taylor.lisp"
                                          "rational-functions.lisp"
                                          "general.lisp" "functions.lisp"))
(setf (callers-list 'MAKE-GE-LOG :file) '("functions.lisp"))
(setf (callers-list 'BASE-OF :file) '("polynomials/mpolynomial.lisp"
                                      "tpower.lisp" "taylor.lisp"
                                      "rational-functions.lisp" "general.lisp"
                                      "functions.lisp"))
(setf (callers-list 'DEFDERIV-FUNCT :file) '("functions.lisp"))
(setf (callers-list 'SIN :file) '("vector-spaces/quaternions.lisp"
                                  "numbers/numbers.lisp" "taylor.lisp"
                                  "mesh.lisp" "functions.lisp"))
(setf (callers-list 'NUMBER? :file) '("polynomials/mpolynomial.lisp"
                                      "classes/algebraic-domains.lisp"
                                      "quotient-fields.lisp" "general.lisp"
                                      "functions.lisp"))
(setf (callers-list 'GE-MINUS? :file) '("rational-functions.lisp"
                                        "general.lisp" "functions.lisp"))
(setf (callers-list 'MAKE-GE-SIN :file) '("functions.lisp"))
(setf (callers-list 'COS :file) '("vector-spaces/quaternions.lisp"
                                  "numbers/numbers.lisp" "taylor.lisp"
                                  "mesh.lisp" "functions.lisp"))
(setf (callers-list 'MAKE-GE-COS :file) '("functions.lisp"))
(setf (callers-list 'TAN :file) '("numbers/numbers.lisp" "taylor.lisp"
                                  "functions.lisp"))
(setf (callers-list 'MAKE-GE-TAN :file) '("functions.lisp"))
(setf (callers-list 'ASIN :file) '("numbers/numbers.lisp" "taylor.lisp"
                                   "functions.lisp"))
(setf (callers-list 'MAKE-GE-ASIN :file) '("functions.lisp"))
(setf (callers-list 'ACOS :file) '("numbers/numbers.lisp" "mesh.lisp"
                                   "functions.lisp"))
(setf (callers-list 'SINH :file) '("numbers/numbers.lisp" "taylor.lisp"
                                   "functions.lisp"))
(setf (callers-list 'MAKE-GE-SINH :file) '("functions.lisp"))
(setf (callers-list 'COSH :file) '("numbers/numbers.lisp" "taylor.lisp"
                                   "functions.lisp"))
(setf (callers-list 'MAKE-GE-COSH :file) '("functions.lisp"))
(setf (callers-list 'TANH :file) '("numbers/numbers.lisp" "taylor.lisp"
                                   "functions.lisp"))
(setf (callers-list 'MAKE-GE-TANH :file) '("functions.lisp"))
(setf (callers-list 'ASINH :file) '("numbers/numbers.lisp" "taylor.lisp"
                                    "functions.lisp"))
(setf (callers-list 'MAKE-GE-ASINH :file) '("functions.lisp"))
(setf (callers-list 'ACOSH :file) '("numbers/numbers.lisp" "functions.lisp"))
(setf (callers-list 'FUNCTION-SPACE :file) '("funct-spaces.lisp"))
(setf (callers-list '(DOMAIN DOMAIN) :file) '("multipole.lisp"
                                              "funct-spaces.lisp"))
(setf (callers-list 'RANGE :file) '("polynomials/mpolynomial.lisp"
                                    "multipole.lisp" "morphisms.lisp"
                                    "funct-spaces.lisp"))
(setf (callers-list 'FIELD :file) '("numbers/gfp.lisp"
                                    "classes/algebraic-domains.lisp"
                                    "quotient-fields.lisp" "funct-spaces.lisp"))
(setf (callers-list 'FUNCT-DOMAIN-OF :file) '("classes/space-classes.lisp"
                                              "multipole.lisp"
                                              "funct-spaces.lisp"))
(setf (callers-list 'FUNCT-RANGE-OF :file) '("classes/space-classes.lisp"
                                             "multipole.lisp"
                                             "funct-spaces.lisp"))
(setf (callers-list 'DEF-BINARY-COERCION :file) '("morphisms.lisp"
                                                  "funct-spaces.lisp"))
(setf (callers-list 'INNER-PRODUCT :file) '("vector-spaces/vector.lisp"
                                            "classes/space-classes.lisp"
                                            "funct-spaces.lisp"))
(setf (callers-list 'HILBERT-SPACE :file) '("classes/space-classes.lisp"
                                            "funct-spaces.lisp"))
(setf (callers-list '(DOMAIN DIMENSIONAL-SPACE) :file) '("funct-spaces.lisp"))
(setf (callers-list 'DIMENSIONAL-SPACE :file) '("funct-spaces.lisp"))
(setf (callers-list '*MAXIMUM-NUMBER-OF-CACHED-VECTORS* :file) '("funct-spaces.lisp"))
(setf (callers-list '*CACHED-VECTORS* :file) '("funct-spaces.lisp"))
(setf (callers-list 'VECTOR :file) '("vector-spaces/vector.lisp"
                                     "vector-spaces/quaternions.lisp"
                                     "vector-spaces/projective-space.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "tpower.lisp" "topology.lisp" "sets.lisp"
                                     "mesh.lisp" "funct-spaces.lisp"))
(setf (callers-list 'VECT :file) '("vector-spaces/vector.lisp"
                                   "vector-spaces/projective-space.lisp"
                                   "polynomials/mpolynomial.lisp" "tpower.lisp"
                                   "funct-spaces.lisp"))
(setf (callers-list 'MAKE-ARRAY :file) '("vector-spaces/vector.lisp"
                                         "vector-spaces/quaternions.lisp"
                                         "vector-spaces/projective-space.lisp"
                                         "polynomials/upolynomial.lisp"
                                         "polynomials/sparsegcd.lisp"
                                         "polynomials/poly-tools.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "polynomials/epolynomial.lisp"
                                         "tpower.lisp" "taylor.lisp"
                                         "multipole.lisp" "matrix.lisp"
                                         "lisp-support.lisp"
                                         "funct-spaces.lisp"))
(setf (callers-list 'SVREF :file) '("vector-spaces/vector.lisp"
                                    "polynomials/upolynomial.lisp"
                                    "polynomials/grobner.lisp"
                                    "polynomials/epolynomial.lisp"
                                    "tpower.lisp" "topology.lisp" "taylor.lisp"
                                    "multipole.lisp" "funct-spaces.lisp"))
(setf (callers-list 'EQUAL-VECTOR :file) '("funct-spaces.lisp"))
(setf (callers-list 'ROTATEF :file) '("polynomials/mpolynomial.lisp"
                                      "polynomials/grobner.lisp" "mesh.lisp"
                                      "matrix.lisp" "funct-spaces.lisp"))
(setf (callers-list 'X-COORDS :file) '("funct-spaces.lisp"))
(setf (callers-list 'FUNCTION-X :file) '("funct-spaces.lisp"))
(setf (callers-list 'NPTS :file) '("funct-spaces.lisp"))
(setf (callers-list 'SAMPLED-FUNCTION :file) '("funct-spaces.lisp"))
(setf (callers-list 'CHECK-CACHED-VECTOR :file) '("funct-spaces.lisp"))
(setf (callers-list 'X-ARRAY :file) '("matrix.lisp" "funct-spaces.lisp"))
(setf (callers-list 'FUNC :file) '("funct-spaces.lisp"))
(setf (callers-list 'Y-ARRAY :file) '("matrix.lisp" "funct-spaces.lisp"))
(setf (callers-list 'FUNCTION-Y :file) '("funct-spaces.lisp"))
(setf (callers-list 'X-LIST :file) '("funct-spaces.lisp"))
(setf (callers-list 'NUM-PTS :file) '("funct-spaces.lisp"))
(setf (callers-list 'LISTP :file) '("sets.lisp" "mesh.lisp" "funct-spaces.lisp"))
(setf (callers-list 'FLOAT :file) '("numbers/numbers.lisp"
                                    "numbers/bigfloat.lisp" "mesh.lisp"
                                    "funct-spaces.lisp"))
(setf (callers-list 'MAKE-SAMPLED-FUNCTION :file) '("funct-spaces.lisp"))
(setf (callers-list 'CANONICALIZE-NUMBER :file) '("morphisms.lisp"
                                                  "funct-spaces.lisp"))
(setf (callers-list 'GET-FUNCTION-SPACE :file) '("funct-spaces.lisp"))
(setf (callers-list 'F-X :file) '("funct-spaces.lisp"))
(setf (callers-list 'X0 :file) '("funct-spaces.lisp"))
(setf (callers-list 'STEP :file) '("funct-spaces.lisp"))
(setf (callers-list '/ :file) '("vector-spaces/vector.lisp"
                                "vector-spaces/quaternions.lisp"
                                "vector-spaces/projective-space.lisp"
                                "polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/grobner.lisp"
                                "numbers/numbers.lisp" "numbers/gfp.lisp"
                                "numbers/bigfloat.lisp" "tpower.lisp"
                                "taylor.lisp" "rational-functions.lisp"
                                "quotient-fields.lisp" "multipole.lisp"
                                "mesh.lisp" "matrix.lisp" "lisp-numbers.lisp"
                                "general.lisp" "funct-spaces.lisp"))
(setf (callers-list 'SMOOTH2 :file) '("funct-spaces.lisp"))
(setf (callers-list 'NEW-Y :file) '("funct-spaces.lisp"))
(setf (callers-list 'NEW-X :file) '("general.lisp" "funct-spaces.lisp"))
(setf (callers-list 'XVAL :file) '("funct-spaces.lisp"))
(setf (callers-list 'POLYNOMIAL-INTERPOLATE :file) '("funct-spaces.lisp"))
(setf (callers-list 'PT :file) '("polynomials/sparsegcd.lisp" "mesh.lisp"
                                 "funct-spaces.lisp"))
(setf (callers-list 'X-VECTOR :file) '("funct-spaces.lisp"))
(setf (callers-list 'Y-VECTOR :file) '("funct-spaces.lisp"))
(setf (callers-list 'DIF :file) '("funct-spaces.lisp"))
(setf (callers-list 'NS :file) '("funct-spaces.lisp"))
(setf (callers-list 'VECTOR-LENGTH :file) '("funct-spaces.lisp"))
(setf (callers-list 'OFFSET :file) '("funct-spaces.lisp"))
(setf (callers-list 'DIFT :file) '("funct-spaces.lisp"))
(setf (callers-list 'FLOOR :file) '("numbers/numbers.lisp" "numbers/gfp.lisp"
                                    "numbers/bigfloat.lisp" "matrix.lisp"
                                    "lisp-numbers.lisp" "funct-spaces.lisp"))
(setf (callers-list 'M :file) '("polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/grobner.lisp"
                                "numbers/bigfloat.lisp" "multipole.lisp"
                                "morphisms.lisp" "matrix.lisp"
                                "lisp-numbers.lisp" "funct-spaces.lisp"))
(setf (callers-list '(FUNC1 SAMPLED-FUNCTION) :file) '("funct-spaces.lisp"))
(setf (callers-list 'FUNC2 :file) '("funct-spaces.lisp"))
(setf (callers-list 'FUNC1 :file) '("funct-spaces.lisp"))
(setf (callers-list 'Y1 :file) '("numbers/gfp.lisp" "funct-spaces.lisp"))
(setf (callers-list 'Y2 :file) '("numbers/gfp.lisp" "funct-spaces.lisp"))
(setf (callers-list 'DOTIMES :file) '("multipole.lisp" "lisp-support.lisp"
                                      "funct-spaces.lisp"))
(setf (callers-list 'PROD :file) '("polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp" "tpower.lisp"
                                   "taylor.lisp" "lisp-numbers.lisp"
                                   "funct-spaces.lisp"))
(setf (callers-list 'OPER :file) '("funct-spaces.lisp"))
(setf (callers-list 'NUM :file) '("numbers/numbers.lisp"
                                  "numbers/bigfloat.lisp"
                                  "classes/algebraic-domains.lisp"
                                  "rational-functions.lisp"
                                  "quotient-fields.lisp" "morphisms.lisp"
                                  "general.lisp" "funct-spaces.lisp"))
(setf (callers-list 'CONJUGATE :file) '("vector-spaces/vector.lisp"
                                        "numbers/numbers.lisp"
                                        "classes/algebraic-domains.lisp"
                                        "mesh.lisp" "funct-spaces.lisp"))
(setf (callers-list 'INDEX1 :file) '("funct-spaces.lisp"))
(setf (callers-list 'INDEX2 :file) '("funct-spaces.lisp"))
(setf (callers-list 'Y-PRIME :file) '("funct-spaces.lisp"))
(setf (callers-list 'DERIV-2POINT :file) '("funct-spaces.lisp"))
(setf (callers-list 'I1 :file) '("funct-spaces.lisp"))
(setf (callers-list 'I2 :file) '("funct-spaces.lisp"))
(setf (callers-list 'LOWER :file) '("funct-spaces.lisp"))
(setf (callers-list 'UPPER :file) '("funct-spaces.lisp"))
(setf (callers-list 'INDEF-INTEGRAL :file) '("funct-spaces.lisp"))
(setf (callers-list '>= :file) '("polynomials/upolynomial.lisp"
                                 "numbers/numbers.lisp" "numbers/bigfloat.lisp"
                                 "tpower.lisp" "taylor.lisp" "mesh.lisp"
                                 "matrix.lisp" "funct-spaces.lisp"))
(setf (callers-list '<= :file) '("numbers/numbers.lisp" "mesh.lisp"
                                 "funct-spaces.lisp"))
(setf (callers-list 'TRAPEZOIDAL :file) '("funct-spaces.lisp"))
(setf (callers-list 'I3 :file) '("funct-spaces.lisp"))
(setf (callers-list 'X1 :file) '("funct-spaces.lisp"))
(setf (callers-list 'X2 :file) '("funct-spaces.lisp"))
(setf (callers-list 'X3 :file) '("funct-spaces.lisp"))
(setf (callers-list 'H :file) '("polynomials/mpolynomial.lisp"
                                "polynomials/grobner.lisp"
                                "classes/space-classes.lisp" "morphisms.lisp"
                                "funct-spaces.lisp"))
(setf (callers-list 'K :file) '("polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "numbers/numbers.lisp" "numbers/bigfloat.lisp"
                                "tpower.lisp" "taylor.lisp" "multipole.lisp"
                                "matrix.lisp" "lisp-numbers.lisp"
                                "funct-spaces.lisp"))
(setf (callers-list 'DENOM :file) '("vector-spaces/projective-space.lisp"
                                    "polynomials/sparsegcd.lisp"
                                    "numbers/numbers.lisp"
                                    "classes/algebraic-domains.lisp"
                                    "funct-spaces.lisp"))
(setf (callers-list 'KSQ :file) '("funct-spaces.lisp"))
(setf (callers-list 'HSQ :file) '("funct-spaces.lisp"))
(setf (callers-list 'Y3 :file) '("funct-spaces.lisp"))
(setf (callers-list 'INT-Y :file) '("funct-spaces.lisp"))
(setf (callers-list 'W1 :file) '("funct-spaces.lisp"))
(setf (callers-list 'W2 :file) '("funct-spaces.lisp"))
(setf (callers-list 'SIMPSON :file) '("funct-spaces.lisp"))
(setf (callers-list '(X SAMPLED-FUNCTION) :file) '("funct-spaces.lisp"))
(setf (callers-list 'ABSCISSA :file) '("funct-spaces.lisp"))
(setf (callers-list 'DIM :file) '("vector-spaces/vector.lisp"
                                  "vector-spaces/projective-space.lisp"
                                  "polynomials/grobner.lisp"
                                  "polynomials/epolynomial.lisp"
                                  "topology.lisp" "matrix.lisp"
                                  "funct-spaces.lisp"))
(setf (callers-list 'INTEGRAL :file) '("funct-spaces.lisp"))
(setf (callers-list 'MEMOS :file) '("general.lisp"))
(setf (callers-list 'IGNORE :file) '("polynomials/mpolynomial.lisp" "mesh.lisp"
                                     "general.lisp"))
(setf (callers-list 'EXPRESSION1 :file) '("general.lisp"))
(setf (callers-list 'EXPRESSION2 :file) '("general.lisp"))
(setf (callers-list 'RATIONAL-NUMBER :file) '("numbers/numbers.lisp"
                                              "morphisms.lisp" "general.lisp"))
(setf (callers-list 'RATIONAL-INTEGER :file) '("numbers/numbers.lisp"
                                               "general.lisp"))
(setf (callers-list 'COMPLEX-NUMBER :file) '("numbers/numbers.lisp"
                                             "general.lisp"))
(setf (callers-list 'NUMERATOR :file) '("numbers/numbers.lisp"
                                        "numbers/gfp.lisp" "tpower.lisp"
                                        "taylor.lisp" "rational-functions.lisp"
                                        "quotient-fields.lisp" "morphisms.lisp"
                                        "general.lisp"))
(setf (callers-list 'DENOMINATOR :file) '("numbers/numbers.lisp"
                                          "numbers/gfp.lisp" "tpower.lisp"
                                          "taylor.lisp"
                                          "rational-functions.lisp"
                                          "quotient-fields.lisp"
                                          "morphisms.lisp" "general.lisp"))
(setf (callers-list 'FLOATING-POINT-NUMBER :file) '("numbers/numbers.lisp"
                                                    "morphisms.lisp"
                                                    "general.lisp"))
(setf (callers-list 'INTEGER-VALUE :file) '("polynomials/mpolynomial.lisp"
                                            "numbers/numbers.lisp"
                                            "numbers/gfp.lisp"
                                            "numbers/bigfloat.lisp"
                                            "taylor.lisp"
                                            "rational-functions.lisp"
                                            "quotient-fields.lisp"
                                            "multipole.lisp" "morphisms.lisp"
                                            "matrix.lisp" "general.lisp"))
(setf (callers-list 'QO-NUMERATOR :file) '("numbers/numbers.lisp"
                                           "numbers/bigfloat.lisp"
                                           "rational-functions.lisp"
                                           "quotient-fields.lisp"
                                           "morphisms.lisp" "general.lisp"))
(setf (callers-list 'QO-DENOMINATOR :file) '("numbers/numbers.lisp"
                                             "numbers/bigfloat.lisp"
                                             "rational-functions.lisp"
                                             "quotient-fields.lisp"
                                             "morphisms.lisp" "general.lisp"))
(setf (callers-list 'FP-VALUE :file) '("numbers/numbers.lisp"
                                       "numbers/bigfloat.lisp" "multipole.lisp"
                                       "morphisms.lisp" "general.lisp"))
(setf (callers-list 'MAKE-BIGFLOAT :file) '("numbers/numbers.lisp"
                                            "numbers/bigfloat.lisp"
                                            "morphisms.lisp" "general.lisp"))
(setf (callers-list 'BIGFLOAT-MANTISSA :file) '("numbers/numbers.lisp"
                                                "numbers/bigfloat.lisp"
                                                "morphisms.lisp" "general.lisp"))
(setf (callers-list 'BIGFLOAT-EXPONENT :file) '("numbers/numbers.lisp"
                                                "numbers/bigfloat.lisp"
                                                "morphisms.lisp" "general.lisp"))
(setf (callers-list 'CN-REALPART :file) '("numbers/numbers.lisp"
                                          "multipole.lisp" "morphisms.lisp"
                                          "general.lisp"))
(setf (callers-list 'CN-IMAGPART :file) '("numbers/numbers.lisp"
                                          "multipole.lisp" "morphisms.lisp"
                                          "general.lisp"))
(setf (callers-list 'SYMBOL-OF :file) '("general.lisp"))
(setf (callers-list 'STRING-DOWNCASE :file) '("general.lisp"))
(setf (callers-list 'STRING-OF :file) '("general.lisp"))
(setf (callers-list 'REPARSE-PRINT-STRING :file) '("general.lisp"))
(setf (callers-list 'GE-VARIABLES :file) '("general.lisp"))
(setf (callers-list 'GE-VARIABLE :file) '("general.lisp"))
(setf (callers-list 'MAKE-GE-VARIABLE :file) '("general.lisp"))
(setf (callers-list 'SYM :file) '("packages.lisp" "general.lisp"))
(setf (callers-list 'DEFSUBST :file) '("polynomials/upolynomial.lisp"
                                       "polynomials/mpolynomial.lisp"
                                       "numbers/bigfloat.lisp"
                                       "classes/general-classes.lisp"
                                       "classes/algebraic-domains.lisp"
                                       "rational-functions.lisp" "general.lisp"))
(setf (callers-list 'SUBSCRIPTS :file) '("general.lisp"))
(setf (callers-list 'SYMBOL :file) '("general.lisp"))
(setf (callers-list 'COPY-LIST :file) '("classes/space-classes.lisp"
                                        "topology.lisp" "mesh.lisp"
                                        "general.lisp"))
(setf (callers-list 'CANONICAL-VAR :file) '("general.lisp"))
(setf (callers-list 'ADD-SUBSCRIPTS :file) '("general.lisp"))
(setf (callers-list 'STRING-GREATERP :file) '("general.lisp"))
(setf (callers-list 'W :file) '("mesh.lisp" "matrix.lisp" "lisp-numbers.lisp"
                                "general.lisp"))
(setf (callers-list 'NARGS :file) '("new-domains.lisp" "general.lisp"))
(setf (callers-list 'F :file) '("polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/grobner.lisp" "tpower.lisp"
                                "topology.lisp" "morphisms.lisp" "general.lisp"))
(setf (callers-list 'STRING= :file) '("taylor.lisp" "mesh.lisp" "general.lisp"))
(setf (callers-list 'NAME-OF :file) '("topology.lisp" "taylor.lisp"
                                      "new-domains.lisp" "general.lisp"))
(setf (callers-list 'SEARCH-FOR-FUNCTION :file) '("general.lisp"))
(setf (callers-list 'GE-FUNCTIONS :file) '("general.lisp"))
(setf (callers-list '*GLOBAL-FUNCTIONS* :file) '("classes/general-classes.lisp"
                                                 "general.lisp"))
(setf (callers-list 'GE-FUNCTION :file) '("general.lisp"))
(setf (callers-list 'DERIVS :file) '("general.lisp"))
(setf (callers-list 'FUNCTION-CLASS :file) '("general.lisp"))
(setf (callers-list 'DERIVS-OF :file) '("taylor.lisp" "general.lisp"))
(setf (callers-list 'MINUS? :file) '("polynomials/upolynomial.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "numbers/numbers.lisp"
                                     "numbers/bigfloat.lisp" "tpower.lisp"
                                     "topology.lisp" "quotient-fields.lisp"
                                     "general.lisp"))
(setf (callers-list 'PLUS? :file) '("polynomials/mpolynomial.lisp"
                                    "numbers/numbers.lisp"
                                    "numbers/bigfloat.lisp" "general.lisp"))
(setf (callers-list 'DERIVATIVE :file) '("general.lisp"))
(setf (callers-list 'ADD-FUNCTION-TO-DOMAIN :file) '("general.lisp"))
(setf (callers-list 'SORT :file) '("polynomials/sparsegcd.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/grobner.lisp"
                                   "polynomials/epolynomial.lisp"
                                   "topology.lisp" "mesh.lisp"
                                   "lisp-numbers.lisp" "general.lisp"))
(setf (callers-list 'INTEGRAND :file) '("general.lisp"))
(setf (callers-list 'GE-APPLICATION :file) '("general.lisp"))
(setf (callers-list 'GE-FUNCTION? :file) '("classes/general-classes.lisp"
                                           "general.lisp"))
(setf (callers-list 'FUNCT :file) '("general.lisp"))
(setf (callers-list 'MAKE-FUNCTION :file) '("general.lisp"))
(setf (callers-list 'CHECK-DOMAIN :file) '("general.lisp"))
(setf (callers-list 'Q :file) '("vector-spaces/quaternions.lisp"
                                "polynomials/upolynomial.lisp"
                                "polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "polynomials/epolynomial.lisp"
                                "numbers/numbers.lisp" "numbers/gfp.lisp"
                                "numbers/bigfloat.lisp" "matrix.lisp"
                                "lisp-numbers.lisp" "general.lisp"))
(setf (callers-list 'OBJECTS :file) '("general.lisp"))
(setf (callers-list 'CNT :file) '("vector-spaces/vector.lisp"
                                  "polynomials/poly-tools.lisp" "general.lisp"))
(setf (callers-list '*PRINT-LENGTH* :file) '("general.lisp"))
(setf (callers-list 'PRINT-OBJECT :file) '("vector-spaces/vector.lisp"
                                           "polynomials/upolynomial.lisp"
                                           "tpower.lisp" "sets.lisp"
                                           "matrix.lisp" "general.lisp"))
(setf (callers-list 'DECF :file) '("numbers/bigfloat.lisp" "tpower.lisp"
                                   "mesh.lisp" "matrix.lisp" "general.lisp"))
(setf (callers-list 'WRITE-CHAR :file) '("vector-spaces/vector.lisp"
                                         "numbers/bigfloat.lisp" "general.lisp"))
(setf (callers-list '#\( :file) '("tpower.lisp" "general.lisp"))
(setf (callers-list '#\) :file) '("tpower.lisp" "general.lisp"))
(setf (callers-list 'SIMPLIFIER :file) '("general.lisp"))
(setf (callers-list 'MAKE-GE-FUNCT :file) '("general.lisp"))
(setf (callers-list '*INITIALIZE-CONTEXTS-FUNS* :file) '("general.lisp"))
(setf (callers-list 'GENERAL-EXPRESSIONS :file) '("general.lisp"))
(setf (callers-list 'GE-PLUS :file) '("general.lisp"))
(setf (callers-list 'GE-TIMES :file) '("general.lisp"))
(setf (callers-list 'GE-EXPT :file) '("general.lisp"))
(setf (callers-list 'COERCE-OBJ :file) '("general.lisp"))
(setf (callers-list 'MAKE-GE-EXPT :file) '("polynomials/upolynomial.lisp"
                                           "polynomials/mpolynomial.lisp"
                                           "quotient-fields.lisp"
                                           "general.lisp"))
(setf (callers-list 'PARENTHESIZED-DISPLAY :file) '("general.lisp"))
(setf (callers-list 'RETURN-FROM :file) '("polynomials/grobner.lisp"
                                          "mesh.lisp" "general.lisp"))
(setf (callers-list 'GE-LEQUAL :file) '("polynomials/mpolynomial.lisp"
                                        "general.lisp"))
(setf (callers-list 'OBJECT :file) '("polynomials/mpolynomial.lisp" "sets.lisp"
                                     "quotient-fields.lisp" "general.lisp"))
(setf (callers-list 'REAL? :file) '("polynomials/mpolynomial.lisp"
                                    "general.lisp"))
(setf (callers-list 'GE-TIMES? :file) '("polynomials/mpolynomial.lisp"
                                        "classes/general-classes.lisp"
                                        "tpower.lisp" "general.lisp"))
(setf (callers-list 'LEAD-TERM :file) '("general.lisp"))
(setf (callers-list 'OLD-TERMS :file) '("general.lisp"))
(setf (callers-list 'MERGE-TERMS-IN-SUM :file) '("general.lisp"))
(setf (callers-list 'CONST :file) '("general.lisp"))
(setf (callers-list 'GE-PLUS? :file) '("polynomials/mpolynomial.lisp"
                                       "classes/general-classes.lisp"
                                       "tpower.lisp" "general.lisp"))
(setf (callers-list 'LOOP-OVER-TERMS :file) '("general.lisp"))
(setf (callers-list 'ADD-TERM :file) '("general.lisp"))
(setf (callers-list 'TERM-L :file) '("general.lisp"))
(setf (callers-list 'SIMP-TIMES-TERMS :file) '("polynomials/epolynomial.lisp"
                                               "general.lisp"))
(setf (callers-list 'SAFE-DISPLAY :file) '("general.lisp"))
(setf (callers-list 'SIMP-PLUS-TERMS :file) '("polynomials/epolynomial.lisp"
                                              "general.lisp"))
(setf (callers-list 'GE-LGREAT :file) '("general.lisp"))
(setf (callers-list 'VAR-PROP :file) '("general.lisp"))
(setf (callers-list 'GE-CONTEXT :file) '("general.lisp"))
(setf (callers-list 'DEPENDS :file) '("general.lisp"))
(setf (callers-list 'GET-VARIABLE-PROPERTY :file) '("general.lisp"))
(setf (callers-list 'GE-DERIV :file) '("general.lisp"))
(setf (callers-list 'NTH :file) '("polynomials/sparsegcd.lisp"
                                  "polynomials/epolynomial.lisp"
                                  "numbers/gfp.lisp" "taylor.lisp" "sets.lisp"
                                  "multipole.lisp" "general.lisp"))
(setf (callers-list 'MAKE-FUNCTION-DERIV :file) '("general.lisp"))
(setf (callers-list '(EXP NUMERIC) :file) '("general.lisp"))
(setf (callers-list 'GE-ATOM :file) '("general.lisp"))
(setf (callers-list '(EXP GE-ATOM) :file) '("general.lisp"))
(setf (callers-list '(EXP GE-PLUS) :file) '("general.lisp"))
(setf (callers-list '(EXP GE-TIMES) :file) '("general.lisp"))
(setf (callers-list '(EXP GE-EXPT) :file) '("general.lisp"))
(setf (callers-list 'POWER :file) '("polynomials/upolynomial.lisp"
                                    "general.lisp"))
(setf (callers-list '(EXP GE-APPLICATION) :file) '("general.lisp"))
(setf (callers-list 'DARGS :file) '("general.lisp"))
(setf (callers-list 'ANS :file) '("vector-spaces/vector.lisp"
                                  "vector-spaces/quaternions.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "polynomials/epolynomial.lisp"
                                  "numbers/bigfloat.lisp"
                                  "rational-functions.lisp" "lisp-numbers.lisp"
                                  "general.lisp"))
(setf (callers-list 'DARG :file) '("general.lisp"))
(setf (callers-list 'LHS :file) '("general.lisp"))
(setf (callers-list 'RHS :file) '("general.lisp"))
(setf (callers-list 'GE-EQN= :file) '("general.lisp"))
(setf (callers-list 'LHS-OF :file) '("general.lisp"))
(setf (callers-list 'EQN :file) '("polynomials/sparsegcd.lisp" "general.lisp"))
(setf (callers-list 'RHS-OF :file) '("general.lisp"))
(setf (callers-list 'MAKE-GE-EQN= :file) '("general.lisp"))
(setf (callers-list '(EQN GE-EQN=) :file) '("general.lisp"))
(setf (callers-list 'GE-EQN> :file) '("general.lisp"))
(setf (callers-list 'MAKE-GE-EQN> :file) '("general.lisp"))
(setf (callers-list '(EQN GE-EQN>) :file) '("general.lisp"))
(setf (callers-list 'GE-EQN>= :file) '("general.lisp"))
(setf (callers-list 'MAKE-GE-EQN>= :file) '("general.lisp"))
(setf (callers-list '(EQN GE-EQN>=) :file) '("general.lisp"))
(setf (callers-list 'DEFINE-GE2-STANDARD-METHODS :file) '("general.lisp"))
(setf (callers-list '(X GE-OR-NUMERIC) :file) '("general.lisp"))
(setf (callers-list 'GE-OR-NUMERIC :file) '("general.lisp"))
(setf (callers-list '(EQ1 GE-EQN=) :file) '("general.lisp"))
(setf (callers-list 'EQ2 :file) '("general.lisp"))
(setf (callers-list 'EQ1 :file) '("general.lisp"))
(setf (callers-list '(EXP GE-OR-NUMERIC) :file) '("general.lisp"))
(setf (callers-list '(EXP DOMAIN-ELEMENT) :file) '("general.lisp"))
(setf (callers-list '(X GENERAL-EXPRESSION) :file) '("general.lisp"))
(setf (callers-list 'SET :file) '("sets.lisp" "lisp-support.lisp"
                                  "general.lisp"))
(setf (callers-list 'EXPRESSIONS :file) '("general.lisp"))
(setf (callers-list 'MAKE-UNION :file) '("general.lisp"))
(setf (callers-list 'REST-EXPRS :file) '("general.lisp"))
(setf (callers-list 'BOUND-VARS :file) '("general.lisp"))
(setf (callers-list 'UNIVERSAL-QUANTIFIED-SET :file) '("general.lisp"))
(setf (callers-list 'EXPRS-OF :file) '("general.lisp"))
(setf (callers-list 'DOLIST :file) '("polynomials/upolynomial.lisp"
                                     "general.lisp"))
(setf (callers-list 'EQ :file) '("polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "polynomials/grobner.lisp" "numbers/gfp.lisp"
                                 "topology.lisp" "multipole.lisp" "matrix.lisp"
                                 "lisp-numbers.lisp" "general.lisp"))
(setf (callers-list 'MAKE-UNIVERSAL-QUANTIFIED-SET :file) '("general.lisp"))
(setf (callers-list 'EXPRS :file) '("polynomials/grobner.lisp" "general.lisp"))
(setf (callers-list 'NEW-EXPRS :file) '("general.lisp"))
(setf (callers-list 'MERGE-NEW-BV :file) '("general.lisp"))
(setf (callers-list 'BV :file) '("topology.lisp" "general.lisp"))
(setf (callers-list 'MERGE-BOUND-VARS :file) '("general.lisp"))
(setf (callers-list 'KERNELS :file) '("polynomials/mpolynomial.lisp"
                                      "general.lisp"))
(setf (callers-list 'DIFFERENT-KERNELS :file) '("polynomials/poly-tools.lisp"
                                                "polynomials/mpolynomial.lisp"
                                                "rational-functions.lisp"
                                                "general.lisp"))
(setf (callers-list '%PLUS :file) '("mesh.lisp" "general.lisp"))
(setf (callers-list '%TIMES :file) '("general.lisp"))
(setf (callers-list '*FEM-KLUDGE* :file) '("general.lisp"))
(setf (callers-list 'EXPANDED-TERMS :file) '("general.lisp"))
(setf (callers-list 'EXPAND-PRODUCT1 :file) '("general.lisp"))
(setf (callers-list 'ET :file) '("general.lisp"))
(setf (callers-list 'EXPAND-PLUS :file) '("general.lisp"))
(setf (callers-list 'EXPAND-OTHER :file) '("general.lisp"))
(setf (callers-list 'FORMS :file) '("lisp-support.lisp" "general.lisp"))
(setf (callers-list 'EXPAND-PRODUCT :file) '("general.lisp"))
(setf (callers-list 'COEF :file) '("polynomials/upolynomial.lisp"
                                   "polynomials/sparsegcd.lisp"
                                   "polynomials/mpolynomial.lisp"
                                   "polynomials/epolynomial.lisp" "tpower.lisp"
                                   "topology.lisp" "general.lisp"))
(setf (callers-list 'COMBINATIONS :file) '("polynomials/sparsegcd.lisp"
                                           "multipole.lisp" "general.lisp"))
(setf (callers-list 'EXPAND-BINOMIAL-FORM :file) '("general.lisp"))
(setf (callers-list 'EXPONENT :file) '("polynomials/mpolynomial.lisp"
                                       "numbers/bigfloat.lisp" "taylor.lisp"
                                       "general.lisp"))
(setf (callers-list 'FACT :file) '("polynomials/upolynomial.lisp"
                                   "lisp-numbers.lisp"))
(setf (callers-list 'NUMBER1 :file) '("numbers/numbers.lisp"
                                      "lisp-numbers.lisp"))
(setf (callers-list 'NUMBER2 :file) '("numbers/numbers.lisp"
                                      "lisp-numbers.lisp"))
(setf (callers-list 'N-LEN-QUARTER :file) '("lisp-numbers.lisp"))
(setf (callers-list 'N-HALF :file) '("lisp-numbers.lisp"))
(setf (callers-list 'N-HALF-ISQRT :file) '("lisp-numbers.lisp"))
(setf (callers-list 'INIT-VALUE :file) '("lisp-numbers.lisp"))
(setf (callers-list 'ITERATED-VALUE :file) '("lisp-numbers.lisp"))
(setf (callers-list 'ASH :file) '("numbers/numbers.lisp" "numbers/gfp.lisp"
                                  "numbers/bigfloat.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'INTEGER-LENGTH :file) '("numbers/bigfloat.lisp"
                                             "lisp-numbers.lisp"))
(setf (callers-list 'FASTER-ISQRT :file) '("numbers/numbers.lisp"
                                           "lisp-numbers.lisp"))
(setf (callers-list 'LOGBITP :file) '("lisp-numbers.lisp"))
(setf (callers-list 'N-1 :file) '("lisp-numbers.lisp"))
(setf (callers-list 'TRUNCATE :file) '("polynomials/sparsegcd.lisp"
                                       "polynomials/mpolynomial.lisp"
                                       "numbers/numbers.lisp"
                                       "numbers/gfp.lisp"
                                       "numbers/bigfloat.lisp"
                                       "lisp-numbers.lisp"))
(setf (callers-list 'ROOT^N-1 :file) '("lisp-numbers.lisp"))
(setf (callers-list 'ROUND :file) '("numbers/numbers.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'ODDP :file) '("numbers/numbers.lisp" "taylor.lisp"
                                   "lisp-numbers.lisp"))
(setf (callers-list 'INTEGER-NTH-ROOT :file) '("polynomials/sparsegcd.lisp"
                                               "numbers/numbers.lisp"
                                               "lisp-numbers.lisp"))
(setf (callers-list '*POINTBOUND* :file) '("lisp-numbers.lisp"))
(setf (callers-list '*BIG-PRIMES* :file) '("lisp-numbers.lisp"))
(setf (callers-list 'MODULUS :file) '("numbers/gfp.lisp"
                                      "numbers/bigfloat.lisp" "matrix.lisp"
                                      "lisp-numbers.lisp"))
(setf (callers-list 'REM :file) '("polynomials/upolynomial.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "numbers/numbers.lisp"
                                  "numbers/bigfloat.lisp" "tpower.lisp"
                                  "matrix.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'REDUCE-MODULO-INTEGER :file) '("numbers/gfp.lisp"
                                                    "matrix.lisp"
                                                    "lisp-numbers.lisp"))
(setf (callers-list 'EXPT-MODULO-INTEGER :file) '("numbers/gfp.lisp"
                                                  "lisp-numbers.lisp"))
(setf (callers-list 'CDR :file) '("polynomials/upolynomial.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                  "tpower.lisp" "topology.lisp"
                                  "lisp-numbers.lisp"))
(setf (callers-list 'FACTOR :file) '("polynomials/upolynomial.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "numbers/gfp.lisp" "tpower.lisp"
                                     "lisp-numbers.lisp"))
(setf (callers-list 'CDAR :file) '("numbers/gfp.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'EVENP :file) '("numbers/numbers.lisp" "taylor.lisp"
                                    "lisp-numbers.lisp"))
(setf (callers-list 'PP :file) '("vector-spaces/quaternions.lisp"
                                 "polynomials/upolynomial.lisp"
                                 "polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "lisp-numbers.lisp"))
(setf (callers-list 'UNTIL :file) '("polynomials/upolynomial.lisp"
                                    "tpower.lisp" "taylor.lisp" "mesh.lisp"
                                    "lisp-numbers.lisp"))
(setf (callers-list 'PRIME? :file) '("numbers/gfp.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'PL :file) '("lisp-numbers.lisp"))
(setf (callers-list 'FIND-SMALLER-PRIME :file) '("lisp-numbers.lisp"))
(setf (callers-list 'CAR :file) '("polynomials/upolynomial.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "polynomials/mpolynomial.lisp"
                                  "numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                  "tpower.lisp" "topology.lisp" "taylor.lisp"
                                  "new-domains.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'LIMIT :file) '("vector-spaces/vector.lisp"
                                    "lisp-numbers.lisp"))
(setf (callers-list 'PRIME-LIST :file) '("lisp-numbers.lisp"))
(setf (callers-list 'MOST-POSITIVE-FIXNUM :file) '("numbers/numbers.lisp"
                                                   "lisp-numbers.lisp"))
(setf (callers-list 'CHOICE-PRIMES :file) '("polynomials/sparsegcd.lisp"
                                            "matrix.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'CEILING :file) '("numbers/numbers.lisp"
                                      "numbers/bigfloat.lisp" "taylor.lisp"
                                      "lisp-numbers.lisp"))
(setf (callers-list 'NEWPRIME :file) '("polynomials/sparsegcd.lisp"
                                       "lisp-numbers.lisp"))
(setf (callers-list 'MOD :file) '("numbers/numbers.lisp" "matrix.lisp"
                                  "lisp-numbers.lisp"))
(setf (callers-list 'MULT :file) '("matrix.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'OPT-NUMBER :file) '("lisp-numbers.lisp"))
(setf (callers-list 'TEST :file) '("mesh.lisp" "lisp-numbers.lisp"))
(setf (callers-list '*FACTOR-METHOD* :file) '("lisp-numbers.lisp"))
(setf (callers-list 'DIVISOR :file) '("lisp-numbers.lisp"))
(setf (callers-list 'PAIRS :file) '("polynomials/mpolynomial.lisp"
                                    "topology.lisp" "mesh.lisp"
                                    "lisp-numbers.lisp"))
(setf (callers-list 'ELSE :file) '("polynomials/grobner.lisp" "taylor.lisp"
                                   "mesh.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'INCF :file) '("vector-spaces/vector.lisp"
                                   "numbers/bigfloat.lisp"
                                   "classes/space-classes.lisp" "tpower.lisp"
                                   "mesh.lisp" "matrix.lisp"
                                   "lisp-numbers.lisp"))
(setf (callers-list 'FACTORS :file) '("polynomials/upolynomial.lisp"
                                      "polynomials/epolynomial.lisp"
                                      "numbers/gfp.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'COUNT-MULTIPLE-INTEGER-FACTORS :file) '("lisp-numbers.lisp"))
(setf (callers-list 'UNIFORMIZE-FACTOR-LIST :file) '("lisp-numbers.lisp"))
(setf (callers-list 'DIVISORS :file) '("lisp-numbers.lisp"))
(setf (callers-list 'PRIME :file) '("lisp-numbers.lisp"))
(setf (callers-list 'FROM :file) '("polynomials/sparsegcd.lisp" "tpower.lisp"
                                   "taylor.lisp" "matrix.lisp"
                                   "lisp-numbers.lisp"))
(setf (callers-list 'TO :file) '("polynomials/sparsegcd.lisp" "tpower.lisp"
                                 "taylor.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'APPENDING :file) '("lisp-numbers.lisp"))
(setf (callers-list 'INTO :file) '("topology.lisp" "mesh.lisp" "matrix.lisp"
                                   "lisp-numbers.lisp"))
(setf (callers-list '*SKIP-CHAIN-FOR-3-AND-5* :file) '("lisp-numbers.lisp"))
(setf (callers-list 'CIRCULAR-LIST :file) '("lisp-numbers.lisp"))
(setf (callers-list 'INCREMENTS :file) '("lisp-numbers.lisp"))
(setf (callers-list 'ISQRT :file) '("lisp-numbers.lisp"))
(setf (callers-list 'SIMPLE-INTEGER-FACTOR-INTERNAL :file) '("lisp-numbers.lisp"))
(setf (callers-list 'U :file) '("polynomials/sparsegcd.lisp"
                                "polynomials/mpolynomial.lisp"
                                "numbers/bigfloat.lisp" "matrix.lisp"
                                "lisp-numbers.lisp"))
(setf (callers-list 'TOTIENT :file) '("numbers/gfp.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'CAAR :file) '("numbers/gfp.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'ATAN :file) '("numbers/numbers.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'NUMBERP :file) '("vector-spaces/vector.lisp"
                                      "numbers/numbers.lisp" "mesh.lisp"
                                      "matrix.lisp" "lisp-numbers.lisp"))
(setf (callers-list 'WEYLI:*POSITIVE-INFINITY* :file) '("lisp-support.lisp"))
(setf (callers-list 'MOST-POSITIVE-DOUBLE-FLOAT :file) '("lisp-support.lisp"))
(setf (callers-list 'WEYLI:*NEGATIVE-INFINITY* :file) '("lisp-support.lisp"))
(setf (callers-list 'MOST-NEGATIVE-DOUBLE-FLOAT :file) '("lisp-support.lisp"))
(setf (callers-list 'CLASS :file) '("mesh.lisp" "lisp-support.lisp"))
(setf (callers-list 'SUPER-CLASS :file) '("lisp-support.lisp"))
(setf (callers-list 'SYMBOLP :file) '("polynomials/sparsegcd.lisp"
                                      "polynomials/epolynomial.lisp"
                                      "lisp-support.lisp"))
(setf (callers-list 'FIND-CLASS :file) '("sets.lisp" "lisp-support.lisp"))
(setf (callers-list 'SEARCH-LIST :file) '("lisp-support.lisp"))
(setf (callers-list 'SB-MOP:CLASS-DIRECT-SUPERCLASSES :file) '("lisp-support.lisp"))
(setf (callers-list 'WEYLI::ACCUM-APPLY-ARGS :file) '("lisp-support.lisp"))
(setf (callers-list 'WEYLI::APPLY :file) '("lisp-support.lisp"))
(setf (callers-list 'PLACE :file) '("mesh.lisp" "lisp-support.lisp"))
(setf (callers-list 'INDICATOR :file) '("lisp-support.lisp"))
(setf (callers-list 'DELETE :file) '("sets.lisp" "new-domains.lisp"
                                     "morphisms.lisp" "mesh.lisp"
                                     "lisp-support.lisp"))
(setf (callers-list 'REPLACE :file) '("lisp-support.lisp"))
(setf (callers-list 'NEWITEM :file) '("lisp-support.lisp"))
(setf (callers-list 'OLDITEM :file) '("lisp-support.lisp"))
(setf (callers-list 'RESULT-TYPE :file) '("lisp-support.lisp"))
(setf (callers-list 'SEQUENCES :file) '("sets.lisp" "lisp-support.lisp"))
(setf (callers-list 'REDUCE :file) '("tpower.lisp" "lisp-support.lisp"))
(setf (callers-list 'ARG1 :file) '("lisp-support.lisp"))
(setf (callers-list 'ARG2 :file) '("lisp-support.lisp"))
(setf (callers-list 'UNION :file) '("polynomials/sparsegcd.lisp"
                                    "lisp-support.lisp"))
(setf (callers-list 'INTERSECTION :file) '("polynomials/mpolynomial.lisp"
                                           "mesh.lisp" "lisp-support.lisp"))
(setf (callers-list 'LAMBDA-LIST :file) '("lisp-support.lisp"))
(setf (callers-list 'FROM-ARRAY :file) '("lisp-support.lisp"))
(setf (callers-list 'TO-ARRAY :file) '("lisp-support.lisp"))
(setf (callers-list 'ARRAY-DIMENSIONS :file) '("matrix.lisp"
                                               "lisp-support.lisp"))
(setf (callers-list 'FROM-FLAT :file) '("lisp-support.lisp"))
(setf (callers-list 'ARRAY-TOTAL-SIZE :file) '("lisp-support.lisp"))
(setf (callers-list 'ARRAY-ELEMENT-TYPE :file) '("lisp-support.lisp"))
(setf (callers-list 'TO-FLAT :file) '("lisp-support.lisp"))
(setf (callers-list 'INDEX :file) '("vector-spaces/vector.lisp"
                                    "polynomials/poly-tools.lisp"
                                    "lisp-support.lisp"))
(setf (callers-list 'WEYLI::DEFSUBST :file) '("lisp-support.lisp"))
(setf (callers-list 'TYPE-OF :file) '("numbers/numbers.lisp"
                                      "lisp-support.lisp"))
(setf (callers-list 'ASSOCIATE-PREDICATE :file) '("lisp-support.lisp"))
(setf (callers-list 'RESULT :file) '("polynomials/mpolynomial.lisp"
                                     "numbers/gfp.lisp" "taylor.lisp"
                                     "multipole.lisp" "lisp-support.lisp"))
(setf (callers-list 'ASSOCIATE-OPERATION :file) '("lisp-support.lisp"))
(setf (callers-list 'VALS :file) '("polynomials/sparsegcd.lisp" "matrix.lisp"
                                   "lisp-support.lisp"))
(setf (callers-list 'WEYLI::MAX-PAIR :file) '("lisp-support.lisp"))
(setf (callers-list 'WEYLI::MIN-PAIR :file) '("lisp-support.lisp"))
(setf (callers-list 'WEYLI::PLUS :file) '("lisp-support.lisp"))
(setf (callers-list 'WEYLI::MINUS :file) '("lisp-support.lisp"))
(setf (callers-list 'WEYLI::TIMES :file) '("lisp-support.lisp"))
(setf (callers-list 'WEYLI::QUOTIENT :file) '("lisp-support.lisp"))
(setf (callers-list 'WEYLI:RECIP :file) '("lisp-support.lisp"))
(setf (callers-list 'WEYLI::BINARY-GCD :file) '("lisp-support.lisp"))
(setf (callers-list 'WEYLI::BINARY-LCM :file) '("lisp-support.lisp"))
(setf (callers-list 'MATRIX-SPACE :file) '("vector-spaces/vector.lisp"
                                           "matrix.lisp"))
(setf (callers-list 'MATRIX-SPACE-ELEMENT :file) '("matrix.lisp"))
(setf (callers-list 'ARRAY-DIMS :file) '("matrix.lisp"))
(setf (callers-list 'X-DIM :file) '("matrix.lisp"))
(setf (callers-list 'Y-DIM :file) '("matrix.lisp"))
(setf (callers-list 'COEF-DOMAIN :file) '("vector-spaces/vector.lisp"
                                          "vector-spaces/quaternions.lisp"
                                          "polynomials/upolynomial.lisp"
                                          "polynomials/sparsegcd.lisp"
                                          "polynomials/mpolynomial.lisp"
                                          "tpower.lisp" "topology.lisp"
                                          "rational-functions.lisp"
                                          "multipole.lisp" "matrix.lisp"))
(setf (callers-list 'ARRAY :file) '("vector-spaces/projective-space.lisp"
                                    "polynomials/upolynomial.lisp"
                                    "polynomials/sparsegcd.lisp"
                                    "polynomials/poly-tools.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "taylor.lisp" "sets.lisp" "multipole.lisp"
                                    "matrix.lisp"))
(setf (callers-list 'J :file) '("polynomials/sparsegcd.lisp"
                                "numbers/bigfloat.lisp" "tpower.lisp"
                                "taylor.lisp" "matrix.lisp"))
(setf (callers-list 'ROW :file) '("matrix.lisp"))
(setf (callers-list 'VAL :file) '("polynomials/sparsegcd.lisp"
                                  "polynomials/mpolynomial.lisp" "tpower.lisp"
                                  "rational-functions.lisp" "new-domains.lisp"
                                  "matrix.lisp"))
(setf (callers-list 'WEYL:MAKE-ELEMENT :file) '("numbers/numbers.lisp"
                                                "matrix.lisp"))
(setf (callers-list 'MATRIX :file) '("matrix.lisp"))
(setf (callers-list 'DIMENSION1 :file) '("matrix.lisp"))
(setf (callers-list 'DIMENSION2 :file) '("matrix.lisp"))
(setf (callers-list 'DECLS :file) '("tpower.lisp" "matrix.lisp"))
(setf (callers-list 'DIM1 :file) '("matrix.lisp"))
(setf (callers-list 'DIM2 :file) '("matrix.lisp"))
(setf (callers-list 'WITH-MATRIX-DIMENSIONS :file) '("matrix.lisp"))
(setf (callers-list 'MATRIX-VALUE :file) '("matrix.lisp"))
(setf (callers-list 'ROWS :file) '("matrix.lisp"))
(setf (callers-list 'COLS :file) '("matrix.lisp"))
(setf (callers-list 'NEW-ARRAY :file) '("matrix.lisp"))
(setf (callers-list 'NEW-VALUE :file) '("vector-spaces/projective-space.lisp"
                                        "sets.lisp" "matrix.lisp"))
(setf (callers-list 'RANK :file) '("taylor.lisp" "matrix.lisp"))
(setf (callers-list 'M1 :file) '("numbers/gfp.lisp" "matrix.lisp"))
(setf (callers-list 'M2 :file) '("numbers/gfp.lisp" "matrix.lisp"))
(setf (callers-list '1DIM1 :file) '("matrix.lisp"))
(setf (callers-list '1DIM2 :file) '("matrix.lisp"))
(setf (callers-list '1ARRAY :file) '("matrix.lisp"))
(setf (callers-list '2DIM1 :file) '("matrix.lisp"))
(setf (callers-list '2DIM2 :file) '("matrix.lisp"))
(setf (callers-list '2ARRAY :file) '("matrix.lisp"))
(setf (callers-list '(M1 MATRIX-ELEMENT) :file) '("matrix.lisp"))
(setf (callers-list 'MATRIX-ELEMENT :file) '("matrix.lisp"))
(setf (callers-list 'TIMES-ARRAY :file) '("matrix.lisp"))
(setf (callers-list 'ARRAY1 :file) '("matrix.lisp"))
(setf (callers-list 'ARRAY2 :file) '("matrix.lisp"))
(setf (callers-list 'DIMS1 :file) '("matrix.lisp"))
(setf (callers-list 'DIMS2 :file) '("matrix.lisp"))
(setf (callers-list 'MATRIX-FME-TIMES :file) '("matrix.lisp"))
(setf (callers-list 'ELT-DOMAIN :file) '("matrix.lisp"))
(setf (callers-list 'VECTOR-SPACE :file) '("vector-spaces/vector.lisp"
                                           "matrix.lisp"))
(setf (callers-list 'GET-FREE-MODULE :file) '("matrix.lisp"))
(setf (callers-list 'FME-MATRIX-TIMES :file) '("matrix.lisp"))
(setf (callers-list 'TRANSPOSE :file) '("matrix.lisp"))
(setf (callers-list 'DIRECT-SUM :file) '("matrix.lisp"))
(setf (callers-list '(X MATRIX-ELEMENT) :file) '("matrix.lisp"))
(setf (callers-list 'X-ROWS :file) '("matrix.lisp"))
(setf (callers-list 'X-COLS :file) '("matrix.lisp"))
(setf (callers-list 'Y-ROWS :file) '("matrix.lisp"))
(setf (callers-list 'Y-COLS :file) '("matrix.lisp"))
(setf (callers-list 'DIMS :file) '("matrix.lisp"))
(setf (callers-list 'INVERT-ARRAY :file) '("polynomials/sparsegcd.lisp"
                                           "matrix.lisp"))
(setf (callers-list 'INTO-ARRAY :file) '("matrix.lisp"))
(setf (callers-list 'DIMENSION :file) '("vector-spaces/vector.lisp"
                                        "vector-spaces/projective-space.lisp"
                                        "polynomials/epolynomial.lisp"
                                        "topology.lisp" "mesh.lisp"
                                        "matrix.lisp"))
(setf (callers-list 'ROW1 :file) '("matrix.lisp"))
(setf (callers-list 'ROW2 :file) '("matrix.lisp"))
(setf (callers-list 'PIVOT :file) '("matrix.lisp"))
(setf (callers-list 'ORDERED-DOMAIN? :file) '("numbers/numbers.lisp"
                                              "matrix.lisp"))
(setf (callers-list 'FIND-PIVOT-ORDERED :file) '("matrix.lisp"))
(setf (callers-list 'FIND-PIVOT-UNORDERED :file) '("matrix.lisp"))
(setf (callers-list 'EXCHANGE-ROWS :file) '("matrix.lisp"))
(setf (callers-list 'SUBTRACT-ROWS :file) '("matrix.lisp"))
(setf (callers-list 'DOWNFROM :file) '("polynomials/upolynomial.lisp"
                                       "polynomials/sparsegcd.lisp"
                                       "matrix.lisp"))
(setf (callers-list 'ABOVE :file) '("matrix.lisp"))
(setf (callers-list 'GET-MATRIX-SPACE :file) '("vector-spaces/vector.lisp"
                                               "taylor.lisp" "matrix.lisp"))
(setf (callers-list 'FUNCTION-LIST :file) '("matrix.lisp"))
(setf (callers-list 'DIM-COL :file) '("matrix.lisp"))
(setf (callers-list 'VAR-LIST :file) '("matrix.lisp"))
(setf (callers-list 'DIM-ROW :file) '("matrix.lisp"))
(setf (callers-list 'PARTIAL-DERIV :file) '("polynomials/mpolynomial.lisp"
                                            "rational-functions.lisp"
                                            "matrix.lisp"))
(setf (callers-list 'GL-N :file) '("matrix.lisp"))
(setf (callers-list '(DOMAIN FIELD) :file) '("vector-spaces/vector.lisp"
                                             "vector-spaces/quaternions.lisp"
                                             "vector-spaces/projective-space.lisp"
                                             "matrix.lisp"))
(setf (callers-list 'DEFINE-DOMAIN-ELEMENT-CLASSES :file) '("vector-spaces/vector.lisp"
                                                            "vector-spaces/quaternions.lisp"
                                                            "polynomials/mpolynomial.lisp"
                                                            "numbers/numbers.lisp"
                                                            "numbers/gfp.lisp"
                                                            "tpower.lisp"
                                                            "topology.lisp"
                                                            "matrix.lisp"))
(setf (callers-list 'GL-N-ELEMENT :file) '("matrix.lisp"))
(setf (callers-list 'DESTRUCTURING-BIND :file) '("matrix.lisp"))
(setf (callers-list 'COMPUTED-RANK :file) '("matrix.lisp"))
(setf (callers-list 'ONE-MATRIX :file) '("matrix.lisp"))
(setf (callers-list 'PSL-N :file) '("matrix.lisp"))
(setf (callers-list 'PSL-N-ELEMENT :file) '("matrix.lisp"))
(setf (callers-list 'SL-N :file) '("matrix.lisp"))
(setf (callers-list 'SL-N-ELEMENT :file) '("matrix.lisp"))
(setf (callers-list 'O-N :file) '("matrix.lisp"))
(setf (callers-list 'O-N-ELEMENT :file) '("matrix.lisp"))
(setf (callers-list 'SO-N :file) '("matrix.lisp"))
(setf (callers-list 'SO-N-ELEMENT :file) '("matrix.lisp"))
(setf (callers-list '*WORK-ARRAY* :file) '("matrix.lisp"))
(setf (callers-list '*WORK-MATRIX* :file) '("matrix.lisp"))
(setf (callers-list 'SB-INT:UNQUOTE :file) '("polynomials/sparsegcd.lisp"
                                             "polynomials/mpolynomial.lisp"
                                             "polynomials/grobner.lisp"
                                             "tpower.lisp" "new-domains.lisp"
                                             "matrix.lisp"))
(setf (callers-list '/= :file) '("tpower.lisp" "taylor.lisp" "mesh.lisp"
                                 "matrix.lisp"))
(setf (callers-list 'DETERMINANT* :file) '("matrix.lisp"))
(setf (callers-list 'INTERPOLATE :file) '("polynomials/sparsegcd.lisp"
                                          "matrix.lisp"))
(setf (callers-list 'DEGREE-BOUNDS :file) '("polynomials/sparsegcd.lisp"
                                            "matrix.lisp"))
(setf (callers-list 'RING-VAR :file) '("matrix.lisp"))
(setf (callers-list 'DEGREE :file) '("polynomials/upolynomial.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "polynomials/mpolynomial.lisp"
                                     "polynomials/grobner.lisp"
                                     "numbers/gfp.lisp" "matrix.lisp"))
(setf (callers-list 'POLY-RING :file) '("matrix.lisp"))
(setf (callers-list 'DETERMINANT :file) '("matrix.lisp"))
(setf (callers-list 'LIST-COERCE :file) '("polynomials/sparsegcd.lisp"
                                          "matrix.lisp"))
(setf (callers-list 'GET-POLYNOMIAL-RING :file) '("polynomials/sparsegcd.lisp"
                                                  "matrix.lisp"))
(setf (callers-list 'HADAMARD-BOUND :file) '("matrix.lisp"))
(setf (callers-list 'GET-FINITE-FIELD :file) '("polynomials/sparsegcd.lisp"
                                               "numbers/gfp.lisp" "matrix.lisp"))
(setf (callers-list 'REMAINDERS :file) '("numbers/gfp.lisp" "matrix.lisp"))
(setf (callers-list 'COMPUTE-RESULT :file) '("polynomials/sparsegcd.lisp"
                                             "matrix.lisp"))
(setf (callers-list 'USE-CHINESE-REMAINDER :file) '("polynomials/sparsegcd.lisp"
                                                    "matrix.lisp"))
(setf (callers-list 'OLD-ARRAY :file) '("matrix.lisp"))
(setf (callers-list 'SIGN :file) '("numbers/bigfloat.lisp" "topology.lisp"
                                   "matrix.lisp"))
(setf (callers-list 'CHARACTERISTIC :file) '("polynomials/upolynomial.lisp"
                                             "numbers/gfp.lisp"
                                             "classes/algebraic-domains.lisp"
                                             "matrix.lisp"))
(setf (callers-list 'GFP-VALUE :file) '("numbers/gfp.lisp" "matrix.lisp"))
(setf (callers-list 'WITH-OPEN-MODULAR-ARITH :file) '("matrix.lisp"))
(setf (callers-list 'OF-TYPE :file) '("matrix.lisp"))
(setf (callers-list 'FIND-PIVOT :file) '("matrix.lisp"))
(setf (callers-list 'C* :file) '("matrix.lisp"))
(setf (callers-list 'COMPUTE-INVERSE :file) '("numbers/gfp.lisp" "matrix.lisp"))
(setf (callers-list 'CK :file) '("matrix.lisp"))
(setf (callers-list 'C- :file) '("matrix.lisp"))
(setf (callers-list 'MEMOIZE :file) '("matrix.lisp"))
(setf (callers-list 'COL :file) '("matrix.lisp"))
(setf (callers-list 'POSITIVE-SIGN? :file) '("matrix.lisp"))
(setf (callers-list 'MINOR :file) '("matrix.lisp"))
(setf (callers-list 'DET :file) '("mesh.lisp" "matrix.lisp"))
(setf (callers-list 'SPARSE-DET :file) '("matrix.lisp"))
(setf (callers-list 'SUBDETERMINANT* :file) '("matrix.lisp"))
(setf (callers-list 'INDEPENDENT-ROWS :file) '("matrix.lisp"))
(setf (callers-list 'INDEPENDENT-COLS :file) '("matrix.lisp"))
(setf (callers-list 'AS :file) '("polynomials/sparsegcd.lisp" "matrix.lisp"))
(setf (callers-list 'PRIMES :file) '("polynomials/sparsegcd.lisp" "matrix.lisp"))
(setf (callers-list 'GFP :file) '("polynomials/sparsegcd.lisp"
                                  "numbers/gfp.lisp" "matrix.lisp"))
(setf (callers-list 'TEMP-ROWS :file) '("matrix.lisp"))
(setf (callers-list 'PRIME-OF-MAXRANK :file) '("matrix.lisp"))
(setf (callers-list 'HERMITE* :file) '("matrix.lisp"))
(setf (callers-list 'SUBDETERMINANT :file) '("matrix.lisp"))
(setf (callers-list 'HERMITE-ARRAY :file) '("matrix.lisp"))
(setf (callers-list 'DOWNTO :file) '("matrix.lisp"))
(setf (callers-list 'EXTENDED-GCD :file) '("matrix.lisp"))
(setf (callers-list 'SYM-MOD :file) '("matrix.lisp"))
(setf (callers-list 'SMITH* :file) '("matrix.lisp"))
(setf (callers-list 'SMITH-ARRAY :file) '("matrix.lisp"))
(setf (callers-list 'DIAGONAL :file) '("matrix.lisp"))
(setf (callers-list 'FOUNDB :file) '("matrix.lisp"))
(setf (callers-list 'FAILED :file) '("matrix.lisp"))
(setf (callers-list 'B1 :file) '("polynomials/grobner.lisp" "matrix.lisp"))
(setf (callers-list 'PROCESSI :file) '("matrix.lisp"))
(setf (callers-list 'GCD :file) '("polynomials/mpolynomial.lisp"
                                  "polynomials/grobner.lisp"
                                  "numbers/numbers.lisp" "numbers/gfp.lisp"
                                  "quotient-fields.lisp" "matrix.lisp"))
(setf (callers-list '*DELAUNAY* :file) '("mesh.lisp"))
(setf (callers-list '*CROSS-EDGES* :file) '("mesh.lisp"))
(setf (callers-list '*MESH* :file) '("mesh.lisp"))
(setf (callers-list '*SPACE* :file) '("mesh.lisp"))
(setf (callers-list '*TOO-CLOSE-FACTOR* :file) '("mesh.lisp"))
(setf (callers-list 'SIMPLEX :file) '("classes/space-classes.lisp"
                                      "topology.lisp" "mesh.lisp"))
(setf (callers-list 'MESH :file) '("mesh.lisp"))
(setf (callers-list 'CONSTRAINTS :file) '("mesh.lisp"))
(setf (callers-list 'NAMED-SIMPLICIAL-COMPLEX :file) '("mesh.lisp"))
(setf (callers-list 'ID-NUMBER-OF :file) '("classes/space-classes.lisp"
                                           "topology.lisp" "mesh.lisp"))
(setf (callers-list '%NAME-TABLE-OF :file) '("mesh.lisp"))
(setf (callers-list 'NSC :file) '("mesh.lisp"))
(setf (callers-list 'CASE :file) '("mesh.lisp"))
(setf (callers-list '%CONSTRAINTS-OF :file) '("mesh.lisp"))
(setf (callers-list 'REMHASH :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list '%SET-NAME :file) '("mesh.lisp"))
(setf (callers-list 'NAMES :file) '("mesh.lisp"))
(setf (callers-list 'PUSHNEW :file) '("polynomials/sparsegcd.lisp"
                                      "polynomials/mpolynomial.lisp"
                                      "rational-functions.lisp"
                                      "morphisms.lisp" "mesh.lisp"))
(setf (callers-list 'POSITION :file) '("multipole.lisp" "mesh.lisp"))
(setf (callers-list 'NTHCDR :file) '("mesh.lisp"))
(setf (callers-list 'BUTLAST :file) '("mesh.lisp"))
(setf (callers-list 'IDENTITY :file) '("polynomials/mpolynomial.lisp"
                                       "mesh.lisp"))
(setf (callers-list 'ROTATE-LIST :file) '("mesh.lisp"))
(setf (callers-list 'COMPLEX :file) '("numbers/numbers.lisp" "topology.lisp"
                                      "mesh.lisp"))
(setf (callers-list 'CONVERT-TO-LISP-NUMBER :file) '("numbers/numbers.lisp"
                                                     "tpower.lisp" "mesh.lisp"))
(setf (callers-list 'INITIAL-CONTENTS :file) '("mesh.lisp"))
(setf (callers-list 'QUEUE :file) '("mesh.lisp"))
(setf (callers-list 'LAST :file) '("vector-spaces/projective-space.lisp"
                                   "tpower.lisp" "topology.lisp" "mesh.lisp"))
(setf (callers-list 'FRONT :file) '("mesh.lisp"))
(setf (callers-list 'BACK :file) '("mesh.lisp"))
(setf (callers-list 'BB :file) '("mesh.lisp"))
(setf (callers-list 'CC :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'CX :file) '("mesh.lisp"))
(setf (callers-list 'CY :file) '("mesh.lisp"))
(setf (callers-list 'RADIUS :file) '("mesh.lisp"))
(setf (callers-list 'RAD :file) '("mesh.lisp"))
(setf (callers-list 'SQRT :file) '("polynomials/mpolynomial.lisp"
                                   "numbers/numbers.lisp" "mesh.lisp"))
(setf (callers-list 'C1 :file) '("polynomials/mpolynomial.lisp" "topology.lisp"
                                 "mesh.lisp"))
(setf (callers-list 'C2 :file) '("polynomials/mpolynomial.lisp" "topology.lisp"
                                 "mesh.lisp"))
(setf (callers-list 'WARN :file) '("classes/space-classes.lisp" "mesh.lisp"))
(setf (callers-list 'POINTS :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'MEAN-SPACE :file) '("mesh.lisp"))
(setf (callers-list 'POINT-SPACE :file) '("mesh.lisp"))
(setf (callers-list 'VECTORS :file) '("vector-spaces/vector.lisp" "mesh.lisp"))
(setf (callers-list 'MEAN :file) '("mesh.lisp"))
(setf (callers-list 'POINT :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'MAKE-POINT :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'DEFCONSTANT :file) '("new-domains.lisp" "mesh.lisp"))
(setf (callers-list '%DEG-OVER-RAD :file) '("mesh.lisp"))
(setf (callers-list 'PI :file) '("mesh.lisp"))
(setf (callers-list 'VERTEX :file) '("mesh.lisp"))
(setf (callers-list 'TRIANGLE :file) '("mesh.lisp"))
(setf (callers-list 'SPACE :file) '("vector-spaces/projective-space.lisp"
                                    "mesh.lisp"))
(setf (callers-list 'ANGLE :file) '("vector-spaces/quaternions.lisp"
                                    "mesh.lisp"))
(setf (callers-list 'DOT-PRODUCT :file) '("vector-spaces/vector.lisp"
                                          "vector-spaces/quaternions.lisp"
                                          "morphisms.lisp" "mesh.lisp"))
(setf (callers-list 'DEGREES :file) '("polynomials/sparsegcd.lisp" "mesh.lisp"))
(setf (callers-list 'MAP-FUNCTION :file) '("mesh.lisp"))
(setf (callers-list 'TARGET-SPACE :file) '("mesh.lisp"))
(setf (callers-list 'PARAMETER-VECTORS :file) '("mesh.lisp"))
(setf (callers-list 'TARGET-POINTS :file) '("mesh.lisp"))
(setf (callers-list 'INVERSE-MAP :file) '("mesh.lisp"))
(setf (callers-list 'PARAMETER-SPACE :file) '("mesh.lisp"))
(setf (callers-list 'MAKE-EUCLIDEAN-SPACE :file) '("mesh.lisp"))
(setf (callers-list 'WHERE :file) '("mesh.lisp"))
(setf (callers-list 'VERTICES-OF :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'HOME :file) '("mesh.lisp"))
(setf (callers-list 'HOME-OF :file) '("mesh.lisp"))
(setf (callers-list 'FACE :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'NEW-SET :file) '("mesh.lisp"))
(setf (callers-list 'SPLITTING-POINT :file) '("mesh.lisp"))
(setf (callers-list 'SIMPLICES :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'SPLIT :file) '("mesh.lisp"))
(setf (callers-list 'INITIALLY :file) '("mesh.lisp"))
(setf (callers-list 'DELETE-MAXIMAL-CELL :file) '("mesh.lisp"))
(setf (callers-list 'S :file) '("polynomials/sparsegcd.lisp" "numbers/gfp.lisp"
                                "numbers/bigfloat.lisp" "topology.lisp"
                                "mesh.lisp"))
(setf (callers-list 'INSERT :file) '("topology.lisp" "sets.lisp" "mesh.lisp"))
(setf (callers-list 'THING :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'THINGS :file) '("mesh.lisp"))
(setf (callers-list 'REPEAT :file) '("mesh.lisp"))
(setf (callers-list 'MAXIMIZE :file) '("mesh.lisp"))
(setf (callers-list 'OTHER :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'DISTANCE :file) '("mesh.lisp"))
(setf (callers-list 'THREE-POINTS :file) '("mesh.lisp"))
(setf (callers-list 'ORDERED :file) '("mesh.lisp"))
(setf (callers-list 'SIGN-OF-PERMUTATION :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'VECTOR1 :file) '("mesh.lisp"))
(setf (callers-list 'VECTOR2 :file) '("mesh.lisp"))
(setf (callers-list 'DIFF :file) '("polynomials/mpolynomial.lisp"
                                   "rational-functions.lisp" "mesh.lisp"))
(setf (callers-list 'VECTORB :file) '("mesh.lisp"))
(setf (callers-list 'VECTORA :file) '("mesh.lisp"))
(setf (callers-list 'POINTA :file) '("mesh.lisp"))
(setf (callers-list 'POINTB :file) '("mesh.lisp"))
(setf (callers-list 'LISTA :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'LISTB :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'SQR :file) '("mesh.lisp"))
(setf (callers-list 'SUM-OF-SQUARES :file) '("mesh.lisp"))
(setf (callers-list 'EDGE1 :file) '("mesh.lisp"))
(setf (callers-list 'EDGE2 :file) '("mesh.lisp"))
(setf (callers-list 'BEND :file) '("mesh.lisp"))
(setf (callers-list 'EDGE-A :file) '("mesh.lisp"))
(setf (callers-list 'EDGE-B :file) '("mesh.lisp"))
(setf (callers-list 'COORDINATE-LIST :file) '("mesh.lisp"))
(setf (callers-list 'BOUNDING-BOX :file) '("mesh.lisp"))
(setf (callers-list 'OLD :file) '("mesh.lisp"))
(setf (callers-list 'NEW :file) '("polynomials/mpolynomial.lisp"
                                  "topology.lisp" "rational-functions.lisp"
                                  "mesh.lisp"))
(setf (callers-list 'MAP-OVER-CELLS :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'CELL :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'SC :file) '("mesh.lisp"))
(setf (callers-list 'VERTICES :file) '("classes/space-classes.lisp"
                                       "topology.lisp" "mesh.lisp"))
(setf (callers-list 'COMPLEXER :file) '("mesh.lisp"))
(setf (callers-list 'POINT1 :file) '("mesh.lisp"))
(setf (callers-list 'POINT2 :file) '("mesh.lisp"))
(setf (callers-list 'THRU :file) '("mesh.lisp"))
(setf (callers-list 'CENTER :file) '("mesh.lisp"))
(setf (callers-list 'CLOCKWISE :file) '("mesh.lisp"))
(setf (callers-list 'CW :file) '("mesh.lisp"))
(setf (callers-list 'COUNTERCLOCKWISE :file) '("mesh.lisp"))
(setf (callers-list 'CCW :file) '("mesh.lisp"))
(setf (callers-list 'DIRECTION :file) '("mesh.lisp"))
(setf (callers-list 'APOINT :file) '("mesh.lisp"))
(setf (callers-list 'BPOINT :file) '("mesh.lisp"))
(setf (callers-list 'COMPLEX-CIRCUMCENTER :file) '("mesh.lisp"))
(setf (callers-list 'CIRCLE-CENTER :file) '("mesh.lisp"))
(setf (callers-list 'THETA-A :file) '("mesh.lisp"))
(setf (callers-list 'THETA-B :file) '("mesh.lisp"))
(setf (callers-list 'GENERATOR :file) '("mesh.lisp"))
(setf (callers-list 'PHASE :file) '("numbers/numbers.lisp" "mesh.lisp"))
(setf (callers-list 'THETA :file) '("mesh.lisp"))
(setf (callers-list 'LTHETA :file) '("mesh.lisp"))
(setf (callers-list 'TRANSFORMED :file) '("mesh.lisp"))
(setf (callers-list 'CURVED-SIMPLEX :file) '("mesh.lisp"))
(setf (callers-list 'MAKE-PARAMETER-SPACE :file) '("mesh.lisp"))
(setf (callers-list 'PARAM1 :file) '("mesh.lisp"))
(setf (callers-list 'ENDPOINT1 :file) '("mesh.lisp"))
(setf (callers-list 'PARAM2 :file) '("mesh.lisp"))
(setf (callers-list 'ENDPOINT2 :file) '("mesh.lisp"))
(setf (callers-list 'A-ENDPOINT :file) '("mesh.lisp"))
(setf (callers-list 'B-ENDPOINT :file) '("mesh.lisp"))
(setf (callers-list 'A-PARAM-VALUE :file) '("mesh.lisp"))
(setf (callers-list 'B-PARAM-VALUE :file) '("mesh.lisp"))
(setf (callers-list 'SEGMENT-A :file) '("mesh.lisp"))
(setf (callers-list 'SEGMENT-B :file) '("mesh.lisp"))
(setf (callers-list 'TRIANGLE? :file) '("mesh.lisp"))
(setf (callers-list 'ON-SIDE :file) '("mesh.lisp"))
(setf (callers-list 'VA :file) '("mesh.lisp"))
(setf (callers-list 'VB :file) '("mesh.lisp"))
(setf (callers-list 'BENDS :file) '("mesh.lisp"))
(setf (callers-list 'SIDE :file) '("mesh.lisp"))
(setf (callers-list 'OPPOSITE :file) '("mesh.lisp"))
(setf (callers-list 'TRIPLES :file) '("mesh.lisp"))
(setf (callers-list 'POISON-VERTEX :file) '("mesh.lisp"))
(setf (callers-list 'TRIANGLE-CLASS :file) '("mesh.lisp"))
(setf (callers-list 'RELATION :file) '("polynomials/grobner.lisp" "mesh.lisp"))
(setf (callers-list 'ON-FLAG :file) '("mesh.lisp"))
(setf (callers-list 'TRIANGLE-LIST :file) '("mesh.lisp"))
(setf (callers-list 'TRIANGLES-TO-DO :file) '("mesh.lisp"))
(setf (callers-list 'TRIPLE :file) '("mesh.lisp"))
(setf (callers-list 'POINT-VS-TRIANGLE :file) '("mesh.lisp"))
(setf (callers-list 'STAR-SHAPE :file) '("mesh.lisp"))
(setf (callers-list 'STAR-SOURCE :file) '("mesh.lisp"))
(setf (callers-list 'MAPC :file) '("mesh.lisp"))
(setf (callers-list 'PRED :file) '("mesh.lisp"))
(setf (callers-list 'CURRENT :file) '("mesh.lisp"))
(setf (callers-list 'SUCC :file) '("mesh.lisp"))
(setf (callers-list 'TRIANGULATE-TRIPLES :file) '("mesh.lisp"))
(setf (callers-list 'FLAT-POLYGON :file) '("mesh.lisp"))
(setf (callers-list 'CIRCUMCENTER :file) '("mesh.lisp"))
(setf (callers-list 'OTHERS :file) '("mesh.lisp"))
(setf (callers-list 'SIZE :file) '("numbers/gfp.lisp" "sets.lisp" "mesh.lisp"))
(setf (callers-list '%MOST-RECENT :file) '("mesh.lisp"))
(setf (callers-list 'TRIANGULATION :file) '("mesh.lisp"))
(setf (callers-list 'COFACETS :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'GET-CELL :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'START :file) '("mesh.lisp"))
(setf (callers-list 'MARK-LIST :file) '("mesh.lisp"))
(setf (callers-list 'FACETS :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'NEIGHBOR :file) '("mesh.lisp"))
(setf (callers-list 'DESTINATION :file) '("mesh.lisp"))
(setf (callers-list 'NEAR-BASE :file) '("mesh.lisp"))
(setf (callers-list 'NEIGHBORS :file) '("mesh.lisp"))
(setf (callers-list 'MAXIMAL-CELL? :file) '("mesh.lisp"))
(setf (callers-list 'DIRECTED-LOCATE :file) '("mesh.lisp"))
(setf (callers-list 'CATCH :file) '("polynomials/mpolynomial.lisp" "mesh.lisp"))
(setf (callers-list 'TRIANGLES :file) '("mesh.lisp"))
(setf (callers-list 'MAP-OVER-MAXIMAL-CELLS :file) '("topology.lisp"
                                                     "mesh.lisp"))
(setf (callers-list 'EDGE :file) '("mesh.lisp"))
(setf (callers-list 'APEXES :file) '("mesh.lisp"))
(setf (callers-list 'TRI :file) '("mesh.lisp"))
(setf (callers-list 'T1 :file) '("mesh.lisp"))
(setf (callers-list 'T2 :file) '("mesh.lisp"))
(setf (callers-list 'VERT :file) '("mesh.lisp"))
(setf (callers-list 'SPLITTING-VERTEX :file) '("mesh.lisp"))
(setf (callers-list 'DEST :file) '("mesh.lisp"))
(setf (callers-list 'EDGES-CROSS? :file) '("mesh.lisp"))
(setf (callers-list 'VR :file) '("mesh.lisp"))
(setf (callers-list 'VL :file) '("mesh.lisp"))
(setf (callers-list 'CCW-SIDE :file) '("mesh.lisp"))
(setf (callers-list 'LEFT-CHAIN :file) '("mesh.lisp"))
(setf (callers-list 'RIGHT-CHAIN :file) '("mesh.lisp"))
(setf (callers-list 'NEXT-TRIANGLE :file) '("mesh.lisp"))
(setf (callers-list 'FLAT-TRIANGULATE :file) '("mesh.lisp"))
(setf (callers-list 'SURROUNDING :file) '("mesh.lisp"))
(setf (callers-list 'STAR-TRIANGULATE :file) '("mesh.lisp"))
(setf (callers-list 'HIT :file) '("mesh.lisp"))
(setf (callers-list 'SPLIT-EDGE :file) '("mesh.lisp"))
(setf (callers-list 'REMOVE-VERTEX :file) '("mesh.lisp"))
(setf (callers-list 'C-TRIANGULATION :file) '("mesh.lisp"))
(setf (callers-list 'CONSTRAINT :file) '("mesh.lisp"))
(setf (callers-list 'SEGMENT? :file) '("mesh.lisp"))
(setf (callers-list 'FORCE-EDGE :file) '("mesh.lisp"))
(setf (callers-list 'NEW-VERTEX :file) '("mesh.lisp"))
(setf (callers-list 'CONCAVE :file) '("mesh.lisp"))
(setf (callers-list 'OLD-NEIGHBORS :file) '("mesh.lisp"))
(setf (callers-list 'HIT-TRI :file) '("mesh.lisp"))
(setf (callers-list 'SET-DIFFERENCE :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'NEIGHBORHOOD :file) '("mesh.lisp"))
(setf (callers-list 'NEW-SEGMENTS :file) '("mesh.lisp"))
(setf (callers-list 'NEW-VERT :file) '("mesh.lisp"))
(setf (callers-list 'COMMON-ENDPOINT :file) '("mesh.lisp"))
(setf (callers-list 'APEX :file) '("mesh.lisp"))
(setf (callers-list 'VERTS :file) '("mesh.lisp"))
(setf (callers-list '%SPLIT-CONSTRAINT-ONE-SIDE :file) '("mesh.lisp"))
(setf (callers-list 'CDT :file) '("mesh.lisp"))
(setf (callers-list 'DELAUNAY? :file) '("mesh.lisp"))
(setf (callers-list 'FLIP :file) '("mesh.lisp"))
(setf (callers-list 'NIL :file) '("vector-spaces/vector.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "polynomials/grobner.lisp" "mesh.lisp"))
(setf (callers-list '%PENDING-LIST-OF :file) '("mesh.lisp"))
(setf (callers-list 'TOO-CLOSE :file) '("mesh.lisp"))
(setf (callers-list 'ADJ-VERTICES :file) '("mesh.lisp"))
(setf (callers-list '%DEFAULT-NAME-OF :file) '("mesh.lisp"))
(setf (callers-list '%DELETE-TOO-CLOSE :file) '("mesh.lisp"))
(setf (callers-list 'THE-BOUND :file) '("mesh.lisp"))
(setf (callers-list 'BOUND :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'FUNCTIONP :file) '("polynomials/grobner.lisp"
                                        "polynomials/epolynomial.lisp"
                                        "mesh.lisp"))
(setf (callers-list 'MAKE-MEAN-POINT :file) '("mesh.lisp"))
(setf (callers-list 'SIMPLEX-SIZE :file) '("mesh.lisp"))
(setf (callers-list 'ANGLE-BOUNDS :file) '("mesh.lisp"))
(setf (callers-list 'SIZE-LIST :file) '("mesh.lisp"))
(setf (callers-list 'VERTICES-SORTED-BY-ANGLE :file) '("mesh.lisp"))
(setf (callers-list 'TOO-BIG? :file) '("mesh.lisp"))
(setf (callers-list 'SEGMENT :file) '("mesh.lisp"))
(setf (callers-list 'MAX-ANGLE :file) '("mesh.lisp"))
(setf (callers-list 'TRIANGLE-CENTER :file) '("mesh.lisp"))
(setf (callers-list 'IMPROVE :file) '("mesh.lisp"))
(setf (callers-list 'BOX :file) '("mesh.lisp"))
(setf (callers-list 'BORDER :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'LOW :file) '("mesh.lisp"))
(setf (callers-list 'HIGH :file) '("mesh.lisp"))
(setf (callers-list 'LL :file) '("mesh.lisp"))
(setf (callers-list 'HH :file) '("mesh.lisp"))
(setf (callers-list 'LH :file) '("mesh.lisp"))
(setf (callers-list 'MAKE-SIMPLEX :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'BOUNDARIES :file) '("mesh.lisp"))
(setf (callers-list 'DO-BACKGROUND-BOX :file) '("mesh.lisp"))
(setf (callers-list 'BOUNDARY :file) '("topology.lisp" "mesh.lisp"))
(setf (callers-list 'BUILD-CDT-FROM-BOUNDARIES :file) '("mesh.lisp"))
(setf (callers-list 'LOCATE :file) '("mesh.lisp"))
(setf (callers-list 'REFINE-MESH-PREP :file) '("mesh.lisp"))
(setf (callers-list 'IMPROVEMENT-QUEUE :file) '("mesh.lisp"))
(setf (callers-list 'MAKE-QUEUE :file) '("mesh.lisp"))
(setf (callers-list 'GRADE :file) '("mesh.lisp"))
(setf (callers-list 'INSERTQ :file) '("mesh.lisp"))
(setf (callers-list 'EMPTYQ? :file) '("mesh.lisp"))
(setf (callers-list 'GETQ :file) '("mesh.lisp"))
(setf (callers-list 'CLAUSE :file) '("mesh.lisp"))
(setf (callers-list 'NEW-BODY :file) '("tpower.lisp" "mesh.lisp"))
(setf (callers-list 'KEYARGS :file) '("mesh.lisp"))
(setf (callers-list 'DESC :file) '("mesh.lisp"))
(setf (callers-list 'ARC-ARGS :file) '("mesh.lisp"))
(setf (callers-list 'NEW-DESC :file) '("mesh.lisp"))
(setf (callers-list 'PART :file) '("polynomials/sparsegcd.lisp" "mesh.lisp"))
(setf (callers-list 'FUNCTION-NAME :file) '("mesh.lisp"))
(setf (callers-list 'POINT-LIST :file) '("mesh.lisp"))
(setf (callers-list 'DEFUN-BOUNDARY :file) '("mesh.lisp"))
(setf (callers-list '%BOUNDARY-LINE :file) '("mesh.lisp"))
(setf (callers-list '%BOUNDARY-ARC :file) '("mesh.lisp"))
(setf (callers-list 'POINT-ARC-LIST :file) '("mesh.lisp"))
(setf (callers-list 'ARC :file) '("mesh.lisp"))
(setf (callers-list 'DEFMESH :file) '("mesh.lisp"))
(setf (callers-list 'CIRCLE :file) '("mesh.lisp"))
(setf (callers-list ':SIZE-LIST :file) '("mesh.lisp"))
(setf (callers-list 'REGION :file) '("mesh.lisp"))
(setf (callers-list 'INSIDE :file) '("mesh.lisp"))
(setf (callers-list 'ORIGIN :file) '("mesh.lisp"))
(setf (callers-list 'CIRCLE-BOUNDARY :file) '("mesh.lisp"))
(setf (callers-list ':CLOSED? :file) '("mesh.lisp"))
(setf (callers-list ':CENTER :file) '("mesh.lisp"))
(setf (callers-list 'READ :file) '("mesh.lisp"))
(setf (callers-list 'BOUNDARY-COMPLEX :file) '("mesh.lisp"))
(setf (callers-list 'REGION-POINTS :file) '("mesh.lisp"))
(setf (callers-list 'FILE-ANGLE-BOUNDS :file) '("mesh.lisp"))
(setf (callers-list 'FILE-SIZE-LIST :file) '("mesh.lisp"))
(setf (callers-list 'VERTEX-TABLE :file) '("mesh.lisp"))
(setf (callers-list 'MAKE-HASH-TABLE :file) '("topology.lisp"
                                              "new-domains.lisp"
                                              "morphisms.lisp" "mesh.lisp"))
(setf (callers-list 'TOKEN :file) '("mesh.lisp"))
(setf (callers-list 'GET-EUCLIDEAN-SPACE :file) '("mesh.lisp"))
(setf (callers-list 'READ-VERTEX-SET :file) '("mesh.lisp"))
(setf (callers-list 'READ-BOUNDARY-SIMPLICIAL-COMPLEX :file) '("mesh.lisp"))
(setf (callers-list 'READ-REGION-POINTS :file) '("mesh.lisp"))
(setf (callers-list 'READ-SIZE-TABLE :file) '("mesh.lisp"))
(setf (callers-list 'CREATE-MESH :file) '("mesh.lisp"))
(setf (callers-list 'INSERT-BOUNDARY :file) '("mesh.lisp"))
(setf (callers-list 'NAME-REGION :file) '("mesh.lisp"))
(setf (callers-list 'REFINE-MESH :file) '("mesh.lisp"))
(setf (callers-list 'NUMVERTICES :file) '("mesh.lisp"))
(setf (callers-list 'READ-POINT :file) '("mesh.lisp"))
(setf (callers-list 'SIMP-DIMENSION :file) '("mesh.lisp"))
(setf (callers-list 'NUMSIMPS :file) '("mesh.lisp"))
(setf (callers-list 'CURRENT-NAME :file) '("mesh.lisp"))
(setf (callers-list 'COUNT :file) '("polynomials/poly-tools.lisp" "mesh.lisp"))
(setf (callers-list 'NEXT :file) '("mesh.lisp"))
(setf (callers-list 'CODE :file) '("mesh.lisp"))
(setf (callers-list 'NUMPOINTS :file) '("mesh.lisp"))
(setf (callers-list 'NUMENTRIES :file) '("mesh.lisp"))
(setf (callers-list 'TUPLE :file) '("sets.lisp" "mesh.lisp"))
(setf (callers-list 'FWRITE :file) '("mesh.lisp"))
(setf (callers-list 'MAX-DIMENSION :file) '("mesh.lisp"))
(setf (callers-list 'ALL-NAMES :file) '("mesh.lisp"))
(setf (callers-list 'WRITE-VERTEX-SET :file) '("mesh.lisp"))
(setf (callers-list '*STANDARD-OUTPUT* :file) '("mesh.lisp"))
(setf (callers-list 'READ-SIMPLICIAL-COMPLEX :file) '("mesh.lisp"))
(setf (callers-list 'MORPHISM-DOMAIN :file) '("morphisms.lisp"))
(setf (callers-list 'HOMO :file) '("vector-spaces/projective-space.lisp"
                                   "morphisms.lisp"))
(setf (callers-list 'MORPHISM-RANGE :file) '("vector-spaces/projective-space.lisp"
                                             "morphisms.lisp"))
(setf (callers-list '*MORPHISM-COMPOSITION-TABLE* :file) '("morphisms.lisp"))
(setf (callers-list 'MORPHISM1 :file) '("morphisms.lisp"))
(setf (callers-list 'MORPHISM2 :file) '("morphisms.lisp"))
(setf (callers-list 'CACHE :file) '("morphisms.lisp"))
(setf (callers-list 'COMP :file) '("morphisms.lisp"))
(setf (callers-list 'ASSOC :file) '("polynomials/mpolynomial.lisp"
                                    "topology.lisp" "rational-functions.lisp"
                                    "morphisms.lisp"))
(setf (callers-list 'G :file) '("polynomials/sparsegcd.lisp"
                                "polynomials/grobner.lisp" "morphisms.lisp"))
(setf (callers-list 'HOMOMORPHISM :file) '("morphisms.lisp"))
(setf (callers-list 'MORPHISM-MAP :file) '("vector-spaces/projective-space.lisp"
                                           "morphisms.lisp"))
(setf (callers-list 'DIRECT? :file) '("morphisms.lisp"))
(setf (callers-list 'MORPHISMS :file) '("morphisms.lisp"))
(setf (callers-list 'PREDECESSOR :file) '("morphisms.lisp"))
(setf (callers-list 'MORPH :file) '("morphisms.lisp"))
(setf (callers-list 'COMPOSE :file) '("morphisms.lisp"))
(setf (callers-list 'GET-MORPHISMS-FROM :file) '("morphisms.lisp"))
(setf (callers-list 'SUCCESSOR :file) '("morphisms.lisp"))
(setf (callers-list 'GET-MORPHISMS-TO :file) '("morphisms.lisp"))
(setf (callers-list 'REPLACE? :file) '("morphisms.lisp"))
(setf (callers-list 'OLD-H :file) '("morphisms.lisp"))
(setf (callers-list 'GET-MORPHISMS :file) '("morphisms.lisp"))
(setf (callers-list 'MORPHISM :file) '("polynomials/mpolynomial.lisp"
                                       "morphisms.lisp"))
(setf (callers-list 'DELETE-MORPHISM :file) '("morphisms.lisp"))
(setf (callers-list 'GET-RATIONAL-NUMBERS :file) '("numbers/numbers.lisp"
                                                   "morphisms.lisp"))
(setf (callers-list 'GET-REAL-NUMBERS :file) '("numbers/numbers.lisp"
                                               "numbers/gfp.lisp"
                                               "morphisms.lisp"))
(setf (callers-list 'GET-COMPLEX-NUMBERS :file) '("morphisms.lisp"))
(setf (callers-list 'APPLY-MORPHISM :file) '("polynomials/mpolynomial.lisp"
                                             "morphisms.lisp"))
(setf (callers-list 'MAP-OVER-TREE :file) '("morphisms.lisp"))
(setf (callers-list 'NEXT-DOMAINS :file) '("morphisms.lisp"))
(setf (callers-list 'D1 :file) '("numbers/gfp.lisp" "rational-functions.lisp"
                                 "quotient-fields.lisp" "morphisms.lisp"))
(setf (callers-list 'D2 :file) '("numbers/gfp.lisp" "rational-functions.lisp"
                                 "quotient-fields.lisp" "morphisms.lisp"))
(setf (callers-list 'D1-DOMAINS :file) '("morphisms.lisp"))
(setf (callers-list 'REACHABLE-DOMAINS :file) '("morphisms.lisp"))
(setf (callers-list 'TERMINATE-BRANCH :file) '("morphisms.lisp"))
(setf (callers-list '*COERCIBILITY-CHECKING* :file) '("morphisms.lisp"))
(setf (callers-list 'HOMOS :file) '("morphisms.lisp"))
(setf (callers-list 'GET-HOMOMORPHISMS :file) '("morphisms.lisp"))
(setf (callers-list '*COERCE-WHERE-POSSIBLE* :file) '("vector-spaces/vector.lisp"
                                                      "morphisms.lisp"))
(setf (callers-list 'ILLEGAL-MESS :file) '("morphisms.lisp"))
(setf (callers-list 'AMBIG-MESS :file) '("morphisms.lisp"))
(setf (callers-list 'NUMERIC-NUMERIC? :file) '("numbers/numbers.lisp"
                                               "morphisms.lisp"))
(setf (callers-list 'DOMAIN-ELEMENT-DOMAIN-ELEMENT? :file) '("morphisms.lisp"))
(setf (callers-list 'BINARY= :file) '("polynomials/upolynomial.lisp"
                                      "polynomials/mpolynomial.lisp"
                                      "polynomials/grobner.lisp"
                                      "numbers/numbers.lisp" "numbers/gfp.lisp"
                                      "topology.lisp" "sets.lisp"
                                      "morphisms.lisp"))
(setf (callers-list 'BINARY> :file) '("polynomials/mpolynomial.lisp"
                                      "numbers/numbers.lisp"
                                      "classes/algebraic-domains.lisp"
                                      "sets.lisp" "morphisms.lisp"))
(setf (callers-list 'BINARY>= :file) '("numbers/numbers.lisp"
                                       "classes/algebraic-domains.lisp"
                                       "morphisms.lisp"))
(setf (callers-list 'REMAINDER :file) '("polynomials/upolynomial.lisp"
                                        "polynomials/mpolynomial.lisp"
                                        "numbers/numbers.lisp" "morphisms.lisp"))
(setf (callers-list 'BINARY-GCD :file) '("polynomials/upolynomial.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "numbers/numbers.lisp"
                                         "rational-functions.lisp"
                                         "quotient-fields.lisp"
                                         "morphisms.lisp"))
(setf (callers-list 'BINARY-LCM :file) '("polynomials/upolynomial.lisp"
                                         "numbers/numbers.lisp"
                                         "numbers/gfp.lisp" "morphisms.lisp"))
(setf (callers-list 'MAX-PAIR :file) '("vector-spaces/vector.lisp"
                                       "numbers/numbers.lisp"
                                       "classes/algebraic-domains.lisp"
                                       "morphisms.lisp"))
(setf (callers-list 'MIN-PAIR :file) '("vector-spaces/vector.lisp"
                                       "numbers/numbers.lisp"
                                       "classes/algebraic-domains.lisp"
                                       "morphisms.lisp"))
(setf (callers-list 'FLOOR2 :file) '("numbers/bigfloat.lisp" "morphisms.lisp"))
(setf (callers-list 'CEILING2 :file) '("numbers/bigfloat.lisp" "morphisms.lisp"))
(setf (callers-list 'ROUND2 :file) '("morphisms.lisp"))
(setf (callers-list 'TRUNCATE2 :file) '("polynomials/mpolynomial.lisp"
                                        "morphisms.lisp"))
(setf (callers-list '*NUMBER-OF-TERMS* :file) '("multipole.lisp"))
(setf (callers-list 'MULTIPOLE-RING :file) '("multipole.lisp"))
(setf (callers-list 'MAKE-MULTIPOLE-EXPANSION :file) '("multipole.lisp"))
(setf (callers-list 'IN-BOUND? :file) '("multipole.lisp"))
(setf (callers-list 'COEFS :file) '("polynomials/sparsegcd.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "rational-functions.lisp" "multipole.lisp"))
(setf (callers-list 'MULTIPOLE-EXPANSION :file) '("multipole.lisp"))
(setf (callers-list 'RANGE-DOMAIN-OF :file) '("multipole.lisp"))
(setf (callers-list 'MULTIPOLE :file) '("multipole.lisp"))
(setf (callers-list 'XY :file) '("multipole.lisp"))
(setf (callers-list 'RANGE-OF :file) '("multipole.lisp"))
(setf (callers-list 'SHIFT-M-FORM :file) '("multipole.lisp"))
(setf (callers-list 'FORM-OF :file) '("multipole.lisp"))
(setf (callers-list 'CENTER-OF :file) '("multipole.lisp"))
(setf (callers-list '(M MULTIPOLE-EXPANSION) :file) '("multipole.lisp"))
(setf (callers-list 'MPEF-PAIRWISE-M-SUM :file) '("multipole.lisp"))
(setf (callers-list 'POSN :file) '("multipole.lisp"))
(setf (callers-list 'LOCAL-FIELD :file) '("multipole.lisp"))
(setf (callers-list 'SHIFT-L-FORM :file) '("multipole.lisp"))
(setf (callers-list 'NEQ :file) '("multipole.lisp"))
(setf (callers-list 'L1 :file) '("classes/space-classes.lisp" "multipole.lisp"))
(setf (callers-list 'L2 :file) '("classes/space-classes.lisp" "multipole.lisp"))
(setf (callers-list 'DIST :file) '("multipole.lisp"))
(setf (callers-list 'LOCALIZE-FORM :file) '("multipole.lisp"))
(setf (callers-list 'Z1 :file) '("multipole.lisp"))
(setf (callers-list 'Z2 :file) '("multipole.lisp"))
(setf (callers-list 'SHIFT-M-FORM* :file) '("multipole.lisp"))
(setf (callers-list 'Z0 :file) '("multipole.lisp"))
(setf (callers-list 'WHAT-IS-THE-LTHTERM :file) '("multipole.lisp"))
(setf (callers-list 'THE-KTHTERM :file) '("multipole.lisp"))
(setf (callers-list 'CN1 :file) '("multipole.lisp"))
(setf (callers-list 'CN2 :file) '("multipole.lisp"))
(setf (callers-list 'F1 :file) '("polynomials/upolynomial.lisp"
                                 "polynomials/grobner.lisp" "multipole.lisp"))
(setf (callers-list 'F2 :file) '("polynomials/upolynomial.lisp"
                                 "polynomials/grobner.lisp" "multipole.lisp"))
(setf (callers-list 'SHIFT-L-FORM* :file) '("multipole.lisp"))
(setf (callers-list 'WHAT-IS-THE-LTHTERM2 :file) '("multipole.lisp"))
(setf (callers-list 'LOCALIZE-FORM* :file) '("multipole.lisp"))
(setf (callers-list 'REST-OF-LOCAL :file) '("multipole.lisp"))
(setf (callers-list 'LTH-LOCAL-TERM :file) '("multipole.lisp"))
(setf (callers-list '*MATH-OPERATOR-PROPERTIES* :file) '("new-domains.lisp"))
(setf (callers-list '*MATH-OPERATORS* :file) '("new-domains.lisp"))
(setf (callers-list 'EXTERNAL-NAME :file) '("new-domains.lisp"))
(setf (callers-list 'INTERNAL-NAME :file) '("new-domains.lisp"))
(setf (callers-list 'DEFINE-MATH-OPERATOR-ACCESSORS :file) '("new-domains.lisp"))
(setf (callers-list 'PROPERTIES :file) '("new-domains.lisp"))
(setf (callers-list 'SYMBOL-NAME :file) '("classes/algebraic-domains.lisp"
                                          "new-domains.lisp"))
(setf (callers-list 'PRETTY-NAME-OF :file) '("new-domains.lisp"))
(setf (callers-list 'CREATOR-OF :file) '("new-domains.lisp"))
(setf (callers-list 'CREATE-FUNCTION :file) '("new-domains.lisp"))
(setf (callers-list 'NREVERSE :file) '("vector-spaces/vector.lisp"
                                       "polynomials/sparsegcd.lisp"
                                       "polynomials/mpolynomial.lisp"
                                       "numbers/bigfloat.lisp"
                                       "new-domains.lisp"))
(setf (callers-list 'RATIONAL-INTEGERS :file) '("numbers/numbers.lisp"
                                                "new-domains.lisp"))
(setf (callers-list '*DOMAIN-PROPERTY-TABLE* :file) '("new-domains.lisp"))
(setf (callers-list 'TERM1 :file) '("new-domains.lisp"))
(setf (callers-list 'TERM2 :file) '("new-domains.lisp"))
(setf (callers-list 'PROPERTY :file) '("polynomials/poly-tools.lisp"
                                       "new-domains.lisp"))
(setf (callers-list 'TABLE :file) '("new-domains.lisp"))
(setf (callers-list 'PROP :file) '("classes/algebraic-domains.lisp"
                                   "new-domains.lisp"))
(setf (callers-list 'COMPARE-PTERM-LISTS :file) '("new-domains.lisp"))
(setf (callers-list 'MAP-OVER-PROPERTIES :file) '("new-domains.lisp"))
(setf (callers-list 'PRINT :file) '("polynomials/sparsegcd.lisp"
                                    "polynomials/mpolynomial.lisp"
                                    "new-domains.lisp"))
(setf (callers-list 'DELETE-PROPERTY :file) '("new-domains.lisp"))
(setf (callers-list '*MATH-PROPERTIES* :file) '("classes/algebraic-domains.lisp"
                                                "new-domains.lisp"))
(setf (callers-list '*PRIMITIVE-PROPERTIES* :file) '("new-domains.lisp"))
(setf (callers-list 'PROPERTY-NAME :file) '("classes/algebraic-domains.lisp"
                                            "new-domains.lisp"))
(setf (callers-list 'ASSERT-FUNCTION-NAME :file) '("new-domains.lisp"))
(setf (callers-list 'PREDICATE-FUNCTION-NAME :file) '("new-domains.lisp"))
(setf (callers-list 'REQ-ARGS :file) '("new-domains.lisp"))
(setf (callers-list 'OPT-ARGS :file) '("new-domains.lisp"))
(setf (callers-list 'MAKE-PREDICATE :file) '("new-domains.lisp"))
(setf (callers-list 'REQ :file) '("new-domains.lisp"))
(setf (callers-list 'ASSERT-NAME :file) '("classes/algebraic-domains.lisp"
                                          "new-domains.lisp"))
(setf (callers-list '*WEYLI-EXPORTED-SYMBOLS* :file) '("packages.lisp"))
(setf (callers-list '*WEYLI-SHADOWED-SYMBOLS* :file) '("packages.lisp"))
(setf (callers-list '*WEYL-EXPORTED-SYMBOLS* :file) '("packages.lisp"))
(setf (callers-list 'PACKAGE :file) '("packages.lisp"))
(setf (callers-list 'SHADOWING-IMPORT :file) '("packages.lisp"))
(setf (callers-list 'USE-PACKAGE :file) '("packages.lisp"))
(setf (callers-list 'PACKAGE-NAME :file) '("packages.lisp"))
(setf (callers-list 'SYMBOLS :file) '("packages.lisp"))
(setf (callers-list 'FIND-PACKAGE :file) '("packages.lisp"))
(setf (callers-list 'DEFPACKAGE :file) '("packages.lisp"))
(setf (callers-list 'SHADOW :file) '("packages.lisp"))
(setf (callers-list 'EXPORT :file) '("packages.lisp"))
(setf (callers-list 'USE-WEYLI-PACKAGE :file) '("packages.lisp"))
(setf (callers-list 'QUOTIENT-ELEMENT :file) '("classes/algebraic-domains.lisp"
                                               "quotient-fields.lisp"))
(setf (callers-list 'QUOTIENT-FIELD :file) '("numbers/numbers.lisp"
                                             "rational-functions.lisp"
                                             "quotient-fields.lisp"))
(setf (callers-list 'GCD-DOMAIN? :file) '("quotient-fields.lisp"))
(setf (callers-list 'QF :file) '("numbers/numbers.lisp"
                                 "rational-functions.lisp"
                                 "quotient-fields.lisp"))
(setf (callers-list 'MAKE-QUOTIENT-ELEMENT :file) '("numbers/numbers.lisp"
                                                    "rational-functions.lisp"
                                                    "quotient-fields.lisp"))
(setf (callers-list 'QE :file) '("quotient-fields.lisp"))
(setf (callers-list 'DEN :file) '("numbers/numbers.lisp"
                                  "rational-functions.lisp"
                                  "quotient-fields.lisp"))
(setf (callers-list 'RATFUN :file) '("numbers/numbers.lisp"
                                     "rational-functions.lisp"
                                     "quotient-fields.lisp"))
(setf (callers-list 'PRIN1 :file) '("numbers/numbers.lisp"
                                    "quotient-fields.lisp"))
(setf (callers-list 'HEIGHT :file) '("polynomials/mpolynomial.lisp"
                                     "numbers/numbers.lisp" "sets.lisp"
                                     "quotient-fields.lisp"))
(setf (callers-list 'COMMON-GCD :file) '("rational-functions.lisp"
                                         "quotient-fields.lisp"))
(setf (callers-list 'QUOTIENT-REDUCE* :file) '("quotient-fields.lisp"))
(setf (callers-list '(R1 QUOTIENT-ELEMENT) :file) '("quotient-fields.lisp"))
(setf (callers-list 'R2 :file) '("rational-functions.lisp"
                                 "quotient-fields.lisp"))
(setf (callers-list 'N1 :file) '("numbers/bigfloat.lisp"
                                 "rational-functions.lisp"
                                 "quotient-fields.lisp"))
(setf (callers-list 'R1 :file) '("rational-functions.lisp"
                                 "quotient-fields.lisp"))
(setf (callers-list 'N2 :file) '("numbers/bigfloat.lisp"
                                 "rational-functions.lisp"
                                 "quotient-fields.lisp"))
(setf (callers-list 'QUO :file) '("polynomials/mpolynomial.lisp"
                                  "numbers/numbers.lisp"
                                  "numbers/bigfloat.lisp"
                                  "quotient-fields.lisp"))
(setf (callers-list 'EXPT-QUOTIENT :file) '("quotient-fields.lisp"))
(setf (callers-list 'LCM :file) '("numbers/gfp.lisp" "tpower.lisp"
                                  "taylor.lisp" "quotient-fields.lisp"))
(setf (callers-list '(RING MULTIVARIATE-POLYNOMIAL-RING) :file) '("rational-functions.lisp"))
(setf (callers-list 'RATIONAL-FUNCTION-FIELD :file) '("rational-functions.lisp"))
(setf (callers-list 'MAKE-RATIONAL-FUNCTION :file) '("rational-functions.lisp"))
(setf (callers-list 'RATIONAL-FUNCTION :file) '("rational-functions.lisp"))
(setf (callers-list 'POLY-DOMAIN :file) '("rational-functions.lisp"))
(setf (callers-list 'POLY-MINUS? :file) '("polynomials/mpolynomial.lisp"
                                          "rational-functions.lisp"))
(setf (callers-list 'POLY-MINUS :file) '("polynomials/mpolynomial.lisp"
                                         "rational-functions.lisp"))
(setf (callers-list 'POLY-1? :file) '("polynomials/mpolynomial.lisp"
                                      "rational-functions.lisp"))
(setf (callers-list 'PRINT-MPOLYNOMIAL-FORM :file) '("polynomials/mpolynomial.lisp"
                                                     "rational-functions.lisp"))
(setf (callers-list 'POLY-GCD :file) '("polynomials/sparsegcd.lisp"
                                       "polynomials/mpolynomial.lisp"
                                       "rational-functions.lisp"))
(setf (callers-list 'POLY-QUOTIENT :file) '("polynomials/sparsegcd.lisp"
                                            "polynomials/mpolynomial.lisp"
                                            "rational-functions.lisp"))
(setf (callers-list 'MAKE-RATIONAL-FUNCTION* :file) '("rational-functions.lisp"))
(setf (callers-list '(R1 RATIONAL-FUNCTION) :file) '("rational-functions.lisp"))
(setf (callers-list 'POLY-EXPT :file) '("polynomials/mpolynomial.lisp"
                                        "rational-functions.lisp"))
(setf (callers-list 'POLY-LCM :file) '("rational-functions.lisp"))
(setf (callers-list 'RING-DOMAIN :file) '("rational-functions.lisp"))
(setf (callers-list 'NUM-X :file) '("rational-functions.lisp"))
(setf (callers-list 'DEN-X :file) '("rational-functions.lisp"))
(setf (callers-list 'ORDER-NUMBER :file) '("polynomials/poly-tools.lisp"
                                           "polynomials/mpolynomial.lisp"
                                           "rational-functions.lisp"))
(setf (callers-list 'POLY-LIST-OF-VARIABLES :file) '("polynomials/sparsegcd.lisp"
                                                     "polynomials/mpolynomial.lisp"
                                                     "rational-functions.lisp"))
(setf (callers-list 'GET-VARIABLE-NAME :file) '("polynomials/mpolynomial.lisp"
                                                "rational-functions.lisp"))
(setf (callers-list 'LIST-OF-VARIABLES :file) '("vector-spaces/vector.lisp"
                                                "polynomials/sparsegcd.lisp"
                                                "polynomials/mpolynomial.lisp"
                                                "rational-functions.lisp"))
(setf (callers-list 'VAR-VALUE :file) '("polynomials/mpolynomial.lisp"
                                        "rational-functions.lisp"))
(setf (callers-list 'RATIONAL-TERMS-HORNERS-RULE :file) '("rational-functions.lisp"))
(setf (callers-list 'OLD-E :file) '("polynomials/mpolynomial.lisp"
                                    "rational-functions.lisp"))
(setf (callers-list 'RATIONAL-POLY-SUBST :file) '("rational-functions.lisp"))
(setf (callers-list 'E- :file) '("polynomials/mpolynomial.lisp"
                                 "rational-functions.lisp"))
(setf (callers-list 'NEW-DOMAIN :file) '("polynomials/mpolynomial.lisp"
                                         "rational-functions.lisp"))
(setf (callers-list 'SUBST-LIST :file) '("rational-functions.lisp"))
(setf (callers-list 'NUM-P :file) '("rational-functions.lisp"))
(setf (callers-list 'DEN-P :file) '("rational-functions.lisp"))
(setf (callers-list 'E1? :file) '("polynomials/mpolynomial.lisp"
                                  "rational-functions.lisp"))
(setf (callers-list 'POLY-DERIVATIVE :file) '("polynomials/mpolynomial.lisp"
                                              "rational-functions.lisp"))
(setf (callers-list 'KERNEL :file) '("polynomials/mpolynomial.lisp"
                                     "rational-functions.lisp"))
(setf (callers-list 'VALUE-OF :file) '("sets.lisp"))
(setf (callers-list 'SUBCLASS-OF? :file) '("sets.lisp"))
(setf (callers-list 'DEFINE-OPERATIONS :file) '("classes/space-classes.lisp"
                                                "classes/algebraic-domains.lisp"
                                                "sets.lisp"))
(setf (callers-list 'ELEMENT :file) '("polynomials/mpolynomial.lisp"
                                      "numbers/gfp.lisp"
                                      "classes/space-classes.lisp"
                                      "classes/algebraic-domains.lisp"
                                      "sets.lisp"))
(setf (callers-list '-> :file) '("classes/space-classes.lisp"
                                 "classes/algebraic-domains.lisp" "sets.lisp"))
(setf (callers-list 'BOOLEAN :file) '("classes/algebraic-domains.lisp"
                                      "sets.lisp"))
(setf (callers-list 'MAKE-GENERATOR :file) '("sets.lisp"))
(setf (callers-list 'NUMBER-OF-ELEMENTS :file) '("numbers/gfp.lisp" "sets.lisp"))
(setf (callers-list 'INTEGER :file) '("numbers/bigfloat.lisp"
                                      "classes/algebraic-domains.lisp"
                                      "topology.lisp" "sets.lisp"))
(setf (callers-list 'MUTABLE-SET :file) '("sets.lisp"))
(setf (callers-list 'FINITE-SET :file) '("sets.lisp"))
(setf (callers-list 'RANDOM :file) '("polynomials/upolynomial.lisp"
                                     "polynomials/sparsegcd.lisp"
                                     "numbers/numbers.lisp" "numbers/gfp.lisp"
                                     "sets.lisp"))
(setf (callers-list 'ELEMENT-VALUE :file) '("sets.lisp"))
(setf (callers-list '(E1 SET-ELEMENT) :file) '("sets.lisp"))
(setf (callers-list 'E2 :file) '("vector-spaces/vector.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "polynomials/grobner.lisp"
                                 "numbers/bigfloat.lisp" "sets.lisp"))
(setf (callers-list 'SET-ELEMENT :file) '("sets.lisp"))
(setf (callers-list 'EQUAL-FUNCTION-OF :file) '("sets.lisp"))
(setf (callers-list 'E1 :file) '("vector-spaces/vector.lisp"
                                 "polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "polynomials/grobner.lisp"
                                 "numbers/bigfloat.lisp" "sets.lisp"))
(setf (callers-list 'GREATER-FUNCTION-OF :file) '("polynomials/grobner.lisp"
                                                  "polynomials/epolynomial.lisp"
                                                  "sets.lisp"))
(setf (callers-list 'SET-ELEMENT1 :file) '("sets.lisp"))
(setf (callers-list 'SET-ELEMENT2 :file) '("sets.lisp"))
(setf (callers-list 'ELTS :file) '("sets.lisp"))
(setf (callers-list 'SET-ELEMENTS :file) '("sets.lisp"))
(setf (callers-list 'INITIAL-ELEMENTS :file) '("sets.lisp"))
(setf (callers-list 'SET-ELEMENT-LIST :file) '("sets.lisp"))
(setf (callers-list 'NOT-AN-ELEMENT :file) '("sets.lisp"))
(setf (callers-list 'ORDER :file) '("polynomials/poly-tools.lisp"
                                    "numbers/gfp.lisp" "tpower.lisp"
                                    "taylor.lisp"))
(setf (callers-list 'DEFINE-TAYLOR-EXPANSION-FUN :file) '("taylor.lisp"))
(setf (callers-list 'COEFFS :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list 'FACTORIAL :file) '("taylor.lisp"))
(setf (callers-list 'MAKE-TPOWER-SERIES :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list 'TAYLOR :file) '("taylor.lisp"))
(setf (callers-list 'TEMP-COEFF :file) '("taylor.lisp"))
(setf (callers-list 'TP :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list 'VALENCE :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list 'WITH-TPOWER-SERIES :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list '(TP TP) :file) '("taylor.lisp"))
(setf (callers-list 'TP-VAL :file) '("taylor.lisp"))
(setf (callers-list 'TP-COEFFS :file) '("taylor.lisp"))
(setf (callers-list 'TAYLOR1 :file) '("taylor.lisp"))
(setf (callers-list 'NEW-VALENCE :file) '("taylor.lisp"))
(setf (callers-list 'MAX-VALENCE :file) '("taylor.lisp"))
(setf (callers-list 'NEW-BR :file) '("taylor.lisp"))
(setf (callers-list 'BRANCH-ORDER :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list 'FACTOR-OLD :file) '("taylor.lisp"))
(setf (callers-list 'FACTOR-NEW :file) '("taylor.lisp"))
(setf (callers-list 'GET-FUNCTION :file) '("taylor.lisp"))
(setf (callers-list 'GET-DEFAULT-TAYLOR-EXPANSION :file) '("taylor.lisp"))
(setf (callers-list 'POWER-SERIES-DOMAIN :file) '("taylor.lisp"))
(setf (callers-list 'TEMP-RING :file) '("taylor.lisp"))
(setf (callers-list 'COEF-RING :file) '("taylor.lisp"))
(setf (callers-list 'RING-VARS :file) '("taylor.lisp"))
(setf (callers-list 'TP-VAR :file) '("taylor.lisp"))
(setf (callers-list 'TPS-DERIV1 :file) '("taylor.lisp"))
(setf (callers-list 'TPS-DERIV2 :file) '("taylor.lisp"))
(setf (callers-list '(A A) :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list 'N-TERMS :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list 'A-ORDER :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list 'A-VAL :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list 'A-COEFFS :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list 'A-BO :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list 'NCOEFFS :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list 'SHIFT :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list 'TRIM-ZEROES :file) '("tpower.lisp" "taylor.lisp"))
(setf (callers-list 'TEMP-TP :file) '("taylor.lisp"))
(setf (callers-list 'COEF-POLY :file) '("taylor.lisp"))
(setf (callers-list 'CUR-VAR :file) '("taylor.lisp"))
(setf (callers-list 'VALUE-LIST :file) '("taylor.lisp"))
(setf (callers-list 'COEF-LIST :file) '("polynomials/upolynomial.lisp"
                                        "taylor.lisp"))
(setf (callers-list 'QUOTIENT-REDUCE :file) '("taylor.lisp"))
(setf (callers-list 'COEFFICIENT :file) '("polynomials/sparsegcd.lisp"
                                          "polynomials/mpolynomial.lisp"
                                          "taylor.lisp"))
(setf (callers-list 'EUCLIDEAN-SPACE :file) '("topology.lisp"))
(setf (callers-list 'MAKE-ELEMENT-FREE-MODULE-VECTOR :file) '("vector-spaces/vector.lisp"
                                                              "topology.lisp"))
(setf (callers-list '&OPTIONAL :file) '("topology.lisp"))
(setf (callers-list '(P1 ABSTRACT-POINT) :file) '("topology.lisp"))
(setf (callers-list 'P2 :file) '("vector-spaces/quaternions.lisp"
                                 "numbers/gfp.lisp" "topology.lisp"))
(setf (callers-list 'ABSTRACT-POINT :file) '("topology.lisp"))
(setf (callers-list 'P1 :file) '("vector-spaces/quaternions.lisp"
                                 "numbers/gfp.lisp" "topology.lisp"))
(setf (callers-list '(P1 POINT) :file) '("topology.lisp"))
(setf (callers-list 'P1-TUPLE :file) '("topology.lisp"))
(setf (callers-list 'P2-TUPLE :file) '("topology.lisp"))
(setf (callers-list 'NAMED-POINT :file) '("topology.lisp"))
(setf (callers-list 'CELL-ID :file) '("topology.lisp"))
(setf (callers-list 'CELL1 :file) '("topology.lisp"))
(setf (callers-list 'CELL2 :file) '("topology.lisp"))
(setf (callers-list 'F-LIST :file) '("topology.lisp"))
(setf (callers-list 'CHOOSE :file) '("topology.lisp"))
(setf (callers-list 'FACET :file) '("topology.lisp"))
(setf (callers-list 'SUBSETP :file) '("polynomials/mpolynomial.lisp"
                                      "topology.lisp"))
(setf (callers-list 'SIMPLEX1 :file) '("topology.lisp"))
(setf (callers-list 'SIMPLEX2 :file) '("topology.lisp"))
(setf (callers-list 'ORIENTATION :file) '("topology.lisp"))
(setf (callers-list 'GENSYM :file) '("topology.lisp"))
(setf (callers-list 'COFACET :file) '("topology.lisp"))
(setf (callers-list 'ID-LIST :file) '("topology.lisp"))
(setf (callers-list 'POLYGON :file) '("topology.lisp"))
(setf (callers-list 'CELL-TABLE-OF :file) '("topology.lisp"))
(setf (callers-list 'VERTEX-LIST :file) '("topology.lisp"))
(setf (callers-list 'MULTIPLE-VALUE-LIST :file) '("topology.lisp"))
(setf (callers-list 'FACET-TABLE-OF :file) '("topology.lisp"))
(setf (callers-list 'CELLS :file) '("topology.lisp"))
(setf (callers-list 'FACET-LIST :file) '("topology.lisp"))
(setf (callers-list 'REMOVE-DUPLICATES :file) '("topology.lisp"))
(setf (callers-list 'COFACET-TABLE-OF :file) '("topology.lisp"))
(setf (callers-list 'COFACET-LIST :file) '("topology.lisp"))
(setf (callers-list 'FACETS-LIST :file) '("topology.lisp"))
(setf (callers-list '%INSERT :file) '("topology.lisp"))
(setf (callers-list 'COFACET-TABLE :file) '("topology.lisp"))
(setf (callers-list 'CELL-TABLE :file) '("topology.lisp"))
(setf (callers-list 'FACET-TABLE :file) '("topology.lisp"))
(setf (callers-list '%DELETE :file) '("topology.lisp"))
(setf (callers-list 'STRUCTURE :file) '("topology.lisp"))
(setf (callers-list 'COMPLEX1 :file) '("topology.lisp"))
(setf (callers-list 'COMPLEX2 :file) '("topology.lisp"))
(setf (callers-list 'VERT-LIST :file) '("topology.lisp"))
(setf (callers-list 'V-CELL :file) '("topology.lisp"))
(setf (callers-list 'CELL-COMPLEX :file) '("topology.lisp"))
(setf (callers-list 'SIMPLICIAL-COMPLEX :file) '("topology.lisp"))
(setf (callers-list 'CM :file) '("topology.lisp"))
(setf (callers-list '%COERCION-CACHE-OF :file) '("topology.lisp"))
(setf (callers-list 'COERCION-CACHE :file) '("topology.lisp"))
(setf (callers-list 'COMPLEX-OF :file) '("topology.lisp"))
(setf (callers-list 'CHAIN :file) '("topology.lisp"))
(setf (callers-list 'CHAIN-MODULE :file) '("topology.lisp"))
(setf (callers-list 'COCHAIN-MODULE :file) '("topology.lisp"))
(setf (callers-list 'GET-CHAIN-MODULE :file) '("topology.lisp"))
(setf (callers-list 'MAKE-SIMPLICIAL-COMPLEX :file) '("topology.lisp"))
(setf (callers-list 'MAX-DIMENSION-OF :file) '("topology.lisp"))
(setf (callers-list 'COCHAIN :file) '("topology.lisp"))
(setf (callers-list 'GET-COCHAIN-MODULE :file) '("topology.lisp"))
(setf (callers-list 'PRINT-GROUPED :file) '("tpower.lisp" "topology.lisp"))
(setf (callers-list 'CHAIN-TERMS-OF :file) '("topology.lisp"))
(setf (callers-list 'PRINT-TERM :file) '("polynomials/upolynomial.lisp"
                                         "polynomials/mpolynomial.lisp"
                                         "tpower.lisp" "topology.lisp"))
(setf (callers-list 'PAIR :file) '("polynomials/upolynomial.lisp"
                                   "topology.lisp"))
(setf (callers-list 'CACHED :file) '("topology.lisp"))
(setf (callers-list 'MAKE-CHAIN :file) '("topology.lisp"))
(setf (callers-list 'AV :file) '("topology.lisp"))
(setf (callers-list 'AORDER :file) '("topology.lisp"))
(setf (callers-list 'POINTS-ORDER :file) '("topology.lisp"))
(setf (callers-list 'CHAIN-OR-COCHAIN :file) '("topology.lisp"))
(setf (callers-list 'SIMPS :file) '("topology.lisp"))
(setf (callers-list 'SIMP :file) '("topology.lisp"))
(setf (callers-list 'CELL-ORDER :file) '("topology.lisp"))
(setf (callers-list 'MAKE-CHAIN-OR-COCHAIN :file) '("topology.lisp"))
(setf (callers-list 'FACE? :file) '("topology.lisp"))
(setf (callers-list 'XT :file) '("topology.lisp"))
(setf (callers-list 'YT :file) '("topology.lisp"))
(setf (callers-list 'PAIR-UP-TERMS :file) '("polynomials/mpolynomial.lisp"
                                            "topology.lisp"))
(setf (callers-list 'SIMP1 :file) '("topology.lisp"))
(setf (callers-list 'SIMP2 :file) '("topology.lisp"))
(setf (callers-list 'C-SUM :file) '("polynomials/mpolynomial.lisp"
                                    "topology.lisp"))
(setf (callers-list 'FREE-GROUP-DIFFERENCE :file) '("topology.lisp"))
(setf (callers-list '(X CHAIN) :file) '("topology.lisp"))
(setf (callers-list 'FREE-GROUP-PLUS :file) '("topology.lisp"))
(setf (callers-list 'FREE-GROUP-SCALAR-TIMES :file) '("topology.lisp"))
(setf (callers-list 'FREE-GROUP-MINUS :file) '("topology.lisp"))
(setf (callers-list 'C-PROD :file) '("topology.lisp"))
(setf (callers-list 'CHAIN-TERMS-TIMES :file) '("topology.lisp"))
(setf (callers-list 'MAP-OVER-ORIENTED-FACETS :file) '("topology.lisp"))
(setf (callers-list 'O :file) '("classes/space-classes.lisp" "topology.lisp"))
(setf (callers-list 'BD :file) '("topology.lisp"))
(setf (callers-list 'BOUNDARY-DOMAIN :file) '("topology.lisp"))
(setf (callers-list 'HT :file) '("topology.lisp"))
(setf (callers-list 'EVEN? :file) '("topology.lisp"))
(setf (callers-list 'CH :file) '("topology.lisp"))
(setf (callers-list 'COBOUNDARY-DOMAIN :file) '("topology.lisp"))
(setf (callers-list 'MAP-OVER-ORIENTED-COFACETS :file) '("topology.lisp"))
(setf (callers-list 'MAKE-COCHAIN :file) '("topology.lisp"))
(setf (callers-list 'COCM :file) '("topology.lisp"))
(setf (callers-list 'COPY-TREE :file) '("topology.lisp"))
(setf (callers-list 'TPOWER-SERIES-RING :file) '("tpower.lisp"))
(setf (callers-list '(COEFFICIENT-DOMAIN DOMAIN) :file) '("polynomials/mpolynomial.lisp"
                                                          "tpower.lisp"))
(setf (callers-list 'FIELD? :file) '("polynomials/grobner.lisp"
                                     "numbers/numbers.lisp"
                                     "classes/algebraic-domains.lisp"
                                     "tpower.lisp"))
(setf (callers-list 'TPOWER-SERIES :file) '("tpower.lisp"))
(setf (callers-list 'TPOWER-SERIES-FIELD :file) '("tpower.lisp"))
(setf (callers-list 'CDOM :file) '("tpower.lisp"))
(setf (callers-list 'GVARIABLE :file) '("tpower.lisp"))
(setf (callers-list 'RING? :file) '("classes/algebraic-domains.lisp"
                                    "tpower.lisp"))
(setf (callers-list 'MAKE-TPOWER-SERIES-RING* :file) '("tpower.lisp"))
(setf (callers-list 'SERIES :file) '("tpower.lisp"))
(setf (callers-list 'LEAD :file) '("tpower.lisp"))
(setf (callers-list 'TRAIL :file) '("tpower.lisp"))
(setf (callers-list 'STR :file) '("tpower.lisp"))
(setf (callers-list 'EVERY :file) '("tpower.lisp"))
(setf (callers-list 'ALPHANUMERICP :file) '("tpower.lisp"))
(setf (callers-list 'GROUPED? :file) '("tpower.lisp"))
(setf (callers-list '#\[ :file) '("tpower.lisp"))
(setf (callers-list '#\] :file) '("tpower.lisp"))
(setf (callers-list '#\{ :file) '("tpower.lisp"))
(setf (callers-list '#\} :file) '("tpower.lisp"))
(setf (callers-list 'CHAR= :file) '("numbers/bigfloat.lisp" "tpower.lisp"))
(setf (callers-list 'CHAR :file) '("numbers/gfp.lisp" "numbers/bigfloat.lisp"
                                   "tpower.lisp"))
(setf (callers-list 'DEPTH :file) '("tpower.lisp"))
(setf (callers-list 'NEVER :file) '("tpower.lisp"))
(setf (callers-list 'BR :file) '("tpower.lisp"))
(setf (callers-list 'PRINT-EXPONENT :file) '("tpower.lisp"))
(setf (callers-list '*POSITIVE-INFINITY* :file) '("numbers/numbers.lisp"
                                                  "numbers/gfp.lisp"
                                                  "tpower.lisp"))
(setf (callers-list 'PRINT-TPOWER-SERIES :file) '("tpower.lisp"))
(setf (callers-list 'ZED :file) '("tpower.lisp"))
(setf (callers-list 'RVAL :file) '("tpower.lisp"))
(setf (callers-list 'VARS-AND-TPS :file) '("tpower.lisp"))
(setf (callers-list 'TPS :file) '("tpower.lisp"))
(setf (callers-list 'TPS-VAR-VAL :file) '("tpower.lisp"))
(setf (callers-list 'TPS-VAR-BO :file) '("tpower.lisp"))
(setf (callers-list 'TPS-VAR-ORDER :file) '("tpower.lisp"))
(setf (callers-list 'TPS-VAR-COEFFS :file) '("tpower.lisp"))
(setf (callers-list 'TPS-SPREAD-COEFFS :file) '("tpower.lisp"))
(setf (callers-list 'BO :file) '("tpower.lisp"))
(setf (callers-list 'MODIFY-BRANCH-ORDER :file) '("tpower.lisp"))
(setf (callers-list 'GE-ATOM? :file) '("polynomials/mpolynomial.lisp"
                                       "classes/general-classes.lisp"
                                       "tpower.lisp"))
(setf (callers-list 'INTEGER? :file) '("polynomials/mpolynomial.lisp"
                                       "tpower.lisp"))
(setf (callers-list 'COPY-SEQ :file) '("tpower.lisp"))
(setf (callers-list 'ORD :file) '("tpower.lisp"))
(setf (callers-list 'CLIST-DEGREE :file) '("polynomials/upolynomial.lisp"
                                           "tpower.lisp"))
(setf (callers-list 'ARR :file) '("tpower.lisp"))
(setf (callers-list 'MTORDER :file) '("tpower.lisp"))
(setf (callers-list 'TORDER :file) '("tpower.lisp"))
(setf (callers-list 'SUBSEQ :file) '("tpower.lisp"))
(setf (callers-list 'MAP-TPOWER-SERIES :file) '("tpower.lisp"))
(setf (callers-list '(A TPOWER-SERIES) :file) '("tpower.lisp"))
(setf (callers-list 'B-BO :file) '("tpower.lisp"))
(setf (callers-list 'A-LIM :file) '("tpower.lisp"))
(setf (callers-list 'B-LIM :file) '("tpower.lisp"))
(setf (callers-list 'COM :file) '("tpower.lisp"))
(setf (callers-list 'SET-BRANCH-ORDER :file) '("tpower.lisp"))
(setf (callers-list 'B-VAL :file) '("tpower.lisp"))
(setf (callers-list 'B-ORDER :file) '("tpower.lisp"))
(setf (callers-list 'TPS-ROTATEF :file) '("tpower.lisp"))
(setf (callers-list 'B-COEFFS :file) '("tpower.lisp"))
(setf (callers-list 'BINARY< :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'BINARY<= :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list '*EMPTY-PROPERTY* :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'SUBSUMED-PROPERTIES :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'DEFINE-MATH-PROPERTY :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'ORDERED-DOMAIN :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'COMPLETE-SET :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'SEMIGROUP? :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'POSITIVE-INTEGER :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'MONOID? :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'GROUP? :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'ABELIAN-SEMIGROUP? :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'ABELIAN-MONOID? :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'ABELIAN-GROUP? :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'SIMPLE-RING? :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'SIMPLE-RING :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'MODULE? :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'ALGEBRA? :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list '(X DOMAIN-ELEMENT) :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'INTEGRAL-DOMAIN :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'EUCLIDEAN-DOMAIN :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'GCD-DOMAIN :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'UNIQUE-FACTORIZATION-DOMAIN :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'ASSERT-INTEGRAL-DOMAIN :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'FREE-MODULE? :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'VECTOR-SPACE? :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'PROJECTIVE-SPACE? :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'DIFFERENTIAL-RING? :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'ASSERT-ORDERED-DOMAIN :file) '("numbers/numbers.lisp"
                                                    "classes/algebraic-domains.lisp"))
(setf (callers-list 'ASSERT-COMPLETE-SET :file) '("classes/algebraic-domains.lisp"))
(setf (callers-list 'QUATERNION-DOMAIN :file) '("vector-spaces/quaternions.lisp"
                                                "classes/algebraic-domains.lisp"))
(setf (callers-list 'GE-NARY? :file) '("classes/general-classes.lisp"))
(setf (callers-list 'APPLICABLE-FUNCTION? :file) '("classes/general-classes.lisp"))
(setf (callers-list 'GE-FUNCTION-DERIV? :file) '("classes/general-classes.lisp"))
(setf (callers-list 'GE-APPLICATION? :file) '("classes/general-classes.lisp"))
(setf (callers-list 'GE-EQN=? :file) '("classes/general-classes.lisp"))
(setf (callers-list 'GE-EQN>? :file) '("classes/general-classes.lisp"))
(setf (callers-list 'GE-EQN>=? :file) '("classes/general-classes.lisp"))
(setf (callers-list 'GE-FOURIER? :file) '("classes/general-classes.lisp"))
(setf (callers-list 'GE-IFOURIER? :file) '("classes/general-classes.lisp"))
(setf (callers-list 'ID-NUMBER :file) '("classes/space-classes.lisp"))
(setf (callers-list '%GLOBAL-ID-COUNTER-OF :file) '("classes/space-classes.lisp"))
(setf (callers-list 'ORIENT :file) '("classes/space-classes.lisp"))
(setf (callers-list 'PSETF :file) '("classes/space-classes.lisp"))
(setf (callers-list 'ORIENTED-SORT :file) '("classes/space-classes.lisp"))
(setf (callers-list 'BANACH-SPACE :file) '("classes/space-classes.lisp"))
(setf (callers-list 'NORM :file) '("numbers/numbers.lisp"
                                   "classes/space-classes.lisp"))
(setf (callers-list 'REAL-NUMBERS :file) '("numbers/numbers.lisp"
                                           "classes/space-classes.lisp"))
(setf (callers-list 'PROCLAIM :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'MANTISSA :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BIGFLOAT :file) '("numbers/numbers.lisp"
                                       "numbers/bigfloat.lisp"))
(setf (callers-list 'BIGFLOATP :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'PRECI! :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'INCPREC! :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'ROUND!LAST :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'DECPREC! :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'NMBR :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'MT :file) '("numbers/bigfloat.lisp"))
(setf (callers-list '#\0 :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'CHARS :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'DIGIT :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'DIGIT-CHAR :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'ABS-NMBR :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'ROUND!MT :file) '("numbers/numbers.lisp"
                                       "numbers/bigfloat.lisp"))
(setf (callers-list '*REAL-PRECISION* :file) '("numbers/numbers.lisp"
                                               "numbers/bigfloat.lisp"))
(setf (callers-list 'CONVERT-NUMBER->CHARACTERS :file) '("numbers/bigfloat.lisp"))
(setf (callers-list '#\- :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'CHAR/= :file) '("numbers/bigfloat.lisp"))
(setf (callers-list '#\. :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BFPRIN1 :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'ORDER! :file) '("numbers/bigfloat.lisp"))
(setf (callers-list '#\+ :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'EP :file) '("polynomials/mpolynomial.lisp"
                                 "numbers/bigfloat.lisp"))
(setf (callers-list 'PARSE-INTEGER :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'FRACTION :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'INTEGER-DECODE-FLOAT :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'FLOAT-RADIX :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'CONV!MT :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'PRECISION :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-EXPT :file) '("numbers/numbers.lisp"
                                      "numbers/bigfloat.lisp"))
(setf (callers-list 'BF-TIMES :file) '("numbers/numbers.lisp"
                                       "numbers/bigfloat.lisp"))
(setf (callers-list 'BF-FLOOR :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'CUT!EP :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-INTEGER-PART :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-DIFFERENCE :file) '("numbers/numbers.lisp"
                                            "numbers/bigfloat.lisp"))
(setf (callers-list 'FLOOR1 :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'CEILING1 :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'CNST :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'CONSTANT :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'DIGITS :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'SET!CONST :file) '("numbers/bigfloat.lisp"))
(setf (callers-list '!PI :file) '("numbers/bigfloat.lisp"))
(setf (callers-list '0 :file) '("numbers/bigfloat.lisp"))
(setf (callers-list '!E :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'K+3 :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'SS :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'SAVE!CONST :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'K2 :file) '("numbers/gfp.lisp" "numbers/bigfloat.lisp"))
(setf (callers-list 'NCUT :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'HALF :file) '("numbers/numbers.lisp"
                                   "numbers/bigfloat.lisp"))
(setf (callers-list 'DCUT :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'DY :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'NFIG :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'Y0 :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-ABS :file) '("numbers/numbers.lisp"
                                     "numbers/bigfloat.lisp"))
(setf (callers-list 'BF-QUOTIENT :file) '("numbers/numbers.lisp"
                                          "numbers/bigfloat.lisp"))
(setf (callers-list 'BF-PLUS :file) '("numbers/numbers.lisp"
                                      "numbers/bigfloat.lisp"))
(setf (callers-list 'BF-SQRT :file) '("numbers/numbers.lisp"
                                      "numbers/bigfloat.lisp"))
(setf (callers-list 'CUT!MT :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'GET!CONST :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-PI-MACHIN :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-PI-AGM :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-PI :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-E :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'YQ :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'YR :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'RI :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'TM :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'FCTRIAL :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-EXP :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'EE :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'ES :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-MINUS :file) '("numbers/numbers.lisp"
                                       "numbers/bigfloat.lisp"))
(setf (callers-list 'PROG :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'ZI :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'LOG2 :file) '("numbers/bigfloat.lisp"))
(setf (callers-list '(X BIGFLOAT) :file) '("numbers/numbers.lisp"
                                           "numbers/bigfloat.lisp"))
(setf (callers-list 'BF-LOG :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'PI4 :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-SIN :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-COS :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-TAN :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-ATAN :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-ASIN :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-ACOS :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'BF-INTEGERP :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'XP :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'YP :file) '("numbers/bigfloat.lisp"))
(setf (callers-list 'GFP-ELEMENT :file) '("numbers/gfp.lisp"))
(setf (callers-list 'FIELD-DEGREE :file) '("numbers/gfp.lisp"))
(setf (callers-list 'NUMBER~ :file) '("numbers/gfp.lisp"))
(setf (callers-list '*PRINT-MODULUS* :file) '("numbers/gfp.lisp"))
(setf (callers-list 'A1 :file) '("numbers/gfp.lisp"))
(setf (callers-list 'A2 :file) '("numbers/gfp.lisp"))
(setf (callers-list 'PSETQ :file) '("polynomials/sparsegcd.lisp"
                                    "numbers/gfp.lisp"))
(setf (callers-list '(X GFP-ELEMENT) :file) '("numbers/gfp.lisp"))
(setf (callers-list 'V1 :file) '("vector-spaces/vector.lisp" "numbers/gfp.lisp"))
(setf (callers-list 'V2 :file) '("vector-spaces/vector.lisp" "numbers/gfp.lisp"))
(setf (callers-list '(A GFP-ELEMENT) :file) '("numbers/gfp.lisp"))
(setf (callers-list 'GROUP-ORDER :file) '("numbers/gfp.lisp"))
(setf (callers-list '*GF2-IRREDUCIBLE-POLYNOMIALS* :file) '("numbers/gfp.lisp"))
(setf (callers-list 'MASK :file) '("numbers/gfp.lisp"))
(setf (callers-list 'LOGAND :file) '("numbers/gfp.lisp"))
(setf (callers-list 'GF2^N :file) '("numbers/gfp.lisp"))
(setf (callers-list 'X^N :file) '("numbers/gfp.lisp"))
(setf (callers-list 'LOGXOR :file) '("numbers/gfp.lisp"))
(setf (callers-list 'GF2^N-ELEMENT :file) '("numbers/gfp.lisp"))
(setf (callers-list 'GROUP-SIZE :file) '("numbers/gfp.lisp"))
(setf (callers-list 'ALL-DIVISORS :file) '("numbers/gfp.lisp"))
(setf (callers-list '(A GF2^N-ELEMENT) :file) '("numbers/gfp.lisp"))
(setf (callers-list 'ACC :file) '("numbers/gfp.lisp"))
(setf (callers-list 'ANSWER :file) '("polynomials/mpolynomial.lisp"
                                     "polynomials/epolynomial.lisp"
                                     "numbers/gfp.lisp"))
(setf (callers-list 'HI-BITS :file) '("numbers/gfp.lisp"))
(setf (callers-list 'GFP-REDUCTION-TABLE :file) '("numbers/gfp.lisp"))
(setf (callers-list '(X GF2^N-ELEMENT) :file) '("numbers/gfp.lisp"))
(setf (callers-list 'GFM :file) '("numbers/gfp.lisp"))
(setf (callers-list 'GFM-ELEMENT :file) '("numbers/gfp.lisp"))
(setf (callers-list '(X GFM-ELEMENT) :file) '("numbers/gfp.lisp"))
(setf (callers-list '(A GFM-ELEMENT) :file) '("numbers/gfp.lisp"))
(setf (callers-list 'MAKE-GFM-DOMAIN :file) '("numbers/gfp.lisp"))
(setf (callers-list 'MAKE-GFP-DOMAIN :file) '("numbers/gfp.lisp"))
(setf (callers-list 'MAKE-FINITE-FIELD* :file) '("numbers/gfp.lisp"))
(setf (callers-list 'GENERATORS-OF :file) '("polynomials/grobner.lisp"
                                            "numbers/gfp.lisp"))
(setf (callers-list 'P1INV :file) '("numbers/gfp.lisp"))
(setf (callers-list 'ASSERT-GCD-DOMAIN :file) '("numbers/numbers.lisp"))
(setf (callers-list 'ASSERT-UNIQUE-FACTORIZATION-DOMAIN :file) '("numbers/numbers.lisp"))
(setf (callers-list 'RATIONAL-NUMBERS :file) '("numbers/numbers.lisp"))
(setf (callers-list '(RING RATIONAL-INTEGERS) :file) '("numbers/numbers.lisp"))
(setf (callers-list 'MAKE-RATIONAL-NUMBERS :file) '("numbers/numbers.lisp"))
(setf (callers-list '*FLOATING-POINT-PRECISION* :file) '("numbers/numbers.lisp"))
(setf (callers-list 'COMPLEX-NUMBERS :file) '("numbers/numbers.lisp"))
(setf (callers-list 'COMPLEXP :file) '("numbers/numbers.lisp"))
(setf (callers-list 'REAL :file) '("numbers/numbers.lisp"))
(setf (callers-list 'IMAG :file) '("numbers/numbers.lisp"))
(setf (callers-list 'REAL-BODY :file) '("numbers/numbers.lisp"))
(setf (callers-list 'IMAG-BODY :file) '("numbers/numbers.lisp"))
(setf (callers-list 'DEF-REALIMAG-PART :file) '("numbers/numbers.lisp"))
(setf (callers-list '*DEFAULT-RANDOM-HEIGHT* :file) '("numbers/numbers.lisp"))
(setf (callers-list 'RANDOM-FLOATING-NUMBER :file) '("numbers/numbers.lisp"))
(setf (callers-list 'X-VAL :file) '("numbers/numbers.lisp"))
(setf (callers-list 'COMPLETE-SET? :file) '("numbers/numbers.lisp"))
(setf (callers-list 'N-ROOT :file) '("numbers/numbers.lisp"))
(setf (callers-list 'D-ROOT :file) '("numbers/numbers.lisp"))
(setf (callers-list 'MAG :file) '("numbers/numbers.lisp"))
(setf (callers-list 'Y-VAL :file) '("numbers/numbers.lisp"))
(setf (callers-list 'BINARY-OP :file) '("numbers/numbers.lisp"))
(setf (callers-list 'NUMBER-NUMERIC? :file) '("numbers/numbers.lisp"))
(setf (callers-list 'CONTAGION :file) '("numbers/numbers.lisp"))
(setf (callers-list '(X NUMERIC) :file) '("numbers/numbers.lisp"))
(setf (callers-list 'NUMERIC :file) '("numbers/numbers.lisp"))
(setf (callers-list '(X RATIONAL-INTEGER) :file) '("numbers/numbers.lisp"))
(setf (callers-list 'CONVERT-TO-BIGFLOAT :file) '("numbers/numbers.lisp"))
(setf (callers-list '(X RATIONAL-NUMBER) :file) '("numbers/numbers.lisp"))
(setf (callers-list '(X FLOATING-POINT-NUMBER) :file) '("numbers/numbers.lisp"))
(setf (callers-list '(X COMPLEX-NUMBER) :file) '("numbers/numbers.lisp"))
(setf (callers-list 'BF-BINARY= :file) '("numbers/numbers.lisp"))
(setf (callers-list 'DEFINE-BINARY-CONTAGIONS :file) '("numbers/numbers.lisp"))
(setf (callers-list '*NEGATIVE-INFINITY* :file) '("numbers/numbers.lisp"))
(setf (callers-list 'X-REAL :file) '("numbers/numbers.lisp"))
(setf (callers-list 'X-IMAG :file) '("numbers/numbers.lisp"))
(setf (callers-list 'Y-REAL :file) '("numbers/numbers.lisp"))
(setf (callers-list 'Y-IMAG :file) '("numbers/numbers.lisp"))
(setf (callers-list 'NN :file) '("numbers/numbers.lisp"))
(setf (callers-list '(N RATIONAL-INTEGER) :file) '("numbers/numbers.lisp"))
(setf (callers-list 'ABS-NN :file) '("numbers/numbers.lisp"))
(setf (callers-list '(A RATIONAL-INTEGER) :file) '("numbers/numbers.lisp"))
(setf (callers-list 'A-DOMAIN :file) '("numbers/numbers.lisp"))
(setf (callers-list 'B-DOMAIN :file) '("numbers/numbers.lisp"))
(setf (callers-list 'EXTENDED-GCD* :file) '("numbers/numbers.lisp"))
(setf (callers-list 'SIGNUM :file) '("numbers/numbers.lisp"))
(setf (callers-list 'ATANH :file) '("numbers/numbers.lisp"))
(setf (callers-list 'GREATER-FUNCTION :file) '("polynomials/grobner.lisp"
                                               "polynomials/epolynomial.lisp"))
(setf (callers-list 'EPOLYNOMIAL :file) '("polynomials/mpolynomial.lisp"
                                          "polynomials/grobner.lisp"
                                          "polynomials/epolynomial.lisp"))
(setf (callers-list 'MAKE-EPOLYNOMIAL :file) '("polynomials/grobner.lisp"
                                               "polynomials/epolynomial.lisp"))
(setf (callers-list 'MAKE-EPOLYNOMIAL* :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'NEXT-VAR :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'SCAN-POLY-FORM :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'GET-COMPARISON-FUN :file) '("polynomials/grobner.lisp"
                                                 "polynomials/epolynomial.lisp"))
(setf (callers-list 'FIRST? :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'GTERM-CONSTANT? :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'NUM-VARS :file) '("polynomials/sparsegcd.lisp"
                                       "polynomials/epolynomial.lisp"))
(setf (callers-list 'FBOUNDP :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'SYMBOL-FUNCTION :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'MAKE-COMPARISON-FUN :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'VAR-ORDER :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'TOTAL? :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'REVERSE? :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'NEW? :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'GREAT :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'LESS :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'COMPILE :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'EPOL :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'CONVERT-TERM :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'TRANSFORM-TERM :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list '(X EPOLYNOMIAL) :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'SAME-GREATER-FUNCTIONS :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'GTERMS-PLUS :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'ANS-TERMS :file) '("polynomials/grobner.lisp"
                                        "polynomials/epolynomial.lisp"))
(setf (callers-list '.E. :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list '.C. :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'TERMS0? :file) '("polynomials/sparsegcd.lisp"
                                      "polynomials/mpolynomial.lisp"
                                      "polynomials/grobner.lisp"
                                      "polynomials/epolynomial.lisp"))
(setf (callers-list 'COLLECT-OLD-TERM :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'LT :file) '("polynomials/grobner.lisp"
                                 "polynomials/epolynomial.lisp"))
(setf (callers-list 'SLOT-VALUE :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'GTERMS-MINUS :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'MAKE-ETERM :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'GTERMS-DIFFERENCE :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'GTERMS-TIMES :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'TERMS0 :file) '("polynomials/mpolynomial.lisp"
                                     "polynomials/epolynomial.lisp"))
(setf (callers-list 'PTERM :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'NTERM :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'X-TERM :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'Y-TERM :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'THE :file) '("polynomials/upolynomial.lisp"
                                  "polynomials/epolynomial.lisp"))
(setf (callers-list 'GTERMS-MON-TIMES :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'GTERM-TIMES :file) '("polynomials/grobner.lisp"
                                          "polynomials/epolynomial.lisp"))
(setf (callers-list 'RED-ANS :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'GTERM-EQUAL :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'CF :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'GTERMS-EXPT :file) '("polynomials/epolynomial.lisp"))
(setf (callers-list 'ID :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'SUPER-DOMAINS-OF :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'GENS :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'GENERATORS :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'PID-IDEAL :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'ID1 :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'ID2 :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'MAKE-IDEAL :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'ID2-GEN :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'GROBNER-BASIS :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'GB :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'POLYS :file) '("polynomials/mpolynomial.lisp"
                                    "polynomials/grobner.lisp"))
(setf (callers-list 'ADD-RELATION :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'NEW-FUNCTION :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'GROB :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'CONVERT-LIST :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'REDUCIBLES :file) '("polynomials/upolynomial.lisp"
                                         "polynomials/grobner.lisp"))
(setf (callers-list 'POSSIBLES :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'BASIS :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'GROB-STRUCT :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'REDUCIBLES-OF :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'UNDONES :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'TERMS1 :file) '("polynomials/mpolynomial.lisp"
                                     "polynomials/grobner.lisp"))
(setf (callers-list 'TERMS2 :file) '("polynomials/mpolynomial.lisp"
                                     "polynomials/grobner.lisp"))
(setf (callers-list 'GTERM-LCM :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'XE :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'GTERM-QUOT :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'XC :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'YE :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'YC :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'NEW-XE :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'NEW-YE :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'WITH-GROBNER-OPERATIONS :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'GTERM-DOMINATES :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'B2 :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'CRITERION1 :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'REDUCE-ALL :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'NEW-BASIS :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'GTERM-DISJOINT :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'TERMS-REDUCE :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'GTERMS-PRIM* :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'TERMS-S-POLY :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'UNDONE :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'G0 :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'E> :file) '("polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"
                                 "polynomials/grobner.lisp"))
(setf (callers-list 'FF :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'GG :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'ADD-UNDONE :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'E< :file) '("polynomials/mpolynomial.lisp"
                                 "polynomials/grobner.lisp"))
(setf (callers-list 'AGAIN :file) '("polynomials/grobner.lisp"))
(setf (callers-list '1/LC :file) '("polynomials/grobner.lisp"))
(setf (callers-list 'MULTIVARIATE-POLYNOMIAL-RING :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'MPOLYNOMIAL :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLYNOMIAL-RING :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'MAKE-POLYNOMIAL-RING* :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'VARIABLE-INDEX-TABLE :file) '("polynomials/poly-tools.lisp"
                                                   "polynomials/mpolynomial.lisp"))
(setf (callers-list 'E-C-PAIRS :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'ORDER-PREDICATE :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list '*EMPTY-ACCUMULATION-SLOT* :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'ACCUMULATOR :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'ELEMENT-FORMS :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'INSERT-INTO-ACCUMULATION-LIST :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'ACCUM-LIST :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'ACCUMULATE-ACCUMULATION-LIST :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'RANGE-COEFFICIENT-DOMAIN :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'MAKE-AUTOMORPHISM :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TRANSFORM :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'MAKE-POLYNOMIAL-MORPHISM :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-MONOMIAL? :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'SIMPLE-COEFS? :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'COMPLEX-NUM-COEFS? :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'PRINT-FORM :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'E= :file) '("polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-PLUS :file) '("polynomials/sparsegcd.lisp"
                                         "polynomials/mpolynomial.lisp"))
(setf (callers-list '(X MPOLYNOMIAL) :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-MINUS :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-MINUS? :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-DIFFERENCE :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TE :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TC :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'E+ :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'E-Y :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'E-X :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'C-X :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'C-Y :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'E* :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'BL :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'MONOMIAL :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'X^M :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'NOM :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'THROW :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-QUOTIENT* :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-CQUOTIENT :file) '("polynomials/sparsegcd.lisp"
                                              "polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-QUOTIENT :file) '("polynomials/sparsegcd.lisp"
                                             "polynomials/mpolynomial.lisp"))
(setf (callers-list 'STRINGP :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'EMINUS? :file) '("polynomials/sparsegcd.lisp"
                                      "polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-COEF-REMAINDER :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-PSEUDO-REMAINDER :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-TRUNCATE2 :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-HEIGHT :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-GCD-ALGORITHM :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-CONTENT :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-CONTENT :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'PC :file) '("polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"))
(setf (callers-list 'QC :file) '("polynomials/sparsegcd.lisp"
                                 "polynomials/mpolynomial.lisp"))
(setf (callers-list 'PVARS :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'BAD-V :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'NEW-POLYS :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'DEG :file) '("polynomials/upolynomial.lisp"
                                  "polynomials/sparsegcd.lisp"
                                  "polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-DEGREE :file) '("polynomials/sparsegcd.lisp"
                                          "polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-COEFFICIENT :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'ALL-POLYS :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'SAME-VARS :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'VS :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-SPLIT-ON-VARS :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'ODD-POLY :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'EVEN-POLY :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-FIND-COMMON-VARS :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'RANDOM-CONSTANT :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'SPMOD-GCD1 :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-TEST-QUOTIENT :file) '("polynomials/sparsegcd.lisp"
                                                 "polynomials/mpolynomial.lisp"))
(setf (callers-list 'CONTENT :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-PRIM-PART :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'INV :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-MONICIZE :file) '("polynomials/sparsegcd.lisp"
                                             "polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-EUCLIDEAN-GCD :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-PRIMITIVE-GCD :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-REDUCED-GCD :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'DELTA :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'BETA :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'E1+ :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-SUBRESULTANT-GCD :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLYNOMIAL :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLYNOMIAL~ :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'PVAR :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'INTO-VARLIST :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'OUT-VARLIST :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-SUBST :file) '("polynomials/sparsegcd.lisp"
                                         "polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-RESULTANT :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'FIRST-TIME :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'EODDP :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-COERCE :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-COERCE :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-HORNERS-RULE :file) '("polynomials/sparsegcd.lisp"
                                                 "polynomials/mpolynomial.lisp"))
(setf (callers-list 'VAR-VAL-PAIRS :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'VARLIST :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-VARIABLE-LIST :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-DERIVATIVE :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-MAX-COEFFICIENT :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'EMAX :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'PDV :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-DEGREE-VECTOR :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'MORE-MAIN-ORDER-NUMBER? :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'VAR-INFO :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'ADD-VARIABLE-DEGREE :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'LIST-OF-VARS :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'P-LIST-OF-VARS :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'TERMS-LIST-OF-VARS :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-C-COEFFICIENT :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'POLY-LEADING-COEFFICIENT :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'PF-X :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'PF-Y :file) '("polynomials/mpolynomial.lisp"))
(setf (callers-list 'VARIABLE-TABLE :file) '("polynomials/poly-tools.lisp"))
(setf (callers-list 'VARIABLE-HASH-TABLE :file) '("polynomials/poly-tools.lisp"))
(setf (callers-list 'SET-VARIABLE-NUMBER-PROPERTY :file) '("polynomials/poly-tools.lisp"))
(setf (callers-list 'COPY-ARRAY-CONTENTS :file) '("polynomials/poly-tools.lisp"))
(setf (callers-list 'PTS :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'WITH-LINEAR-SUPPORT :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'QK :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'UK :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'XK :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'LINEAR-FORM :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'TERMS-INTERPOLATE :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'POLY-INTERPOLATE :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'VAR-CNT :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'DEGREE-PARTITION :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'BOUND-DEGREE-TERM-COUNT :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'MAKE-DEGREE-MATRIX :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'EXPT-LIST :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'TERM-COUNT :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'EXPT-VECTS :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'EXPT-VECT :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'COMPUTE-VANDERMONDE-Q :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'SOLS :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'QI :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'SOL :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'SKELETON :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'SKEL :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'POLY-SKELETON :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'BP :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'SPARSEINTERPSTAGEI :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'PKMINUS1 :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'COEF-BOUND :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'PSKELETON :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'GFP-DOMAIN :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'CUR-PT :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'PPRIME :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'TEMP-POLY :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'PK :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'IP :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'INITY :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'SOLVE-VANDERMONDET :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'UPTO :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'SPARSEINTERPSTAGE :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'POLY-FACTOR-CBOUND :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'POLY-CONTENT-AND-PRIM-PART :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'QP :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'PLC :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'QLC :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'START-POINT :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'POLY-PRIM-PART :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'SPMOD-GCD2 :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'POLY-GCDU :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'IMAGE :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'MAX-TERMS :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'SKELS :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'RAND-VALS :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'GCDS :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'RAND :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'SPMOD-GCD3 :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'DENSE-INTERPOLATE-COEFFICIENTS :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'CHECK-DEGREE :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'TERMS-GCDU+ :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'RAND-VARS :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'VAR-NUM :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'NON-ZERO-RANDOM :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'INIT-PT :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'XI :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'INTERPOLATE-FROM-SKEL :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'EXPS :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'EVAL-MONOMIAL :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'SOLVE-VANDERMONDETD :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'MAKE-MONOMIAL :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'POLY-LIST :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'THIS-VAR :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'TERMS-LIST :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'SUB-POLYS :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'TERMS-GCDU :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'QT :file) '("polynomials/sparsegcd.lisp"))
(setf (callers-list 'COEF-LIST0? :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'COEF-LIST1? :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CL :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'BEG :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'END :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'UPOLYNOMIAL :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-SIMPLIFY :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'MAKE-UPOLYNOMIAL :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'PRINT-UPOLYNOMIAL :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-GET :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-SUBSEQ :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list '(X UPOLYNOMIAL) :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-PLUS :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'X-DEG :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'Y-DEG :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'ZIPPER-SUM :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-MINUS :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'ANSLIST :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'MAKE-CLIST :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-LENGTH :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-MINUS? :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-DIFFERENCE :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-TIMES :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'XLEN :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'YLEN :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'XEXP :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'XELT :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'YEXP :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'ANSEXP :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-EXPTSQ :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'COEF-LIST1 :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-QUOTIENT :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-DIVIDE :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-REMAINDER :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'COEF-LIST0 :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'XDEG :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'YDEG :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'YHIGH :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'QDEG :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'COPY-CLIST :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'QUOT :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'DO* :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'QEXP :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-GCD :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-LCM :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-EXTENDED-GCD :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-FACTOR :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'FACTLIST :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-DERIV :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-PTH-ROOT :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-SQFR-DECOMPOSE :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-FACTOR-SQUAREFREE :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'PROD1 :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'PROD2 :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-PRIMITIVE-PART! :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'ROOTDEGREE :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'PEXP :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'REXP :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-X :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'DPOLY :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-EXPT-MOD-POLY :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'CLIST-FACTOR-PRODUCT-NTH-DEGREES :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'NEWREDUCIBLES :file) '("polynomials/upolynomial.lisp"))
(setf (callers-list 'Q1 :file) '("vector-spaces/quaternions.lisp"
                                 "polynomials/upolynomial.lisp"))
(setf (callers-list 'Q2 :file) '("vector-spaces/quaternions.lisp"
                                 "polynomials/upolynomial.lisp"))
(setf (callers-list 'PROJECTIVE-SPACE :file) '("vector-spaces/projective-space.lisp"))
(setf (callers-list 'PROJECTIVE-SPACE-ELEMENT :file) '("vector-spaces/projective-space.lisp"))
(setf (callers-list 'NUM-VALUES :file) '("vector-spaces/projective-space.lisp"))
(setf (callers-list 'COEFF-DOMAIN :file) '("vector-spaces/vector.lisp"
                                           "vector-spaces/projective-space.lisp"))
(setf (callers-list 'MAKE-PROJECTIVE-SPACE-ELEMENT :file) '("vector-spaces/projective-space.lisp"))
(setf (callers-list 'RANGE-SPACE :file) '("vector-spaces/projective-space.lisp"))
(setf (callers-list 'MAKE-VECTOR-SPACE :file) '("vector-spaces/projective-space.lisp"))
(setf (callers-list 'PROJECT :file) '("vector-spaces/projective-space.lisp"))
(setf (callers-list 'MAKE-MORPHISM :file) '("vector-spaces/projective-space.lisp"))
(setf (callers-list 'MAP-FUN :file) '("vector-spaces/projective-space.lisp"))
(setf (callers-list 'UNIT-QUATERNION-DOMAIN :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'QUATERNION-DOMAIN-ELEMENT :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'UNIT-QUATERNION-DOMAIN-ELEMENT :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list '(Q1 QUATERNION-WITH-MULTIPLICATION) :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'QUATERNION-WITH-MULTIPLICATION :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list '(P QUATERNION-WITH-MULTIPLICATION) :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'P0 :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'P3 :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'QQ :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'Q0 :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'Q3 :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'Q0Q0 :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'Q0Q1 :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'Q0Q2 :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'Q0Q3 :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'Q1Q1 :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'Q1Q2 :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'Q1Q3 :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'Q2Q2 :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'Q2Q3 :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'Q3Q3 :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'MAT :file) '("vector-spaces/quaternions.lisp"))
(setf (callers-list 'VARS-VECTORS :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'VAR-BINDINGS :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'FREE-MODULE :file) '("vector-spaces/vector.lisp"))
(setf (callers-list '(DOMAIN RING) :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'FREE-MODULE-ELEMENT :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'VECTOR-SPACE-ELEMENT :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'PRINT-FREE-MODULE-ELEMENT :file) '("vector-spaces/vector.lisp"))
(setf (callers-list '#\< :file) '("vector-spaces/vector.lisp"))
(setf (callers-list '#\> :file) '("vector-spaces/vector.lisp"))
(setf (callers-list '(V1 FREE-MODULE-ELEMENT) :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'LOOP-VECTOR-BIND :file) '("vector-spaces/vector.lisp"))
(setf (callers-list '(E1 (TUPLE-VALUE V1)) :file) '("vector-spaces/vector.lisp"))
(setf (callers-list '(E (TUPLE-VALUE VECTOR)) :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'SCALAR :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'COERCED-SCALAR :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'MULTIPLY-VECTOR-BY-SCALAR :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'V3 :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'LIST-OPERATIONS :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'DOMINATES :file) '("vector-spaces/vector.lisp"))
(setf (callers-list '(V1 LISP-VECTOR) :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'LISP-VECTOR :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'VECT1 :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'VECT2 :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'DISJOINT :file) '("vector-spaces/vector.lisp"))
(setf (callers-list '(E (TUPLE-VALUE V)) :file) '("vector-spaces/vector.lisp"))
(setf (callers-list 'SB-INT:QUASIQUOTE :callers) '(TILDE LOOP-VECTOR-BIND
                                                   CLIST-SUBSEQ CLIST-GET
                                                   MAKE-CLIST CLIST-LENGTH
                                                   CLIST-ZERO-DEG? CLIST-DEGREE
                                                   COPY-CLIST CLIST-X
                                                   COEF-LIST1 COEF-LIST0
                                                   DEGREE-PARTITION
                                                   WITH-LINEAR-SUPPORT EMAX
                                                   EMINUS EODDP EMINUS? E/ E*
                                                   E- E1- E1+ E+ E1? E0? E< E>
                                                   E= ACCUMULATE-TERMS
                                                   PAIR-UP-TERMS
                                                   MAP-OVER-EACH-TERM TERMS0?
                                                   MAKE-MANY-TERMS MAKE-TERMS
                                                   RED LT LC LE POLY-COEF?
                                                   POLY-TERMS POLY-ORDER-NUMBER
                                                   WITH-GROBNER-OPERATIONS
                                                   CONVERT-TERM
                                                   COLLECT-OLD-TERM
                                                   COLLECT-TERM
                                                   SAME-GREATER-FUNCTIONS
                                                   MAKE-COMPARISON-FUN
                                                   DEFINE-BINARY-CONTAGIONS
                                                   WITH-CONTAGION
                                                   DEF-REALIMAG-PART
                                                   DEFINE-BFLOAT-CONSTANT
                                                   SET!CONST
                                                   WITH-NUMERATOR-AND-DENOMINATOR
                                                   WITH-TPOWER-SERIES
                                                   MAP-OVER-MAXIMAL-CELLS
                                                   MAP-OVER-CELLS
                                                   MAP-OVER-ORIENTED-COFACETS
                                                   MAP-OVER-ORIENTED-FACETS
                                                   DEFINE-TAYLOR-EXPANSION-FUN
                                                   DEFINE-MATH-PROPERTY
                                                   MAKE-PREDICATE
                                                   MAP-OVER-PROPERTIES
                                                   DEFINE-DOMAIN-CREATOR
                                                   DEFINE-MATH-OPERATOR
                                                   EXTERNAL-NAME MATH-OPERATOR
                                                   DEF-BINARY-COERCION DEFMESH
                                                   DEFUN-BOUNDARY %MM-BOUNDARY
                                                   %MM-GET-POINT MAKE-MESH
                                                   SPARSE-DET
                                                   WITH-OPEN-MODULAR-ARITH
                                                   WITH-MATRIX-DIMENSIONS
                                                   WEYLI::TRUNCATE WEYLI::ROUND
                                                   WEYLI::CEILING WEYLI::FLOOR
                                                   WEYLI:/ WEYLI:- ITERATE
                                                   ASSOCIATE-PREDICATE
                                                   WEYLI::COPY-ARRAY-CONTENTS
                                                   WEYLI::DEFSUBST WEYLI::%GETF
                                                   WEYLI::%FUNCALL
                                                   WEYLI::%APPLY
                                                   COUNT-MULTIPLE-INTEGER-FACTORS
                                                   DEFINE-GE2-STANDARD-METHODS
                                                   MERGE-TERMS-IN-SUM
                                                   CHECK-POINT-CONTEXT
                                                   WITH-NEW-CONTEXT FUNCT
                                                   MEMOIZE %MEMOIZE TRAPEZOIDAL
                                                   DERIV-2POINT DEFDERIV-FUNCT
                                                   DEFSIMPLIFY-FUNCT
                                                   DEF-GE-1OPER
                                                   DEFINE-APPLICABLE-FUNCTION-BINARY
                                                   BIND-DOMAIN-CONTEXT
                                                   DEFMETHOD-SD
                                                   DEFINE-DOMAIN-ELEMENT-CLASSES
                                                   WITH-NEW-WEYL-CONTEXT
                                                   PARSE-ARGS ADD-DOMAIN
                                                   DEFINE-OPERATIONS
                                                   DEFINE-DIRECT-SUM
                                                   STANDARD-DERIVATION
                                                   VARIABLE-DERIVATIVE-ORDER
                                                   VARIABLE-DERIVATION NEW-NODE
                                                   CURRENT-NODE
                                                   SET-CURRENT-STATE
                                                   CURRENT-STATE MAP-OVER-TREE
                                                   PARTITION PERMUTE CHOOSE
                                                   VARIABLE-MINIMAL-POLYNOMIAL))
(setf (callers-list 'LIST* :callers) '(LOOP-VECTOR-BIND MAKE-CLIST
                                       CLIST-ZERO-DEG? CLIST-DEGREE
                                       WITH-LINEAR-SUPPORT ACCUMULATE-TERMS
                                       PAIR-UP-TERMS MAP-OVER-EACH-TERM
                                       MAKE-MANY-TERMS WITH-GROBNER-OPERATIONS
                                       CONVERT-TERM COLLECT-OLD-TERM
                                       COLLECT-TERM SAME-GREATER-FUNCTIONS
                                       MAKE-COMPARISON-FUN
                                       DEFINE-BINARY-CONTAGIONS WITH-CONTAGION
                                       DEF-REALIMAG-PART DEFINE-BFLOAT-CONSTANT
                                       WITH-NUMERATOR-AND-DENOMINATOR
                                       WITH-TPOWER-SERIES
                                       MAP-OVER-MAXIMAL-CELLS MAP-OVER-CELLS
                                       MAP-OVER-ORIENTED-COFACETS
                                       MAP-OVER-ORIENTED-FACETS
                                       DEFINE-TAYLOR-EXPANSION-FUN
                                       DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                       MAP-OVER-PROPERTIES
                                       DEFINE-DOMAIN-CREATOR
                                       DEFINE-MATH-OPERATOR EXTERNAL-NAME
                                       MATH-OPERATOR DEF-BINARY-COERCION
                                       DEFMESH DEFUN-BOUNDARY %MM-BOUNDARY
                                       %MM-GET-POINT MAKE-MESH
                                       WITH-OPEN-MODULAR-ARITH
                                       WITH-MATRIX-DIMENSIONS WEYLI::DEFSUBST
                                       WEYLI::%FUNCALL WEYLI::%APPLY
                                       COUNT-MULTIPLE-INTEGER-FACTORS
                                       DEFINE-GE2-STANDARD-METHODS
                                       MERGE-TERMS-IN-SUM CHECK-POINT-CONTEXT
                                       WITH-NEW-CONTEXT FUNCT MEMOIZE %MEMOIZE
                                       TRAPEZOIDAL DEFDERIV-FUNCT
                                       DEFSIMPLIFY-FUNCT DEF-GE-1OPER
                                       DEFINE-APPLICABLE-FUNCTION-BINARY
                                       BIND-DOMAIN-CONTEXT DEFMETHOD-SD
                                       DEFINE-DOMAIN-ELEMENT-CLASSES
                                       WITH-NEW-WEYL-CONTEXT PARSE-ARGS
                                       ADD-DOMAIN DEFINE-DIRECT-SUM
                                       VARIABLE-DERIVATIVE-ORDER
                                       VARIABLE-DERIVATION NEW-NODE
                                       MAP-OVER-TREE PARTITION PERMUTE CHOOSE
                                       VARIABLE-MINIMAL-POLYNOMIAL))
(setf (callers-list 'QUOTE :callers) '(PRINT-FREE-MODULE-ELEMENT
                                       WEYL:MAKE-ELEMENT LOOP-VECTOR-BIND
                                       FACTOR CLIST-SUBSEQ CLIST-GET MAKE-CLIST
                                       CLIST-LENGTH CLIST-ZERO-DEG?
                                       CLIST-DEGREE COPY-CLIST CLIST-X
                                       COEF-LIST1 COEF-LIST0 INITY
                                       SPARSEINTERPSTAGEI INTERPOLATE
                                       WITH-LINEAR-SUPPORT RESULTANT
                                       POLY-TRUNCATE2 POLY-QUOTIENT*
                                       PRINT-MPOLYNOMIAL-FORM
                                       MAKE-POLYNOMIAL-MORPHISM EMAX EMINUS
                                       EODDP EMINUS? E/ E* E- E1- E1+ E+ E1?
                                       E0? E< E> E= ACCUMULATE-TERMS
                                       PAIR-UP-TERMS MAP-OVER-EACH-TERM TERMS0
                                       TERMS0? MAKE-MANY-TERMS MAKE-TERMS RED
                                       LT LC LE POLY-COEF? POLY-TERMS
                                       POLY-ORDER-NUMBER GET-POLYNOMIAL-RING
                                       WITH-GROBNER-OPERATIONS COLLECT-OLD-TERM
                                       COLLECT-TERM SAME-GREATER-FUNCTIONS
                                       MAKE-COMPARISON-FUN BINARY-LCM
                                       BINARY-GCD DEFINE-BINARY-CONTAGIONS
                                       WITH-CONTAGION DENOMINATOR NUMERATOR
                                       PARSE-NUMERIC-OBJ DEF-REALIMAG-PART
                                       USE-CHINESE-REMAINDER GET-FINITE-FIELD
                                       MAKE-GFP-DOMAIN BF-E BF-PI BF-PI-AGM
                                       BF-PI-MACHIN DEFINE-BFLOAT-CONSTANT
                                       SET!CONST SAVE!CONST GET!CONST BIGFLOATP
                                       WITH-NUMERATOR-AND-DENOMINATOR
                                       MAP-TPOWER-SERIES WITH-TPOWER-SERIES
                                       MAKE-TPOWER-SERIES
                                       GET-TPOWER-SERIES-DOMAIN APPLY
                                       MAKE-COCHAIN MAKE-CHAIN
                                       GET-COCHAIN-MODULE GET-CHAIN-MODULE
                                       MAP-OVER-MAXIMAL-CELLS MAP-OVER-CELLS
                                       MAP-OVER-ORIENTED-COFACETS
                                       MAP-OVER-ORIENTED-FACETS TETRAHEDRON?
                                       TRIANGLE? SEGMENT?
                                       GET-DEFAULT-TAYLOR-EXPANSION TAYLOR1
                                       DEFINE-TAYLOR-EXPANSION-FUN MAP
                                       MAKE-RATIONAL-FUNCTION*
                                       DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                       SHOW-PROPERTIES MAP-OVER-PROPERTIES
                                       DEFINE-DOMAIN-CREATOR
                                       DEFINE-MATH-OPERATOR EXTERNAL-NAME
                                       MATH-OPERATOR LOCALIZE PLUS
                                       SHIFT-LOCAL-FIELD SHIFT-MULTIPOLE
                                       DEF-BINARY-COERCION CANONICALIZE-NUMBER
                                       GET-AUTOMORPHISMS GET-EMBEDDABLE-DOMAINS
                                       GET-HOMOMORPHISMS READ-MESH
                                       READ-SIZE-TABLE READ-REGION-POINTS
                                       READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                       READ-SIMPLICIAL-COMPLEX
                                       MAKE-MESH-FROM-FILE DEFMESH
                                       DEFUN-BOUNDARY %MM-BOUNDARY
                                       %MM-GET-POINT MAKE-MESH INSERT PROCESSI
                                       SMITH-ARRAY SUBDETERMINANT* SPARSE-DET
                                       DETERMINANT* WITH-OPEN-MODULAR-ARITH
                                       WITH-MATRIX-DIMENSIONS WEYLI::TRUNCATE
                                       WEYLI::ROUND WEYLI::CEILING WEYLI::FLOOR
                                       WEYLI::LCM WEYLI:GCD WEYLI:/ WEYLI:*
                                       WEYLI:- WEYLI:+ WEYLI:MIN WEYLI:MAX
                                       WEYLI:>= WEYLI:<= WEYLI:> WEYLI:=
                                       WEYLI:< ASSOCIATE-PREDICATE
                                       WEYLI::COPY-ARRAY-CONTENTS
                                       WEYLI::DEFSUBST WEYLI::%GETF
                                       WEYLI::%FUNCALL WEYLI::%APPLY
                                       COUNT-MULTIPLE-INTEGER-FACTORS POWER-OF?
                                       EXPAND SUBSTITUTE DIFFERENT-KERNELS
                                       MAKE-UNIVERSAL-QUANTIFIED-SET
                                       DEFINE-GE2-STANDARD-METHODS DEPENDS-ON?
                                       MERGE-TERMS-IN-SUM SAFE-DISPLAY
                                       COERCE-OBJ CHECK-POINT-CONTEXT
                                       WITH-NEW-CONTEXT SIMPLIFY FUNCT
                                       CHECK-DOMAIN MAKE-FUNCTION-INTEGRATE
                                       MAKE-FUNCTION-DERIV
                                       ADD-FUNCTION-TO-DOMAIN
                                       SEARCH-FOR-FUNCTION MEMOIZE %MEMOIZE
                                       TRAPEZOIDAL DERIV-2POINT IMAGPART
                                       REALPART CONJUGATE QUOTIENT TIMES
                                       MAKE-SAMPLED-FUNCTION-1 DEFDERIV-FUNCT
                                       DEFSIMPLIFY-FUNCT DEF-GE-1OPER DERIV
                                       EXPT DEFINE-APPLICABLE-FUNCTION-BINARY
                                       MAKE-APP-FUNCTION BIND-DOMAIN-CONTEXT
                                       DEFMETHOD-SD
                                       DEFINE-DOMAIN-ELEMENT-CLASSES
                                       WITH-NEW-WEYL-CONTEXT PARSE-ARGS
                                       ADD-DOMAIN RECUR REQUIRED-OPERATIONS
                                       CANONICALIZE-CLASS DESCRIBE-OPERATIONS
                                       OPERATION-VALUES OPERATION-ARGUMENTS
                                       DEFINE-OPERATIONS MINUS ZERO RECIP ONE
                                       GET-DIRECT-SUM DOMAIN-LIST
                                       DEFINE-DIRECT-SUM INITIALIZE-INSTANCE
                                       DERIVATION STANDARD-DERIVATION
                                       VARIABLE-DERIVATIVE-ORDER
                                       VARIABLE-DERIVATION COERCE
                                       RING-VARIABLES NEW-NODE CURRENT-NODE
                                       SET-CURRENT-STATE CURRENT-STATE
                                       MAP-OVER-TREE PARTITION PERMUTE CHOOSE
                                       VARIABLE-MINIMAL-POLYNOMIAL))
(setf (callers-list 'LIST :callers) '(TILDE LOOP-VECTOR-BIND
                                      CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                      CLIST-FACTOR-SQUAREFREE CLIST-FACTOR
                                      CLIST-SUBSEQ CLIST-GET CLIST-LENGTH
                                      CLIST-ZERO-DEG? CLIST-DEGREE COPY-CLIST
                                      CLIST-X COEF-LIST1 COEF-LIST0
                                      CHECK-DEGREE SPMOD-GCD2 SPMOD-GCD1
                                      SPMOD-GCD SPARSEINTERPSTAGEI
                                      POLY-SKELETON MAKE-DEGREE-MATRIX
                                      DEGREE-PARTITION WITH-LINEAR-SUPPORT
                                      ADD-NEW-VARIABLE INITIALIZE-INSTANCE
                                      ADD-VARIABLE-DEGREE POLY-DEGREE-VECTOR
                                      RESULTANT POLY-SPLIT-ON-VARS POLY-EXPT
                                      TRANSFORM EMAX EMINUS EODDP EMINUS? E/ E*
                                      E- E1- E1+ E+ E1? E0? E< E> E=
                                      INSERT-INTO-ACCUMULATION-LIST
                                      ACCUMULATE-TERMS PAIR-UP-TERMS
                                      MAP-OVER-EACH-TERM TERMS0?
                                      MAKE-MANY-TERMS MAKE-TERMS RED LT LC LE
                                      POLY-COEF? POLY-TERMS POLY-ORDER-NUMBER
                                      ADD-UNDONE REDUCE-ALL CRITERION1
                                      TERMS-S-POLY WITH-GROBNER-OPERATIONS
                                      MAKE-IDEAL CONVERT-TERM GTERMS-EXPT
                                      GTERMS-TIMES GTERMS-DIFFERENCE
                                      COLLECT-OLD-TERM COLLECT-TERM GTERMS-PLUS
                                      SAME-GREATER-FUNCTIONS TRANSFORM-TERM
                                      MAKE-COMPARISON-FUN MAKE-EPOLYNOMIAL
                                      DEFINE-BINARY-CONTAGIONS WITH-CONTAGION
                                      DEF-REALIMAG-PART DEFINE-BFLOAT-CONSTANT
                                      SET!CONST CONVERT-NUMBER->CHARACTERS
                                      WITH-NUMERATOR-AND-DENOMINATOR
                                      WITH-TPOWER-SERIES
                                      GET-TPOWER-SERIES-DOMAIN
                                      COBOUNDARY-DOMAIN BOUNDARY-DOMAIN
                                      MAP-OVER-MAXIMAL-CELLS MAP-OVER-CELLS
                                      MAP-OVER-ORIENTED-COFACETS
                                      MAP-OVER-ORIENTED-FACETS REVERSION
                                      TAYLOR1 TAYLOR-EXP
                                      DEFINE-TAYLOR-EXPANSION-FUN
                                      DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                      SHOW-PROPERTIES MAP-OVER-PROPERTIES
                                      DEFINE-DOMAIN-CREATOR
                                      DEFINE-MATH-OPERATOR EXTERNAL-NAME
                                      REST-OF-LOCAL SHIFT-L-FORM* SHIFT-M-FORM*
                                      DEF-BINARY-COERCION COMPOSE
                                      READ-REGION-POINTS MAKE-MESH-FROM-FILE
                                      DEFMESH DEFUN-BOUNDARY %MM-BOUNDARY
                                      %MM-GET-POINT MAKE-MESH INSERT-BOUNDARY
                                      %SPLIT-CONSTRAINT-ONE-SIDE PLACE
                                      REMOVE-VERTEX FORCE-EDGE ADJ-VERTICES
                                      LOCATE NEAR-BASE NEIGHBORHOOD
                                      FLAT-TRIANGULATE STAR-TRIANGULATE
                                      TRIANGULATE-TRIPLES POINT-VS-TRIANGLE
                                      MAKE-CURVED-SEGMENT ARC BOUNDING-BOX
                                      INSERTQ HERMITE-ARRAY HERMITE*
                                      SUBDETERMINANT* SPARSE-DET COERCE
                                      DETERMINANT WITH-OPEN-MODULAR-ARITH
                                      JACOBIAN SUBSTITUTE TRANSPOSE TIMES-ARRAY
                                      DIFFERENCE PLUS ONE-MATRIX ZERO-MATRIX
                                      REF WITH-MATRIX-DIMENSIONS DIMENSIONS
                                      MAKE-ELEMENT WEYL:MAKE-ELEMENT
                                      WEYLI::TRUNCATE WEYLI::ROUND
                                      WEYLI::CEILING WEYLI::FLOOR WEYLI:/
                                      WEYLI:- ITERATE ASSOCIATE-PREDICATE
                                      WEYLI::COPY-ARRAY-CONTENTS WEYLI::%GETF
                                      FERMAT-INTEGER-FACTOR ALL-DIVISORS
                                      COUNT-MULTIPLE-INTEGER-FACTORS
                                      CHOICE-PRIMES NEWPRIME
                                      EXPAND-BINOMIAL-FORM EXPAND-OTHER
                                      MERGE-NEW-BV MAKE-UNION MINUS
                                      DEFINE-GE2-STANDARD-METHODS
                                      SET-VARIABLE-PROPERTY
                                      GET-VARIABLE-PROPERTY PRINT-OBJECT
                                      LOOP-OVER-TERMS MERGE-TERMS-IN-SUM
                                      COERCE-OBJ CHECK-POINT-CONTEXT FUNCT
                                      MAKE-FUNCTION-DERIV %MEMOIZE
                                      INDEF-INTEGRAL TRAPEZOIDAL DERIV
                                      DERIV-2POINT MAP POLYNOMIAL-INTERPOLATE
                                      MAKE-SAMPLED-FUNCTION-1 DEFDERIV-FUNCT
                                      DEFSIMPLIFY-FUNCT DEF-GE-1OPER
                                      DEFINE-APPLICABLE-FUNCTION-BINARY
                                      BIND-DOMAIN-CONTEXT DEFMETHOD-SD
                                      DEFINE-DOMAIN-ELEMENT-CLASSES
                                      WITH-NEW-WEYL-CONTEXT PARSE-ARGS
                                      ADD-DOMAIN PARSE-OPERATION-LIST
                                      DEFINE-OPERATIONS DOMAIN-LIST
                                      DEFINE-DIRECT-SUM STANDARD-DERIVATION
                                      VARIABLE-DERIVATIVE-ORDER
                                      VARIABLE-DERIVATION NEW-NODE
                                      SET-CURRENT-STATE MAP-OVER-TREE PARTITION
                                      PERMUTE CHOOSE
                                      VARIABLE-MINIMAL-POLYNOMIAL))
(setf (callers-list 'WITH-SLOTS :callers) '(ADD-NEW-VARIABLE
                                            POLY-PSEUDO-REMAINDER
                                            RESET-GROBNER-BASIS GENERATORS-OF
                                            (SETF GREATER-FUNCTION)
                                            COMPUTE-RESULT
                                            USE-CHINESE-REMAINDER TIMES
                                            DIFFERENCE PLUS
                                            MULTIPLICATIVE-ORDER BINARY-LCM
                                            BINARY-GCD QUOTIENT EXPT RECIP
                                            MINUS MAKE-QUOTIENT-ELEMENT
                                            BF-BINARY> BF-BINARY>= BF-BINARY=
                                            BF-INTEGER-PART BF-QUOTIENT
                                            INCPREC! DECPREC! COERCE
                                            TP-RING-PRINT-OBJECT
                                            TP-FIELD-PRINT-OBJECT %SET-COERCE
                                            DELETE-MAXIMAL-CELL INSERT FACETS
                                            PARTIAL-DERIV QUOTIENT-REDUCE
                                            QUOTIENT-REDUCE* 1? 0? ONE ZERO
                                            QUOTIENT-FIELD-PRINT-OBJECT GETQ
                                            INSERTQ DIMENSIONS
                                            MATRIX-DIMENSIONS GET-MEMOIZATION
                                            SET-MEMOIZATION CANONICALIZE-CLASS
                                            OPERATION-VALUES
                                            OPERATION-ARGUMENTS LIST-OPERATIONS
                                            PARSE-OPERATION-LIST PRINT-OBJECT
                                            INITIALIZE-INSTANCE
                                            SET-VARIABLE-DERIVATION
                                            RING-VARIABLES
                                            SET-MINIMAL-POLYNOMIAL
                                            MINIMAL-POLYNOMIAL))
(setf (callers-list 'UNLESS :callers) '(0? PRINT-FREE-MODULE-ELEMENT
                                        MAKE-ELEMENT-FREE-MODULE-VECTOR
                                        CREATE-UNIT-QUATERNION
                                        CLIST-SQFR-DECOMPOSE
                                        CLIST-PRIMITIVE-PART! MAKE-UPOLYNOMIAL
                                        WEYL:MAKE-UPOLYNOMIAL MAKE-MONOMIAL
                                        CHECK-DEGREE SPMOD-GCD1
                                        SOLVE-VANDERMONDETD SOLVE-VANDERMONDET
                                        SOLVE-VANDERMONDE INTERPOLATE
                                        ADD-NEW-VARIABLE TERMS-DEGREE-VECTOR
                                        POLY-DEGREE-VECTOR POLY-MAX-COEFFICIENT
                                        TERMS-SUBST RESULTANT POLY-MGCD
                                        POLY-FIND-COMMON-VARS
                                        POLY-SPLIT-ON-VARS TERMS-TIMES
                                        MAKE-POLYNOMIAL-MORPHISM
                                        ACCUMULATE-ACCUMULATION-LIST
                                        PAIR-UP-TERMS MAKE-POLY GTERMS-PRIM*
                                        REDUCE-ALL CRITERION1 TERMS-S-POLY
                                        CONVERT-LIST (SETF GREATER-FUNCTION)
                                        CHECK-SAME-DOMAIN BINARY=
                                        INITIALIZE-INSTANCE GTERMS-TIMES
                                        COLLECT-OLD-TERM TRANSFORM-TERM
                                        MAKE-POLYNOMIAL MAKE-COMPARISON-FUN
                                        PRINT-OBJECT SCAN-POLY-FORM SQRT
                                        MAKE-QUOTIENT-ELEMENT BF-ACOS BF-ASIN
                                        BF-ATAN BF-TAN BF-SIN BF-COS BF-LOG
                                        SAVE!CONST GET!CONST CEILING2 CEILING1
                                        READ!NUM ROUND!EP ROUND!MT CUT!EP
                                        CUT!MT CONV!EP CONV!MT BOUNDARY-SET
                                        PRINT-TERM %SET-COERCE INTERSECTION
                                        UNION DELETE-MAXIMAL-CELL MAKE-POINT
                                        PARTIAL-DERIV SUBSTITUTE RATFUN-REDUCE
                                        QUOTIENT-REDUCE*
                                        PREDICATE-FUNCTION-NAME
                                        ASSERT-FUNCTION-NAME
                                        COMPARE-PTERM-LISTS COERCE READ-MESH
                                        WRITE-MESH READ-SIZE-TABLE
                                        READ-REGION-POINTS
                                        READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                        MAKE-MESH-FROM-FILE NAME-REGION
                                        TRIANGLE-CENTER REMOVE-VERTEX FLIP-OK?
                                        NEIGHBOR PLACE FORCE-EDGE DELAUNAY?
                                        DIRECTED-LOCATE NEAR-BASE NEIGHBORHOOD
                                        INSERT ANGLE CIRCUMCENTER
                                        POINT-VS-TRIANGLE ARC BOUNDING-BOX
                                        DISTANCE BEND MAKE-PARAMETER-SPACE
                                        MAKE-MEAN-POINT CIRCLE-CENTER COMPLEXER
                                        SPARSE-DET SUBTRACT-ROWS INVERT-ARRAY
                                        RECIP FME-MATRIX-TIMES MATRIX-FME-TIMES
                                        ARRAY-TIMES DIFFERENCE PLUS ONE-MATRIX
                                        ZERO-MATRIX WEYL:MAKE-ELEMENT
                                        MAKE-ELEMENT FACTOR
                                        REDUCE-MODULO-INTEGER
                                        DECLARE-DEPENDENCIES
                                        ADD-FUNCTION-TO-DOMAIN MAKE-FUNCTION
                                        EQUAL-VECTOR CANONICALIZE-FUNCTIONS
                                        APPLY GE-FOURIER CANONICALIZE-CLASS
                                        DERIVATION POLY-DERIVATION
                                        SET-VARIABLE-DERIVATION MAP-OVER
                                        PARTITION %CHOOSE-REPEATS %CHOOSE
                                        SET-MINIMAL-POLYNOMIAL
                                        MINIMAL-POLYNOMIAL))
(setf (callers-list 'MEMBER :callers) '(DERIVATION SPARSEINTERPSTAGEI
                                        ADD-NEW-VARIABLE POLY-VARIABLE-LIST
                                        POLY-SPLIT-ON-VARS REDUCE-ALL
                                        CRITERION1 BINARY= DELETE-MAXIMAL-CELL
                                        MAXIMAL-CELL? GET-CELL
                                        SIGN-OF-PERMUTATION PARTIAL-DERIV
                                        DEFINE-MATH-PROPERTY
                                        PREDICATE-FUNCTION-NAME
                                        ASSERT-FUNCTION-NAME
                                        DEFINE-PRIMITIVE-PROPERTY
                                        DEFINE-DOMAIN-CREATOR NEXT-DOMAINS
                                        %MM-BOUNDARY GRADE INSERT PLACE
                                        NEIGHBORHOOD POINT-VS-TRIANGLE
                                        WEYLI:MEMBER SEARCH-LIST
                                        DIFFERENT-KERNELS DEPENDS-ON?
                                        DECLARE-DEPENDENCIES
                                        MAKE-FUNCTION-INTEGRATE ADD-SUBSCRIPTS
                                        PARSE-ARGS SET-VARIABLE-DERIVATION
                                        COERCE PARTITION SET-MINIMAL-POLYNOMIAL
                                        MINIMAL-POLYNOMIAL))
(setf (callers-list 'FUNCTION :callers) '(DERIV MAKE-ELEMENT MAP-FUN
                                          CLIST-EXPT-MOD-POLY CLIST-EXPTSQ
                                          ADD-NEW-VARIABLE POLY-SUBST POLY-MGCD
                                          POLY-EXPTSQ COERCE
                                          MAKE-POLYNOMIAL-MORPHISM
                                          GET-POLYNOMIAL-RING CRITERION1
                                          BINARY= GET-FINITE-FIELD
                                          MAKE-FINITE-FIELD WEYL:MAKE-ELEMENT
                                          MAKE-GFM-DOMAIN MAKE-GFP-DOMAIN
                                          BF-EXPT GET-TPOWER-SERIES-DOMAIN
                                          CELL-ORDER %MAP-OVER-CELLS MAKE-POINT
                                          INSERT INITIALIZE-INSTANCE
                                          PARTIAL-DERIV SUBSTITUTE
                                          RATIONAL-POLY-SUBST LIST-OF-VARIABLES
                                          %MAP-OVER-PROPERTIES REFINE-MESH-PREP
                                          REMOVE-VERTEX NEIGHBOR
                                          VERTICES-SORTED-BY-ANGLE
                                          MAKE-CURVED-SEGMENT ARC BEND
                                          MAKE-PARAMETER-SPACE MEMBER-ROTATE
                                          FME-MATRIX-TIMES MATRIX-FME-TIMES
                                          WEYLI::APPLY
                                          SIMPLE-INTEGER-FACTOR-INTERNAL
                                          EXPT-MODULO-INTEGER DIFFERENT-KERNELS
                                          DEPENDS-ON? DECLARE-DEPENDENCIES
                                          ADD-SUBSCRIPTS
                                          MAKE-SAMPLED-FUNCTION-1 FOURIER
                                          ADD-DOMAIN-INTERNAL
                                          CANONICALIZE-CLASS
                                          PARSE-OPERATION-LIST MINUS RECIP
                                          PRINT-OBJECT GET-DIRECT-SUM
                                          MAKE-DIRECT-SUM ITERATE
                                          DIRECT-SUM-PRINT-OBJECT
                                          POLY-DERIVATION
                                          SET-VARIABLE-DERIVATION AVL-INSERT
                                          SCAN PARTITION EXPT
                                          SET-MINIMAL-POLYNOMIAL
                                          MINIMAL-POLYNOMIAL))
(setf (callers-list 'GE-EQUAL :callers) '(ADD-NEW-VARIABLE VARIABLE-INDEX
                                          GET-POLYNOMIAL-RING COERCE DERIV
                                          TAYLOR1 SUBSTITUTE PARTIAL-DERIV
                                          LIST-OF-VARIABLES DIFFERENT-KERNELS
                                          MERGE-NEW-BV DEPENDS-ON?
                                          DECLARE-DEPENDENCIES GE-GREAT
                                          GE-LGREAT GE-LEQUAL
                                          CANONICALIZE-FUNCTIONS
                                          MAKE-APP-FUNCTION GE-FOURIER GE-EQUAL
                                          SET-VARIABLE-DERIVATION
                                          SET-MINIMAL-POLYNOMIAL
                                          MINIMAL-POLYNOMIAL))
(setf (callers-list 'ERROR :callers) '(TILDE CROSS-PRODUCT
                                       MAKE-ELEMENT-FREE-MODULE-VECTOR
                                       CREATE-UNIT-QUATERNION CFACTOR FACTOR
                                       CLIST-DIVIDE CLIST-REMAINDER
                                       CLIST-QUOTIENT MAKE-UPOLYNOMIAL
                                       WEYL:MAKE-UPOLYNOMIAL POLY-GCDU
                                       MAKE-MONOMIAL CHECK-DEGREE SPMOD-GCD2
                                       SPMOD-GCD1 POLY-SKELETON
                                       BOUND-DEGREE-TERM-COUNT INTERPOLATE
                                       TERMS-INTERPOLATE PARSE-LINEAR-EQUATION
                                       DEGREE RESULTANT POLY-TRUNCATE2
                                       POLY-SIMP MAKE-POLYNOMIAL-MORPHISM
                                       PAIR-UP-TERMS MAKE-IDEAL MAKE-POLYNOMIAL
                                       GET-COMPARISON-FUN ROUND2 ROUND1
                                       CEILING2 CEILING1 FLOOR2 FLOOR1
                                       TRUNCATE2 TRUNCATE1 SQRT DENOMINATOR
                                       NUMERATOR PARSE-NUMERIC-OBJ CONJUGATE
                                       GET-FACTOR-RING GET-FINITE-FIELD
                                       MAKE-FINITE-FIELD* BINARY-LCM BINARY-GCD
                                       REMAINDER QUOTIENT MAKE-QUOTIENT-ELEMENT
                                       COMPUTE-INVERSE MAKE-GFP-DOMAIN BF-ACOS
                                       BF-ASIN ATAN BF-ATAN BF-TAN BF-COS
                                       BF-LOG SAVE!CONST GET!CONST READ!LNUM
                                       ROUND!EP ROUND!MT CUT!EP CUT!MT CONV!EP
                                       CONV!MT EXPT SET-BRANCH-ORDER
                                       GET-TPOWER-SERIES-DOMAIN
                                       COBOUNDARY-DOMAIN BOUNDARY-DOMAIN
                                       %SET-COERCE INTERSECTION UNION
                                       DELETE-MAXIMAL-CELL MAKE-SIMPLEX
                                       MAKE-POINT REVERSION TAYLOR1
                                       NOT-AN-ELEMENT MAP INITIALIZE-INSTANCE
                                       PARTIAL-DERIV RATIONAL-POLY-SUBST
                                       QUOTIENT-REDUCE DEFINE-MATH-PROPERTY
                                       PREDICATE-FUNCTION-NAME
                                       ASSERT-FUNCTION-NAME
                                       DEFINE-PRIMITIVE-PROPERTY LOCALIZE
                                       SHIFT-LOCAL-FIELD
                                       MAKE-MULTIPOLE-EXPANSION COERCE COMPOSE
                                       READ-MESH READ-SIZE-TABLE
                                       READ-REGION-POINTS
                                       READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                       MAKE-MESH-FROM-FILE MAKE-MESH
                                       INSERT-BOUNDARY SPLIT SPLIT-EDGE FLIP
                                       PLACE FORCE-EDGE DIRECTED-LOCATE
                                       NEAR-BASE NEIGHBORHOOD INSERT ANGLE
                                       CIRCUMCENTER POINT-VS-TRIANGLE MEASURE
                                       DISTANCE BEND MAKE-PARAMETER-SPACE
                                       COMPLEX-CIRCUMCENTER COMPLEXER %SET-NAME
                                       NAME SUBDETERMINANT* SPARSE-DETERMINANT
                                       SUBSTITUTE DETERMINANT
                                       FIND-PIVOT-UNORDERED INVERT-ARRAY RECIP
                                       FME-MATRIX-TIMES MATRIX-FME-TIMES
                                       ARRAY-TIMES DIFFERENCE PLUS ONE-MATRIX
                                       ZERO-MATRIX REF WEYL:MAKE-ELEMENT
                                       WEYLI::%LCM WEYLI::LCM WEYLI::%GCD
                                       WEYLI:GCD WEYLI:%QUOTIENT WEYLI:/
                                       WEYLI:%TIMES WEYLI:* WEYLI:%DIFFERENCE
                                       WEYLI:- WEYLI:%PLUS WEYLI:+ WEYLI:%MIN
                                       WEYLI:MIN WEYLI:%MAX WEYLI:MAX WEYLI:>=
                                       WEYLI:<= WEYLI:> WEYLI:= WEYLI:<
                                       WEYLI::%COPY-ARRAY-CONTENTS*
                                       WEYLI::APPLY POWER-OF? POCHHAMMER FACT
                                       MERGE-NEW-BV MAKE-UNION COERCE-OBJ
                                       CHECK-DOMAIN MAKE-FUNCTION-INTEGRATE
                                       MAKE-FUNCTION-DERIV MAKE-FUNCTION
                                       SEARCH-FOR-FUNCTION MAKE-ELEMENT DERIV
                                       CANONICALIZE-FUNCTIONS APPLY GE-FOURIER
                                       PARSE-ARGS RECUR MAKE-DIRECT-SUM*
                                       DERIVATION SET-VARIABLE-DERIVATION
                                       MAP-OVER-TREE PARTITION PICK
                                       %CHOOSE-REPEATS PICK-NULL %CHOOSE
                                       SET-MINIMAL-POLYNOMIAL
                                       MINIMAL-POLYNOMIAL))
(setf (callers-list 'GET-VARIABLE-NUMBER-PROPERTY :callers) '(GET-VARIABLE-PROPERTY
                                                              SET-VARIABLE-DERIVATION
                                                              SET-MINIMAL-POLYNOMIAL
                                                              MINIMAL-POLYNOMIAL))
(setf (callers-list 'VARIABLE-INDEX :callers) '(SET-VARIABLE-PROPERTY
                                                GET-VARIABLE-PROPERTY
                                                MAKE-POLYNOMIAL-MORPHISM
                                                MAKE-POLY SUBSTITUTE
                                                STANDARD-DERIVATION
                                                SET-VARIABLE-DERIVATION COERCE
                                                SET-MINIMAL-POLYNOMIAL
                                                MINIMAL-POLYNOMIAL))
(setf (callers-list 'SETQ :callers) '(CROSS-PRODUCT QUOTIENT TIMES
                                      LIST-OF-VARIABLES LOOP-VECTOR-BIND
                                      MAP-FUN CLIST-FACTOR-SQUAREFREE
                                      CLIST-SQFR-DECOMPOSE CFACTOR EXTENDED-GCD
                                      ZIPPER-SUM CLIST-SIMPLIFY
                                      DENSE-INTERPOLATE-COEFFICIENTS
                                      MAKE-MONOMIAL EVAL-MONOMIAL CHECK-DEGREE
                                      SPMOD-GCD2 SPMOD-GCD1 INITY
                                      SPARSEINTERPSTAGEI SOLVE-VANDERMONDETD
                                      SOLVE-VANDERMONDET SOLVE-VANDERMONDE
                                      COMPUTE-VANDERMONDE-Q MAKE-DEGREE-MATRIX
                                      EXPT-LIST INTERPOLATE TERMS-INTERPOLATE
                                      SET-VARIABLE-PROPERTY
                                      GET-VARIABLE-PROPERTY VARIABLE-INDEX
                                      PARSE-LINEAR-EQUATION POLY-C-COEFFICIENT
                                      POLY-COEFFICIENT TERMS-DEGREE-VECTOR
                                      ADD-VARIABLE-DEGREE POLY-DEGREE DEGREE
                                      TERMS-MAX-COEFFICIENT POLY-DERIVATIVE
                                      POLY-VARIABLE-LIST TERMS-HORNERS-RULE
                                      TERMS-SUBST POLY-SUBST
                                      TERMS-SUBRESULTANT-GCD RESULTANT
                                      TERMS-REDUCED-GCD POLY-MGCD
                                      POLY-FIND-COMMON-VARS POLY-SPLIT-ON-VARS
                                      POLY-HEIGHT TERMS-PSEUDO-REMAINDER
                                      TERMS-QUOTIENT TERMS-TIMES PRINT-FORM
                                      TRANSFORM ACCUMULATE-ACCUMULATION-LIST
                                      INSERT-INTO-ACCUMULATION-LIST MAKE-POLY
                                      GET-POLYNOMIAL-RING TERMS-REDUCE
                                      ADD-UNDONE REDUCE-ALL CRITERION1
                                      TERMS-S-POLY RESET-GROBNER-BASIS
                                      CONVERT-LIST MAKE-IDEAL GTERMS-TIMES
                                      COLLECT-OLD-TERM CONVERT-TERM
                                      MAKE-COMPARISON-FUN SCAN-POLY-FORM
                                      MAKE-EPOLYNOMIAL WITH-CONTAGION SQRT
                                      USE-CHINESE-REMAINDER MAKE-GFP-DOMAIN
                                      MULTIPLICATIVE-ORDER COMPUTE-INVERSE
                                      BF-ACOS BF-ATAN BF-TAN BF-SIN BF-COS
                                      BF-LOG BF-EXP BF-E BF-PI-AGM BF-SQRT
                                      BF-PI-MACHIN ROUND2 ROUND1 CEILING2
                                      CEILING1 FLOOR2 FLOOR1 READ!NUM READ!LNUM
                                      BFPRIN1 PRINT-OBJECT ROUND!EP ROUND!MT
                                      ROUND!LAST CUT!EP CUT!MT CONV!EP CONV!MT
                                      EXPT WITH-TPOWER-SERIES PRINT-TERM
                                      REVERSION TPS-DERIV2 TPS-DERIV1 TAYLOR1
                                      TAYLOR-EXP MAP INITIALIZE-INSTANCE
                                      PARTIAL-DERIV SUBSTITUTE
                                      RATIONAL-TERMS-HORNERS-RULE
                                      RATIONAL-POLY-SUBST RATFUN-REDUCE
                                      MAKE-RATIONAL-FUNCTION* RECIP
                                      QUOTIENT-REDUCE* DEFINE-MATH-PROPERTY
                                      MAKE-PREDICATE DEFINE-DOMAIN-CREATOR
                                      COERCE GET-MORPHISMS-TO
                                      GET-MORPHISMS-FROM COMPOSE
                                      TRIANGULATE-TRIPLES SMITH HERMITE
                                      SUBDETERMINANT* SPARSE-DET FIND-PIVOT
                                      EXCHANGE-ROWS HADAMARD-BOUND
                                      EVALUATE-MATRIX DEGREE-BOUNDS
                                      DETERMINANT* DETERMINANT
                                      FIND-PIVOT-UNORDERED FIND-PIVOT-ORDERED
                                      INVERT-ARRAY WITH-MATRIX-DIMENSIONS
                                      WEYL:MAKE-ELEMENT MAKE-ELEMENT
                                      WEYLI::SUBCLASS-OF?
                                      SIMPLE-INTEGER-FACTOR-INTERNAL
                                      ALL-DIVISORS FACTOR REPEATED-SQUARING
                                      NEWPRIME FIND-SMALLER-PRIME PRIME?
                                      REDUCE-MODULO-INTEGER INTEGER-NTH-ROOT
                                      FASTER-ISQRT POCHHAMMER EXPAND
                                      DIFFERENT-KERNELS MERGE-NEW-BV DERIV
                                      DECLARE-DEPENDENCIES LOOP-OVER-TERMS
                                      INITIALIZE-CONTEXTS SIMPLIFY CHECK-DOMAIN
                                      MAKE-FUNCTION-INTEGRATE
                                      ADD-FUNCTION-TO-DOMAIN MAKE-FUNCTION
                                      GET-FUNCTION ADD-SUBSCRIPTS
                                      MAKE-GE-VARIABLE REPARSE-PRINT-STRING
                                      INDEF-INTEGRAL INTEGRAL
                                      POLYNOMIAL-INTERPOLATE
                                      MAKE-SAMPLED-FUNCTION-1 EQUAL-VECTOR
                                      CANONICALIZE-FUNCTIONS APPLY
                                      MAKE-APP-FUNCTION FOURIER GE-FOURIER
                                      ADD-DOMAIN-INTERNAL RESET-DOMAINS
                                      CANONICALIZE-CLASS
                                      POLY-DIFFERENTIATE-COEFS POLY-DERIVATION
                                      STANDARD-DERIVATION ADD-NEW-VARIABLE
                                      SET-VARIABLE-DERIVATION AVL-DELETE
                                      ERASE-NODE DELETE-TAIL DELETE-HEAD
                                      AVL-INSERT BALANCE-LEFT BALANCE-RIGHT
                                      PICK SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'COERCE :callers) '(MAKE-ELEMENT CLIST-DERIV
                                        WEYL:MAKE-UPOLYNOMIAL LIST-COERCE
                                        SPARSEINTERPSTAGEI PSKELETON
                                        INTERPOLATE SET-VARIABLE-PROPERTY
                                        GET-VARIABLE-PROPERTY VARIABLE-INDEX
                                        COEFFICIENT DEGREE TERMS-DERIVATIVE
                                        POLY-SUBST POLY-COERCE RESULTANT
                                        POLY-EXPT TRANSFORM MAKE-POLY
                                        GET-POLYNOMIAL-RING ADD-RELATION
                                        MAKE-IDEAL TRANSFORM-TERM BINARY-LCM
                                        BINARY-GCD CONTAGION
                                        USE-CHINESE-REMAINDER MAKE-GFP-DOMAIN
                                        BF-ACOS BF-ASIN BF-ATAN BF-TAN BF-SIN
                                        BF-COS BF-LOG BF-EXP BF-PI-AGM BF-SQRT
                                        ROUND2 ROUND1 CEILING2 FLOOR2 ZERO ONE
                                        MAKE-TPOWER-SERIES
                                        GET-TPOWER-SERIES-DOMAIN MAKE-POINT
                                        GET-DEFAULT-TAYLOR-EXPANSION TAYLOR1
                                        TAYLOR PARTIAL-DERIV
                                        RATIONAL-POLY-SUBST
                                        MAKE-QUOTIENT-ELEMENT LTH-LOCAL-TERM
                                        LOCALIZE-FORM* WHAT-IS-THE-LTHTERM2
                                        WHAT-IS-THE-LTHTERM KTHTERM LOCALIZE
                                        SHIFT-MULTIPOLE
                                        MAKE-MULTIPOLE-EXPANSION COERCIBLE?
                                        VERTICES-SORTED-BY-ANGLE ANGLE
                                        CIRCUMCENTER ARC MEASURE BOUNDING-BOX
                                        DISTANCE BEND MAKE-PARAMETER-SPACE
                                        MAKE-MEAN-POINT SUBDETERMINANT*
                                        EVALUATE-MATRIX DEGREE-BOUNDS
                                        WEYL:MAKE-ELEMENT ATAN SUBSTITUTE
                                        MAKE-UNION RECIP MINUS EQN>= EQN> EQN=
                                        GE-DERIV DERIV DECLARE-DEPENDENCIES
                                        COERCE-OBJ CHECK-DOMAIN ADD-SUBSCRIPTS
                                        APPLY MAKE-APP-FUNCTION FOURIER
                                        GE-FOURIER ITERATE POLY-DERIVATION
                                        ADD-NEW-VARIABLE
                                        SET-VARIABLE-DERIVATION COERCE
                                        SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'EQL :callers) '(CROSS-PRODUCT QUOTIENT
                                     MAKE-ELEMENT-FREE-MODULE-VECTOR SPMOD-GCD1
                                     BOUND-DEGREE-TERM-COUNT INTERPOLATE
                                     PARSE-LINEAR-EQUATION COEFFICIENT
                                     ADD-VARIABLE-DEGREE DEGREE POLY-SUBST
                                     RESULTANT MAKE-POLYNOMIAL-MORPHISM
                                     MAP-OVER-EACH-TERM GET-POLYNOMIAL-RING
                                     ADD-UNDONE CRITERION1 ADD-RELATION
                                     (SETF GREATER-FUNCTION) CHECK-SAME-DOMAIN
                                     BINARY= TIMES MAKE-POLYNOMIAL
                                     GET-COMPARISON-FUN PRINT-OBJECT
                                     MAKE-EPOLYNOMIAL BINARY-LCM BINARY-GCD
                                     MIN-PAIR MAX-PAIR GET-FACTOR-RING
                                     GET-FINITE-FIELD MULTIPLICATIVE-ORDER EXPT
                                     MINUS MAKE-QUOTIENT-ELEMENT 1?
                                     COMPUTE-INVERSE CEILING2 CEILING1
                                     BIGFLOATP WITH-TPOWER-SERIES
                                     GET-TPOWER-SERIES-DOMAIN POINTS-ORDER
                                     %SET-COERCE INTERSECTION UNION
                                     SIGN-OF-PERMUTATION MAKE-SIMPLEX
                                     MAKE-POINT PARTIAL-DERIV
                                     RATIONAL-POLY-SUBST QUOTIENT-REDUCE
                                     DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                     %MAP-OVER-PROPERTIES COMPARE-PTERM-LISTS
                                     APPLY-MORPHISM GET-MORPHISMS-FROM COMPOSE
                                     READ-MESH FWRITE
                                     READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                     REFINE-MESH TRIANGLE-CENTER SPLIT
                                     %SPLIT-CONSTRAINT-ONE-SIDE REMOVE-VERTEX
                                     FORCE-EDGE FLIP-OK? ADJ-VERTICES NEAR-BASE
                                     NEIGHBOR TRIANGULATE-TRIPLES CCW-SIDE
                                     POINT-VS-TRIANGLE ARC EDGES-CROSS?
                                     MAKE-MEAN-POINT MEMBER-ROTATE
                                     EVALUATE-MATRIX SUBTRACT-ROWS INVERT-ARRAY
                                     RECIP FME-MATRIX-TIMES MATRIX-FME-TIMES
                                     ARRAY-TIMES DIFFERENCE PLUS REF
                                     WITH-MATRIX-DIMENSIONS WEYL:MAKE-ELEMENT
                                     MAKE-ELEMENT SEARCH-LIST SUBSTITUTE
                                     DEPENDS-ON? SET-VARIABLE-PROPERTY
                                     GET-VARIABLE-PROPERTY LOOP-OVER-TERMS
                                     COERCE-OBJ CHECK-DOMAIN
                                     ADD-FUNCTION-TO-DOMAIN GE-EQUAL
                                     EQUAL-VECTOR CANONICALIZE-FUNCTIONS APPLY
                                     GE-FOURIER PARSE-ARGS RECUR
                                     CANONICALIZE-CLASS GET-DIRECT-SUM
                                     STANDARD-DERIVATION
                                     SET-VARIABLE-DERIVATION COERCE
                                     RING-VARIABLES SCAN AVL-HEIGHT
                                     SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'DOMAIN-OF :callers) '(TILDE CROSS-PRODUCT
                                           MULTIPLY-VECTOR-BY-SCALAR QUOTIENT
                                           0? DIMENSIONS
                                           PRINT-FREE-MODULE-ELEMENT
                                           CREATE-UNIT-QUATERNION SQUARE-FREE
                                           CFACTOR FACTOR EXTENDED-GCD
                                           MAKE-UPOLYNOMIAL SPARSEINTERPSTAGEI
                                           SPARSEINTERPSTAGE EXPT-LIST
                                           INTERPOLATE PARSE-LINEAR-EQUATION
                                           COEFFICIENT DEGREE RESULTANT MINUS?
                                           ADD-RELATION CHECK-SAME-DOMAIN
                                           MAKE-POLYNOMIAL ATANH ACOSH ASINH
                                           TANH COSH SINH BINARY-LCM BINARY-GCD
                                           TRUNCATE2 TRUNCATE1 SQRT
                                           PARSE-NUMERIC-OBJ PHASE ABS
                                           CONJUGATE IMAGPART REALPART
                                           USE-CHINESE-REMAINDER
                                           MULTIPLICATIVE-ORDER HEIGHT
                                           MAKE-QUOTIENT-ELEMENT ACOS ASIN ATAN
                                           TAN COS SIN LOG EXP ROUND2 ROUND1
                                           CEILING2 CEILING1 FLOOR2 FLOOR1
                                           CONVERT-TO-BIGFLOAT TRUNCATE-ORDER
                                           MAP-TPOWER-SERIES
                                           MODIFY-BRANCH-ORDER
                                           TPS-SPREAD-COEFFS COBOUNDARY-DOMAIN
                                           BOUNDARY-DOMAIN DIMENSION-OF
                                           COMPLEX-OF %SET-COERCE MAKE-SIMPLEX
                                           REVERSION TPS-DERIV2 TPS-DERIV1
                                           TIMES BINARY> BINARY= PARTIAL-DERIV
                                           LIST-OF-VARIABLES DENOMINATOR
                                           NUMERATOR QUOTIENT-REDUCE
                                           SHIFT-MULTIPOLE CANONICALIZE-NUMBER
                                           APPLY-MORPHISM FWRITE
                                           COORDINATE-LIST COMPLEXER SMITH
                                           HERMITE* HERMITE SUBDETERMINANT*
                                           SUBDETERMINANT SPARSE-DETERMINANT
                                           EVALUATE-MATRIX DEGREE-BOUNDS
                                           DETERMINANT MATRIX-DIMENSIONS
                                           JACOBIAN TRANSPOSE FME-MATRIX-TIMES
                                           MATRIX-FME-TIMES DIFFERENCE PLUS REF
                                           EXPAND EXPAND-PRODUCT SUBSTITUTE
                                           MAKE-UNION DEPENDS-ON?
                                           DECLARE-DEPENDENCIES PRINT-OBJECT
                                           SIMPLIFY CHECK-DOMAIN
                                           MAKE-FUNCTION-INTEGRATE
                                           MAKE-FUNCTION-DERIV ADD-SUBSCRIPTS
                                           COERCE INDEF-INTEGRAL DERIV MAP
                                           SMOOTH2 MAKE-SAMPLED-FUNCTION-1
                                           APPLY MAKE-APP-FUNCTION GE-FOURIER
                                           MINUS RECIP DERIVATION
                                           SET-VARIABLE-DERIVATION EXPT
                                           SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'LET :callers) '(TILDE CROSS-PRODUCT QUOTIENT ZERO
                                     MAKE-ELEMENT-FREE-MODULE-VECTOR
                                     LOOP-VECTOR-BIND CONJUGATE
                                     CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                     CLIST-FACTOR-SQUAREFREE CLIST-DERIV
                                     CLIST-FACTOR EXTENDED-GCD CLIST-DIVIDE
                                     CLIST-DIFFERENCE CLIST-PLUS CLIST-SIMPLIFY
                                     PRINT-TERM WEYL:MAKE-UPOLYNOMIAL
                                     DENSE-INTERPOLATE-COEFFICIENTS
                                     EVAL-MONOMIAL CHECK-DEGREE SPMOD-GCD2
                                     SPMOD-GCD1 SPMOD-GCD INITY PSKELETON
                                     POLY-SKELETON SOLVE-VANDERMONDETD
                                     SOLVE-VANDERMONDET COMPUTE-VANDERMONDE-Q
                                     MAKE-DEGREE-MATRIX INTERPOLATE
                                     ADD-NEW-VARIABLE PARSE-LINEAR-EQUATION
                                     COEFFICIENT LIST-OF-VARIABLES
                                     POLY-DEGREE-VECTOR DEGREE POLY-DERIVATIVE
                                     TERMS-HORNERS-RULE TERMS-SUBST POLY-SUBST
                                     TERMS-SUBRESULTANT-GCD POLY-RESULTANT
                                     RESULTANT POLY-SUBRESULTANT-GCD
                                     TERMS-REDUCED-GCD TERMS-MONICIZE
                                     POLY-CONTENT-AND-PRIM-PART POLY-MGCD
                                     POLY-FIND-COMMON-VARS POLY-SPLIT-ON-VARS
                                     POLY-GCD POLY-HEIGHT POLY-TEST-QUOTIENT
                                     POLY-QUOTIENT POLY-EXPT TERMS-TIMES
                                     TERMS-DIFFERENCE TERMS-PLUS TRANSFORM
                                     PRINT-FORM MAKE-POLYNOMIAL-MORPHISM
                                     GET-POLYNOMIAL-RING GTERMS-PRIM*
                                     TERMS-REDUCE REDUCE-ALL CRITERION1
                                     ADD-RELATION MAKE-IDEAL CHECK-SAME-DOMAIN
                                     IDEAL-PRINT-OBJECT GTERMS-EXPT
                                     GTERMS-TIMES GTERM-LCM GTERM-QUOT
                                     GTERM-TIMES GTERMS-MON-TIMES
                                     GTERMS-DIFFERENCE GTERMS-PLUS
                                     TRANSFORM-TERM MAKE-COMPARISON-FUN
                                     SCAN-POLY-FORM MAKE-EPOLYNOMIAL BINARY-LCM
                                     BINARY-GCD WITH-CONTAGION SQRT HEIGHT
                                     RANDOM-FLOATING-NUMBER PHASE ABS IMAGPART
                                     REALPART MAKE-GFM-DOMAIN
                                     MULTIPLICATIVE-ORDER COMPUTE-INVERSE
                                     MAKE-ELEMENT MAKE-GFP-DOMAIN BF-ACOS
                                     BF-ASIN BF-COS BF-EXP GET!CONST ROUND2
                                     ROUND1 CEILING2 CEILING1 FLOOR2 FLOOR1
                                     BF-FLOOR BF-DIFFERENCE BF-PLUS
                                     CONVERT-TO-BIGFLOAT READ!NUM ROUND!LAST
                                     CONVERT-NUMBER->CHARACTERS
                                     %BIND-DYNAMIC-DOMAIN-CONTEXT
                                     TRUNCATE-ORDER WITH-TPOWER-SERIES GROUPED?
                                     PRINT-GROUPED TRIM-ZEROES
                                     MAKE-TPOWER-SERIES
                                     GET-TPOWER-SERIES-DOMAIN COBOUNDARY
                                     BOUNDARY CHAIN-TERMS-TIMES
                                     FREE-GROUP-DIFFERENCE FREE-GROUP-PLUS
                                     MAKE-CHAIN-OR-COCHAIN CELL-ORDER
                                     MAX-DIMENSION-OF VERTEX-SET INTERSECTION
                                     UNION CELL-ID MAP-OVER-ORIENTED-COFACETS
                                     FACETS MAKE-POINT SOLVE-FOR-COEFFS TIMES
                                     TAYLOR1 TAYLOR-EXP
                                     DEFINE-TAYLOR-EXPANSION-FUN RANDOM
                                     INITIALIZE-INSTANCE
                                     SET-WITH-ELEMENT-LIST-PRINT-OBJECT MAP
                                     LIST-OF-ELEMENTS PARTIAL-DERIV
                                     RATIONAL-TERMS-HORNERS-RULE
                                     RATIONAL-POLY-SUBST RATFUN-REDUCE
                                     DENOMINATOR NUMERATOR QUOTIENT-REDUCE*
                                     DEFINE-MATH-PROPERTY
                                     DEFINE-PRIMITIVE-PROPERTY TEST-PROPERTY
                                     ASSERT-PROPERTY DEFINE-DOMAIN-CREATOR
                                     SHIFT-L-FORM* KTHTERM SHIFT-MULTIPOLE
                                     COERCIBLE? NEXT-DOMAINS
                                     GET-EMBEDDABLE-DOMAINS MAKE-HOMOMORPHISM
                                     DELETE-MORPHISM MAKE-MORPHISM
                                     GET-MORPHISMS COMPOSE READ-MESH FWRITE
                                     WRITE-VERTEX-SET
                                     READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                     MAKE-MESH-FROM-FILE %MM-BOUNDARY
                                     REFINE-MESH-PREP TOO-BIG? SPLIT-EDGE PLACE
                                     INSERT %SPLIT-CONSTRAINT-ONE-SIDE
                                     FORCE-EDGE TRIANGLES LOCATE CIRCUMCENTER
                                     FLAT-TRIANGULATE STAR-TRIANGULATE CCW-SIDE
                                     MEASURE BOUNDING-BOX DISTANCE
                                     MAKE-PARAMETER-SPACE ANGLE GETQ ALL-NAMES
                                     PROCESSI SMITH* HERMITE* SUBDETERMINANT*
                                     INDEPENDENT-COLS INDEPENDENT-ROWS
                                     HADAMARD-BOUND EVALUATE-MATRIX COERCE
                                     DEGREE-BOUNDS SO-N-PRINT-OBJECT
                                     O-N-PRINT-OBJECT SL-N-PRINT-OBJECT
                                     PSL-N-PRINT-OBJECT ONE-MATRIX
                                     WEYL:MAKE-ELEMENT MATRIX-DIMENSIONS
                                     GL-N-PRINT-OBJECT SUBTRACT-ROWS
                                     INVERT-ARRAY TRANSPOSE FME-MATRIX-TIMES
                                     MATRIX-FME-TIMES TIMES-ARRAY ARRAY-TIMES
                                     DIFFERENCE PLUS REF WITH-MATRIX-DIMENSIONS
                                     ASSOCIATE-PREDICATE
                                     WEYLI::%COPY-ARRAY-CONTENTS*
                                     FERMAT-INTEGER-FACTOR
                                     SIMPLE-INTEGER-FACTOR-INTERNAL
                                     SIMPLE-INTEGER-FACTOR ALL-DIVISORS FACTOR
                                     REPEATED-SQUARING CHOICE-PRIMES
                                     INTEGER-NTH-ROOT FASTER-ISQRT POCHHAMMER
                                     EXPAND-BINOMIAL-FORM EXPAND EXPAND-OTHER
                                     SUBSTITUTE MERGE-BOUND-VARS MAKE-UNION
                                     UQ-SET-PRINT-OBJECT RECIP MINUS
                                     DECLARE-DEPENDENCIES LOOP-OVER-TERMS
                                     SIMP-TIMES-TERMS SIMP-PLUS-TERMS GE-MINUS?
                                     SIMPLIFY DISPLAY-LIST APPLY
                                     MAKE-FUNCTION-INTEGRATE
                                     ADD-FUNCTION-TO-DOMAIN MAKE-FUNCTION
                                     PRINT-OBJECT REPARSE-PRINT-STRING SMOOTH2
                                     PRINT-TABLE CHECK-CACHED-VECTOR
                                     DEFDERIV-FUNCT DEFSIMPLIFY-FUNCT
                                     DEF-GE-1OPER CANONICALIZE-FUNCTIONS
                                     GE-FOURIER DEFMETHOD-SD PARSE-ARGS
                                     ADD-DOMAIN-INTERNAL LIST-OPERATIONS 1? 0?
                                     ITERATE DEFINE-DIRECT-SUM DERIVATION
                                     POLY-DERIVATION STANDARD-DERIVATION DELETE
                                     BALANCE-LEFT BALANCE-RIGHT MAKE-GENERATOR
                                     MAP-OVER AVL-HEIGHT AVL-SIZE MAP-OVER-TREE
                                     PARTITION PICK PICK-NULL EXPT
                                     ALG-POLY-TIMES SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'POLY-FORM :callers) '(SQUARE-FREE FACTOR EXTENDED-GCD
                                           MAKE-UPOLYNOMIAL SPARSEINTERPSTAGEI
                                           PSKELETON INTERPOLATE
                                           PARSE-LINEAR-EQUATION VARIABLE-INDEX
                                           COEFFICIENT LIST-OF-VARIABLES DEGREE
                                           PARTIAL-DERIV SUBSTITUTE RESULTANT
                                           HEIGHT MINUS? TRANSFORM
                                           MAKE-POLYNOMIAL-MORPHISM
                                           VARIABLE-SYMBOL SCALAR? ADD-RELATION
                                           CONVERT-TERM MINUS TRANSFORM-TERM
                                           MAKE-POLYNOMIAL 1? 0? PRINT-OBJECT
                                           MAKE-EPOLYNOMIAL COERCE
                                           QUOTIENT-REDUCE
                                           MAKE-QUOTIENT-ELEMENT DERIVATION
                                           SET-VARIABLE-DERIVATION EXPT
                                           SET-MINIMAL-POLYNOMIAL))
(setf (callers-list '= :callers) '(TILDE CROSS-PRODUCT CREATE-UNIT-QUATERNION
                                   PROJECT CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                   CLIST-FACTOR-SQUAREFREE CLIST-PTH-ROOT
                                   CLIST-DERIV CLIST-SQFR-DECOMPOSE
                                   CLIST-FACTOR CFACTOR CLIST-DIVIDE
                                   CLIST-TIMES CLIST-MINUS CLIST-SIMPLIFY
                                   PRINT-TERM SCALAR? POLY-EXPT PRINT-FORM
                                   GTERM-EQUAL EXTENDED-GCD* EXPT BINARY= SQRT
                                   1? MAKE-QUOTIENT-ELEMENT
                                   MULTIPLICATIVE-ORDER MAKE-GFP-DOMAIN BF-ATAN
                                   BF-TAN BF-COS BF-LOG BF-BINARY> BF-BINARY>=
                                   BF-BINARY= BF-FLOOR BF-DIFFERENCE BF-PLUS
                                   SET-BRANCH-ORDER GROUPED? TRIM-ZEROES
                                   COBOUNDARY-DOMAIN BOUNDARY-DOMAIN
                                   %MAP-OVER-CELLS CELL-ID TETRAHEDRON?
                                   TRIANGLE? SEGMENT? TIMES TAYLOR1 SUBSTITUTE
                                   MEMBER NOT-AN-ELEMENT LTH-LOCAL-TERM
                                   REST-OF-LOCAL LOCALIZE-FORM*
                                   WHAT-IS-THE-LTHTERM2 WHAT-IS-THE-LTHTERM
                                   READ-BOUNDARY-SIMPLICIAL-COMPLEX FLIP-OK?
                                   INSERT TRIANGULATE-TRIPLES BOUNDING-BOX
                                   DISTANCE BEND CIRCLE-CENTER
                                   COMPLEX-CIRCUMCENTER COMPLEXER PROCESSI
                                   HERMITE-ARRAY FIND-PIVOT FME-MATRIX-TIMES
                                   MATRIX-FME-TIMES
                                   SIMPLE-INTEGER-FACTOR-INTERNAL FACTOR
                                   UNIFORMIZE-FACTOR-LIST POWER-OF? PRIME?
                                   INTEGER-NTH-ROOT SEARCH-FOR-FUNCTION
                                   GE-EQUAL INDEF-INTEGRAL DERIV EQUAL-VECTOR
                                   GET-DIRECT-SUM SEARCH-NODE AVL-DELETE
                                   DELETE-RIGHT DELETE-LEFT AVL-INSERT
                                   PICK-NULL SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'POLY-ORDER-NUMBER :callers) '(SPMOD-GCD1 VARIABLE-INDEX
                                                   P-LIST-OF-VARS
                                                   TERMS-DEGREE-VECTOR
                                                   POLY-DEGREE-VECTOR
                                                   POLY-VARIABLE-LIST
                                                   POLY-SUBST RESULTANT
                                                   PRINT-FORM TRANSFORM
                                                   VARIABLE-SYMBOL
                                                   MAKE-POLY-FORM
                                                   SCAN-POLY-FORM
                                                   RATIONAL-POLY-SUBST
                                                   STANDARD-DERIVATION
                                                   ALG-POLY-TIMES
                                                   SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'WITH-OUTPUT-TO-STRING :callers) '(SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'DISPLAY :callers) '(PRINT-OBJECT PRINT-TERM
                                                      TP-RING-PRINT-OBJECT
                                                      TP-FIELD-PRINT-OBJECT
                                                      SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'SETF :callers) '(IMAGPART REALPART CONJUGATE DERIVATION
                                               MULTIPLY-VECTOR-BY-SCALAR MINUS
                                               MAKE-AFFINE-SPACE VECTOR-SET-REF
                                               MAKE-ELEMENT
                                               CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                               CLIST-PTH-ROOT CLIST-DERIV
                                               CLIST-PRIMITIVE-PART!
                                               CLIST-DIVIDE CLIST-TIMES
                                               CLIST-MINUS ZIPPER-SUM
                                               MAKE-UPOLYNOMIAL
                                               WEYL:MAKE-UPOLYNOMIAL
                                               DENSE-INTERPOLATE-COEFFICIENTS
                                               CHECK-DEGREE SPARSEINTERPSTAGEI
                                               SOLVE-VANDERMONDE
                                               MAKE-DEGREE-MATRIX
                                               SET-VARIABLE-NUMBER-PROPERTY
                                               ADD-VARIABLE-DEGREE TERMS-TIMES
                                               MAKE-POLYNOMIAL-MORPHISM
                                               INSERT-INTO-ACCUMULATION-LIST
                                               GTERMS-PRIM* TERMS-S-POLY
                                               GTERMS-EXPT GTERMS-TIMES
                                               GTERM-LCM GTERM-QUOT GTERM-TIMES
                                               GTERMS-MON-TIMES MAKE-ETERM
                                               MAKE-EPOLYNOMIAL SAVE!CONST
                                               ORIENTED-SORT EXPT
                                               TPS-SPREAD-COEFFS TRIM-ZEROES
                                               COBOUNDARY BOUNDARY
                                               MAKE-CHAIN-OR-COCHAIN
                                               MAX-DIMENSION-OF %DELETE %INSERT
                                               REVERSION TPS-DERIV2 TPS-DERIV1
                                               NOT-AN-ELEMENT DELETE-PROPERTY
                                               ASSERT-PROPERTY LTH-LOCAL-TERM
                                               REST-OF-LOCAL LOCALIZE-FORM*
                                               WHAT-IS-THE-LTHTERM2
                                               SHIFT-L-FORM*
                                               WHAT-IS-THE-LTHTERM
                                               SHIFT-M-FORM*
                                               MAKE-MULTIPOLE-EXPANSION
                                               DELETE-MORPHISM READ-MESH
                                               WRITE-MESH WRITE-VERTEX-SET
                                               READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                               READ-SIMPLICIAL-COMPLEX
                                               READ-VERTEX-SET
                                               MAKE-MESH-FROM-FILE %MM-BOUNDARY
                                               REFINE-MESH NAME-REGION
                                               CREATE-MESH REFINE-MESH-PREP
                                               BUILD-CDT-FROM-BOUNDARIES PLACE
                                               SPLIT %SPLIT-CONSTRAINT-ONE-SIDE
                                               REMOVE-VERTEX FORCE-EDGE
                                               DELAUNAY? DIRECTED-LOCATE
                                               FLAT-TRIANGULATE
                                               STAR-TRIANGULATE
                                               TRIANGULATE-TRIPLES
                                               POINT-VS-TRIANGLE ARC
                                               BOUNDING-BOX SIMPLEX-SIZE
                                               MAKE-PARAMETER-SPACE
                                               MAKE-MEAN-POINT
                                               COMPLEX-CIRCUMCENTER GETQ
                                               INSERTQ CLEARQ MAKE-QUEUE
                                               DELETE-MAXIMAL-CELL INSERT
                                               %SET-NAME PROCESSI SMITH*
                                               HERMITE-ARRAY HERMITE*
                                               SUBDETERMINANT* FIND-PIVOT
                                               COERCE JACOBIAN SUBSTITUTE
                                               SUBTRACT-ROWS INVERT-ARRAY RECIP
                                               TRANSPOSE TIMES-ARRAY DIFFERENCE
                                               PLUS ONE-MATRIX SET-REF REF
                                               WEYL:MAKE-ELEMENT
                                               WEYLI::%COPY-ARRAY-CONTENTS*
                                               WEYLI::PUTF DECLARE-DEPENDENCIES
                                               SET-VARIABLE-PROPERTY
                                               ADD-SUBSCRIPTS
                                               REPARSE-PRINT-STRING
                                               SET-MEMOIZATION INDEF-INTEGRAL
                                               DERIV MAP POLYNOMIAL-INTERPOLATE
                                               SMOOTH2 RESAMPLE
                                               MAKE-SAMPLED-FUNCTION-1
                                               EQUAL-VECTOR RESET-DOMAINS
                                               PARSE-OPERATION-LIST PUTF
                                               INITIALIZE-INSTANCE
                                               STANDARD-DERIVATION
                                               ADD-NEW-VARIABLE
                                               SET-VARIABLE-DERIVATION
                                               AVL-DELETE DELETE-RIGHT
                                               DELETE-LEFT DELETE-TAIL
                                               DELETE-HEAD AVL-INSERT
                                               UPDATE-NODE
                                               SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'POLY-TERMS :callers) '(MAKE-UPOLYNOMIAL POLY-GCDU
                                            DENSE-INTERPOLATE-COEFFICIENTS
                                            CHECK-DEGREE SPMOD-GCD2 SPMOD-GCD1
                                            POLY-SKELETON
                                            POLY-LEADING-COEFFICIENT
                                            POLY-C-COEFFICIENT POLY-COEFFICIENT
                                            P-LIST-OF-VARS TERMS-DEGREE-VECTOR
                                            POLY-DEGREE-VECTOR POLY-DEGREE
                                            DEGREE TERMS-MAX-COEFFICIENT
                                            POLY-MAX-COEFFICIENT
                                            POLY-DERIVATIVE POLY-VARIABLE-LIST
                                            POLY-SUBST POLY-COERCE
                                            POLY-RESULTANT
                                            POLY-SUBRESULTANT-GCD
                                            POLY-REDUCED-GCD POLY-PRIMITIVE-GCD
                                            POLY-EUCLIDEAN-GCD POLY-MONICIZE
                                            POLY-PRIM-PART POLY-GCD
                                            POLY-CONTENT POLY-FACTOR-CBOUND
                                            POLY-HEIGHT POLY-PSEUDO-REMAINDER
                                            POLY-QUOTIENT* POLY-EXPT POLY-TIMES
                                            POLY-DIFFERENCE POLY-MINUS?
                                            POLY-MINUS POLY-PLUS PRINT-FORM
                                            POLY-MONOMIAL? TRANSFORM
                                            SCAN-POLY-FORM COERCE PARTIAL-DERIV
                                            RATIONAL-POLY-SUBST
                                            POLY-DIFFERENTIATE-COEFS
                                            POLY-DERIVATION ALG-POLY-TIMES
                                            SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'MAKE-INSTANCE :callers) '(ZERO
                                               MAKE-ELEMENT-FREE-MODULE-VECTOR
                                               MAKE-PROJECTIVE-SPACE-ELEMENT
                                               MAKE-UPOLYNOMIAL
                                               WEYL:MAKE-UPOLYNOMIAL
                                               GENERATORS-OF MAKE-IDEAL
                                               MAKE-EPOLYNOMIAL* RANDOM ABS
                                               CONJUGATE MAKE-GFM-DOMAIN
                                               MAKE-GFP-DOMAIN
                                               MAKE-TPOWER-SERIES
                                               MAKE-CHAIN-OR-COCHAIN
                                               GET-COCHAIN-MODULE
                                               GET-CHAIN-MODULE
                                               MAKE-SIMPLICIAL-COMPLEX
                                               INTERSECTION UNION MAKE-SIMPLEX
                                               MAKE-POINT MAP-WITH-DOMAIN MAP
                                               LOCALIZE PLUS SHIFT-LOCAL-FIELD
                                               SHIFT-MULTIPOLE
                                               MAKE-MULTIPOLE-EXPANSION
                                               CANONICALIZE-NUMBER
                                               MAKE-HOMOMORPHISM MAKE-MORPHISM
                                               COMPOSE CREATE-MESH
                                               TRIANGULATE-TRIPLES
                                               MAKE-CURVED-SEGMENT ARC SPLIT
                                               MAKE-QUEUE INITIALIZE-INSTANCE
                                               WEYL:MAKE-ELEMENT SUBSTITUTE
                                               MAKE-UNIVERSAL-QUANTIFIED-SET
                                               MAKE-GE-EQN>= MAKE-GE-EQN>
                                               MAKE-GE-EQN= MAKE-GE-EXPT
                                               MAKE-GE-TIMES MAKE-GE-PLUS
                                               INITIALIZE-CONTEXTS CHECK-DOMAIN
                                               MAKE-GE-FUNCT
                                               ADD-FUNCTION-TO-DOMAIN
                                               MAKE-FUNCTION ADD-SUBSCRIPTS
                                               MAKE-GE-VARIABLE COERCE
                                               MAKE-QUOTIENT-ELEMENT
                                               MAKE-SAMPLED-FUNCTION
                                               MAKE-APP-FUNCTION
                                               MAKE-GE-IFOURIER MAKE-GE-FOURIER
                                               DOMAIN-LIST MAKE-ELEMENT
                                               MAKE-POLYNOMIAL))
(setf (callers-list 'ALGEBRAIC-OBJECT :callers) '(MAKE-POLYNOMIAL))
(setf (callers-list 'COND :callers) '(DERIVATION TILDE CROSS-PRODUCT
                                      LOOP-VECTOR-BIND
                                      CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                      CLIST-FACTOR-SQUAREFREE CLIST-DIVIDE
                                      CLIST-REMAINDER CLIST-QUOTIENT ZIPPER-SUM
                                      POLY-GCDU DENSE-INTERPOLATE-COEFFICIENTS
                                      MAKE-MONOMIAL CHECK-DEGREE SPMOD-GCD2
                                      POLY-SKELETON DEGREE-PARTITION
                                      BOUND-DEGREE-TERM-COUNT INTERPOLATE
                                      POLY-C-COEFFICIENT POLY-COEFFICIENT
                                      COEFFICIENT P-LIST-OF-VARS POLY-DEGREE
                                      DEGREE POLY-DERIVATIVE PARTIAL-DERIV
                                      POLY-VARIABLE-LIST POLY-SUBST POLY-COERCE
                                      POLY-GCD POLY-CONTENT POLY-TRUNCATE2
                                      POLY-PSEUDO-REMAINDER
                                      TERMS-PSEUDO-REMAINDER POLY-QUOTIENT*
                                      POLY-EXPT POLY-TIMES TERMS-TIMES
                                      POLY-DIFFERENCE POLY-MINUS POLY-PLUS
                                      TERMS-TERM POLY-SIMP POLY-MONOMIAL?
                                      TRANSFORM ACCUMULATE-ACCUMULATION-LIST
                                      INSERT-INTO-ACCUMULATION-LIST
                                      TERMS-S-POLY MAKE-IDEAL TIMES GTERMS-EXPT
                                      GTERMS-TIMES COLLECT-OLD-TERM
                                      CONVERT-TERM GET-COMPARISON-FUN
                                      SCAN-POLY-FORM MAKE-EPOLYNOMIAL MIN-PAIR
                                      MAX-PAIR SQRT RECIP DENOMINATOR NUMERATOR
                                      PARSE-NUMERIC-OBJ CONJUGATE IMAGPART
                                      REALPART WEYL:MAKE-ELEMENT
                                      MAKE-QUOTIENT-ELEMENT GET-FACTOR-RING
                                      GET-FINITE-FIELD MAKE-FINITE-FIELD*
                                      MULTIPLICATIVE-ORDER BINARY-LCM
                                      BINARY-GCD QUOTIENT MAKE-GFP-DOMAIN
                                      BF-ACOS BF-ASIN BF-ATAN BF-TAN BF-SIN
                                      BF-COS BF-LOG BF-EXP BF-E BF-PI GET!CONST
                                      BF-BINARY> BF-BINARY>= BF-FLOOR
                                      BF-DIFFERENCE BF-PLUS READ!NUM ROUND!EP
                                      ROUND!MT CONV!EP CONV!MT EXPT
                                      TRUNCATE-ORDER SET-BRANCH-ORDER GROUPED?
                                      GET-TPOWER-SERIES-DOMAIN
                                      FREE-GROUP-SCALAR-TIMES APPLY
                                      MAKE-CHAIN-OR-COCHAIN POINTS-ORDER
                                      PRINT-TERM %DELETE SIGN-OF-PERMUTATION
                                      TAYLOR1 MAP INITIALIZE-INSTANCE
                                      RATIONAL-POLY-SUBST
                                      MAKE-RATIONAL-FUNCTION*
                                      DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                      DEFINE-DOMAIN-CREATOR MPEF-PAIRWISE-M-SUM
                                      CANONICALIZE-NUMBER GET-MORPHISMS-TO
                                      GET-MORPHISMS-FROM COMPOSE
                                      MAKE-MESH-FROM-FILE %MM-BOUNDARY
                                      %MM-GET-POINT MAKE-MESH IMPROVE GRADE
                                      TOO-BIG? INSERT SPLIT
                                      %SPLIT-CONSTRAINT-ONE-SIDE PLACE
                                      POINT-VS-TRIANGLE ARC BEND CIRCLE-CENTER
                                      INSERTQ PROCESSI HERMITE-ARRAY
                                      SUBDETERMINANT* FIND-PIVOT
                                      EVALUATE-MATRIX INVERT-ARRAY
                                      FME-MATRIX-TIMES MATRIX-FME-TIMES
                                      DIFFERENCE PLUS REF WEYLI::LCM WEYLI:GCD
                                      WEYLI:/ WEYLI:* WEYLI:- WEYLI:+ WEYLI:MIN
                                      WEYLI:MAX WEYLI:>= WEYLI:<= WEYLI:>
                                      WEYLI:= WEYLI:< ATAN
                                      SIMPLE-INTEGER-FACTOR-INTERNAL POWER-OF?
                                      INTEGER-NTH-ROOT FASTER-ISQRT POCHHAMMER
                                      EXPAND EXPAND-BINOMIAL-FORM EXPAND-OTHER
                                      SUBSTITUTE MERGE-NEW-BV SIMPLIFY
                                      LOOP-OVER-TERMS GE-MINUS? GE-LGREAT
                                      COERCE-OBJ CHECK-DOMAIN
                                      MAKE-FUNCTION-INTEGRATE ADD-SUBSCRIPTS
                                      PRINT-OBJECT REPARSE-PRINT-STRING
                                      MAKE-ELEMENT INTEGRAL EQUAL-VECTOR DERIV
                                      MAKE-APP-FUNCTION GE-FOURIER GE-GREAT
                                      PARSE-ARGS RECUR REQUIRED-OPERATIONS
                                      CANONICALIZE-CLASS DESCRIBE-OPERATIONS
                                      DOMAIN-LIST ITERATE POLY-DERIVATION
                                      STANDARD-DERIVATION
                                      SET-VARIABLE-DERIVATION COERCE
                                      SEARCH-NODE AVL-DELETE DELETE-RIGHT
                                      DELETE-LEFT ERASE-NODE DELETE-TAIL
                                      DELETE-HEAD AVL-INSERT BALANCE-LEFT
                                      BALANCE-RIGHT FIND-RIGHT-MOST SCAN
                                      FIND-LEFT-MOST AVL-HEIGHT MAP-OVER-TREE
                                      PARTITION PART-INT PICK-NULL PICK CHOOSE
                                      ALG-POLY-TIMES))
(setf (callers-list 'POLY-COEF? :callers) '(MAKE-UPOLYNOMIAL POLY-GCDU
                                            DENSE-INTERPOLATE-COEFFICIENTS
                                            POLY-SKELETON
                                            POLY-LEADING-COEFFICIENT
                                            POLY-C-COEFFICIENT POLY-COEFFICIENT
                                            COEFFICIENT P-LIST-OF-VARS
                                            TERMS-DEGREE-VECTOR
                                            POLY-DEGREE-VECTOR POLY-DEGREE
                                            TERMS-MAX-COEFFICIENT
                                            POLY-MAX-COEFFICIENT
                                            POLY-DERIVATIVE POLY-VARIABLE-LIST
                                            POLY-SUBST POLY-COERCE
                                            POLY-SPLIT-ON-VARS POLY-GCD
                                            POLY-CONTENT POLY-FACTOR-CBOUND
                                            POLY-HEIGHT POLY-TRUNCATE2
                                            POLY-PSEUDO-REMAINDER
                                            POLY-QUOTIENT* POLY-EXPT POLY-TIMES
                                            POLY-DIFFERENCE POLY-MINUS?
                                            POLY-MINUS POLY-PLUS PRINT-TERM
                                            PRINT-FORM POLY-MONOMIAL? TRANSFORM
                                            SCALAR? SCAN-POLY-FORM
                                            RATIONAL-POLY-SUBST
                                            MAKE-RATIONAL-FUNCTION*
                                            POLY-DERIVATION ALG-POLY-TIMES))
(setf (callers-list 'IF :callers) '(PRINT-FREE-MODULE-ELEMENT
                                    CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                    CLIST-FACTOR-SQUAREFREE CLIST-DERIV
                                    CLIST-SQFR-DECOMPOSE CLIST-FACTOR CFACTOR
                                    CLIST-EXTENDED-GCD CLIST-QUOTIENT
                                    CLIST-SIMPLIFY MAKE-UPOLYNOMIAL TERMS-GCDU
                                    CHECK-DEGREE INTERPOLATE
                                    POLY-LEADING-COEFFICIENT POLY-COEFFICIENT
                                    COEFFICIENT ADD-VARIABLE-DEGREE
                                    TERMS-MAX-COEFFICIENT TERMS-DERIVATIVE
                                    POLY-DERIVATIVE TERMS-SUBRESULTANT-GCD
                                    POLY-RESULTANT POLY-SUBRESULTANT-GCD
                                    TERMS-REDUCED-GCD TERMS-PRIMITIVE-GCD
                                    TERMS-EUCLIDEAN-GCD TERMS-PRIM-PART
                                    POLY-MGCD POLY-GCD TERMS-CONTENT
                                    POLY-FACTOR-CBOUND POLY-HEIGHT
                                    TERMS-PSEUDO-REMAINDER POLY-QUOTIENT*
                                    TERMS-QUOTIENT POLY-EXPT POLY-TIMES
                                    TERMS-MON-TIMES POLY-DIFFERENCE
                                    TERMS-DIFFERENCE POLY-MINUS? POLY-PLUS
                                    TERMS-PLUS TRANSFORM PRINT-FORM
                                    MAKE-POLYNOMIAL-MORPHISM MAKE-MANY-TERMS
                                    MAKE-TERMS ADD-RELATION GTERMS-MON-TIMES
                                    MAKE-COMPARISON-FUN MAKE-EPOLYNOMIAL
                                    EXTENDED-GCD* MIN-PAIR MAX-PAIR
                                    WITH-CONTAGION SQRT PARSE-NUMERIC-OBJ
                                    RANDOM-FLOATING-NUMBER RANDOM
                                    COMPUTE-RESULT USE-CHINESE-REMAINDER
                                    MAKE-FINITE-FIELD* MINUS COMPUTE-INVERSE
                                    MAKE-GFP-DOMAIN BF-ACOS BF-TAN BF-EXP
                                    BF-SQRT TRUNCATE2 TRUNCATE1 BF-INTEGER-PART
                                    BF-EXPT BF-ABS CONVERT-TO-BIGFLOAT
                                    READ!LNUM BFPRIN1 ROUND!LAST
                                    CONVERT-NUMBER->CHARACTERS ORDER! PRECI!
                                    CUT!EP CUT!MT MODIFY-BRANCH-ORDER
                                    TPS-SPREAD-COEFFS PRINT-TERM PRINT-EXPONENT
                                    PRINT-GROUPED MAKE-TPOWER-SERIES
                                    TRIM-ZEROES COBOUNDARY BOUNDARY
                                    CHAIN-TERMS-TIMES FREE-GROUP-DIFFERENCE
                                    FREE-GROUP-PLUS CANONICAL COBOUNDARY-DOMAIN
                                    BOUNDARY-DOMAIN GET-CELL CELL-ID FACETS
                                    MAKE-POINT REVERSION
                                    GET-DEFAULT-TAYLOR-EXPANSION TIMES TAYLOR1
                                    SET-WITH-ELEMENT-LIST-PRINT-OBJECT MAP
                                    PARTIAL-DERIV EXPT RATFUN-REDUCE
                                    EXPT-QUOTIENT RECIP QUOTIENT-REDUCE*
                                    DEFINE-MATH-PROPERTY MAKE-PREDICATE KTHTERM
                                    GET-MORPHISMS-TO GET-MORPHISMS-FROM FWRITE
                                    READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                    %MM-BOUNDARY MAKE-MESH REFINE-MESH
                                    REFINE-MESH-PREP TOO-BIG? DELAUNAY?
                                    SPLIT-EDGE FLIP REMOVE-VERTEX FORCE-EDGE
                                    ADJ-VERTICES LOCATE TRIANGULATE-TRIPLES
                                    CCW-SIDE POINT-VS-TRIANGLE BOUNDING-BOX
                                    MAKE-PARAMETER-SPACE ANGLE GETQ %SET-NAME
                                    PROCESSI SMITH HERMITE-ARRAY HERMITE
                                    SUBDETERMINANT* SPARSE-DET
                                    SPARSE-DETERMINANT FIND-PIVOT
                                    HADAMARD-BOUND DEGREE-BOUNDS DETERMINANT
                                    ONE-MATRIX SUBTRACT-ROWS
                                    FIND-PIVOT-UNORDERED INVERT-ARRAY
                                    FME-MATRIX-TIMES MATRIX-FME-TIMES
                                    WITH-MATRIX-DIMENSIONS WEYL:MAKE-ELEMENT
                                    MAKE-ELEMENT WEYLI::TRUNCATE WEYLI::ROUND
                                    WEYLI::CEILING WEYLI::FLOOR WEYLI::%LCM
                                    WEYLI::%GCD WEYLI:%QUOTIENT WEYLI:%TIMES
                                    WEYLI:%DIFFERENCE WEYLI:%PLUS WEYLI:%MIN
                                    WEYLI:%MAX ASSOCIATE-PREDICATE
                                    WEYLI::%COPY-ARRAY-CONTENTS* WEYLI::%GETF
                                    WEYLI::APPLY WEYLI::ACCUM-APPLY-ARGS
                                    FERMAT-INTEGER-FACTOR FACTOR
                                    REPEATED-SQUARING SYM-MOD CHOICE-PRIMES
                                    NEWPRIME FIND-SMALLER-PRIME
                                    REDUCE-MODULO-INTEGER INTEGER-NTH-ROOT
                                    FASTER-ISQRT FACT EXPAND SUBSTITUTE
                                    DIFFERENT-KERNELS MAKE-UNION DERIV
                                    PRINT-OBJECT LOOP-OVER-TERMS SAFE-DISPLAY
                                    COERCE-OBJ SIMPLIFY CHECK-DOMAIN
                                    MAKE-GE-FUNCT MAKE-FUNCTION-INTEGRATE
                                    MAKE-FUNCTION-DERIV ADD-FUNCTION-TO-DOMAIN
                                    COERCE INDEF-INTEGRAL
                                    POLYNOMIAL-INTERPOLATE
                                    MAKE-SAMPLED-FUNCTION-1 DEFMETHOD-SD
                                    DOMAIN-LIST POLY-DERIVATION
                                    STANDARD-DERIVATION AVL-DELETE ERASE-NODE
                                    DELETE-TAIL DELETE-HEAD AVL-INSERT
                                    BALANCE-LEFT BALANCE-RIGHT NEXT-LOOP
                                    AVL-HEIGHT AVL-SIZE PART-INT PICK
                                    ALG-POLY-TIMES))
(setf (callers-list '* :callers) '(CROSS-PRODUCT MULTIPLY-VECTOR-BY-SCALAR
                                   CREATE-UNIT-QUATERNION
                                   CLIST-FACTOR-SQUAREFREE CLIST-DERIV
                                   CLIST-FACTOR CFACTOR CLIST-DIVIDE
                                   CLIST-TIMES EVAL-MONOMIAL SPMOD-GCD INITY
                                   SPARSEINTERPSTAGEI SOLVE-VANDERMONDETD
                                   SOLVE-VANDERMONDET SOLVE-VANDERMONDE
                                   MAKE-DEGREE-MATRIX EXPT-LIST INTERPOLATE
                                   TERMS-MONICIZE POLY-FACTOR-CBOUND POLY-EXPT
                                   POLY-TIMES GTERMS-PRIM* TERMS-S-POLY
                                   GTERMS-TIMES GTERMS-MON-TIMES EXTENDED-GCD
                                   EXTENDED-GCD* BINARY-LCM SQRT RECIP ABS
                                   USE-CHINESE-REMAINDER MULTIPLICATIVE-ORDER
                                   MAKE-QUOTIENT-ELEMENT COMPUTE-INVERSE
                                   BF-ASIN BF-SIN BF-COS BF-LOG BF-EXP BF-E
                                   BF-PI-AGM BF-SQRT BF-PI-MACHIN ROUND2
                                   BF-INTEGER-PART BF-TIMES CONVERT-TO-BIGFLOAT
                                   READ!NUM READ!LNUM INCPREC! EXPT
                                   TRUNCATE-ORDER COERCE MODIFY-BRANCH-ORDER
                                   TPS-SPREAD-COEFFS CHAIN-TERMS-TIMES
                                   FREE-GROUP-SCALAR-TIMES SIGN-OF-PERMUTATION
                                   REVERSION TPS-DERIV1 QUOTIENT TAYLOR1
                                   SUBSTITUTE DERIV RATIONAL-TERMS-HORNERS-RULE
                                   LTH-LOCAL-TERM LOCALIZE-FORM*
                                   WHAT-IS-THE-LTHTERM2 WHAT-IS-THE-LTHTERM
                                   LOCALIZE BUILD-CDT-FROM-BOUNDARIES SPLIT ARC
                                   MEASURE BEND ANGLE CIRCLE-CENTER
                                   COMPLEX-CIRCUMCENTER SQR PROCESSI
                                   HERMITE-ARRAY SPARSE-DET FIND-PIVOT
                                   EXCHANGE-ROWS HADAMARD-BOUND DEGREE-BOUNDS
                                   SUBTRACT-ROWS FME-MATRIX-TIMES
                                   MATRIX-FME-TIMES TIMES-ARRAY TOTIENT
                                   FERMAT-INTEGER-FACTOR ALL-DIVISORS POWER-OF?
                                   EXPT-MODULO-INTEGER INTEGER-NTH-ROOT
                                   FASTER-ISQRT POCHHAMMER FACT
                                   EXPAND-BINOMIAL-FORM SIMPLIFY
                                   LOOP-OVER-TERMS SIMPSON TIMES
                                   POLYNOMIAL-INTERPOLATE ALG-POLY-TIMES))
(setf (callers-list 'POLY-SIMP :callers) '(POLY-GCDU
                                           DENSE-INTERPOLATE-COEFFICIENTS
                                           MAKE-MONOMIAL POLY-INTERPOLATE
                                           POLY-C-COEFFICIENT POLY-COEFFICIENT
                                           POLY-DERIVATIVE POLY-SUBST
                                           POLY-COERCE POLY-SUBRESULTANT-GCD
                                           POLY-REDUCED-GCD POLY-PRIMITIVE-GCD
                                           POLY-EUCLIDEAN-GCD
                                           POLY-PSEUDO-REMAINDER POLY-QUOTIENT*
                                           POLY-EXPT POLY-TIMES POLY-DIFFERENCE
                                           POLY-PLUS ALG-POLY-TIMES))
(setf (callers-list 'TERMS-MON-TIMES :callers) '(TERMS-GCDU+ TERMS-INTERPOLATE
                                                 TERMS-PSEUDO-REMAINDER
                                                 TERMS-QUOTIENT POLY-TIMES
                                                 TERMS-TIMES ALG-POLY-TIMES))
(setf (callers-list 'E0 :callers) '(TERMS-GCDU+ TERMS-GCDU
                                    DENSE-INTERPOLATE-COEFFICIENTS
                                    COMPUTE-VANDERMONDE-Q TERMS-INTERPOLATE
                                    POLY-DEGREE TERMS-REDUCED-GCD
                                    TERMS-PRIMITIVE-GCD TERMS-EUCLIDEAN-GCD
                                    TERMS-PSEUDO-REMAINDER POLY-TIMES
                                    POLY-DIFFERENCE POLY-PLUS ALG-POLY-TIMES))
(setf (callers-list 'SAME-VARIABLE? :callers) '(POLY-GCDU
                                                DENSE-INTERPOLATE-COEFFICIENTS
                                                POLY-SKELETON POLY-COEFFICIENT
                                                POLY-DEGREE POLY-DERIVATIVE
                                                POLY-PSEUDO-REMAINDER
                                                POLY-TIMES POLY-DIFFERENCE
                                                POLY-PLUS ALG-POLY-TIMES))
(setf (callers-list 'MINIMAL-POLYNOMIAL :callers) '(ALG-POLY-TIMES))
(setf (callers-list 'TERMS-PSEUDO-REMAINDER :callers) '(TERMS-GCDU
                                                        TERMS-SUBRESULTANT-GCD
                                                        TERMS-REDUCED-GCD
                                                        TERMS-PRIMITIVE-GCD
                                                        TERMS-EUCLIDEAN-GCD
                                                        POLY-PSEUDO-REMAINDER
                                                        ALG-POLY-TIMES))
(setf (callers-list 'TERMS-TIMES :callers) '(COMPUTE-VANDERMONDE-Q
                                             TERMS-INTERPOLATE POLY-TIMES
                                             ALG-POLY-TIMES))
(setf (callers-list 'MORE-MAIN? :callers) '(DENSE-INTERPOLATE-COEFFICIENTS
                                            POLY-SKELETON POLY-COEFFICIENT
                                            POLY-DEGREE POLY-DERIVATIVE
                                            POLY-GCD POLY-PSEUDO-REMAINDER
                                            POLY-QUOTIENT* POLY-TIMES
                                            POLY-DIFFERENCE POLY-PLUS
                                            ALG-POLY-TIMES))
(setf (callers-list 'BIND-DOMAIN-CONTEXT :callers) '(SQUARE-FREE FACTOR
                                                     INTERPOLATE
                                                     PARSE-LINEAR-EQUATION
                                                     COEFFICIENT DEGREE
                                                     RESULTANT MINUS?
                                                     MAKE-POLYNOMIAL-MORPHISM
                                                     SQRT HEIGHT ABS ACOS ASIN
                                                     ATAN TAN COS SIN LOG EXP
                                                     E-VALUE PI-VALUE ROUND2
                                                     ROUND1 CEILING2 CEILING1
                                                     FLOOR2 FLOOR1 DERIV
                                                     PARTIAL-DERIV SUBSTITUTE
                                                     MINUS
                                                     MAKE-RATIONAL-FUNCTION*
                                                     DERIVATION EXPT))
(setf (callers-list 'MAKE-POLYNOMIAL :callers) '(INTERPOLATE
                                                 PARSE-LINEAR-EQUATION
                                                 COEFFICIENT PARTIAL-DERIV
                                                 SUBSTITUTE RESULTANT MINUS
                                                 TRANSFORM MAKE-POLY
                                                 INITIALIZE-INSTANCE
                                                 CONVERT-TERM DENOMINATOR
                                                 NUMERATOR DERIVATION COERCE
                                                 EXPT))
(setf (callers-list '%FUNCALL :callers) '(CLIST-EXPT-MOD-POLY CLIST-EXPTSQ
                                          INTERPOLATE SPARSEINTERPSTAGEI
                                          POLY-GCD POLY-EXPTSQ
                                          MAKE-POLYNOMIAL-MORPHISM
                                          ACCUMULATE-ACCUMULATION-LIST
                                          INSERT-INTO-ACCUMULATION-LIST
                                          TERMS-S-POLY GTERMS-TIMES
                                          COLLECT-OLD-TERM BF-EXPT
                                          MAP-OVER-ELEMENTS BINARY> BINARY=
                                          APPLY-MORPHISM COMPOSE FACTOR
                                          REPEATED-SQUARING EXPT-MODULO-INTEGER
                                          ADD-DOMAIN-INTERNAL RECUR
                                          CANONICALIZE-CLASS POLY-DERIVATION
                                          MAP-OVER PICK-NULL PICK EXPT))
(setf (callers-list 'REPEATED-SQUARING :callers) '(CLIST-EXPT-MOD-POLY
                                                   CLIST-EXPTSQ POLY-EXPTSQ
                                                   BF-EXPT EXPT-MODULO-INTEGER
                                                   EXPT))
(setf (callers-list 'ALG-POLY-TIMES :callers) '(EXPT))
(setf (callers-list 'ONE :callers) '(MAKE-ELEMENT CLIST-PRIMITIVE-PART! CFACTOR
                                     TERMS-GCDU POLY-GCDU INTERPOLATE-FROM-SKEL
                                     SPARSEINTERPSTAGEI COMPUTE-VANDERMONDE-Q
                                     MAKE-DEGREE-MATRIX EXPT-LIST
                                     POLY-C-COEFFICIENT POLY-COEFFICIENT
                                     POLY-SUBST RESULTANT POLY-SUBRESULTANT-GCD
                                     TERMS-REDUCED-GCD TERMS-PRIMITIVE-GCD
                                     TERMS-EUCLIDEAN-GCD POLY-EXPT POLY-EXPTSQ
                                     PRINT-FORM MAKE-IDEAL GTERMS-EXPT
                                     BINARY-GCD DENOMINATOR INITIALIZE-INSTANCE
                                     BOUNDARY SUBSTITUTE RATFUN-REDUCE
                                     MAKE-RATIONAL-FUNCTION* QUOTIENT-REDUCE*
                                     SPARSE-DETERMINANT EXCHANGE-ROWS
                                     DETERMINANT* DETERMINANT INVERT-ARRAY
                                     ONE-MATRIX ONE POLY-DIFFERENTIATE-COEFS
                                     STANDARD-DERIVATION COERCE EXPT))
(setf (callers-list '%GETF :callers) '(SET-VARIABLE-NUMBER-PROPERTY
                                       GET-VARIABLE-NUMBER-PROPERTY
                                       INITIALIZE-INSTANCE
                                       SET-VARIABLE-PROPERTY
                                       GET-VARIABLE-PROPERTY
                                       WITH-NEW-WEYL-CONTEXT MAP-OVER-TREE
                                       CHOOSE))
(setf (callers-list 'OR :callers) '(CLIST-SIMPLIFY POLY-GCDU
                                    DENSE-INTERPOLATE-COEFFICIENTS INTERPOLATE
                                    POLY-SPLIT-ON-VARS POLY-QUOTIENT*
                                    TERMS-TIMES PRINT-TERM CRITERION1
                                    TERMS-S-POLY BINARY= GTERMS-TIMES
                                    GTERM-DISJOINT COLLECT-OLD-TERM RECIP
                                    DENOMINATOR NUMERATOR CONJUGATE
                                    WEYL:MAKE-ELEMENT BF-ACOS BF-ASIN BF-TAN
                                    BF-SQRT GET!CONST BFPRIN1 EXPT
                                    PRINT-GROUPED CELL-ORDER COERCE
                                    %MAP-OVER-CELLS %INSERT TRIANGLE? INSERT
                                    RATIONAL-POLY-SUBST PREDICATE-FUNCTION-NAME
                                    ASSERT-FUNCTION-NAME THE-KTHTERM
                                    GET-MORPHISMS-TO GET-MORPHISMS-FROM
                                    MAKE-MESH-FROM-FILE %MM-BOUNDARY GRADE
                                    %SPLIT-CONSTRAINT-ONE-SIDE DELAUNAY? LOCATE
                                    TRIANGULATE-TRIPLES SEARCH-LIST
                                    UNIFORMIZE-FACTOR-LIST PRIME?
                                    DIFFERENT-KERNELS DERIV DEPENDS-ON?
                                    LOOP-OVER-TERMS GE-LEQUAL SAFE-DISPLAY
                                    DISPLAY-LIST CHECK-DOMAIN
                                    MAKE-FUNCTION-INTEGRATE MAKE-FUNCTION-DERIV
                                    MAKE-FUNCTION GET-FUNCTION MAKE-ELEMENT
                                    INTEGRAL WITH-NEW-WEYL-CONTEXT
                                    STANDARD-DERIVATION RING-VARIABLES
                                    NEXT-LOOP MAP-OVER-TREE PARTITION PART-INT
                                    %CHOOSE-REPEATS PICK-NULL %CHOOSE))
(setf (callers-list 'NULL :callers) '(LOOP-VECTOR-BIND MAKE-AFFINE-SPACE
                                      CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                      MAKE-UPOLYNOMIAL WEYL:MAKE-UPOLYNOMIAL
                                      DENSE-INTERPOLATE-COEFFICIENTS
                                      MAKE-MONOMIAL CHECK-DEGREE SPMOD-GCD2
                                      TERMS-INTERPOLATE ADD-NEW-VARIABLE DEGREE
                                      POLY-SUBST POLY-MGCD POLY-EXPT TRANSFORM
                                      ACCUMULATE-ACCUMULATION-LIST
                                      INSERT-INTO-ACCUMULATION-LIST
                                      MAKE-MANY-TERMS MAKE-TERMS REDUCE-ALL
                                      CRITERION1 MAKE-COMPARISON-FUN 1? 0?
                                      MAKE-EPOLYNOMIAL GET-FINITE-FIELD
                                      MAKE-FINITE-FIELD* MULTIPLICATIVE-ORDER
                                      BF-E GET!CONST ORIENTED-SORT PRINT-TERM
                                      %MAP-OVER-CELLS MAXIMAL-CELL?
                                      SIGN-OF-PERMUTATION MAKE-POINT TAYLOR1
                                      INSERT NOT-AN-ELEMENT
                                      SET-WITH-ELEMENT-LIST-PRINT-OBJECT MAP
                                      INITIALIZE-INSTANCE PARTIAL-DERIV
                                      RATIONAL-POLY-SUBST RATFUN-REDUCE
                                      QUOTIENT-REDUCE* DEFINE-MATH-PROPERTY
                                      MAKE-PREDICATE MPEF-PAIRWISE-M-SUM COERCE
                                      GET-MORPHISMS-TO GET-MORPHISMS-FROM
                                      TOO-BIG? REMOVE-VERTEX
                                      TRIANGULATE-TRIPLES SPARSE-DET
                                      INVERT-ARRAY WEYL:MAKE-ELEMENT
                                      WEYLI::%LCM WEYLI::LCM WEYLI::%GCD
                                      WEYLI:GCD WEYLI:%QUOTIENT WEYLI:/
                                      WEYLI:%TIMES WEYLI:* WEYLI:%DIFFERENCE
                                      WEYLI:- WEYLI:%PLUS WEYLI:+ WEYLI:%MIN
                                      WEYLI:MIN NEXT-LOOP WEYLI:%MAX WEYLI:MAX
                                      WEYLI:>= WEYLI:<= WEYLI:> WEYLI:= WEYLI:<
                                      ASSOCIATE-PREDICATE WEYLI::APPLY
                                      WEYLI::ACCUM-APPLY-ARGS ATAN TOTIENT
                                      UNIFORMIZE-FACTOR-LIST NEWPRIME PRIME?
                                      EXPAND-BINOMIAL-FORM EXPAND EXPAND-OTHER
                                      DERIV LOOP-OVER-TERMS GE-LGREAT GE-LEQUAL
                                      COERCE-OBJ CHECK-DOMAIN MAKE-FUNCTION
                                      PRINT-OBJECT MAKE-ELEMENT INTEGRAL
                                      EQUAL-VECTOR GE-FOURIER PARSE-ARGS
                                      ADD-DOMAIN-INTERNAL RECUR
                                      REQUIRED-OPERATIONS DESCRIBE-OPERATIONS
                                      ITERATE MAKE-DIRECT-SUM*
                                      STANDARD-DERIVATION SEARCH-NODE
                                      AVL-DELETE DELETE-RIGHT DELETE-LEFT
                                      ERASE-NODE DELETE-TAIL DELETE-HEAD
                                      AVL-INSERT FIND-RIGHT-MOST SCAN MAP-OVER
                                      FIND-LEFT-MOST PARTITION PICK
                                      %CHOOSE-REPEATS PICK-NULL %CHOOSE))
(setf (callers-list 'INTEGERP :callers) '(INTEGER? MAKE-GFP-DOMAIN BF-ACOS
                                          BF-ASIN BF-ATAN BF-TAN BF-COS BF-LOG
                                          GET!CONST READ!LNUM ROUND!EP ROUND!MT
                                          CUT!EP CUT!MT CONV!EP CONV!MT EXPT
                                          DIFFERENT-KERNELS %CHOOSE-REPEATS
                                          %CHOOSE))
(setf (callers-list 'LABELS :callers) '(MAKE-AFFINE-SPACE PRINT-UPOLYNOMIAL
                                        INTERPOLATE-FROM-SKEL
                                        POLY-LIST-OF-VARIABLES
                                        PRINT-MPOLYNOMIAL-FORM
                                        MAKE-POLYNOMIAL-MORPHISM
                                        MAKE-MPOLYNOMIAL COERCE MAKE-POLYNOMIAL
                                        MAKE-EPOLYNOMIAL PRINT-TPOWER-SERIES
                                        DELETE-MAXIMAL-CELL
                                        DEFINE-PRIMITIVE-PROPERTY GET-MORPHISMS
                                        SPARSE-DETERMINANT WEYLI::%LCM
                                        WEYLI::%GCD WEYLI:%QUOTIENT
                                        WEYLI:%TIMES WEYLI:%DIFFERENCE
                                        WEYLI:%PLUS WEYLI:%MIN WEYLI:%MAX
                                        ASSOCIATE-OPERATION WEYLI::SUBCLASS-OF?
                                        FACTORIAL SIMP-TIMES-TERMS
                                        SIMP-PLUS-TERMS DEFINE-DOMAIN-CREATOR
                                        MAP-OVER-ARGLIST-COMBINATIONS
                                        REQUIRED-OPERATIONS DESCRIBE-OPERATIONS
                                        MAKE-DIRECT-SUM* MEMBER DELETE INSERT
                                        AVL-PREVIOUS AVL-NEXT RIGHT-MOST
                                        NEW-NODE MAP-OVER-EACH-NODE LEFT-MOST
                                        %PARTITION2 %PARTITION1 PERMUTE%
                                        %CHOOSE-REPEATS %CHOOSE))
(setf (callers-list 'ZEROP :callers) '(PRINT-TERM GTERM-CONSTANT?
                                       GTERM-DISJOINT TRANSFORM-TERM
                                       CONVERT-TERM PRINT-OBJECT PLUS?
                                       RANDOM-FLOATING-NUMBER RANDOM COERCE
                                       MAKE-GFP-DOMAIN 0? COMPUTE-INVERSE
                                       BF-ATAN BF-SIN BF-LOG BF-EXP BF-E
                                       BF-SQRT BF-PI-MACHIN BF-INTEGER-PART
                                       CONVERT-NUMBER->CHARACTERS ORDER!
                                       CONV!EP CONV!MT EXPT SET-BRANCH-ORDER
                                       FERMAT-INTEGER-FACTOR REPEATED-SQUARING
                                       REDUCE-MODULO-INTEGER INTEGER-NTH-ROOT
                                       POCHHAMMER EQUAL-VECTOR AVL-DELETE
                                       ERASE-NODE DELETE-TAIL DELETE-HEAD
                                       BALANCE-LEFT BALANCE-RIGHT PART-INT
                                       PICK-NULL PICK))
(setf (callers-list 'PICK :callers) '(PICK-NULL PICK))
(setf (callers-list 'REST :callers) '(MAKE-UPOLYNOMIAL WEYL:MAKE-UPOLYNOMIAL
                                      MAKE-MONOMIAL EVAL-MONOMIAL SPMOD-GCD2
                                      SPMOD-GCD1 POLY-SKELETON
                                      COMPUTE-VANDERMONDE-Q INTERPOLATE
                                      POLY-FIND-COMMON-VARS TRANSFORM
                                      MAKE-MANY-TERMS TERMS-S-POLY
                                      CHECK-SAME-DOMAIN MAKE-IDEAL
                                      IDEAL-PRINT-OBJECT COLLECT-OLD-TERM
                                      CONVERT-TERM MAKE-COMPARISON-FUN 1?
                                      GET-FINITE-FIELD MAKE-FINITE-FIELD*
                                      MULTIPLICATIVE-ORDER READ!LNUM BFPRIN1
                                      ORIENTED-SORT WITH-TPOWER-SERIES
                                      PRINT-TERM SIGN-OF-PERMUTATION FACETS
                                      NOT-AN-ELEMENT INSERT INITIALIZE-INSTANCE
                                      SET-WITH-ELEMENT-LIST-PRINT-OBJECT
                                      DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                      MPEF-PAIRWISE-M-SUM COERCE %MM-BOUNDARY
                                      %MM-GET-POINT MAKE-MESH
                                      VERTICES-SORTED-BY-ANGLE FLAT-TRIANGULATE
                                      BOUNDING-BOX SIMPLEX-SIZE GETQ INSERTQ
                                      INVERT-ARRAY WITH-MATRIX-DIMENSIONS
                                      WEYL:MAKE-ELEMENT MAKE-ELEMENT WEYLI::LCM
                                      WEYLI:GCD WEYLI:/ WEYLI:* WEYLI:- WEYLI:+
                                      WEYLI:MIN NEXT-LOOP WEYLI:MAX WEYLI:>=
                                      WEYLI:<= WEYLI:> WEYLI:= WEYLI:<
                                      ASSOCIATE-PREDICATE
                                      WEYLI::ACCUM-APPLY-ARGS TOTIENT
                                      UNIFORMIZE-FACTOR-LIST
                                      EXPAND-BINOMIAL-FORM EXPAND EXPAND-OTHER
                                      UQ-SET-PRINT-OBJECT DERIV
                                      SET-VARIABLE-PROPERTY
                                      GET-VARIABLE-PROPERTY PRINT-OBJECT
                                      LOOP-OVER-TERMS COERCE-OBJ
                                      REPARSE-PRINT-STRING PARSE-ARGS RECUR
                                      REQUIRED-OPERATIONS CANONICALIZE-CLASS
                                      DESCRIBE-OPERATIONS ITERATE PICK-NULL
                                      PICK))
(setf (callers-list '1- :callers) '(WEYL:MAKE-ELEMENT WEYL:MAKE-UPOLYNOMIAL
                                                      INTERPOLATE INITY
                                                      SPARSEINTERPSTAGEI
                                                      DEGREE-PARTITION
                                                      BOUND-DEGREE-TERM-COUNT
                                                      MULTIPLICATIVE-ORDER
                                                      MAKE-ELEMENT
                                                      MAKE-GFP-DOMAIN BF-SIN
                                                      ROUND!EP CONV!MT EXPT
                                                      BOUNDARY-DOMAIN
                                                      MAKE-POINT SIMPLEX-SIZE
                                                      SUBTRACT-ROWS TOTIENT
                                                      FIND-SMALLER-PRIME PRIME?
                                                      FACT INDEF-INTEGRAL DERIV
                                                      POLYNOMIAL-INTERPOLATE
                                                      RESAMPLE EQUAL-VECTOR
                                                      GET-DIRECT-SUM
                                                      BALANCE-LEFT
                                                      BALANCE-RIGHT PICK))
(setf (callers-list 'CONS :callers) '(CLIST-SQFR-DECOMPOSE SQUARE-FREE
                                      CLIST-FACTOR CHECK-DEGREE INTERPOLATE
                                      POLY-SKELETON DEGREE-PARTITION
                                      ADD-VARIABLE-DEGREE POLY-DEGREE-VECTOR
                                      POLY-EXPT TERMS-TIMES MAKE-POLY
                                      MAKE-POLY-FORM INITIALIZE-INSTANCE
                                      GTERMS-TIMES CONVERT-TERM SCAN-POLY-FORM
                                      SAVE!CONST BFPRIN1 COBOUNDARY BOUNDARY
                                      FREE-GROUP-SCALAR-TIMES CANONICAL
                                      %SET-COERCE FACETS CELL-ID MAKE-SIMPLEX
                                      INSERT ASSERT-PROPERTY LOCALIZE-FORM*
                                      MPEF-PAIRWISE-M-SUM FORCE-EDGE
                                      VERTICES-SORTED-BY-ANGLE
                                      WEYL:MAKE-ELEMENT MAKE-ELEMENT
                                      ASSOCIATE-PREDICATE
                                      WEYLI::ACCUM-APPLY-ARGS
                                      FERMAT-INTEGER-FACTOR
                                      SIMPLE-INTEGER-FACTOR-INTERNAL FACTOR
                                      CHOICE-PRIMES EXPAND-OTHER EXPAND-PLUS
                                      DIFFERENT-KERNELS MAKE-UNION
                                      LOOP-OVER-TERMS COERCE-OBJ
                                      MAKE-FUNCTION-DERIV DERIV GE-FOURIER
                                      PARSE-ARGS RECUR CANONICALIZE-CLASS
                                      REQUIRED-OPERATIONS DOMAIN-LIST ITERATE
                                      STANDARD-DERIVATION COERCE PART-INT
                                      PICK-NULL PICK))
(setf (callers-list 'FIRST :callers) '(ZERO MAKE-ELEMENT-FREE-MODULE-VECTOR
                                       LOOP-VECTOR-BIND VECTOR-SET-REF
                                       DENSE-INTERPOLATE-COEFFICIENTS
                                       MAKE-MONOMIAL EVAL-MONOMIAL CHECK-DEGREE
                                       SPMOD-GCD2 SPMOD-GCD1 SPMOD-GCD
                                       POLY-SKELETON COMPUTE-VANDERMONDE-Q
                                       EXPT-LIST INTERPOLATE TERMS-INTERPOLATE
                                       PARSE-LINEAR-EQUATION POLY-DEGREE-VECTOR
                                       POLY-MGCD POLY-FIND-COMMON-VARS
                                       TRANSFORM MAKE-MANY-TERMS TERMS-REDUCE
                                       ADD-UNDONE CRITERION1 TERMS-S-POLY
                                       CHECK-SAME-DOMAIN MAKE-IDEAL
                                       IDEAL-PRINT-OBJECT GTERMS-TIMES
                                       CONVERT-TERM MAKE-POLYNOMIAL
                                       MAKE-COMPARISON-FUN WITH-CONTAGION
                                       GET-FACTOR-RING MAKE-FINITE-FIELD*
                                       READ!LNUM BFPRIN1 ORIENTED-SORT
                                       WITH-TPOWER-SERIES APPLY
                                       MAKE-CHAIN-OR-COCHAIN CANONICAL
                                       PRINT-TERM VERTEX-SET FACETS
                                       SIGN-OF-PERMUTATION
                                       SET-WITH-ELEMENT-LIST-PRINT-OBJECT
                                       SUBSTITUTE DEFINE-MATH-PROPERTY
                                       MAKE-PREDICATE DEFINE-DOMAIN-CREATOR
                                       MPEF-PAIRWISE-M-SUM WRITE-VERTEX-SET
                                       READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                       %MM-GET-POINT BUILD-CDT-FROM-BOUNDARIES
                                       DO-BACKGROUND-BOX GRADE SPLIT
                                       %SPLIT-CONSTRAINT-ONE-SIDE REMOVE-VERTEX
                                       FORCE-EDGE FLIP DELAUNAY? FLIP-OK?
                                       ADJ-VERTICES LOCATE
                                       VERTICES-SORTED-BY-ANGLE ANGLE
                                       CIRCUMRADIUS FLAT-TRIANGULATE
                                       STAR-TRIANGULATE TRIANGULATE-TRIPLES
                                       POINT-VS-TRIANGLE COMMON-ENDPOINT
                                       MEASURE BOUNDING-BOX EDGES-CROSS? BEND
                                       SIMPLEX-SIZE MAKE-PARAMETER-SPACE GETQ
                                       SMITH-ARRAY SMITH* HERMITE-ARRAY
                                       INDEPENDENT-COLS INDEPENDENT-ROWS
                                       EVALUATE-MATRIX JACOBIAN INVERT-ARRAY
                                       RECIP ARRAY-TIMES SET-REF REF
                                       WITH-MATRIX-DIMENSIONS WEYL:MAKE-ELEMENT
                                       WEYLI::LCM WEYLI:GCD WEYLI:/ WEYLI:*
                                       WEYLI:- WEYLI:+ WEYLI:MIN NEXT-LOOP
                                       WEYLI:MAX ASSOCIATE-PREDICATE
                                       WEYLI::ACCUM-APPLY-ARGS
                                       UNIFORMIZE-FACTOR-LIST
                                       EXPAND-BINOMIAL-FORM EXPAND EXPAND-OTHER
                                       UQ-SET-PRINT-OBJECT DERIV
                                       SET-VARIABLE-PROPERTY
                                       GET-VARIABLE-PROPERTY PRINT-OBJECT
                                       LOOP-OVER-TERMS GE-MINUS? GE-LGREAT
                                       GE-LEQUAL COERCE-OBJ DISPLAY-LIST
                                       ADD-SUBSCRIPTS REPARSE-PRINT-STRING
                                       DEFMETHOD-SD PARSE-ARGS RECUR
                                       REQUIRED-OPERATIONS CANONICALIZE-CLASS
                                       DESCRIBE-OPERATIONS ITERATE
                                       STANDARD-DERIVATION COERCE
                                       RING-VARIABLES MAKE-ELEMENT PICK-NULL
                                       PICK))
(setf (callers-list '> :callers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                   CLIST-FACTOR-SQUAREFREE CLIST-SQFR-DECOMPOSE
                                   CLIST-DIVIDE CLIST-QUOTIENT ZIPPER-SUM
                                   PRINT-TERM SPMOD-GCD BOUND-DEGREE-TERM-COUNT
                                   ADD-VARIABLE-DEGREE CONVERT-TERM MAKE-ETERM
                                   MAKE-COMPARISON-FUN MIN-PAIR MAX-PAIR
                                   BINARY> COMPUTE-RESULT BF-ACOS BF-ASIN
                                   BF-ATAN BF-TAN BF-SIN BF-COS BF-LOG BF-EXP
                                   BF-E BF-PI-AGM BF-SQRT GET!CONST BF-BINARY>
                                   BF-BINARY>= BF-FLOOR BF-DIFFERENCE BF-PLUS
                                   BF-ABS CUT!EP CUT!MT CONV!MT CANONICAL
                                   TAYLOR1 MEMBER NOT-AN-ELEMENT INSERT
                                   SHIFT-LOCAL-FIELD
                                   READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                   REFINE-MESH-PREP IMPROVE GRADE PLACE
                                   TRIANGULATE-TRIPLES BEND PROCESSI SMITH
                                   HERMITE-ARRAY HERMITE SUBDETERMINANT*
                                   FIND-PIVOT HADAMARD-BOUND DEGREE-BOUNDS
                                   FIND-PIVOT-ORDERED
                                   SIMPLE-INTEGER-FACTOR-INTERNAL POWER-OF?
                                   SYM-MOD PRIME? FASTER-ISQRT GE-GREAT
                                   POLYNOMIAL-INTERPOLATE SEARCH-NODE
                                   AVL-DELETE DELETE-HEAD AVL-INSERT NEXT-LOOP
                                   AVL-HEIGHT PICK-NULL PICK))
(setf (callers-list 'LENGTH :callers) '(MAKE-UPOLYNOMIAL WEYL:MAKE-UPOLYNOMIAL
                                        SCALAR? SPMOD-GCD2 INITY
                                        SPARSEINTERPSTAGEI SOLVE-VANDERMONDETD
                                        SOLVE-VANDERMONDET SOLVE-VANDERMONDE
                                        MAKE-DEGREE-MATRIX INTERPOLATE
                                        ADD-NEW-VARIABLE
                                        MAKE-POLYNOMIAL-MORPHISM TERMS-REDUCE
                                        TERMS-S-POLY CONVERT-LIST
                                        INITIALIZE-INSTANCE MAKE-MPOLYNOMIAL
                                        GTERMS-TIMES COERCE PRINT-OBJECT
                                        MAKE-EPOLYNOMIAL MAKE-GFP-DOMAIN EXPT
                                        TPS-SPREAD-COEFFS GROUPED? TRIM-ZEROES
                                        CELL-ID TETRAHEDRON? TRIANGLE? SEGMENT?
                                        MAKE-POINT SOLVE-FOR-COEFFS REVERSION
                                        GET-DEFAULT-TAYLOR-EXPANSION RANDOM
                                        READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                        REMOVE-VERTEX DELAUNAY? FLIP-OK?
                                        NEIGHBORS TRIANGULATE-TRIPLES
                                        BOUNDING-BOX DISTANCE BEND SIMPLEX-SIZE
                                        MAKE-PARAMETER-SPACE MAKE-MEAN-POINT
                                        ROTATE-LIST HERMITE* SUBDETERMINANT*
                                        JACOBIAN ARRAY-TIMES WEYL:MAKE-ELEMENT
                                        MAKE-ELEMENT MAKE-GE-FUNCT
                                        INDEF-INTEGRAL INTEGRAL DERIV MAP
                                        SMOOTH2 RESAMPLE
                                        MAKE-SAMPLED-FUNCTION-1 PRINT-TABLE
                                        EQUAL-VECTOR CHECK-CACHED-VECTOR APPLY
                                        MAKE-APP-FUNCTION GET-DIRECT-SUM
                                        DIMENSION-OF PICK-NULL PICK))
(setf (callers-list 'WHEN :callers) '(LOOP-VECTOR-BIND MAKE-AFFINE-SPACE
                                      CLIST-FACTOR-SQUAREFREE
                                      CLIST-SQFR-DECOMPOSE CHECK-DEGREE
                                      NON-ZERO-RANDOM BOUND-DEGREE-TERM-COUNT
                                      INTERPOLATE TERMS-INTERPOLATE
                                      VARIABLE-INDEX POLY-VARIABLE-LIST
                                      POLY-MGCD POLY-FIND-COMMON-VARS
                                      TERMS-TIMES PRINT-FORM
                                      INSERT-INTO-ACCUMULATION-LIST
                                      TERMS-REDUCE ADD-UNDONE CRITERION1
                                      GTERMS-TIMES GTERM-CONSTANT? GTERM-EQUAL
                                      MAKE-COMPARISON-FUN
                                      DEFINE-BINARY-CONTAGIONS RECIP
                                      WEYL:MAKE-ELEMENT MULTIPLICATIVE-ORDER
                                      BF-ACOS BF-ASIN ATAN BF-COS BF-LOG BF-E
                                      BFPRIN1 ORIENTED-SORT WITH-TPOWER-SERIES
                                      CHAIN-TERMS-TIMES APPLY %SET-COERCE
                                      INTERSECTION UNION %MAP-OVER-CELLS
                                      DELETE-MAXIMAL-CELL RATIONAL-POLY-SUBST
                                      RATFUN-REDUCE QUOTIENT-REDUCE
                                      QUOTIENT-REDUCE* DEFINE-MATH-PROPERTY
                                      MAKE-PREDICATE DEFINE-PRIMITIVE-PROPERTY
                                      %MAP-OVER-PROPERTIES TEST-PROPERTY
                                      ASSERT-PROPERTY LOCALIZE
                                      SHIFT-LOCAL-FIELD
                                      MAKE-MULTIPOLE-EXPANSION
                                      DEF-BINARY-COERCION NEXT-DOMAINS
                                      APPLY-MORPHISM GET-EMBEDDABLE-DOMAINS
                                      MAKE-MORPHISM GET-MORPHISMS-TO
                                      GET-MORPHISMS-FROM READ-MESH FWRITE
                                      READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                      MAKE-MESH-FROM-FILE %MM-BOUNDARY
                                      REFINE-MESH INSERT-BOUNDARY INSERT PLACE
                                      TRIANGULATE-TRIPLES ARC
                                      COMPLEX-CIRCUMCENTER FIND-PIVOT-UNORDERED
                                      FIND-PIVOT-ORDERED WEYLI::SUBCLASS-OF?
                                      FERMAT-INTEGER-FACTOR FACTOR MERGE-NEW-BV
                                      DERIV DEPENDS-ON? SET-VARIABLE-PROPERTY
                                      GET-VARIABLE-PROPERTY LOOP-OVER-TERMS
                                      GE-LEQUAL DISPLAY-LIST CHECK-DOMAIN
                                      MAKE-FUNCTION-INTEGRATE
                                      MAKE-FUNCTION-DERIV
                                      ADD-FUNCTION-TO-DOMAIN MAKE-FUNCTION
                                      SEARCH-FOR-FUNCTION MAKE-GE-VARIABLE
                                      REPARSE-PRINT-STRING
                                      POLYNOMIAL-INTERPOLATE EQUAL-VECTOR
                                      MAKE-APP-FUNCTION GE-FOURIER PARSE-ARGS
                                      ADD-DOMAIN-INTERNAL MAKE-DIRECT-SUM*
                                      MAP-OVER MAP-OVER-TREE PARTITION
                                      PICK-NULL))
(setf (callers-list 'PICK-NULL :callers) '(PICK-NULL))
(setf (callers-list 'MINUSP :callers) '(ZIPPER-SUM MINUS? BF-INTEGERP
                                        CONVERT-TO-BIGFLOAT BFPRIN1 ROUND!MT
                                        ROUND!LAST EXPT FACTOR POCHHAMMER FACT
                                        MAKE-FUNCTION-INTEGRATE
                                        MAKE-FUNCTION-DERIV
                                        POLYNOMIAL-INTERPOLATE DERIV AVL-INSERT
                                        BALANCE-LEFT BALANCE-RIGHT PART-INT
                                        PICK PICK-NULL))
(setf (callers-list '+ :callers) '(CLIST-FACTOR-SQUAREFREE CLIST-PTH-ROOT
                                   CLIST-DIVIDE CLIST-TIMES CLIST-MINUS
                                   ZIPPER-SUM CLIST-SIMPLIFY SPMOD-GCD
                                   SPARSEINTERPSTAGEI SOLVE-VANDERMONDETD
                                   SOLVE-VANDERMONDET SOLVE-VANDERMONDE
                                   BOUND-DEGREE-TERM-COUNT INTERPOLATE
                                   ADD-NEW-VARIABLE POLY-PLUS TERMS-S-POLY
                                   CONVERT-TERM GTERMS-TIMES GTERM-TIMES
                                   GTERMS-MON-TIMES COLLECT-OLD-TERM SQRT RECIP
                                   RANDOM-FLOATING-NUMBER ABS
                                   USE-CHINESE-REMAINDER MAKE-GFP-DOMAIN
                                   COMPUTE-INVERSE BF-ACOS BF-ASIN BF-ATAN
                                   BF-TAN BF-SIN BF-COS BF-LOG BF-EXP BF-E
                                   BF-PI-AGM BF-SQRT BF-PI-MACHIN ROUND2 ROUND1
                                   CEILING2 CEILING1 BF-QUOTIENT BF-TIMES
                                   BF-PLUS READ!NUM READ!LNUM ORDER! PRECI!
                                   DECPREC! EXPT TRUNCATE-ORDER
                                   LARGEST-STORED-COEFF COERCE
                                   TPS-SPREAD-COEFFS PRINT-TERM
                                   MAKE-TPOWER-SERIES COBOUNDARY BOUNDARY
                                   FREE-GROUP-PLUS MAKE-CHAIN-OR-COCHAIN
                                   COBOUNDARY-DOMAIN TPS-DERIV2 TPS-DERIV1
                                   TIMES TAYLOR1 SUBSTITUTE
                                   RATIONAL-TERMS-HORNERS-RULE LTH-LOCAL-TERM
                                   REST-OF-LOCAL LOCALIZE-FORM*
                                   WHAT-IS-THE-LTHTERM2 MPEF-PAIRWISE-M-SUM
                                   WHAT-IS-THE-LTHTERM SHIFT-M-FORM*
                                   SHIFT-MULTIPOLE DO-BACKGROUND-BOX DELAUNAY?
                                   ARC BEND CIRCLE-CENTER COMPLEX-CIRCUMCENTER
                                   PROCESSI HERMITE-ARRAY SPARSE-DET FIND-PIVOT
                                   FME-MATRIX-TIMES MATRIX-FME-TIMES
                                   TIMES-ARRAY PLUS FERMAT-INTEGER-FACTOR
                                   SIMPLE-INTEGER-FACTOR-INTERNAL
                                   REDUCE-MODULO-INTEGER INTEGER-NTH-ROOT
                                   FASTER-ISQRT POCHHAMMER LOOP-OVER-TERMS
                                   INDEF-INTEGRAL SIMPSON INTEGRAL DERIV
                                   POLYNOMIAL-INTERPOLATE RESAMPLE AVL-DELETE
                                   ERASE-NODE DELETE-TAIL AVL-INSERT AVL-SIZE
                                   PART-INT PICK PICK-NULL))
(setf (callers-list 'LOOP :callers) '(PRINT-FREE-MODULE-ELEMENT
                                      LOOP-VECTOR-BIND PROJECT
                                      CLIST-SQFR-DECOMPOSE
                                      CLIST-PRIMITIVE-PART! CLIST-FACTOR
                                      ZIPPER-SUM CLIST-SIMPLIFY
                                      WEYL:MAKE-UPOLYNOMIAL
                                      DENSE-INTERPOLATE-COEFFICIENTS
                                      MAKE-MONOMIAL INTERPOLATE-FROM-SKEL
                                      EVAL-MONOMIAL CHECK-DEGREE
                                      NON-ZERO-RANDOM SPMOD-GCD2 SPMOD-GCD1
                                      SPMOD-GCD LIST-COERCE INITY
                                      SPARSEINTERPSTAGEI POLY-SKELETON
                                      SOLVE-VANDERMONDETD SOLVE-VANDERMONDET
                                      SOLVE-VANDERMONDE COMPUTE-VANDERMONDE-Q
                                      MAKE-DEGREE-MATRIX DEGREE-PARTITION
                                      BOUND-DEGREE-TERM-COUNT EXPT-LIST
                                      INTERPOLATE ADD-NEW-VARIABLE
                                      VARIABLE-INDEX PARSE-LINEAR-EQUATION
                                      ADD-VARIABLE-DEGREE POLY-MGCD
                                      POLY-FIND-COMMON-VARS POLY-SPLIT-ON-VARS
                                      TERMS-TIMES MAKE-POLYNOMIAL-MORPHISM
                                      GET-POLYNOMIAL-RING GTERMS-PRIM*
                                      TERMS-REDUCE ADD-UNDONE REDUCE-ALL
                                      CRITERION1 TERMS-S-POLY GENERATORS-OF
                                      CONVERT-LIST CHECK-SAME-DOMAIN BINARY=
                                      TIMES MAKE-IDEAL GTERMS-EXPT GTERMS-TIMES
                                      GTERM-CONSTANT? GTERM-EQUAL
                                      GTERM-DOMINATES GTERM-DISJOINT GTERM-LCM
                                      GTERM-QUOT GTERM-TIMES GTERMS-MON-TIMES
                                      GTERMS-MINUS COLLECT-OLD-TERM
                                      TRANSFORM-TERM CONVERT-TERM
                                      MAKE-COMPARISON-FUN GET-COMPARISON-FUN
                                      SCAN-POLY-FORM USE-CHINESE-REMAINDER
                                      MULTIPLICATIVE-ORDER MAKE-GFP-DOMAIN
                                      COMPUTE-INVERSE BF-ATAN BF-SIN BF-COS
                                      BF-LOG BF-EXP BF-E BF-PI-AGM BF-SQRT
                                      BF-PI-MACHIN READ!LNUM BFPRIN1
                                      CONVERT-NUMBER->CHARACTERS ORIENTED-SORT
                                      EXPT WITH-TPOWER-SERIES TPS-SPREAD-COEFFS
                                      GROUPED? TRIM-ZEROES COBOUNDARY
                                      BOUNDARY-SET BOUNDARY
                                      FREE-GROUP-SCALAR-TIMES
                                      MAKE-CHAIN-OR-COCHAIN POINTS-ORDER
                                      PRINT-TERM MAKE-SIMPLICIAL-COMPLEX
                                      %DELETE %INSERT COFACETS FACETS
                                      MAKE-SIMPLEX MAKE-POINT REVERSION
                                      TPS-DERIV2 TPS-DERIV1 TAYLOR1 TAYLOR-EXP
                                      MAP-OVER-ELEMENTS MEMBER NOT-AN-ELEMENT
                                      INITIALIZE-INSTANCE MAP-WITH-DOMAIN MAP
                                      LIST-OF-ELEMENTS LIST-OF-VARIABLES
                                      INTERN-IN-PACKAGE DEFINE-MATH-PROPERTY
                                      MAKE-PREDICATE %MAP-OVER-PROPERTIES
                                      TEST-PROPERTY ASSERT-PROPERTY
                                      COMPARE-PTERM-LISTS DEFINE-DOMAIN-CREATOR
                                      DEFINE-MATH-OPERATOR EXTERNAL-NAME
                                      MAKE-MULTIPOLE-EXPANSION NEXT-DOMAINS
                                      GET-EMBEDDABLE-DOMAINS MAKE-MORPHISM
                                      GET-MORPHISMS-TO GET-MORPHISMS-FROM
                                      FWRITE READ-SIZE-TABLE READ-REGION-POINTS
                                      READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                      READ-SIMPLICIAL-COMPLEX READ-VERTEX-SET
                                      READ-POINT MAKE-MESH-FROM-FILE
                                      %MM-BOUNDARY MAKE-MESH REFINE-MESH
                                      BUILD-CDT-FROM-BOUNDARIES GRADE
                                      %DELETE-TOO-CLOSE INSERT
                                      %SPLIT-CONSTRAINT-ONE-SIDE PLACE
                                      REMOVE-VERTEX FORCE-EDGE SPLIT-EDGE
                                      ADJ-VERTICES DIRECTED-LOCATE NEAR-BASE
                                      NEIGHBORHOOD VERTICES-SORTED-BY-ANGLE
                                      ANGLES TRIANGULATE-TRIPLES
                                      POINT-VS-TRIANGLE DISTANCE SIMPLEX-SIZE
                                      SPLIT COORDINATE-LIST PROCESSI SMITH*
                                      HERMITE-ARRAY HERMITE* SUBDETERMINANT*
                                      SPARSE-DET FIND-PIVOT HADAMARD-BOUND
                                      DETERMINANT* DEGREE-BOUNDS JACOBIAN
                                      SUBSTITUTE SUBTRACT-ROWS
                                      FIND-PIVOT-UNORDERED FIND-PIVOT-ORDERED
                                      EXCHANGE-ROWS INVERT-ARRAY RECIP
                                      TRANSPOSE FME-MATRIX-TIMES
                                      MATRIX-FME-TIMES TIMES-ARRAY DIFFERENCE
                                      PLUS ONE-MATRIX REF
                                      WITH-MATRIX-DIMENSIONS MAKE-ELEMENT
                                      WEYL:MAKE-ELEMENT ASSOCIATE-PREDICATE
                                      SEARCH-LIST FERMAT-INTEGER-FACTOR
                                      SIMPLE-INTEGER-FACTOR-INTERNAL
                                      ALL-DIVISORS FACTOR
                                      UNIFORMIZE-FACTOR-LIST POWER-OF?
                                      REPEATED-SQUARING FIND-SMALLER-PRIME
                                      INTEGER-NTH-ROOT POCHHAMMER
                                      EXPAND-BINOMIAL-FORM EXPAND
                                      EXPAND-PRODUCT EXPAND-OTHER EXPAND-PLUS
                                      DIFFERENT-KERNELS MERGE-NEW-BV
                                      DEPENDS-ON? DECLARE-DEPENDENCIES
                                      SET-VARIABLE-PROPERTY
                                      GET-VARIABLE-PROPERTY LOOP-OVER-TERMS
                                      GE-LGREAT GE-LEQUAL INITIALIZE-CONTEXTS
                                      CHECK-DOMAIN ADD-FUNCTION-TO-DOMAIN
                                      SEARCH-FOR-FUNCTION GE-GREAT
                                      MAKE-GE-VARIABLE POLYNOMIAL-INTERPOLATE
                                      SMOOTH2 RESAMPLE MAKE-SAMPLED-FUNCTION-1
                                      PRINT-TABLE EQUAL-VECTOR DERIV
                                      CANONICALIZE-FUNCTIONS APPLY
                                      MAKE-APP-FUNCTION FOURIER GE-FOURIER
                                      RECUR PARSE-OPERATION-LIST 1? 0?
                                      PRINT-OBJECT GET-DIRECT-SUM DOMAIN-LIST
                                      DEFINE-DIRECT-SUM DIRECT-SUM-PRINT-OBJECT
                                      COERCE RING-VARIABLES PARTITION PART-INT
                                      PICK))
(setf (callers-list 'REMOVE :callers) '(%DELETE OPPOSITE ANGLE SPARSE-DET
                                        MAKE-FUNCTION-INTEGRATE GE-FOURIER PICK))
(setf (callers-list 'FUNCALL :callers) '(%MAP-OVER-CELLS %MAP-OVER-PROPERTIES
                                         MAKE-CURVED-SEGMENT ARC
                                         MAKE-PARAMETER-SPACE
                                         INITIALIZE-CONTEXTS MAP
                                         MAKE-SAMPLED-FUNCTION-1 EXPT RECIP
                                         MINUS PRINT-OBJECT PART-INT))
(setf (callers-list 'FUN :callers) '(INITIALIZE-CONTEXTS PART-INT))
(setf (callers-list 'PART-INT :callers) '(PART-INT))
(setf (callers-list '- :callers) '(TILDE CROSS-PRODUCT
                                   CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                   CLIST-PTH-ROOT CLIST-DERIV CLIST-DIVIDE
                                   CLIST-TIMES ZIPPER-SUM CLIST-SIMPLIFY
                                   SPARSEINTERPSTAGEI COMPUTE-VANDERMONDE-Q
                                   DEGREE-PARTITION TERMS-INTERPOLATE POLY-EXPT
                                   POLY-DIFFERENCE PRINT-FORM TERMS-S-POLY
                                   GTERM-QUOT COLLECT-OLD-TERM GTERMS-MINUS
                                   CONVERT-TERM MAKE-POLYNOMIAL BINARY=
                                   EXTENDED-GCD* SQRT RANDOM-FLOATING-NUMBER
                                   RANDOM CONJUGATE COMPUTE-RESULT
                                   USE-CHINESE-REMAINDER RECIP MAKE-GFP-DOMAIN
                                   COMPUTE-INVERSE BF-ACOS BF-ASIN BF-ATAN
                                   BF-SIN BF-COS BF-LOG BF-EXP BF-E BF-PI-AGM
                                   BF-SQRT BF-PI-MACHIN BF-BINARY> BF-BINARY>=
                                   BF-FLOOR BF-EXPT BF-QUOTIENT BF-DIFFERENCE
                                   BF-PLUS BF-MINUS BF-ABS CONVERT-TO-BIGFLOAT
                                   READ!NUM READ!LNUM ROUND!EP ROUND!MT
                                   ROUND!LAST PRECI! CUT!EP CUT!MT CONV!EP
                                   CONV!MT INCPREC! TRUNCATE-ORDER
                                   LARGEST-STORED-COEFF TPS-SPREAD-COEFFS
                                   GROUPED? TRIM-ZEROES COBOUNDARY BOUNDARY
                                   FREE-GROUP-DIFFERENCE PRINT-TERM
                                   BOUNDARY-DOMAIN DIMENSION-OF
                                   SOLVE-FOR-COEFFS REVERSION TPS-DERIV2
                                   TPS-DERIV1 TIMES TAYLOR1 SUBSTITUTE COERCE
                                   EXPT EXPT-QUOTIENT LTH-LOCAL-TERM
                                   REST-OF-LOCAL LOCALIZE-FORM* LOCALIZE-FORM
                                   WHAT-IS-THE-LTHTERM2 SHIFT-L-FORM DIST
                                   WHAT-IS-THE-LTHTERM THE-KTHTERM
                                   SHIFT-LOCAL-FIELD DO-BACKGROUND-BOX
                                   VERTICES-SORTED-BY-ANGLE ANGLE
                                   TRIANGULATE-TRIPLES ARC MEASURE DISTANCE
                                   BEND CIRCLE-CENTER COMPLEX-CIRCUMCENTER
                                   ROTATE-LIST PROCESSI HERMITE-ARRAY
                                   SPARSE-DET FIND-PIVOT SUBTRACT-ROWS
                                   DIFFERENCE TOTIENT FERMAT-INTEGER-FACTOR
                                   FACTOR SYM-MOD FIND-SMALLER-PRIME
                                   INTEGER-NTH-ROOT FASTER-ISQRT
                                   EXPAND-BINOMIAL-FORM SIMPSON DERIV MINUS
                                   POLYNOMIAL-INTERPOLATE RESAMPLE PRINT-OBJECT
                                   AVL-DELETE ERASE-NODE DELETE-HEAD AVL-INSERT
                                   AVL-HEIGHT PART-INT))
(setf (callers-list 'VALUES :callers) '(MAP-FUN CLIST-EXTENDED-GCD CLIST-DIVIDE
                                        INITY PARSE-LINEAR-EQUATION
                                        POLY-CONTENT-AND-PRIM-PART
                                        POLY-TRUNCATE2 MAKE-COMPARISON-FUN
                                        EXTENDED-GCD EXTENDED-GCD* TRUNCATE2
                                        TRUNCATE1 CONTAGION PARSE-NUMERIC-OBJ
                                        COMPUTE-INVERSE ROUND2 ROUND1 CEILING2
                                        CEILING1 FLOOR2 FLOOR1 PRECI!
                                        ORIENTED-SORT TRIM-ZEROES
                                        DIRECTED-LOCATE POINT-VS-TRIANGLE
                                        SUBDETERMINANT* FIND-PIVOT-UNORDERED
                                        FIND-PIVOT-ORDERED MATRIX-DIMENSIONS
                                        FERMAT-INTEGER-FACTOR
                                        SIMPLE-INTEGER-FACTOR-INTERNAL
                                        POWER-OF? MERGE-NEW-BV SIMPSON
                                        CANONICALIZE-FUNCTIONS AVL-DELETE
                                        DELETE-RIGHT DELETE-LEFT ERASE-NODE
                                        DELETE-TAIL DELETE-HEAD AVL-INSERT
                                        BALANCE-LEFT BALANCE-RIGHT PART-INT))
(setf (callers-list 'NOT :callers) '(QUOTIENT ZIPPER-SUM CLIST-SIMPLIFY
                                     DENSE-INTERPOLATE-COEFFICIENTS
                                     NON-ZERO-RANDOM COEFFICIENT
                                     TERMS-DERIVATIVE POLY-DERIVATIVE
                                     POLY-VARIABLE-LIST POLY-SPLIT-ON-VARS
                                     TERMS-DIFFERENCE TERMS-PLUS
                                     PRINT-MPOLYNOMIAL-FORM MAP-OVER-EACH-TERM
                                     ADD-UNDONE REDUCE-ALL CRITERION1
                                     ADD-RELATION GTERM-CONSTANT? GTERM-EQUAL
                                     GTERM-DISJOINT GET-COMPARISON-FUN
                                     WEYL:MAKE-ELEMENT MULTIPLICATIVE-ORDER
                                     PLUS? BF-TAN BF-SIN BF-COS BF-LOG BF-E
                                     BF-PI-MACHIN BF-INTEGERP ROUND!MT
                                     CONVERT-NUMBER->CHARACTERS CUT!EP EXPT
                                     WITH-TPOWER-SERIES PRINT-TERM
                                     PRINT-EXPONENT CHAIN-TERMS-TIMES
                                     FREE-GROUP-DIFFERENCE FREE-GROUP-PLUS
                                     MAKE-SIMPLEX TAYLOR1 QUOTIENT-REDUCE
                                     MAKE-MULTIPOLE-EXPANSION REFINE-MESH GRADE
                                     INSERT NEIGHBOR NEIGHBORHOOD
                                     TRIANGULATE-TRIPLES ARC EDGES-CROSS?
                                     EMPTYQ? PROCESSI SPARSE-DET FIND-PIVOT
                                     SUBSTITUTE ONE-MATRIX FIND-PIVOT-UNORDERED
                                     WITH-MATRIX-DIMENSIONS
                                     UNIFORMIZE-FACTOR-LIST MERGE-NEW-BV
                                     MAKE-UNION LOOP-OVER-TERMS GE-LEQUAL
                                     SAFE-DISPLAY CHECK-DOMAIN
                                     MAKE-FUNCTION-INTEGRATE
                                     MAKE-FUNCTION-DERIV SEARCH-FOR-FUNCTION
                                     PRINT-OBJECT DERIV MAKE-APP-FUNCTION 1? 0?
                                     GET-DIRECT-SUM STANDARD-DERIVATION
                                     SET-VARIABLE-DERIVATION COERCE
                                     RING-VARIABLES DELETE-TAIL DELETE-HEAD
                                     NEXT-LOOP AVL-HEIGHT PART-INT))
(setf (callers-list 'PLUSP :callers) '(CLIST-SQFR-DECOMPOSE PLUS? READ!LNUM
                                       CUT!MT SUBSTITUTE CIRCLE-CENTER
                                       INTEGER-NTH-ROOT ERASE-NODE AVL-INSERT
                                       BALANCE-LEFT BALANCE-RIGHT PART-INT))
(setf (callers-list '1+ :callers) '(PROJECT MAKE-ELEMENT ZIPPER-SUM
                                    MAKE-UPOLYNOMIAL CHECK-DEGREE
                                    DEGREE-PARTITION INTERPOLATE
                                    POLY-SPLIT-ON-VARS POLY-EXPT MAKE-ETERM
                                    TRANSFORM-TERM GET-COMPARISON-FUN
                                    SCAN-POLY-FORM MAKE-EPOLYNOMIAL
                                    MULTIPLICATIVE-ORDER BF-ASIN BF-SIN BF-LOG
                                    BF-EXP BF-SQRT READ!LNUM ROUND!LAST PRECI!
                                    EXPT TPS-SPREAD-COEFFS BOUNDARY
                                    HERMITE-ARRAY SPARSE-DET SUBTRACT-ROWS
                                    FIND-PIVOT-UNORDERED FIND-PIVOT-ORDERED
                                    FERMAT-INTEGER-FACTOR FASTER-ISQRT
                                    EXPAND-BINOMIAL-FORM INTEGRAL
                                    POLYNOMIAL-INTERPOLATE STANDARD-DERIVATION
                                    AVL-HEIGHT PRINT-OBJECT AVL-SIZE PART-INT))
(setf (callers-list 'GETF :callers) '(TAYLOR1 DEFINE-MATH-OPERATOR WEYLI::PUTF
                                      WEYLI::GETF DERIV SIMPLIFY ADD-SUBSCRIPTS
                                      REPARSE-PRINT-STRING PUTF GETF PARTITION))
(setf (callers-list 'KEYWORD :callers) '(PARTITION))
(setf (callers-list 'CDDR :callers) '(POLY-MGCD FOURIER PARTITION))
(setf (callers-list 'PUSH :callers) '(LOOP-VECTOR-BIND
                                      CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                      CLIST-SQFR-DECOMPOSE
                                      DENSE-INTERPOLATE-COEFFICIENTS
                                      CHECK-DEGREE SPMOD-GCD2 SPMOD-GCD
                                      POLY-SKELETON SOLVE-VANDERMONDETD
                                      SOLVE-VANDERMONDET PARSE-LINEAR-EQUATION
                                      POLY-VARIABLE-LIST POLY-MGCD
                                      POLY-SPLIT-ON-VARS TRANSFORM ADD-UNDONE
                                      REDUCE-ALL CRITERION1 ADD-RELATION
                                      TRANSFORM-TERM SCAN-POLY-FORM BFPRIN1
                                      CONVERT-NUMBER->CHARACTERS COBOUNDARY
                                      BOUNDARY-SET BOUNDARY
                                      MAKE-CHAIN-OR-COCHAIN %SET-COERCE COERCE
                                      VERTEX-SET %INSERT FACETS SUBSTITUTE
                                      DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                      DEFINE-DOMAIN-CREATOR NEXT-DOMAINS
                                      GET-EMBEDDABLE-DOMAINS MAKE-HOMOMORPHISM
                                      MAKE-MORPHISM GET-MORPHISMS-TO
                                      GET-MORPHISMS-FROM COMPOSE
                                      INSERT-BOUNDARY REFINE-MESH-PREP INSERT
                                      FORCE-EDGE TRIANGLES NEIGHBORHOOD FACTOR
                                      EXPAND-BINOMIAL-FORM EXPAND MERGE-NEW-BV
                                      DECLARE-DEPENDENCIES
                                      SET-VARIABLE-PROPERTY
                                      GET-VARIABLE-PROPERTY
                                      ADD-FUNCTION-TO-DOMAIN MAKE-FUNCTION
                                      ADD-SUBSCRIPTS MAKE-GE-VARIABLE
                                      MAKE-APP-FUNCTION ADD-DOMAIN-INTERNAL
                                      CANONICALIZE-CLASS LIST-OPERATIONS
                                      PARTITION))
(setf (callers-list 'AND :callers) '(CROSS-PRODUCT QUOTIENT MAKE-ELEMENT
                                     SPMOD-GCD2 SPMOD-GCD1 INTERPOLATE DEGREE
                                     SUBSTITUTE POLY-SIMP PRINT-TERM PRINT-FORM
                                     PRINT-MPOLYNOMIAL-FORM
                                     MAKE-POLYNOMIAL-MORPHISM
                                     MAP-OVER-EACH-TERM GET-POLYNOMIAL-RING
                                     ADD-UNDONE REDUCE-ALL CRITERION1 TIMES
                                     GTERMS-TIMES MAKE-COMPARISON-FUN
                                     GET-COMPARISON-FUN EXPT SQRT 0?
                                     WEYL:MAKE-ELEMENT GET-FINITE-FIELD BF-ACOS
                                     BF-ASIN BF-ATAN BF-TAN BF-COS BF-LOG
                                     GET!CONST BF-INTEGERP BF-BINARY= BFPRIN1
                                     ROUND!MT CUT!MT CONV!MT WITH-TPOWER-SERIES
                                     GROUPED? GET-TPOWER-SERIES-DOMAIN
                                     CHAIN-TERMS-TIMES MAXIMAL-CELL?
                                     SIGN-OF-PERMUTATION TETRAHEDRON? TRIANGLE?
                                     SEGMENT? MAKE-POINT PARTIAL-DERIV
                                     MAKE-RATIONAL-FUNCTION* 1? IN-BOUND?
                                     READ-SIZE-TABLE
                                     READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                     REFINE-MESH GRADE PLACE
                                     %SPLIT-CONSTRAINT-ONE-SIDE NEIGHBOR
                                     FLIP-OK? NEIGHBORHOOD TRIANGULATE-TRIPLES
                                     POINT-VS-TRIANGLE EDGES-CROSS? PROCESSI
                                     FIND-PIVOT-UNORDERED INVERT-ARRAY
                                     ARRAY-TIMES DIFFERENCE PLUS
                                     WITH-MATRIX-DIMENSIONS PRIME? EXPAND
                                     DEPENDS-ON? SIMPLIFY GE-MINUS? GE-LEQUAL
                                     SAFE-DISPLAY ADD-FUNCTION-TO-DOMAIN
                                     SEARCH-FOR-FUNCTION ADD-SUBSCRIPTS
                                     PRINT-OBJECT INTEGRAL EQUAL-VECTOR DERIV
                                     MAKE-APP-FUNCTION GE-FOURIER GE-EQUAL
                                     REQUIRED-OPERATIONS DESCRIBE-OPERATIONS
                                     GET-DIRECT-SUM COERCE ERASE-NODE NEXT-LOOP
                                     MAP-OVER-TREE PARTITION))
(setf (callers-list 'APPEND :callers) '(LOOP-VECTOR-BIND
                                        CLIST-FACTOR-SQUAREFREE
                                        SPARSEINTERPSTAGEI ADD-NEW-VARIABLE
                                        ADD-UNDONE REDUCE-ALL GENERATORS-OF
                                        PLUS MAKE-COMPARISON-FUN
                                        DEFINE-BINARY-CONTAGIONS
                                        WITH-TPOWER-SERIES TAYLOR-EXP
                                        DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                        DEFINE-DOMAIN-CREATOR
                                        DEFINE-MATH-OPERATOR REST-OF-LOCAL
                                        SHIFT-L-FORM* SHIFT-M-FORM*
                                        READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                        MAKE-MESH FORCE-EDGE ROTATE-LIST
                                        WITH-MATRIX-DIMENSIONS ALL-DIVISORS
                                        FACTOR EXPAND MERGE-NEW-BV
                                        MAKE-FUNCTION-DERIV ADD-SUBSCRIPTS
                                        PARSE-ARGS DEFINE-DIRECT-SUM
                                        MAP-OVER-TREE))
(setf (callers-list 'AVL-ROOT :callers) '(SEARCH-NODE AVL-DELETE DELETE
                                          DELETE-TAIL DELETE-HEAD AVL-INSERT
                                          AVL-PREVIOUS AVL-NEXT SCAN MAP-OVER
                                          AVL-HEIGHT AVL-SIZE))
(setf (callers-list 'AVL-SIZE :callers) '(PRINT-OBJECT AVL-SIZE))
(setf (callers-list 'AVL-LEFT :callers) '(SEARCH-NODE AVL-DELETE DELETE-LEFT
                                          ERASE-NODE DELETE-TAIL DELETE-HEAD
                                          AVL-INSERT BALANCE-LEFT BALANCE-RIGHT
                                          NEXT-LOOP SCAN MAP-OVER
                                          FIND-LEFT-MOST AVL-HEIGHT UPDATE-NODE
                                          AVL-SIZE))
(setf (callers-list 'AVL-RIGHT :callers) '(SEARCH-NODE AVL-DELETE DELETE-RIGHT
                                           ERASE-NODE DELETE-TAIL DELETE-HEAD
                                           AVL-INSERT BALANCE-LEFT
                                           BALANCE-RIGHT NEXT-LOOP
                                           FIND-RIGHT-MOST SCAN MAP-OVER
                                           AVL-HEIGHT UPDATE-NODE AVL-SIZE))
(setf (callers-list 'FORMAT :callers) '(FREE-MODULE-PRINT-OBJECT
                                        LOOP-VECTOR-BIND
                                        UNIT-QUATERNION-DOMAIN-PRINT-OBJECT
                                        QUATERNION-DOMAIN-PRINT-OBJECT
                                        PROJECTIVE-SPACE-PRINT-OBJECT
                                        PRINT-TERM POLYNOMIAL-RING-PRINT-OBJECT
                                        IDEAL-PRINT-OBJECT MAKE-COMPARISON-FUN
                                        GF2^N-PRINT-OBJECT GFP-PRINT-OBJECT
                                        HILBERT-SPACE-PRINT-OBJECT
                                        FUNCTION-SPACE-PRINT-OBJECT
                                        FACTOR-DOMAIN-PRINT-OBJECT
                                        TPS-VAR-COEFFS TPS-VAR-ORDER TPS-VAR-BO
                                        TPS-VAR-VAL PRINT-GROUPED
                                        TP-RING-PRINT-OBJECT
                                        TP-FIELD-PRINT-OBJECT
                                        COCHAIN-MODULE-PRINT-OBJECT
                                        CHAIN-MODULE-PRINT-OBJECT
                                        EUCLIDEAN-SPACE-PRINT-OBJECT
                                        DEFINE-TAYLOR-EXPANSION-FUN
                                        SET-WITH-ELEMENT-LIST-PRINT-OBJECT
                                        RATFUN-FIELD-PRINT-OBJECT
                                        QUOTIENT-FIELD-PRINT-OBJECT
                                        DEFINE-MATH-PROPERTY
                                        PREDICATE-FUNCTION-NAME
                                        ASSERT-FUNCTION-NAME
                                        DEFINE-PRIMITIVE-PROPERTY
                                        DEFINE-DOMAIN-CREATOR
                                        DEFINE-MATH-OPERATOR EXTERNAL-NAME
                                        INTERNAL-NAME WRITE-VERTEX-SET FWRITE
                                        SO-N-PRINT-OBJECT O-N-PRINT-OBJECT
                                        SL-N-PRINT-OBJECT PSL-N-PRINT-OBJECT
                                        GL-N-PRINT-OBJECT
                                        MATRIX-SPACE-PRINT-OBJECT
                                        UQ-SET-PRINT-OBJECT
                                        REPARSE-PRINT-STRING PRINT-TABLE
                                        DEFDERIV-FUNCT DEFSIMPLIFY-FUNCT
                                        DEF-GE-1OPER MAKE-APP-FUNCTION
                                        PARSE-ARGS CANONICALIZE-CLASS
                                        DESCRIBE-OPERATIONS DOMAIN-PRINT-OBJECT
                                        DEFINE-DIRECT-SUM
                                        DIRECT-SUM-PRINT-OBJECT
                                        DIFFERENTIAL-RING-PRINT-OBJECT
                                        AVL-HEIGHT PRINT-OBJECT))
(setf (callers-list 'AVL-BALANCE :callers) '(AVL-DELETE ERASE-NODE DELETE-TAIL
                                             DELETE-HEAD AVL-INSERT
                                             BALANCE-LEFT BALANCE-RIGHT
                                             AVL-HEIGHT UPDATE-NODE
                                             PRINT-OBJECT))
(setf (callers-list 'ELEMENT-KEY :callers) '(BINARY> BINARY= PRINT-OBJECT))
(setf (callers-list 'AVL-HEIGHT :callers) '(AVL-HEIGHT))
(setf (callers-list 'ABS :callers) '(TERMS-MAX-COEFFICIENT EXTENDED-GCD EXPT
                                     SQRT HEIGHT ABS READ!LNUM BFPRIN1
                                     PRINT-OBJECT ROUND!LAST PRECI! DIST
                                     SHIFT-LOCAL-FIELD SHIFT-MULTIPOLE ARC
                                     CIRCLE-CENTER SMITH* HERMITE*
                                     FIND-PIVOT-ORDERED SYM-MOD
                                     POLYNOMIAL-INTERPOLATE AVL-HEIGHT))
(setf (callers-list 'MAX :callers) '(DENSE-INTERPOLATE-COEFFICIENTS SPMOD-GCD2
                                     INITIALIZE-INSTANCE TERMS-MAX-COEFFICIENT
                                     POLY-HEIGHT GTERM-LCM BF-ATAN BF-SIN
                                     BF-COS BF-LOG BF-EXP MAKE-TPOWER-SERIES
                                     MAX-DIMENSION-OF HEIGHT BOUNDING-BOX
                                     POLYNOMIAL-INTERPOLATE AVL-HEIGHT))
(setf (callers-list 'FIND-LEFT-MOST :callers) '(FIND-LEFT-MOST))
(setf (callers-list 'MAP-OVER :callers) '(MAP-OVER))
(setf (callers-list 'MACROLET :callers) '(GTERMS-DIFFERENCE GTERMS-PLUS
                                          MAKE-GENERATOR))
(setf (callers-list 'CURRENT-STATE :callers) '(SCAN))
(setf (callers-list 'CURRENT-NODE :callers) '(SCAN))
(setf (callers-list 'SET-CURRENT-STATE :callers) '(SCAN))
(setf (callers-list 'NEW-NODE :callers) '(SCAN))
(setf (callers-list 'SCAN :callers) '(SCAN))
(setf (callers-list 'POP :callers) '(REDUCE-ALL CRITERION1 MAKE-GENERATOR
                                     NEIGHBORHOOD TRIANGULATE-TRIPLES
                                     WITH-MATRIX-DIMENSIONS
                                     SIMPLE-INTEGER-FACTOR-INTERNAL EXPAND
                                     GE-LGREAT GE-LEQUAL SCAN))
(setf (callers-list 'PROG1 :callers) '(ADD-NEW-VARIABLE SCAN))
(setf (callers-list 'FIND-RIGHT-MOST :callers) '(FIND-RIGHT-MOST))
(setf (callers-list 'AVL-NEXT :callers) '(AVL-NEXT))
(setf (callers-list 'NEXT-LOOP :callers) '(NEXT-LOOP))
(setf (callers-list 'AVL-PREVIOUS :callers) '(AVL-PREVIOUS))
(setf (callers-list 'UPDATE-NODE :callers) '(AVL-DELETE ERASE-NODE DELETE-TAIL
                                             DELETE-HEAD AVL-INSERT
                                             BALANCE-LEFT BALANCE-RIGHT))
(setf (callers-list '%APPLY :callers) '(DERIV MAKE-ELEMENT MAP-FUN
                                        MAKE-POLYNOMIAL-MORPHISM
                                        WEYL:MAKE-ELEMENT MAKE-POINT INSERT
                                        MAP-WITH-DOMAIN MAP INITIALIZE-INSTANCE
                                        FME-MATRIX-TIMES MATRIX-FME-TIMES
                                        ADD-SUBSCRIPTS PRINT-OBJECT
                                        GET-DIRECT-SUM MAKE-DIRECT-SUM
                                        DIRECT-SUM-PRINT-OBJECT AVL-INSERT))
(setf (callers-list 'MAKE-ELEMENT :callers) '(DERIVATION TILDE CROSS-PRODUCT
                                              MULTIPLY-VECTOR-BY-SCALAR
                                              CREATE-UNIT-QUATERNION CONJUGATE
                                              MAP-FUN MAKE-POLYNOMIAL-MORPHISM
                                              LOG EXP ATANH ACOSH ASINH TANH
                                              COSH SINH ACOS ASIN TAN COS SIN
                                              ROUND2 ROUND1 CEILING2 CEILING1
                                              FLOOR2 FLOOR1 TRUNCATE2 TRUNCATE1
                                              SQRT PHASE ABS IMAGPART REALPART
                                              USE-CHINESE-REMAINDER TIMES
                                              MAKE-GFM-DOMAIN HEIGHT RANDOM
                                              BINARY-LCM BINARY-GCD QUOTIENT
                                              EXPT DENOMINATOR
                                              MAKE-QUOTIENT-ELEMENT
                                              MAKE-GFP-DOMAIN REVERSION INSERT
                                              INITIALIZE-INSTANCE
                                              CANONICALIZE-NUMBER ARC
                                              MAKE-PARAMETER-SPACE DETERMINANT*
                                              WEYL:MAKE-ELEMENT JACOBIAN
                                              SUBSTITUTE TRANSPOSE
                                              FME-MATRIX-TIMES MATRIX-FME-TIMES
                                              DIFFERENCE PLUS ONE-MATRIX
                                              ZERO-MATRIX REF MAKE-ELEMENT
                                              RECIP MINUS DERIV LOOP-OVER-TERMS
                                              COERCE-OBJ SIMPLIFY COERCE
                                              FOURIER AVL-INSERT))
(setf (callers-list 'MULTIPLE-VALUE-BIND :callers) '(CLIST-EXTENDED-GCD
                                                     CLIST-REMAINDER
                                                     CLIST-QUOTIENT SPMOD-GCD1
                                                     POLY-QUOTIENT*
                                                     EXTENDED-GCD EXTENDED-GCD*
                                                     ROUND2 ROUND1 CEILING2
                                                     CEILING1 FLOOR2 FLOOR1
                                                     TRUNCATE2 TRUNCATE1
                                                     CONVERT-TO-BIGFLOAT
                                                     READ!NUM
                                                     INITIALIZE-INSTANCE
                                                     MAKE-TPOWER-SERIES
                                                     CANONICAL TPS-DERIV2
                                                     TPS-DERIV1 PLACE SMITH*
                                                     HERMITE* SUBTRACT-ROWS
                                                     SIMPLIFY INDEF-INTEGRAL
                                                     AVL-DELETE DELETE-RIGHT
                                                     DELETE-LEFT ERASE-NODE
                                                     DELETE-TAIL DELETE-HEAD
                                                     AVL-INSERT))
(setf (callers-list 'AVL-INSERT :callers) '(AVL-INSERT))
(setf (callers-list 'BALANCE-RIGHT :callers) '(AVL-DELETE DELETE-HEAD
                                               AVL-INSERT))
(setf (callers-list '< :callers) '(CLIST-FACTOR-SQUAREFREE FACTOR SPMOD-GCD1
                                   INITY MORE-MAIN-ORDER-NUMBER?
                                   GTERM-DOMINATES MAKE-GFP-DOMAIN
                                   COMPUTE-INVERSE BF-ACOS BF-ASIN BF-ATAN
                                   BF-TAN BF-SIN BF-COS BF-LOG BF-PI BF-SQRT
                                   GET!CONST BF-EXPT BFPRIN1 ROUND!EP
                                   ROUND!LAST PRECI! CONV!EP CONV!MT
                                   ORIENTED-SORT EXPT TRUNCATE-ORDER
                                   TPS-SPREAD-COEFFS CELL-ORDER POINTS-ORDER
                                   GET-CELL IN-BOUND? LOCALIZE INSERT-BOUNDARY
                                   IMPROVE GRADE TOO-BIG? %DELETE-TOO-CLOSE
                                   DELAUNAY? VERTICES-SORTED-BY-ANGLE ARC BEND
                                   PRINT-OBJECT ALL-DIVISORS
                                   UNIFORMIZE-FACTOR-LIST CHOICE-PRIMES
                                   NEWPRIME FIND-SMALLER-PRIME PRIME?
                                   REDUCE-MODULO-INTEGER FACT
                                   MAKE-FUNCTION-INTEGRATE MAKE-FUNCTION-DERIV
                                   POLYNOMIAL-INTERPOLATE DERIV AVL-DELETE
                                   DELETE-TAIL AVL-INSERT))
(setf (callers-list 'BALANCE-LEFT :callers) '(AVL-DELETE DELETE-TAIL AVL-INSERT))
(setf (callers-list 'DELETE-HEAD :callers) '(ERASE-NODE DELETE-HEAD))
(setf (callers-list 'MULTIPLE-VALUE-SETQ :callers) '(SPARSEINTERPSTAGEI
                                                     CONVERT-NUMBER->CHARACTERS
                                                     PROCESSI HERMITE-ARRAY
                                                     FACTOR FASTER-ISQRT
                                                     DELETE-TAIL DELETE-HEAD))
(setf (callers-list 'DELETE-TAIL :callers) '(ERASE-NODE DELETE-TAIL))
(setf (callers-list 'ERASE-NODE :callers) '(AVL-DELETE DELETE-RIGHT DELETE-LEFT))
(setf (callers-list 'AVL-DELETE :callers) '(DELETE-RIGHT DELETE-LEFT))
(setf (callers-list 'DELETE-RIGHT :callers) '(AVL-DELETE))
(setf (callers-list 'DELETE-LEFT :callers) '(AVL-DELETE))
(setf (callers-list 'SEARCH-NODE :callers) '(SEARCH-NODE))
(setf (callers-list 'AVL-NODE :callers) '(MAKE-ELEMENT))
(setf (callers-list 'AVL-NODE-AS-PAIRS :callers) '(MAKE-ELEMENT))
(setf (callers-list 'ATOM :callers) '(LOOP-VECTOR-BIND POLY-SIMP PAIR-UP-TERMS
                                      WITH-CONTAGION SAVE!CONST GET!CONST
                                      WITH-TPOWER-SERIES DEFINE-MATH-PROPERTY
                                      MAKE-PREDICATE DEFINE-DOMAIN-CREATOR
                                      %MM-GET-POINT WITH-MATRIX-DIMENSIONS
                                      PRINT-OBJECT REPARSE-PRINT-STRING
                                      DEFMETHOD-SD PARSE-ARGS RECUR
                                      CANONICALIZE-CLASS COERCE RING-VARIABLES))
(setf (callers-list 'COEFFICIENT-DOMAIN-OF :callers) '(DERIVATION TILDE
                                                       QUOTIENT ZERO
                                                       FREE-MODULE-PRINT-OBJECT
                                                       UNIT-QUATERNION-DOMAIN-PRINT-OBJECT
                                                       QUATERNION-DOMAIN-PRINT-OBJECT
                                                       MAKE-AFFINE-SPACE
                                                       MAKE-ELEMENT
                                                       PROJECTIVE-SPACE-PRINT-OBJECT
                                                       EXTENDED-GCD
                                                       MAKE-UPOLYNOMIAL
                                                       WEYL:MAKE-UPOLYNOMIAL
                                                       INTERPOLATE
                                                       SPARSEINTERPSTAGE
                                                       RESULTANT
                                                       PRINT-MPOLYNOMIAL-FORM
                                                       MAKE-POLYNOMIAL-MORPHISM
                                                       GET-POLYNOMIAL-RING
                                                       POLYNOMIAL-RING-PRINT-OBJECT
                                                       MAKE-IDEAL TIMES PLUS
                                                       MAKE-EPOLYNOMIAL
                                                       CHARACTERISTIC
                                                       %BIND-DYNAMIC-DOMAIN-CONTEXT
                                                       EXPT TRUNCATE-ORDER
                                                       MAKE-TPOWER-SERIES
                                                       GET-TPOWER-SERIES-DOMAIN
                                                       COBOUNDARY BOUNDARY
                                                       COBOUNDARY-DOMAIN
                                                       BOUNDARY-DOMAIN
                                                       COCHAIN-MODULE-PRINT-OBJECT
                                                       CHAIN-MODULE-PRINT-OBJECT
                                                       MAKE-POINT REVERSION
                                                       TPS-DERIV2 TPS-DERIV1
                                                       GET-DEFAULT-TAYLOR-EXPANSION
                                                       TAYLOR1
                                                       MAKE-RATIONAL-FUNCTION*
                                                       RATFUN-FIELD-PRINT-OBJECT
                                                       MAKE-MULTIPOLE-EXPANSION
                                                       SMITH HERMITE
                                                       SUBDETERMINANT
                                                       SPARSE-DETERMINANT
                                                       EVALUATE-MATRIX
                                                       SUBSTITUTE DEGREE-BOUNDS
                                                       SO-N-PRINT-OBJECT
                                                       O-N-PRINT-OBJECT
                                                       DETERMINANT
                                                       SL-N-PRINT-OBJECT
                                                       PSL-N-PRINT-OBJECT
                                                       GL-N-PRINT-OBJECT RECIP
                                                       FME-MATRIX-TIMES
                                                       MATRIX-FME-TIMES
                                                       ONE-MATRIX ZERO-MATRIX
                                                       WEYL:MAKE-ELEMENT
                                                       MATRIX-SPACE-PRINT-OBJECT
                                                       COERCE
                                                       DIFFERENTIAL-RING-PRINT-OBJECT))
(setf (callers-list 'DISPLAY-LIST :callers) '(POLYNOMIAL-RING-PRINT-OBJECT
                                              RATFUN-FIELD-PRINT-OBJECT
                                              PRINT-OBJECT
                                              DIFFERENTIAL-RING-PRINT-OBJECT))
(setf (callers-list 'RING-VARIABLES :callers) '(MAKE-UPOLYNOMIAL
                                                WEYL:MAKE-UPOLYNOMIAL
                                                INTERPOLATE SPARSEINTERPSTAGEI
                                                MAKE-POLYNOMIAL-MORPHISM
                                                GET-POLYNOMIAL-RING
                                                POLYNOMIAL-RING-PRINT-OBJECT
                                                CONVERT-LIST
                                                INITIALIZE-INSTANCE
                                                MAKE-MPOLYNOMIAL
                                                MAKE-EPOLYNOMIAL PRINT-OBJECT
                                                GET-TPOWER-SERIES-DOMAIN
                                                TP-RING-PRINT-OBJECT
                                                TP-FIELD-PRINT-OBJECT DERIV
                                                GET-DEFAULT-TAYLOR-EXPANSION
                                                TAYLOR1 SUBSTITUTE
                                                RING-VARIABLES
                                                RATFUN-FIELD-PRINT-OBJECT
                                                EVALUATE-MATRIX DEGREE-BOUNDS
                                                COERCE
                                                DIFFERENTIAL-RING-PRINT-OBJECT))
(setf (callers-list 'PRINC :callers) '(PRINT-FREE-MODULE-ELEMENT PRINT-FORM
                                       POLYNOMIAL-RING-PRINT-OBJECT
                                       COMPLEX-NUMBERS-PRINT-OBJECT
                                       REAL-NUMBERS-PRINT-OBJECT
                                       RATIONAL-NUMBERS-PRINT-OBJECT
                                       RATIONAL-INTEGERS-PRINT-OBJECT BFPRIN1
                                       PRINT-EXPONENT PRINT-GROUPED
                                       TP-RING-PRINT-OBJECT
                                       TP-FIELD-PRINT-OBJECT PRINT-TERM
                                       SET-WITH-ELEMENT-LIST-PRINT-OBJECT
                                       RATFUN-FIELD-PRINT-OBJECT
                                       PARENTHESIZED-DISPLAY PRINT-OBJECT
                                       DIFFERENTIAL-RING-PRINT-OBJECT))
(setf (callers-list 'MAKE-TERMS :callers) '(TERMS-GCDU
                                            DENSE-INTERPOLATE-COEFFICIENTS
                                            MAKE-MONOMIAL COMPUTE-VANDERMONDE-Q
                                            TERMS-INTERPOLATE
                                            POLY-C-COEFFICIENT POLY-COEFFICIENT
                                            POLY-SUBST RESULTANT
                                            TERMS-REDUCED-GCD
                                            TERMS-PRIMITIVE-GCD
                                            TERMS-EUCLIDEAN-GCD TERMS-QUOTIENT
                                            POLY-EXPT TERMS-TIMES
                                            POLY-DIFFERENCE POLY-PLUS MAKE-POLY
                                            CONVERT-TERM
                                            POLY-DIFFERENTIATE-COEFS
                                            STANDARD-DERIVATION COERCE))
(setf (callers-list 'THIRD :callers) '(WEYL:MAKE-ELEMENT CRITERION1 IMPROVE
                                                         GRADE FLAT-TRIANGULATE
                                                         STAR-TRIANGULATE
                                                         TRIANGULATE-TRIPLES
                                                         MEASURE BEND
                                                         CANONICALIZE-CLASS
                                                         OPERATION-VALUES
                                                         STANDARD-DERIVATION
                                                         COERCE))
(setf (callers-list 'DERIV :callers) '(DERIVATION TPS-DERIV2 TAYLOR1 SUBSTITUTE
                                       DERIV COERCE))
(setf (callers-list 'SECOND :callers) '(LOOP-VECTOR-BIND SPMOD-GCD2 POLY-SUBST
                                        POLY-MGCD MAKE-MANY-TERMS CRITERION1
                                        WITH-CONTAGION READ!LNUM BFPRIN1
                                        MAKE-CHAIN-OR-COCHAIN MEMBER INSERT
                                        NOT-AN-ELEMENT RATIONAL-POLY-SUBST
                                        COMPOSE
                                        READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                        %MM-BOUNDARY DO-BACKGROUND-BOX GRADE
                                        SPLIT %SPLIT-CONSTRAINT-ONE-SIDE FLIP
                                        DELAUNAY? FLIP-OK? ADJ-VERTICES ANGLE
                                        TRIANGULATE-TRIPLES POINT-VS-TRIANGLE
                                        MEASURE BOUNDING-BOX EDGES-CROSS? BEND
                                        SMITH* HERMITE-ARRAY INDEPENDENT-COLS
                                        INDEPENDENT-ROWS INVERT-ARRAY RECIP
                                        ARRAY-TIMES SET-REF REF
                                        WEYL:MAKE-ELEMENT
                                        UNIFORMIZE-FACTOR-LIST
                                        UQ-SET-PRINT-OBJECT COERCE-OBJ
                                        CANONICALIZE-CLASS OPERATION-ARGUMENTS
                                        STANDARD-DERIVATION COERCE))
(setf (callers-list 'RETURN :callers) '(LIST-OF-VARIABLES CLIST-SQFR-DECOMPOSE
                                        ZIPPER-SUM CLIST-SIMPLIFY
                                        NON-ZERO-RANDOM INITY
                                        MAKE-DEGREE-MATRIX
                                        BOUND-DEGREE-TERM-COUNT EXPT-LIST
                                        INTERPOLATE VARIABLE-INDEX
                                        PARSE-LINEAR-EQUATION POLY-COEFFICIENT
                                        TERMS-SUBRESULTANT-GCD
                                        TERMS-REDUCED-GCD TERMS-PRIMITIVE-GCD
                                        TERMS-EUCLIDEAN-GCD POLY-MGCD
                                        POLY-FIND-COMMON-VARS
                                        TERMS-PSEUDO-REMAINDER TERMS-QUOTIENT
                                        TERMS-TIMES TERMS-TERM TERMS-REDUCE
                                        ADD-UNDONE TERMS-S-POLY
                                        CHECK-SAME-DOMAIN BINARY= MAKE-IDEAL
                                        GTERMS-TIMES GTERM-CONSTANT?
                                        GTERM-EQUAL GTERM-DOMINATES
                                        GTERM-DISJOINT COLLECT-OLD-TERM
                                        CONVERT-TERM MULTIPLICATIVE-ORDER
                                        COMPUTE-INVERSE READ!LNUM ORIENTED-SORT
                                        TPS-SPREAD-COEFFS TRIM-ZEROES
                                        BOUNDARY-SET APPLY POINTS-ORDER
                                        MAKE-SIMPLICIAL-COMPLEX %INSERT
                                        COFACETS FACETS TAYLOR-EXP MEMBER
                                        NOT-AN-ELEMENT %MAP-OVER-PROPERTIES
                                        TEST-PROPERTY ASSERT-PROPERTY
                                        COMPARE-PTERM-LISTS MAKE-MESH-FROM-FILE
                                        %MM-BOUNDARY MAKE-MESH REFINE-MESH
                                        INSERT REMOVE-VERTEX FORCE-EDGE
                                        DIRECTED-LOCATE
                                        VERTICES-SORTED-BY-ANGLE
                                        TRIANGULATE-TRIPLES POINT-VS-TRIANGLE
                                        DISTANCE SPLIT SPARSE-DET FIND-PIVOT
                                        DETERMINANT* FIND-PIVOT-UNORDERED
                                        FIND-PIVOT-ORDERED FME-MATRIX-TIMES
                                        MATRIX-FME-TIMES WEYL:MAKE-ELEMENT
                                        MAKE-ELEMENT FERMAT-INTEGER-FACTOR
                                        SIMPLE-INTEGER-FACTOR-INTERNAL
                                        ALL-DIVISORS FACTOR POWER-OF?
                                        REPEATED-SQUARING NEWPRIME
                                        FIND-SMALLER-PRIME INTEGER-NTH-ROOT
                                        DEPENDS-ON? SET-VARIABLE-PROPERTY
                                        GET-VARIABLE-PROPERTY GE-LGREAT
                                        ADD-FUNCTION-TO-DOMAIN
                                        SEARCH-FOR-FUNCTION GE-GREAT
                                        MAKE-GE-VARIABLE EQUAL-VECTOR
                                        MAKE-APP-FUNCTION GE-FOURIER 1? 0?
                                        GET-DIRECT-SUM COERCE))
(setf (callers-list 'COERCIBLE? :callers) '(QUOTIENT TIMES MAKE-EPOLYNOMIAL
                                            TAYLOR1 SUBSTITUTE COERCE))
(setf (callers-list 'CALL-NEXT-METHOD :callers) '(TILDE CROSS-PRODUCT QUOTIENT
                                                  TIMES PLUS MAKE-EPOLYNOMIAL
                                                  BINARY-LCM BINARY-GCD
                                                  MIN-PAIR MAX-PAIR
                                                  %BIND-DYNAMIC-DOMAIN-CONTEXT
                                                  EXPT PRINT-OBJECT
                                                  PARTIAL-DERIV FWRITE
                                                  %SPLIT-CONSTRAINT-ONE-SIDE
                                                  PLACE DELAUNAY? SPLIT
                                                  REMOVE-VERTEX FORCE-EDGE
                                                  SPLIT-EDGE FLIP FLIP-OK?
                                                  NEIGHBOR DISTANCE
                                                  DELETE-MAXIMAL-CELL INSERT
                                                  %SET-NAME NAME
                                                  DIFFERENT-KERNELS GE-FOURIER
                                                  ADD-NEW-VARIABLE COERCE))
(setf (callers-list 'VARIABLE-DERIVATION :callers) '(STANDARD-DERIVATION
                                                     ADD-NEW-VARIABLE))
(setf (callers-list 'ZERO :callers) '(TILDE CLIST-TIMES ZIPPER-SUM
                                      MAKE-UPOLYNOMIAL INTERPOLATE-FROM-SKEL
                                      CHECK-DEGREE SPARSEINTERPSTAGEI
                                      INTERPOLATE POLY-C-COEFFICIENT
                                      POLY-COEFFICIENT POLY-DERIVATIVE
                                      POLY-RESULTANT POLY-TRUNCATE2
                                      POLY-PSEUDO-REMAINDER TERMS-TERM
                                      POLY-SIMP ROUND1 CEILING1 FLOOR1
                                      TRUNCATE1 PHASE EXPT TRUNCATE-ORDER
                                      COERCE TPS-SPREAD-COEFFS
                                      INITIALIZE-INSTANCE COBOUNDARY BOUNDARY
                                      REVERSION TPS-DERIV2 TPS-DERIV1 TAYLOR1
                                      SUBSTITUTE DERIV RATFUN-REDUCE
                                      QUOTIENT-REDUCE* THE-KTHTERM
                                      MAKE-MULTIPOLE-EXPANSION
                                      SPARSE-DETERMINANT FIND-PIVOT
                                      INVERT-ARRAY ONE-MATRIX ZERO-MATRIX ZERO
                                      POLY-DERIVATION STANDARD-DERIVATION))
(setf (callers-list 'LET* :callers) '(IMAGPART REALPART CONJUGATE DERIVATION
                                               MULTIPLY-VECTOR-BY-SCALAR MINUS
                                               PRINT-FREE-MODULE-ELEMENT
                                               MAKE-AFFINE-SPACE
                                               CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                               CLIST-PTH-ROOT
                                               CLIST-PRIMITIVE-PART! CFACTOR
                                               CLIST-DIVIDE CLIST-TIMES
                                               MAKE-UPOLYNOMIAL
                                               WEYL:MAKE-UPOLYNOMIAL
                                               INTERPOLATE-FROM-SKEL
                                               INTERPOLATE SPARSEINTERPSTAGEI
                                               SOLVE-VANDERMONDE
                                               ADD-NEW-VARIABLE
                                               PRINT-MPOLYNOMIAL-FORM TRANSFORM
                                               TERMS-S-POLY MAKE-MPOLYNOMIAL
                                               MAKE-ETERM MAKE-POLYNOMIAL
                                               MAKE-EPOLYNOMIAL SQRT
                                               USE-CHINESE-REMAINDER
                                               MAKE-FINITE-FIELD*
                                               MAKE-GFP-DOMAIN BF-ATAN BF-TAN
                                               BF-SIN BF-COS BF-LOG BF-EXP BF-E
                                               BF-PI-AGM BF-SQRT BF-PI-MACHIN
                                               PRECI! EXPT COERCE
                                               TPS-SPREAD-COEFFS BOUNDARY
                                               PRINT-TERM REVERSION TPS-DERIV2
                                               TPS-DERIV1
                                               GET-DEFAULT-TAYLOR-EXPANSION
                                               TAYLOR1 SUBSTITUTE
                                               LIST-OF-VARIABLES
                                               MAKE-RATIONAL-FUNCTION*
                                               MAKE-MULTIPOLE-EXPANSION
                                               READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                               DO-BACKGROUND-BOX IMPROVE GRADE
                                               SPLIT FLIP DELAUNAY? FLIP-OK?
                                               ARC MEASURE BEND MAKE-MEAN-POINT
                                               CIRCLE-CENTER
                                               COMPLEX-CIRCUMCENTER SMITH-ARRAY
                                               HERMITE-ARRAY SPARSE-DETERMINANT
                                               DETERMINANT* JACOBIAN RECIP
                                               ONE-MATRIX WEYL:MAKE-ELEMENT
                                               SYM-MOD ADD-SUBSCRIPTS
                                               INDEF-INTEGRAL SIMPSON INTEGRAL
                                               DERIV MAP POLYNOMIAL-INTERPOLATE
                                               RESAMPLE MAKE-SAMPLED-FUNCTION-1
                                               PRINT-OBJECT APPLY
                                               MAKE-APP-FUNCTION
                                               REQUIRED-OPERATIONS
                                               DESCRIBE-OPERATIONS
                                               POLY-DIFFERENTIATE-COEFS
                                               STANDARD-DERIVATION))
(setf (callers-list 'VARIABLE-SYMBOL :callers) '(TRANSFORM PRINT-FORM
                                                 SUBSTITUTE STANDARD-DERIVATION))
(setf (callers-list 'GE-VARIABLE? :callers) '(SAFE-DISPLAY STANDARD-DERIVATION))
(setf (callers-list 'ADD-NEW-VARIABLE :callers) '(DERIV STANDARD-DERIVATION))
(setf (callers-list 'STANDARD-DERIVATION :callers) '(POLY-DERIVATION))
(setf (callers-list 'POLY-PLUS :callers) '(DENSE-INTERPOLATE-COEFFICIENTS
                                           MAKE-MONOMIAL POLY-C-COEFFICIENT
                                           POLY-COEFFICIENT TERMS-HORNERS-RULE
                                           POLY-MGCD POLY-EXPT TERMS-TIMES
                                           TERMS-PLUS TRANSFORM CONVERT-TERM
                                           POLY-DIFFERENTIATE-COEFS
                                           POLY-DERIVATION))
(setf (callers-list 'POLY-0? :callers) '(MAKE-MONOMIAL CHECK-DEGREE
                                         TERMS-INTERPOLATE POLY-DERIVATIVE
                                         TERMS-SUBST POLY-QUOTIENT* POLY-EXPT
                                         TERMS-TIMES TERMS-MON-TIMES
                                         POLY-DIFFERENCE TERMS-DIFFERENCE
                                         POLY-PLUS TERMS-PLUS RATFUN-REDUCE 0?
                                         POLY-DERIVATION))
(setf (callers-list 'POLY-TIMES :callers) '(DENSE-INTERPOLATE-COEFFICIENTS
                                            MAKE-MONOMIAL SPMOD-GCD2 SPMOD-GCD1
                                            PARSE-LINEAR-EQUATION
                                            POLY-C-COEFFICIENT POLY-COEFFICIENT
                                            TERMS-DERIVATIVE TERMS-HORNERS-RULE
                                            TERMS-SUBRESULTANT-GCD POLY-MGCD
                                            POLY-LCM POLY-GCD POLY-TRUNCATE2
                                            POLY-EXPT POLY-EXPTSQ TERMS-TIMES
                                            TERMS-MON-TIMES TRANSFORM
                                            PARTIAL-DERIV
                                            MAKE-RATIONAL-FUNCTION* DERIVATION
                                            POLY-DIFFERENTIATE-COEFS
                                            POLY-DERIVATION))
(setf (callers-list 'MAKE-POLY-FORM :callers) '(RESULTANT POLY-MONICIZE
                                                POLY-PRIM-PART POLY-QUOTIENT*
                                                POLY-EXPT POLY-MINUS POLY-SIMP
                                                POLY-DIFFERENTIATE-COEFS
                                                POLY-DERIVATION))
(setf (callers-list 'MAP-OVER-EACH-TERM :callers) '(MAKE-UPOLYNOMIAL SPMOD-GCD2
                                                    POLY-SKELETON
                                                    SOLVE-VANDERMONDETD
                                                    SOLVE-VANDERMONDET
                                                    SOLVE-VANDERMONDE
                                                    TERMS-LIST-OF-VARS
                                                    TERMS-DEGREE-VECTOR
                                                    TERMS-MAX-COEFFICIENT
                                                    TERMS-DERIVATIVE
                                                    POLY-DERIVATIVE
                                                    TERMS-HORNERS-RULE
                                                    TERMS-SUBST TERMS-COERCE
                                                    TERMS-MONICIZE POLY-HEIGHT
                                                    TERMS-COEF-REMAINDER
                                                    TERMS-CQUOTIENT
                                                    TERMS-MON-TIMES TERMS-MINUS
                                                    PRINT-FORM TRANSFORM
                                                    SCAN-POLY-FORM
                                                    RATIONAL-TERMS-HORNERS-RULE
                                                    POLY-DIFFERENTIATE-COEFS
                                                    POLY-DERIVATION))
(setf (callers-list 'E :callers) '(MAKE-UPOLYNOMIAL CHECK-DEGREE SPMOD-GCD2
                                   POLY-SKELETON SOLVE-VANDERMONDETD
                                   SOLVE-VANDERMONDET SOLVE-VANDERMONDE
                                   TERMS-DERIVATIVE POLY-DERIVATIVE
                                   TERMS-HORNERS-RULE TERMS-SUBST TERMS-COERCE
                                   TERMS-MONICIZE POLY-HEIGHT
                                   TERMS-COEF-REMAINDER TERMS-MINUS PRINT-FORM
                                   TRANSFORM SCAN-POLY-FORM
                                   RATIONAL-TERMS-HORNERS-RULE
                                   POLY-DIFFERENTIATE-COEFS POLY-DERIVATION))
(setf (callers-list 'E0? :callers) '(TERMS-GCDU MAKE-MONOMIAL POLY-COEFFICIENT
                                     TERMS-DERIVATIVE TERMS-SUBRESULTANT-GCD
                                     POLY-RESULTANT POLY-SUBRESULTANT-GCD
                                     TERMS-REDUCED-GCD TERMS-PRIMITIVE-GCD
                                     TERMS-EUCLIDEAN-GCD TERMS-PSEUDO-REMAINDER
                                     POLY-EXPT POLY-SIMP TRANSFORM PRINT-TERM
                                     GTERMS-EXPT POLY-DERIVATION))
(setf (callers-list 'COLLECT-TERM :callers) '(TERMS-DERIVATIVE POLY-DERIVATIVE
                                              TERMS-SUBST TERMS-COERCE
                                              TERMS-MONICIZE
                                              TERMS-COEF-REMAINDER
                                              TERMS-CQUOTIENT TERMS-MON-TIMES
                                              TERMS-DIFFERENCE TERMS-MINUS
                                              TERMS-PLUS COLLECT-OLD-TERM
                                              CHAIN-TERMS-TIMES
                                              FREE-GROUP-DIFFERENCE
                                              FREE-GROUP-PLUS POLY-DERIVATION))
(setf (callers-list 'E1- :callers) '(TERMS-DERIVATIVE POLY-DERIVATION))
(setf (callers-list 'POLY-DIFFERENTIATE-COEFS :callers) '(POLY-DERIVATION))
(setf (callers-list 'LE :callers) '(TERMS-GCDU DENSE-INTERPOLATE-COEFFICIENTS
                                    CHECK-DEGREE POLY-C-COEFFICIENT
                                    POLY-COEFFICIENT TERMS-DEGREE-VECTOR
                                    POLY-DEGREE-VECTOR POLY-DEGREE DEGREE
                                    TERMS-HORNERS-RULE TERMS-SUBRESULTANT-GCD
                                    POLY-RESULTANT POLY-SUBRESULTANT-GCD
                                    TERMS-REDUCED-GCD TERMS-PRIMITIVE-GCD
                                    TERMS-EUCLIDEAN-GCD POLY-GCD
                                    POLY-FACTOR-CBOUND TERMS-PSEUDO-REMAINDER
                                    TERMS-QUOTIENT POLY-EXPT TERMS-TIMES
                                    TERMS-TERM POLY-SIMP PRINT-FORM TRANSFORM
                                    1? PARTIAL-DERIV
                                    RATIONAL-TERMS-HORNERS-RULE
                                    POLY-DIFFERENTIATE-COEFS))
(setf (callers-list 'POLY-DERIVATION :callers) '(DERIVATION
                                                 POLY-DIFFERENTIATE-COEFS))
(setf (callers-list 'LC :callers) '(DENSE-INTERPOLATE-COEFFICIENTS CHECK-DEGREE
                                    SPMOD-GCD1 POLY-LEADING-COEFFICIENT
                                    POLY-C-COEFFICIENT POLY-COEFFICIENT
                                    POLY-DEGREE DEGREE POLY-VARIABLE-LIST
                                    TERMS-HORNERS-RULE TERMS-SUBRESULTANT-GCD
                                    POLY-RESULTANT TERMS-REDUCED-GCD
                                    TERMS-MONICIZE TERMS-CONTENT
                                    TERMS-PSEUDO-REMAINDER TERMS-QUOTIENT
                                    POLY-EXPT TERMS-TIMES TERMS-MINUS?
                                    TERMS-TERM POLY-SIMP PRINT-FORM
                                    POLY-MONOMIAL? TRANSFORM 1? PARTIAL-DERIV
                                    RATIONAL-TERMS-HORNERS-RULE
                                    POLY-DIFFERENTIATE-COEFS))
(setf (callers-list 'RED :callers) '(DENSE-INTERPOLATE-COEFFICIENTS
                                     CHECK-DEGREE POLY-C-COEFFICIENT
                                     POLY-COEFFICIENT POLY-DEGREE DEGREE
                                     POLY-VARIABLE-LIST TERMS-HORNERS-RULE
                                     TERMS-CONTENT POLY-EXPT TERMS-TIMES
                                     TERMS-TERM POLY-SIMP PRINT-FORM
                                     POLY-MONOMIAL? TRANSFORM TERMS-S-POLY
                                     GTERMS-TIMES COLLECT-OLD-TERM
                                     PARTIAL-DERIV RATIONAL-TERMS-HORNERS-RULE
                                     POLY-DIFFERENTIATE-COEFS))
(setf (callers-list 'TYPEP :callers) '(TIMES PRINT-FREE-MODULE-ELEMENT
                                       WEYL:MAKE-ELEMENT FACTOR INTERPOLATE
                                       POLY-TRUNCATE2 POLY-QUOTIENT*
                                       PRINT-MPOLYNOMIAL-FORM
                                       MAKE-POLYNOMIAL-MORPHISM
                                       GET-POLYNOMIAL-RING BINARY-LCM
                                       BINARY-GCD RECIP DENOMINATOR NUMERATOR
                                       PARSE-NUMERIC-OBJ CONJUGATE IMAGPART
                                       REALPART USE-CHINESE-REMAINDER EXPT
                                       GET-TPOWER-SERIES-DOMAIN APPLY
                                       TETRAHEDRON? TRIANGLE? SEGMENT?
                                       GET-DEFAULT-TAYLOR-EXPANSION TAYLOR1 MAP
                                       MAKE-RATIONAL-FUNCTION* COERCE
                                       CANONICALIZE-NUMBER
                                       GET-EMBEDDABLE-DOMAINS GET-MORPHISMS-TO
                                       GET-MORPHISMS-FROM READ-SIZE-TABLE
                                       READ-REGION-POINTS
                                       READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                       READ-SIMPLICIAL-COMPLEX INSERT POWER-OF?
                                       EXPAND SUBSTITUTE DIFFERENT-KERNELS
                                       MERGE-NEW-BV DEPENDS-ON? SAFE-DISPLAY
                                       CHECK-DOMAIN MAKE-FUNCTION-INTEGRATE
                                       MAKE-FUNCTION-DERIV
                                       ADD-FUNCTION-TO-DOMAIN
                                       SEARCH-FOR-FUNCTION
                                       MAKE-SAMPLED-FUNCTION-1 DERIV
                                       MAKE-APP-FUNCTION GET-DIRECT-SUM
                                       DOMAIN-LIST DERIVATION))
(setf (callers-list 'QF-RING :callers) '(CHARACTERISTIC
                                         GET-DEFAULT-TAYLOR-EXPANSION DERIV
                                         PARTIAL-DERIV SUBSTITUTE
                                         LIST-OF-VARIABLES EXPT RATFUN-REDUCE
                                         MINUS DENOMINATOR NUMERATOR
                                         PRINT-OBJECT MAKE-RATIONAL-FUNCTION*
                                         RING-VARIABLES
                                         RATFUN-FIELD-PRINT-OBJECT COERCE
                                         DERIVATION))
(setf (callers-list 'WITH-NUMERATOR-AND-DENOMINATOR :callers) '(PARTIAL-DERIV
                                                                SUBSTITUTE
                                                                LIST-OF-VARIABLES
                                                                EXPT
                                                                EXPT-QUOTIENT
                                                                RECIP MINUS
                                                                PRINT-OBJECT
                                                                DERIVATION))
(setf (callers-list 'N :callers) '(DERIVATION))
(setf (callers-list 'RATFUN-REDUCE :callers) '(PARTIAL-DERIV QUOTIENT-REDUCE
                                               DERIVATION))
(setf (callers-list 'POLY-DIFFERENCE :callers) '(PARSE-LINEAR-EQUATION
                                                 TERMS-DIFFERENCE PARTIAL-DERIV
                                                 DERIVATION))
(setf (callers-list 'TUPLE-VALUE :callers) '(CROSS-PRODUCT
                                             PRINT-FREE-MODULE-ELEMENT
                                             CONJUGATE VECTOR-SET-REF REF
                                             MAKE-POLYNOMIAL-MORPHISM
                                             MAKE-POINT 1? 0? PRINT-OBJECT
                                             DIRECT-SUM-PRINT-OBJECT
                                             DIMENSION-OF))
(setf (callers-list 'ARRAY-DIMENSION :callers) '(PRINT-FREE-MODULE-ELEMENT
                                                 MAKE-ELEMENT-FREE-MODULE-VECTOR
                                                 WEYL:MAKE-ELEMENT
                                                 WEYL:MAKE-UPOLYNOMIAL
                                                 SOLVE-VANDERMONDE
                                                 MAKE-POLYNOMIAL-MORPHISM
                                                 GTERMS-MON-TIMES MAKE-ETERM
                                                 MAKE-POLYNOMIAL EXPT
                                                 TRUNCATE-ORDER
                                                 LARGEST-STORED-COEFF
                                                 PRINT-TERM MAKE-POINT
                                                 SUBSTITUTE MAP-WITH-DOMAIN MAP
                                                 LIST-OF-ELEMENTS MAKE-ELEMENT
                                                 POLYNOMIAL-INTERPOLATE 1? 0?
                                                 PRINT-OBJECT
                                                 DIRECT-SUM-PRINT-OBJECT))
(setf (callers-list 'AREF :callers) '(IMAGPART REALPART CROSS-PRODUCT CONJUGATE
                                               VECTOR-SET-REF MAKE-ELEMENT
                                               INITY SPARSEINTERPSTAGEI
                                               SOLVE-VANDERMONDETD
                                               SOLVE-VANDERMONDET
                                               SOLVE-VANDERMONDE
                                               MAKE-DEGREE-MATRIX INTERPOLATE
                                               ADD-NEW-VARIABLE
                                               SET-VARIABLE-NUMBER-PROPERTY
                                               GET-VARIABLE-NUMBER-PROPERTY
                                               INITIALIZE-INSTANCE
                                               GET-VARIABLE-NAME TRANSFORM
                                               MAKE-POLYNOMIAL-MORPHISM
                                               VARIABLE-SYMBOL TRANSFORM-TERM
                                               CONVERT-TERM MAKE-EPOLYNOMIAL
                                               READ!NUM TPS-SPREAD-COEFFS
                                               PRINT-TERM MAKE-POINT REVERSION
                                               MAP-WITH-DOMAIN LIST-OF-ELEMENTS
                                               READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                               PROCESSI SMITH* HERMITE-ARRAY
                                               HERMITE* SUBDETERMINANT*
                                               SPARSE-DET FIND-PIVOT
                                               HADAMARD-BOUND COERCE
                                               DEGREE-BOUNDS JACOBIAN
                                               SUBSTITUTE SUBTRACT-ROWS
                                               FIND-PIVOT-UNORDERED
                                               FIND-PIVOT-ORDERED EXCHANGE-ROWS
                                               INVERT-ARRAY RECIP TRANSPOSE
                                               FME-MATRIX-TIMES
                                               MATRIX-FME-TIMES TIMES-ARRAY
                                               DIFFERENCE PLUS ONE-MATRIX
                                               SET-REF REF WEYL:MAKE-ELEMENT
                                               WEYLI::%COPY-ARRAY-CONTENTS*
                                               INDEF-INTEGRAL INTEGRAL DERIV
                                               MAP POLYNOMIAL-INTERPOLATE
                                               SMOOTH2 RESAMPLE
                                               MAKE-SAMPLED-FUNCTION-1
                                               PRINT-TABLE EQUAL-VECTOR 1? 0?
                                               PRINT-OBJECT
                                               DIRECT-SUM-PRINT-OBJECT))
(setf (callers-list 'INTERN :callers) '(LOOP-VECTOR-BIND MAKE-COMPARISON-FUN
                                        TPS-VAR-COEFFS TPS-VAR-ORDER TPS-VAR-BO
                                        TPS-VAR-VAL DEFINE-TAYLOR-EXPANSION-FUN
                                        INTERN-IN-PACKAGE DEFINE-MATH-PROPERTY
                                        PREDICATE-FUNCTION-NAME
                                        ASSERT-FUNCTION-NAME
                                        DEFINE-PRIMITIVE-PROPERTY
                                        DEFINE-DOMAIN-CREATOR
                                        DEFINE-MATH-OPERATOR EXTERNAL-NAME
                                        INTERNAL-NAME DEFDERIV-FUNCT
                                        DEFSIMPLIFY-FUNCT DEF-GE-1OPER
                                        MAKE-APP-FUNCTION PARSE-ARGS
                                        DEFINE-DIRECT-SUM))
(setf (callers-list '%MAKE-DIRECT-SUM :callers) '(ITERATE))
(setf (callers-list 'ITERATE :callers) '(ITERATE))
(setf (callers-list 'GET-RATIONAL-INTEGERS :callers) '(MAKE-GFM-DOMAIN
                                                       MAKE-GFP-DOMAIN
                                                       COBOUNDARY-DOMAIN
                                                       BOUNDARY-DOMAIN
                                                       CANONICALIZE-NUMBER
                                                       ITERATE))
(setf (callers-list 'MAKE-HOMOMORPHISM :callers) '(MAKE-POLYNOMIAL-MORPHISM
                                                   MAKE-GFM-DOMAIN
                                                   MAKE-GFP-DOMAIN
                                                   MAKE-AUTOMORPHISM
                                                   MAKE-PARAMETER-SPACE ITERATE))
(setf (callers-list ':UNNAMED-LAMBDA :callers) '(CLIST-EXPT-MOD-POLY
                                                 SQUARE-FREE CLIST-FACTOR
                                                 CFACTOR FACTOR PSKELETON
                                                 PARSE-LINEAR-EQUATION
                                                 POLY-DEGREE-VECTOR
                                                 MAKE-POLYNOMIAL-MORPHISM
                                                 GET-POLYNOMIAL-RING ADD-UNDONE
                                                 CRITERION1 GET-FINITE-FIELD
                                                 MAKE-GFM-DOMAIN
                                                 MAKE-GFP-DOMAIN BF-EXPT COERCE
                                                 MAKE-TPOWER-SERIES
                                                 GET-TPOWER-SERIES-DOMAIN
                                                 COBOUNDARY BOUNDARY
                                                 MAKE-CHAIN-OR-COCHAIN
                                                 %MAP-OVER-CELLS
                                                 GET-DEFAULT-TAYLOR-EXPANSION
                                                 %MAP-OVER-PROPERTIES
                                                 %MM-BOUNDARY NAME-REGION
                                                 DO-BACKGROUND-BOX FLIP-OK?
                                                 VERTICES-SORTED-BY-ANGLE
                                                 CIRCUMCENTER FLAT-TRIANGULATE
                                                 STAR-TRIANGULATE
                                                 MAKE-CURVED-SEGMENT ARC
                                                 MAKE-PARAMETER-SPACE
                                                 MAKE-MEAN-POINT ALL-NAMES
                                                 UNIFORMIZE-FACTOR-LIST
                                                 EXPT-MODULO-INTEGER SUBSTITUTE
                                                 FUNCT ADD-SUBSCRIPTS QUOTIENT
                                                 TIMES MAKE-APP-FUNCTION
                                                 ADD-DOMAIN-INTERNAL
                                                 CANONICALIZE-CLASS
                                                 LIST-OPERATIONS GET-DIRECT-SUM
                                                 ITERATE))
(setf (callers-list 'LAMBDA :callers) '(CLIST-EXPT-MOD-POLY SQUARE-FREE
                                        CLIST-FACTOR CFACTOR FACTOR PSKELETON
                                        PARSE-LINEAR-EQUATION
                                        POLY-DEGREE-VECTOR
                                        MAKE-POLYNOMIAL-MORPHISM
                                        GET-POLYNOMIAL-RING ADD-UNDONE
                                        CRITERION1 GET-FINITE-FIELD
                                        MAKE-GFM-DOMAIN MAKE-GFP-DOMAIN BF-EXPT
                                        COERCE MAKE-TPOWER-SERIES
                                        GET-TPOWER-SERIES-DOMAIN COBOUNDARY
                                        BOUNDARY MAKE-CHAIN-OR-COCHAIN
                                        %MAP-OVER-CELLS
                                        GET-DEFAULT-TAYLOR-EXPANSION
                                        MAKE-GENERATOR %MAP-OVER-PROPERTIES
                                        COMPOSE %MM-BOUNDARY NAME-REGION
                                        DO-BACKGROUND-BOX FLIP-OK?
                                        VERTICES-SORTED-BY-ANGLE CIRCUMCENTER
                                        FLAT-TRIANGULATE STAR-TRIANGULATE
                                        MAKE-CURVED-SEGMENT ARC
                                        MAKE-PARAMETER-SPACE MAKE-MEAN-POINT
                                        ALL-NAMES UNIFORMIZE-FACTOR-LIST
                                        REPEATED-SQUARING EXPT-MODULO-INTEGER
                                        SUBSTITUTE FUNCT ADD-SUBSCRIPTS
                                        QUOTIENT TIMES MAKE-APP-FUNCTION
                                        ADD-DOMAIN-INTERNAL CANONICALIZE-CLASS
                                        LIST-OPERATIONS GET-DIRECT-SUM ITERATE))
(setf (callers-list 'MAP-WITH-DOMAIN :callers) '(MINUS RECIP ITERATE))
(setf (callers-list 'DOMAIN-ELEMENT-CLASSES :callers) '(ZERO
                                                        MAKE-ELEMENT-FREE-MODULE-VECTOR
                                                        WEYL:MAKE-ELEMENT
                                                        MAKE-ELEMENT ITERATE))
(setf (callers-list 'ADD-DOMAIN :callers) '(GET-POLYNOMIAL-RING
                                            GET-FINITE-FIELD MAKE-FINITE-FIELD
                                            GET-TPOWER-SERIES-DOMAIN
                                            GET-DIRECT-SUM MAKE-DIRECT-SUM))
(setf (callers-list 'FALSE :callers) '(MAKE-FINITE-FIELD MAKE-DIRECT-SUM))
(setf (callers-list 'MAKE-DIRECT-SUM* :callers) '(GET-DIRECT-SUM
                                                  MAKE-DIRECT-SUM))
(setf (callers-list 'FLET :callers) '(CLIST-DIFFERENCE CLIST-PLUS SPMOD-GCD3
                                      NEW-BASIS REDUCE-BASIS
                                      (SETF GREATER-FUNCTION) PRINT-OBJECT
                                      DELETE DEFINE-MATH-OPERATOR-ACCESSORS
                                      FIND-COMMON-DOMAINS REACHABLE-DOMAINS
                                      SMITH-ARRAY INDEPENDENT-COLS
                                      INDEPENDENT-ROWS DETERMINANT*
                                      INVERT-ARRAY SIMPLE-INTEGER-FACTOR
                                      EXPAND-PRODUCT1 MERGE-BOUND-VARS COERCE
                                      APPLY CHECK-CACHED-VECTOR
                                      %MAKE-DIRECT-SUM-INTERNAL))
(setf (callers-list 'DIMENSION-OF :callers) '(IMAGPART REALPART CONJUGATE
                                                       SUBSTITUTE DERIV
                                                       DERIVATION TILDE
                                                       CROSS-PRODUCT
                                                       MULTIPLY-VECTOR-BY-SCALAR
                                                       MINUS LIST-OF-VARIABLES
                                                       ZERO 0?
                                                       PRINT-FREE-MODULE-ELEMENT
                                                       WEYL:MAKE-ELEMENT
                                                       MAKE-ELEMENT-FREE-MODULE-VECTOR
                                                       FREE-MODULE-PRINT-OBJECT
                                                       CREATE-UNIT-QUATERNION
                                                       MAKE-AFFINE-SPACE
                                                       MAKE-ELEMENT
                                                       PROJECTIVE-SPACE-PRINT-OBJECT
                                                       DIMENSIONS BOUNDARY
                                                       COERCE COBOUNDARY-DOMAIN
                                                       BOUNDARY-DOMAIN
                                                       COCHAIN-MODULE-PRINT-OBJECT
                                                       CHAIN-MODULE-PRINT-OBJECT
                                                       MAX-DIMENSION-OF
                                                       %MAP-OVER-CELLS FACETS
                                                       MAKE-POINT
                                                       EUCLIDEAN-SPACE-PRINT-OBJECT
                                                       WRITE-VERTEX-SET FWRITE
                                                       READ-POINT
                                                       INSERT-BOUNDARY
                                                       DIMENSION-OF PLACE
                                                       INSERT MEASURE
                                                       COORDINATE-LIST
                                                       COMPLEXER %SET-NAME NAME
                                                       SO-N-PRINT-OBJECT
                                                       O-N-PRINT-OBJECT
                                                       SL-N-PRINT-OBJECT
                                                       PSL-N-PRINT-OBJECT
                                                       ONE-MATRIX
                                                       MATRIX-DIMENSIONS
                                                       GL-N-PRINT-OBJECT
                                                       FME-MATRIX-TIMES
                                                       MATRIX-FME-TIMES
                                                       GET-DIRECT-SUM
                                                       DOMAIN-LIST))
(setf (callers-list 'REF :callers) '(TILDE LIST-OF-VARIABLES 0?
                                     PRINT-FREE-MODULE-ELEMENT COERCE
                                     CREATE-UNIT-QUATERNION PROJECT REVERSION
                                     MAP-WITH-DOMAIN MAP FWRITE
                                     MAKE-CURVED-SEGMENT ARC BEND
                                     COORDINATE-LIST COMPLEXER FME-MATRIX-TIMES
                                     MATRIX-FME-TIMES GET-DIRECT-SUM
                                     DOMAIN-LIST))
(setf (callers-list 'TYPE :callers) '(MAP-WITH-DOMAIN MAP MAKE-MESH DOMAIN-LIST))
(setf (callers-list 'NCONC :callers) '(ADD-NEW-VARIABLE ADD-VARIABLE-DEGREE
                                       POLY-FIND-COMMON-VARS
                                       WEYLI::CIRCULAR-LIST NEWPRIME
                                       DOMAIN-LIST))
(setf (callers-list 'DOMAIN-LIST :callers) '(DOMAIN-LIST))
(setf (callers-list 'MAP :callers) '(COERCE MAP-TPOWER-SERIES
                                            MAKE-TPOWER-SERIES WEYLI:MAP
                                            IMAGPART REALPART CONJUGATE
                                            QUOTIENT TIMES MINUS ZERO ONE))
(setf (callers-list '0? :callers) '(PRINT-FREE-MODULE-ELEMENT
                                    CLIST-FACTOR-SQUAREFREE ZIPPER-SUM
                                    CLIST-SIMPLIFY COERCE NON-ZERO-RANDOM
                                    DEGREE-PARTITION POLY-SPLIT-ON-VARS
                                    POLY-QUOTIENT* TERMS-S-POLY GTERMS-TIMES
                                    GTERMS-MON-TIMES COLLECT-OLD-TERM BINARY=
                                    SCAN-POLY-FORM MAKE-EPOLYNOMIAL RECIP 1?
                                    WEYL:MAKE-ELEMENT PRINT-OBJECT PLUS?
                                    BF-ATAN BF-TAN BF-SIN BF-COS BF-EXP BF-SQRT
                                    EXPT PRINT-TERM TRIM-ZEROES DERIV
                                    CHAIN-TERMS-TIMES FREE-GROUP-SCALAR-TIMES
                                    FREE-GROUP-DIFFERENCE FREE-GROUP-PLUS
                                    MAKE-CHAIN-OR-COCHAIN QUOTIENT-REDUCE*
                                    POINT-VS-TRIANGLE SPARSE-DET FIND-PIVOT
                                    SUBTRACT-ROWS FIND-PIVOT-UNORDERED SIMPLIFY
                                    LOOP-OVER-TERMS SAFE-DISPLAY ZEROP
                                    MAKE-ELEMENT 0?))
(setf (callers-list 'RECIP :callers) '(TERMS-MONICIZE EXPT
                                       USE-CHINESE-REMAINDER REVERSION
                                       MAKE-RATIONAL-FUNCTION* COERCE
                                       LTH-LOCAL-TERM FIND-PIVOT RECIP))
(setf (callers-list '1? :callers) '(CLIST-PRIMITIVE-PART! DEGREE-PARTITION
                                    GTERMS-PRIM* EXPT MULTIPLICATIVE-ORDER
                                    MODIFY-BRANCH-ORDER PRINT-EXPONENT
                                    PRINT-TERM PARTIAL-DERIV QUOTIENT-REDUCE*
                                    PRINT-OBJECT COERCE SUBTRACT-ROWS
                                    FERMAT-INTEGER-FACTOR SIMPLIFY
                                    LOOP-OVER-TERMS 1?))
(setf (callers-list 'MINUS :callers) '(CLIST-MINUS POLY-MINUS PRINT-TERM
                                       BOUNDARY CANONICAL EXPT-QUOTIENT RECIP
                                       QUOTIENT-REDUCE* WHAT-IS-THE-LTHTERM2
                                       EXCHANGE-ROWS PRINT-OBJECT MINUS))
(setf (callers-list 'PROPERTY-LIST-OF :callers) '(PUTF GETF))
(setf (callers-list 'CLASS-NAME :callers) '(PARSE-NUMERIC-OBJ GET-FINITE-FIELD
                                            BIGFLOATP INITIALIZE-INSTANCE
                                            PRINT-OBJECT REQUIRED-OPERATIONS
                                            DESCRIBE-OPERATIONS
                                            OPERATION-VALUES
                                            OPERATION-ARGUMENTS
                                            DOMAIN-PRINT-OBJECT))
(setf (callers-list 'CLASS-OF :callers) '(PARSE-NUMERIC-OBJ GET-FINITE-FIELD
                                          BIGFLOATP INTERSECTION UNION MAP
                                          INITIALIZE-INSTANCE REMOVE-VERTEX
                                          FORCE-EDGE SPLIT PRINT-OBJECT
                                          SUBSTITUTE REQUIRED-OPERATIONS
                                          DESCRIBE-OPERATIONS OPERATION-VALUES
                                          OPERATION-ARGUMENTS
                                          DOMAIN-PRINT-OBJECT))
(setf (callers-list 'PRINT-FUNCTION :callers) '(PRINT-OBJECT))
(setf (callers-list '(OPERATION . ARGUMENTS) :callers) '(PARSE-OPERATION-LIST))
(setf (callers-list 'CDDDR :callers) '(PARSE-OPERATION-LIST))
(setf (callers-list 'GETHASH :callers) '(COBOUNDARY BOUNDARY %DELETE %INSERT
                                         COFACETS FACETS MEMBER GET-CELL
                                         DELETE-PROPERTY TEST-PROPERTY
                                         ASSERT-PROPERTY COMPOSE FWRITE
                                         WRITE-VERTEX-SET
                                         READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                         READ-SIMPLICIAL-COMPLEX
                                         READ-VERTEX-SET %SET-NAME NAME
                                         GET-MEMOIZATION SET-MEMOIZATION
                                         OPERATION-VALUES OPERATION-ARGUMENTS
                                         PARSE-OPERATION-LIST))
(setf (callers-list 'PARSE-OPERATIONS :callers) '(INITIALIZE-INSTANCE))
(setf (callers-list 'MAPHASH :callers) '(COBOUNDARY BOUNDARY %MAP-OVER-CELLS
                                         %MAP-OVER-PROPERTIES ALL-NAMES
                                         CANONICALIZE-CLASS LIST-OPERATIONS))
(setf (callers-list 'SUBST :callers) '(SPLIT OPERATION-VALUES
                                       OPERATION-ARGUMENTS))
(setf (callers-list 'GET :callers) '(SAVE!CONST GET!CONST RECUR
                                     REQUIRED-OPERATIONS DESCRIBE-OPERATIONS))
(setf (callers-list 'EQUAL :callers) '(POLY-FIND-COMMON-VARS 1? 0? BF-TAN
                                       BF-SIN BF-COS GET!CONST ROUND!EP
                                       ROUND!MT COERCE GET-TPOWER-SERIES-DOMAIN
                                       BINARY= WEYLI::%COPY-ARRAY-CONTENTS*
                                       ADD-FUNCTION-TO-DOMAIN ADD-SUBSCRIPTS
                                       MAKE-GE-VARIABLE CANONICALIZE-CLASS))
(setf (callers-list 'MAPCAR :callers) '(SQUARE-FREE CLIST-FACTOR CFACTOR FACTOR
                                        PSKELETON INTERPOLATE
                                        PARSE-LINEAR-EQUATION GET-CELL CELL-ID
                                        GET-DEFAULT-TAYLOR-EXPANSION
                                        MAKE-PREDICATE %MM-BOUNDARY NAME-REGION
                                        BUILD-CDT-FROM-BOUNDARIES
                                        DO-BACKGROUND-BOX FLIP-OK?
                                        VERTICES-SORTED-BY-ANGLE CIRCUMCENTER
                                        FLAT-TRIANGULATE STAR-TRIANGULATE
                                        BOUNDING-BOX MAKE-PARAMETER-SPACE
                                        MAKE-MEAN-POINT SUBSTITUTE COERCE-OBJ
                                        SIMPLIFY FUNCT MAKE-SAMPLED-FUNCTION-1
                                        MAKE-APP-FUNCTION CANONICALIZE-CLASS))
(setf (callers-list 'CANONICALIZE-CLASS :callers) '(CANONICALIZE-CLASS))
(setf (callers-list 'FRESH-LINE :callers) '(CANONICALIZE-CLASS))
(setf (callers-list 'REVERSE :callers) '(CLIST-SQFR-DECOMPOSE MAKE-UPOLYNOMIAL
                                         DENSE-INTERPOLATE-COEFFICIENTS
                                         CHECK-DEGREE SPARSEINTERPSTAGEI
                                         PARSE-LINEAR-EQUATION
                                         POLY-FIND-COMMON-VARS
                                         POLY-SPLIT-ON-VARS GET-COMPARISON-FUN
                                         SCAN-POLY-FORM BFPRIN1
                                         DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                         BUILD-CDT-FROM-BOUNDARIES FORCE-EDGE
                                         FLIP-OK? MAKE-APP-FUNCTION RECUR))
(setf (callers-list 'RECUR :callers) '(RECUR))
(setf (callers-list 'DOMAIN-MORPHISMS-FROM :callers) '(NEXT-DOMAINS
                                                       GET-EMBEDDABLE-DOMAINS
                                                       MAKE-HOMOMORPHISM
                                                       DELETE-MORPHISM
                                                       MAKE-MORPHISM
                                                       GET-MORPHISMS-FROM
                                                       RESET-DOMAINS))
(setf (callers-list 'DOMAIN-MORPHISMS-TO :callers) '(MAKE-HOMOMORPHISM
                                                     DELETE-MORPHISM
                                                     MAKE-MORPHISM
                                                     GET-MORPHISMS-TO
                                                     RESET-DOMAINS))
(setf (callers-list 'FIND :callers) '(SUBSTITUTE REMOVE-VERTEX NEIGHBOR
                                                 ADD-DOMAIN-INTERNAL))
(setf (callers-list 'PARSE-ARGS :callers) '(PARSE-ARGS))
(setf (callers-list 'GE-FOURIER :callers) '(FOURIER GE-FOURIER MAKE-GE-FOURIER))
(setf (callers-list 'ARGUMENT-OF :callers) '(GE-GREAT GE-EQUAL PRINT-OBJECT))
(setf (callers-list 'SPACE-VAR-OF :callers) '(GE-GREAT GE-EQUAL PRINT-OBJECT))
(setf (callers-list 'FREQ-VAR-OF :callers) '(GE-GREAT GE-EQUAL PRINT-OBJECT))
(setf (callers-list 'GE-GREAT :callers) '(GE-LGREAT GE-GREAT))
(setf (callers-list 'MAKE-GE-FOURIER :callers) '(GE-FOURIER))
(setf (callers-list 'DEPENDS-ON? :callers) '(DERIV DEPENDS-ON? GE-FOURIER))
(setf (callers-list 'SIMPLIFY :callers) '(COERCE MERGE-NEW-BV MAKE-UNION RECIP
                                                 MINUS EQN>= EQN> EQN=
                                                 LOOP-OVER-TERMS SIMPLIFY
                                                 CHECK-DOMAIN GE-FOURIER))
(setf (callers-list 'MAKE-GE-PLUS :callers) '(TRANSFORM LOOP-OVER-TERMS
                                              COERCE-OBJ GE-FOURIER))
(setf (callers-list 'TERMS-OF :callers) '(COERCE TAYLOR1 EXPAND EXPAND-PRODUCT
                                                 EXPAND-PLUS SUBSTITUTE
                                                 DIFFERENT-KERNELS DEPENDS-ON?
                                                 GE-EQUAL SIMPLIFY PRINT-OBJECT
                                                 LOOP-OVER-TERMS GE-MINUS?
                                                 GE-GREAT GE-FOURIER))
(setf (callers-list 'MAKE-GE-TIMES :callers) '(TRANSFORM COERCE MINUS
                                               LOOP-OVER-TERMS COERCE-OBJ
                                               GE-FOURIER))
(setf (callers-list 'SV :callers) '(FOURIER))
(setf (callers-list 'GE-IFOURIER :callers) '(MAKE-GE-IFOURIER))
(setf (callers-list 'SUBSTITUTE :callers) '(SIGN-OF-PERMUTATION TAYLOR1
                                            EVALUATE-MATRIX WEYLI:SUBSTITUTE
                                            SUBSTITUTE CANONICALIZE-FUNCTIONS
                                            APPLY MAKE-APP-FUNCTION))
(setf (callers-list 'EXPAND :callers) '(EXPAND EXPAND-OTHER MAKE-APP-FUNCTION))
(setf (callers-list 'ARGS-OF :callers) '(TAYLOR1 SUBSTITUTE DEPENDS-ON?
                                         GE-EQUAL SIMPLIFY PRINT-OBJECT
                                         MAKE-APP-FUNCTION))
(setf (callers-list 'FUNCT-OF :callers) '(TAYLOR1 SUBSTITUTE DEPENDS-ON?
                                          GE-EQUAL SIMPLIFY PRINT-OBJECT
                                          MAKE-APP-FUNCTION))
(setf (callers-list 'APPLICABLE-FUNCTION :callers) '(MAKE-APP-FUNCTION))
(setf (callers-list 'BOUND-VARS-OF :callers) '(SIMPLIFY MERGE-NEW-BV
                                               UQ-SET-PRINT-OBJECT DERIV EXPT
                                               RECIP MINUS
                                               CANONICALIZE-FUNCTIONS APPLY
                                               PRINT-OBJECT))
(setf (callers-list 'BODY-OF :callers) '(DERIV EXPT RECIP MINUS 1? 0?
                                         CANONICALIZE-FUNCTIONS APPLY
                                         PRINT-OBJECT))
(setf (callers-list 'ACCUM-APPLY-ARGS :callers) '(CHECK-DOMAIN APPLY))
(setf (callers-list 'NARGS-OF :callers) '(PRINT-OBJECT MAKE-FUNCTION-INTEGRATE
                                                       MAKE-FUNCTION-DERIV
                                                       SEARCH-FOR-FUNCTION
                                                       DERIV
                                                       CANONICALIZE-FUNCTIONS
                                                       APPLY))
(setf (callers-list 'MAKE-APP-FUNCTION :callers) '(DERIV EXPT RECIP MINUS))
(setf (callers-list 'X :callers) '(ASSOCIATE-PREDICATE EXPT RECIP MINUS))
(setf (callers-list 'EXPT :callers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES CFACTOR
                                      EVAL-MONOMIAL CHECK-DEGREE INITY
                                      SPARSEINTERPSTAGEI MAKE-DEGREE-MATRIX
                                      EXPT-LIST POLY-FACTOR-CBOUND POLY-EXPT
                                      TRANSFORM-TERM GET-FINITE-FIELD RECIP
                                      MULTIPLICATIVE-ORDER NUMBER-OF-ELEMENTS
                                      BF-E BF-PI-MACHIN BF-INTEGER-PART
                                      CONVERT-TO-BIGFLOAT READ!NUM READ!LNUM
                                      INCPREC! DECPREC! QUOTIENT TAYLOR1 COERCE
                                      RATIONAL-TERMS-HORNERS-RULE EXPT-QUOTIENT
                                      LTH-LOCAL-TERM LOCALIZE-FORM*
                                      WHAT-IS-THE-LTHTERM2 WHAT-IS-THE-LTHTERM
                                      HADAMARD-BOUND TOTIENT ALL-DIVISORS
                                      INTEGER-NTH-ROOT EXPAND
                                      EXPAND-BINOMIAL-FORM SUBSTITUTE SIMPLIFY
                                      EXPT))
(setf (callers-list 'APPLY :callers) '(TIMES PLUS MAKE-TPOWER-SERIES FACETS
                                       MAKE-POINT TAYLOR1 FWRITE
                                       READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                       READ-SIMPLICIAL-COMPLEX READ-POINT
                                       BUILD-CDT-FROM-BOUNDARIES
                                       DO-BACKGROUND-BOX TOO-BIG? FLIP-OK?
                                       ANGLE CIRCUMCENTER FLAT-TRIANGULATE
                                       STAR-TRIANGULATE TRIANGULATE-TRIPLES
                                       CCW-SIDE SPLIT MAKE-MEAN-POINT
                                       WEYLI::INTERSECTION WEYLI::UNION
                                       WEYLI::REDUCE WEYLI:MAP WEYLI:SUBSTITUTE
                                       WEYLI:REPLACE WEYLI:MEMBER WEYLI:DELETE
                                       WEYLI::APPLY SUBSTITUTE MAKE-UNION
                                       DEPENDS-ON? SIMPLIFY DERIV))
(setf (callers-list 'ELT :callers) '(COLLECT-OLD-TERM DERIV))
(setf (callers-list 'STRING :callers) '(READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                        MAKE-FUNCTION GET-FUNCTION DEF-GE-1OPER))
(setf (callers-list 'INNER-PRODUCT :callers) '(NORM))
(setf (callers-list 'MAKE-ARRAY :callers) '(IMAGPART REALPART CONJUGATE
                                                     DERIVATION TILDE
                                                     MULTIPLY-VECTOR-BY-SCALAR
                                                     MINUS ZERO
                                                     CLIST-EXTENDED-GCD
                                                     CLIST-TIMES ZIPPER-SUM
                                                     MAKE-UPOLYNOMIAL
                                                     WEYL:MAKE-UPOLYNOMIAL
                                                     SPARSEINTERPSTAGEI
                                                     SOLVE-VANDERMONDETD
                                                     SOLVE-VANDERMONDET
                                                     SOLVE-VANDERMONDE
                                                     MAKE-DEGREE-MATRIX
                                                     ADD-NEW-VARIABLE
                                                     INITIALIZE-INSTANCE
                                                     MAKE-POLYNOMIAL-MORPHISM
                                                     GTERM-LCM GTERM-QUOT
                                                     GTERM-TIMES
                                                     GTERMS-MON-TIMES
                                                     MAKE-ETERM SCAN-POLY-FORM
                                                     MAKE-EPOLYNOMIAL EXPT
                                                     TPS-SPREAD-COEFFS
                                                     TRIM-ZEROES REVERSION
                                                     TPS-DERIV2 TPS-DERIV1
                                                     MAKE-MULTIPOLE-EXPANSION
                                                     SMITH-ARRAY SMITH*
                                                     HERMITE-ARRAY HERMITE*
                                                     SUBDETERMINANT* COERCE
                                                     DETERMINANT JACOBIAN
                                                     SUBSTITUTE INVERT-ARRAY
                                                     RECIP TRANSPOSE
                                                     TIMES-ARRAY DIFFERENCE
                                                     PLUS ONE-MATRIX
                                                     ZERO-MATRIX REF
                                                     MAKE-ELEMENT
                                                     WEYL:MAKE-ELEMENT
                                                     WEYLI::%COPY-ARRAY-CONTENTS*
                                                     INDEF-INTEGRAL DERIV MAP
                                                     POLYNOMIAL-INTERPOLATE
                                                     SMOOTH2 RESAMPLE
                                                     MAKE-SAMPLED-FUNCTION-1
                                                     EQUAL-VECTOR))
(setf (callers-list 'SVREF :callers) '(SUBSTITUTE DERIV DERIVATION
                                                  MULTIPLY-VECTOR-BY-SCALAR
                                                  MINUS ZIPPER-SUM COERCE
                                                  MAKE-UPOLYNOMIAL
                                                  WEYL:MAKE-UPOLYNOMIAL
                                                  GTERMS-PRIM* TERMS-S-POLY
                                                  CONVERT-TERM GTERMS-TIMES
                                                  GTERM-CONSTANT? GTERM-EQUAL
                                                  GTERM-DOMINATES
                                                  GTERM-DISJOINT GTERM-LCM
                                                  GTERM-QUOT GTERM-TIMES
                                                  GTERMS-MON-TIMES GTERMS-MINUS
                                                  COLLECT-OLD-TERM MAKE-ETERM
                                                  PRINT-OBJECT EXPT TRIM-ZEROES
                                                  TPS-DERIV2 TPS-DERIV1
                                                  MAKE-MULTIPOLE-EXPANSION
                                                  SIMPSON EQUAL-VECTOR))
(setf (callers-list 'EQUAL-VECTOR :callers) '(EQUAL-VECTOR))
(setf (callers-list 'ROTATEF :callers) '(POLY-GCD ADD-UNDONE NEAR-BASE
                                         VERTICES-SORTED-BY-ANGLE ARC
                                         EXCHANGE-ROWS EQUAL-VECTOR))
(setf (callers-list 'FUNCTION-X :callers) '(INDEF-INTEGRAL INTEGRAL DERIV MAP
                                            EVALUATE-AT SMOOTH2 RESAMPLE
                                            PRINT-TABLE PRINT-OBJECT))
(setf (callers-list 'SAMPLED-FUNCTION :callers) '(MAKE-SAMPLED-FUNCTION))
(setf (callers-list 'CHECK-CACHED-VECTOR :callers) '(MAKE-SAMPLED-FUNCTION))
(setf (callers-list 'FUNCTION-Y :callers) '(INDEF-INTEGRAL INTEGRAL DERIV MAP
                                            EVALUATE-AT SMOOTH2 PRINT-TABLE))
(setf (callers-list 'LISTP :callers) '(INITIALIZE-INSTANCE
                                       READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                       %MM-BOUNDARY MAKE-MESH PLACE
                                       MAKE-SAMPLED-FUNCTION-1))
(setf (callers-list 'FLOAT :callers) '(RANDOM-FLOATING-NUMBER MAKE-MEAN-POINT
                                       MAKE-SAMPLED-FUNCTION-1))
(setf (callers-list 'MAKE-SAMPLED-FUNCTION :callers) '(INDEF-INTEGRAL DERIV MAP
                                                       SMOOTH2
                                                       MAKE-SAMPLED-FUNCTION-1))
(setf (callers-list 'CANONICALIZE-NUMBER :callers) '(COERCE APPLY-MORPHISM
                                                            MAKE-SAMPLED-FUNCTION-1))
(setf (callers-list 'GET-FUNCTION-SPACE :callers) '(MAKE-SAMPLED-FUNCTION-1))
(setf (callers-list '/ :callers) '(CREATE-UNIT-QUATERNION PROJECT MAKE-ELEMENT
                                   CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                   CLIST-PTH-ROOT CLIST-PRIMITIVE-PART!
                                   CLIST-DIVIDE SOLVE-VANDERMONDETD
                                   TERMS-INTERPOLATE POLY-TRUNCATE2
                                   POLY-QUOTIENT* POLY-EXPT GTERMS-PRIM*
                                   BINARY-LCM SQRT PARSE-NUMERIC-OBJ
                                   CONVERT-TO-LISP-NUMBER
                                   RANDOM-FLOATING-NUMBER RANDOM
                                   MULTIPLICATIVE-ORDER BF-COS BF-EXPT
                                   CONVERT-TO-BIGFLOAT PRECI! EXPT
                                   SET-BRANCH-ORDER PRINT-EXPONENT
                                   SOLVE-FOR-COEFFS TPS-DERIV1 TAYLOR1
                                   TAYLOR-EXP SUBSTITUTE COERCE
                                   QUOTIENT-REDUCE* LOCALIZE-FORM* MEASURE
                                   ANGLE MAKE-MEAN-POINT CIRCLE-CENTER
                                   COMPLEX-CIRCUMCENTER PROCESSI HERMITE-ARRAY
                                   SUBTRACT-ROWS SYM-MOD RECIP SIMPSON DERIV
                                   QUOTIENT POLYNOMIAL-INTERPOLATE RESAMPLE))
(setf (callers-list 'SMOOTH2 :callers) '(RESAMPLE))
(setf (callers-list 'POLYNOMIAL-INTERPOLATE :callers) '(EVALUATE-AT SMOOTH2))
(setf (callers-list 'MIN :callers) '(SPMOD-GCD2 SPMOD-GCD BF-ATAN BF-SIN COERCE
                                     PLUS SPLIT BOUNDING-BOX HADAMARD-BOUND
                                     DEGREE-BOUNDS POLYNOMIAL-INTERPOLATE))
(setf (callers-list 'FLOOR :callers) '(EXTENDED-GCD* FLOOR2 FLOOR1
                                       COMPUTE-RESULT BF-TAN BF-SIN BF-COS
                                       BF-EXP ROUND1 HERMITE-ARRAY SYM-MOD
                                       FASTER-ISQRT POLYNOMIAL-INTERPOLATE))
(setf (callers-list 'DOTIMES :callers) '(SHIFT-L-FORM*
                                         WEYLI::%COPY-ARRAY-CONTENTS* MAP))
(setf (callers-list 'OPER :callers) '(MAP))
(setf (callers-list 'CONJUGATE :callers) '(MEASURE CIRCLE-CENTER CONJUGATE))
(setf (callers-list 'REALPART :callers) '(PRINT-TERM RECIP 1? 0?
                                          CANONICALIZE-NUMBER CIRCUMCENTER ARC
                                          ANGLE CIRCLE-CENTER
                                          COMPLEX-CIRCUMCENTER SAFE-DISPLAY
                                          COERCE MAKE-ELEMENT REALPART))
(setf (callers-list 'IMAGPART :callers) '(PRINT-TERM RECIP 1? 0?
                                          CANONICALIZE-NUMBER CIRCUMCENTER ARC
                                          MEASURE COMPLEX-CIRCUMCENTER COERCE
                                          MAKE-ELEMENT IMAGPART))
(setf (callers-list 'DERIV-2POINT :callers) '(DERIV))
(setf (callers-list 'DO :callers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                    CLIST-FACTOR-SQUAREFREE CLIST-PTH-ROOT
                                    CLIST-DERIV CLIST-GCD CLIST-DIVIDE
                                    CLIST-TIMES CLIST-MINUS TERMS-GCDU
                                    TERMS-INTERPOLATE POLY-C-COEFFICIENT
                                    POLY-COEFFICIENT POLY-DEGREE
                                    POLY-VARIABLE-LIST TERMS-SUBRESULTANT-GCD
                                    TERMS-REDUCED-GCD TERMS-PRIMITIVE-GCD
                                    TERMS-EUCLIDEAN-GCD TERMS-CONTENT
                                    TERMS-PSEUDO-REMAINDER TERMS-QUOTIENT
                                    POLY-EXPT TERMS-TERM
                                    ACCUMULATE-ACCUMULATION-LIST MAKE-ETERM
                                    MULTIPLICATIVE-ORDER LTH-LOCAL-TERM
                                    REST-OF-LOCAL LOCALIZE-FORM*
                                    WHAT-IS-THE-LTHTERM2 WHAT-IS-THE-LTHTERM
                                    SHIFT-M-FORM* TOTIENT NEWPRIME
                                    INDEF-INTEGRAL INTEGRAL DERIV))
(setf (callers-list 'INDEF-INTEGRAL :callers) '(INTEGRAL))
(setf (callers-list '>= :callers) '(ZIPPER-SUM BINARY>= BF-BINARY>=
                                    TRUNCATE-ORDER PRINT-TERM SUBSTITUTE
                                    READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                    READ-SIMPLICIAL-COMPLEX PROCESSI
                                    INDEF-INTEGRAL INTEGRAL))
(setf (callers-list '<= :callers) '(DELAUNAY? INTEGRAL))
(setf (callers-list 'TRAPEZOIDAL :callers) '(INDEF-INTEGRAL INTEGRAL))
(setf (callers-list 'SIMPSON :callers) '(INDEF-INTEGRAL))
(setf (callers-list 'RATIONAL-NUMBER :callers) '(ABS WEYL:MAKE-ELEMENT
                                                     CANONICALIZE-NUMBER COERCE
                                                     MAKE-ELEMENT
                                                     MAKE-QUOTIENT-ELEMENT))
(setf (callers-list 'RATIONAL-INTEGER :callers) '(MAKE-QUOTIENT-ELEMENT
                                                  WEYL:MAKE-ELEMENT
                                                  MAKE-ELEMENT))
(setf (callers-list 'NUMBER? :callers) '(PRINT-FORM COERCE SIMPLIFY
                                         PRINT-OBJECT LOOP-OVER-TERMS GE-MINUS?
                                         SAFE-DISPLAY MAKE-ELEMENT))
(setf (callers-list 'COMPLEX-NUMBER :callers) '(RANDOM CONJUGATE
                                                       WEYL:MAKE-ELEMENT COERCE
                                                       MAKE-ELEMENT))
(setf (callers-list 'NUMERATOR :callers) '(WEYL:MAKE-ELEMENT EXPT
                                                             SOLVE-FOR-COEFFS
                                                             TAYLOR1 SUBSTITUTE
                                                             MINUS HEIGHT
                                                             PRINT-OBJECT
                                                             COERCE
                                                             CANONICALIZE-NUMBER
                                                             MAKE-ELEMENT))
(setf (callers-list 'DENOMINATOR :callers) '(WEYL:MAKE-ELEMENT EXPT TAYLOR1
                                                               HEIGHT COERCE
                                                               CANONICALIZE-NUMBER
                                                               MAKE-ELEMENT))
(setf (callers-list 'FLOATING-POINT-NUMBER :callers) '(WEYL:MAKE-ELEMENT
                                                       CANONICALIZE-NUMBER
                                                       MAKE-ELEMENT))
(setf (callers-list 'INTEGER-VALUE :callers) '(ODDP? EVEN? SQRT RECIP PLUS?
                                               MINUS? MINUS 1? 0?
                                               PARSE-NUMERIC-OBJ
                                               CONVERT-TO-LISP-NUMBER HEIGHT
                                               ABS PRINT-OBJECT MAKE-GFM-DOMAIN
                                               MAKE-GFP-DOMAIN
                                               CONVERT-TO-BIGFLOAT TAYLOR1 EXPT
                                               IN-BOUND? CANONICALIZE-NUMBER
                                               SMITH* HERMITE* EXPAND COERCE))
(setf (callers-list 'QO-NUMERATOR :callers) '(ROUND1 CEILING1 FLOOR1 TRUNCATE1
                                              EXPT SQRT PLUS? MINUS
                                              PARSE-NUMERIC-OBJ
                                              CONVERT-TO-LISP-NUMBER HEIGHT ABS
                                              CONVERT-TO-BIGFLOAT 1? 0? MINUS?
                                              NUMERATOR CANONICALIZE-NUMBER
                                              COERCE))
(setf (callers-list 'QO-DENOMINATOR :callers) '(ROUND1 CEILING1 FLOOR1
                                                TRUNCATE1 EXPT SQRT MINUS
                                                PARSE-NUMERIC-OBJ
                                                CONVERT-TO-LISP-NUMBER HEIGHT
                                                ABS CONVERT-TO-BIGFLOAT 1?
                                                DENOMINATOR CANONICALIZE-NUMBER
                                                COERCE))
(setf (callers-list 'FP-VALUE :callers) '(LOG EXP ATANH ACOSH ASINH TANH COSH
                                              SINH ACOS ASIN TAN COS SIN ROUND1
                                              CEILING1 FLOOR1 TRUNCATE1 EXPT
                                              SQRT RECIP PLUS? MINUS? MINUS 1?
                                              0? CONVERT-TO-LISP-NUMBER HEIGHT
                                              ABS PRINT-OBJECT
                                              CONVERT-TO-BIGFLOAT IN-BOUND?
                                              CANONICALIZE-NUMBER COERCE))
(setf (callers-list 'MAKE-BIGFLOAT :callers) '(EXPT IMAGPART REALPART BF-ACOS
                                                    BF-ASIN BF-ATAN BF-SIN
                                                    BF-COS BF-LOG BF-EXP BF-E
                                                    BF-PI BF-PI-AGM BF-SQRT
                                                    BF-PI-MACHIN BF-FLOOR
                                                    BF-EXPT BF-QUOTIENT
                                                    BF-TIMES BF-DIFFERENCE
                                                    BF-PLUS BF-MINUS BF-ABS
                                                    CONVERT-TO-BIGFLOAT
                                                    READ!NUM READ!LNUM
                                                    ROUND!LAST INCPREC!
                                                    DECPREC!
                                                    CANONICALIZE-NUMBER COERCE))
(setf (callers-list 'BIGFLOAT-MANTISSA :callers) '(PLUS? MINUS? 1? 0? IMAGPART
                                                   REALPART BF-SQRT BF-BINARY>
                                                   BF-BINARY>= BF-BINARY=
                                                   BF-FLOOR BF-QUOTIENT
                                                   BF-TIMES BF-DIFFERENCE
                                                   BF-PLUS BF-MINUS BF-ABS
                                                   ROUND!LAST ORDER! PRECI!
                                                   CANONICALIZE-NUMBER COERCE))
(setf (callers-list 'BIGFLOAT-EXPONENT :callers) '(1? IMAGPART REALPART BF-SQRT
                                                   BF-INTEGERP BF-FLOOR
                                                   BF-QUOTIENT BF-TIMES
                                                   BF-DIFFERENCE BF-PLUS
                                                   BF-MINUS BF-ABS ROUND!EP
                                                   ROUND!LAST ORDER! CUT!EP
                                                   CONV!EP CANONICALIZE-NUMBER
                                                   COERCE))
(setf (callers-list 'CN-REALPART :callers) '(SQRT MINUS HEIGHT PHASE ABS
                                                  CONJUGATE REALPART IN-BOUND?
                                                  CANONICALIZE-NUMBER COERCE))
(setf (callers-list 'CN-IMAGPART :callers) '(SQRT MINUS HEIGHT PHASE ABS
                                                  CONJUGATE IMAGPART IN-BOUND?
                                                  CANONICALIZE-NUMBER COERCE))
(setf (callers-list 'SYMBOL-OF :callers) '(ADD-SUBSCRIPTS PRINT-OBJECT
                                           MAKE-GE-VARIABLE
                                           REPARSE-PRINT-STRING))
(setf (callers-list 'STRING-DOWNCASE :callers) '(MAKE-FUNCTION GET-FUNCTION
                                                 REPARSE-PRINT-STRING))
(setf (callers-list 'STRING-OF :callers) '(GE-GREAT PRINT-OBJECT
                                           REPARSE-PRINT-STRING))
(setf (callers-list 'REPARSE-PRINT-STRING :callers) '(ADD-SUBSCRIPTS
                                                      INITIALIZE-INSTANCE))
(setf (callers-list 'GE-VARIABLES :callers) '(ADD-SUBSCRIPTS MAKE-GE-VARIABLE))
(setf (callers-list 'GE-VARIABLE :callers) '(ADD-SUBSCRIPTS MAKE-GE-VARIABLE))
(setf (callers-list 'MAKE-GE-VARIABLE :callers) '(COERCE))
(setf (callers-list 'COPY-LIST :callers) '(INITIALIZE-INSTANCE CELL-ORDER
                                                               MAKE-SIMPLEX
                                                               BEND MAKE-QUEUE
                                                               DERIV
                                                               MAKE-GE-FUNCT
                                                               MAKE-FUNCTION-DERIV
                                                               ADD-SUBSCRIPTS))
(setf (callers-list 'ADD-SUBSCRIPTS :callers) '(ADD-SUBSCRIPTS))
(setf (callers-list 'STRING-GREATERP :callers) '(GE-GREAT))
(setf (callers-list 'STRING= :callers) '(TAYLOR1 READ-MESH MAKE-MESH-FROM-FILE
                                         %MM-BOUNDARY %MM-GET-POINT MAKE-MESH
                                         SUBSTITUTE SEARCH-FOR-FUNCTION))
(setf (callers-list 'NAME-OF :callers) '(TAYLOR1 SUBSTITUTE DEPENDS-ON?
                                         PRINT-OBJECT MAKE-FUNCTION-INTEGRATE
                                         MAKE-FUNCTION-DERIV
                                         ADD-FUNCTION-TO-DOMAIN
                                         SEARCH-FOR-FUNCTION))
(setf (callers-list 'SEARCH-FOR-FUNCTION :callers) '(MAKE-FUNCTION GET-FUNCTION))
(setf (callers-list 'GE-FUNCTIONS :callers) '(ADD-FUNCTION-TO-DOMAIN
                                              MAKE-FUNCTION GET-FUNCTION))
(setf (callers-list 'GE-FUNCTION :callers) '(MAKE-FUNCTION))
(setf (callers-list 'DERIVS-OF :callers) '(TAYLOR1 SUBSTITUTE PRINT-OBJECT
                                           MAKE-FUNCTION-INTEGRATE
                                           MAKE-FUNCTION-DERIV
                                           ADD-FUNCTION-TO-DOMAIN))
(setf (callers-list 'FUNCTION-CLASS :callers) '(ADD-FUNCTION-TO-DOMAIN))
(setf (callers-list 'MINUS? :callers) '(CLIST-MINUS? POLY-MINUS? PRINT-FORM
                                        PRINT-OBJECT SQRT BF-ACOS BF-ASIN
                                        BF-ATAN BF-TAN BF-SIN BF-COS BF-EXP
                                        PRINT-TERM EXPT-QUOTIENT RECIP
                                        QUOTIENT-REDUCE* MINUS? GE-MINUS?
                                        MINUSP))
(setf (callers-list 'PLUS? :callers) '(COERCE SQRT BF-LOG TRUNCATE2 TRUNCATE1
                                              PRINT-OBJECT PLUSP))
(setf (callers-list 'ADD-FUNCTION-TO-DOMAIN :callers) '(MAKE-FUNCTION-INTEGRATE
                                                        MAKE-FUNCTION-DERIV))
(setf (callers-list 'SORT :callers) '(SPMOD-GCD1 POLY-DEGREE-VECTOR ADD-UNDONE
                                      CONVERT-LIST SCAN-POLY-FORM
                                      MAKE-EPOLYNOMIAL MAKE-CHAIN-OR-COCHAIN
                                      CELL-ORDER GET-CELL REFINE-MESH-PREP
                                      VERTICES-SORTED-BY-ANGLE BEND
                                      ALL-DIVISORS UNIFORMIZE-FACTOR-LIST
                                      MAKE-FUNCTION-DERIV))
(setf (callers-list 'GE-APPLICATION :callers) '(CHECK-DOMAIN MAKE-GE-FUNCT))
(setf (callers-list 'GE-FUNCTION? :callers) '(MAKE-GE-FUNCT))
(setf (callers-list 'MAKE-FUNCTION :callers) '(MAKE-GE-FUNCT))
(setf (callers-list 'CHECK-DOMAIN :callers) '(CHECK-DOMAIN))
(setf (callers-list 'PRINT-OBJECT :callers) '(PRINT-FREE-MODULE-ELEMENT
                                              PRINT-TERM SAFE-DISPLAY
                                              PARENTHESIZED-DISPLAY
                                              PRINT-OBJECT DISPLAY-LIST))
(setf (callers-list 'DECF :callers) '(READ!NUM GROUPED? TRIANGULATE-TRIPLES
                                      PROCESSI HERMITE-ARRAY DISPLAY-LIST))
(setf (callers-list 'WRITE-CHAR :callers) '(PRINT-FREE-MODULE-ELEMENT BFPRIN1
                                            PRINT-OBJECT))
(setf (callers-list 'MAKE-GE-FUNCT :callers) '(SIMPLIFY))
(setf (callers-list 'SIMPLIFIER :callers) '(SIMPLIFY))
(setf (callers-list 'GENERAL-EXPRESSIONS :callers) '(INITIALIZE-CONTEXTS))
(setf (callers-list 'GE-PLUS :callers) '(MAKE-GE-PLUS))
(setf (callers-list 'GE-TIMES :callers) '(MAKE-GE-TIMES))
(setf (callers-list 'GE-EXPT :callers) '(MAKE-GE-EXPT))
(setf (callers-list 'COERCE-OBJ :callers) '(COERCE-OBJ))
(setf (callers-list 'MAKE-GE-EXPT :callers) '(TRANSFORM COERCE RECIP SIMPLIFY
                                              LOOP-OVER-TERMS COERCE-OBJ))
(setf (callers-list 'GE-EXPT? :callers) '(COERCE EXPAND-OTHER SIMPLIFY
                                                 LOOP-OVER-TERMS SAFE-DISPLAY))
(setf (callers-list 'PARENTHESIZED-DISPLAY :callers) '(SAFE-DISPLAY))
(setf (callers-list 'RETURN-FROM :callers) '(CRITERION1 REFINE-MESH INSERT
                                             LOOP-OVER-TERMS GE-LEQUAL))
(setf (callers-list 'GE-LEQUAL :callers) '(GET-POLYNOMIAL-RING GE-EQUAL
                                           GE-LEQUAL))
(setf (callers-list 'REAL? :callers) '(PRINT-FORM PRINT-OBJECT GE-MINUS?))
(setf (callers-list 'GE-TIMES? :callers) '(COERCE EXPAND LOOP-OVER-TERMS
                                                  GE-MINUS?))
(setf (callers-list 'MERGE-TERMS-IN-SUM :callers) '(SIMP-TIMES-TERMS
                                                    SIMP-PLUS-TERMS))
(setf (callers-list 'GE-PLUS? :callers) '(COERCE EXPAND EXPAND-OTHER
                                                 LOOP-OVER-TERMS))
(setf (callers-list 'LOOP-OVER-TERMS :callers) '(LOOP-OVER-TERMS))
(setf (callers-list 'ADD-TERM :callers) '(LOOP-OVER-TERMS))
(setf (callers-list 'C :callers) '(LOOP-OVER-TERMS))
(setf (callers-list 'SIMP-TIMES-TERMS :callers) '(TRANSFORM-TERM EXPAND
                                                  EXPAND-PRODUCT SIMPLIFY
                                                  PRINT-OBJECT LOOP-OVER-TERMS))
(setf (callers-list 'EXPONENT-OF :callers) '(TAYLOR1 COERCE EXPAND SUBSTITUTE
                                             DIFFERENT-KERNELS DEPENDS-ON?
                                             GE-GREAT GE-EQUAL PRINT-OBJECT
                                             SIMPLIFY LOOP-OVER-TERMS))
(setf (callers-list 'BASE-OF :callers) '(TAYLOR1 COERCE EXPAND SUBSTITUTE
                                         DIFFERENT-KERNELS DEPENDS-ON? GE-GREAT
                                         GE-EQUAL PRINT-OBJECT SIMPLIFY
                                         LOOP-OVER-TERMS))
(setf (callers-list 'EXP :callers) '(EXP LOOP-OVER-TERMS))
(setf (callers-list 'GE-MINUS? :callers) '(COERCE PRINT-OBJECT))
(setf (callers-list 'SAFE-DISPLAY :callers) '(PRINT-OBJECT))
(setf (callers-list 'SIMP-PLUS-TERMS :callers) '(TRANSFORM-TERM EXPAND SIMPLIFY))
(setf (callers-list 'GE-LGREAT :callers) '(GE-GREAT))
(setf (callers-list 'GE-CONTEXT :callers) '(SET-VARIABLE-PROPERTY
                                            GET-VARIABLE-PROPERTY))
(setf (callers-list 'PROGN :callers) '(PRINT-FORM PRINT-TERM PRINT-EXPONENT
                                       SET-VARIABLE-PROPERTY
                                       GET-VARIABLE-PROPERTY))
(setf (callers-list 'GET-VARIABLE-PROPERTY :callers) '(DEPENDS-ON?
                                                       DECLARE-DEPENDENCIES))
(setf (callers-list 'GE-DERIV :callers) '(GE-DERIV DERIV))
(setf (callers-list 'NTH :callers) '(INTERPOLATE SPARSEINTERPSTAGEI
                                     TRANSFORM-TERM MAKE-GFP-DOMAIN
                                     SOLVE-FOR-COEFFS TAYLOR1 RANDOM KTHTERM
                                     THE-KTHTERM DERIV))
(setf (callers-list 'MAKE-FUNCTION-DERIV :callers) '(DERIV))
(setf (callers-list 'GE-EQN= :callers) '(MAKE-GE-EQN=))
(setf (callers-list 'LHS-OF :callers) '(SUBSTITUTE DIFFERENT-KERNELS RECIP
                                                   MINUS SIMPLIFY PRINT-OBJECT))
(setf (callers-list 'RHS-OF :callers) '(SUBSTITUTE DIFFERENT-KERNELS RECIP
                                                   MINUS SIMPLIFY PRINT-OBJECT))
(setf (callers-list 'MAKE-GE-EQN= :callers) '(RECIP MINUS SIMPLIFY EQN=))
(setf (callers-list 'GE-EQN> :callers) '(MAKE-GE-EQN>))
(setf (callers-list 'MAKE-GE-EQN> :callers) '(SIMPLIFY EQN>))
(setf (callers-list 'GE-EQN>= :callers) '(MAKE-GE-EQN>=))
(setf (callers-list 'MAKE-GE-EQN>= :callers) '(SIMPLIFY EQN>=))
(setf (callers-list 'MAKE-UNION :callers) '(MAKE-UNION))
(setf (callers-list 'UNIVERSAL-QUANTIFIED-SET :callers) '(MAKE-UNIVERSAL-QUANTIFIED-SET))
(setf (callers-list 'EXPRS-OF :callers) '(SIMPLIFY MERGE-NEW-BV
                                          UQ-SET-PRINT-OBJECT))
(setf (callers-list 'DOLIST :callers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                        MAKE-UNION))
(setf (callers-list 'EQ :callers) '(ACCUMULATE-ACCUMULATION-LIST
                                    INSERT-INTO-ACCUMULATION-LIST ADD-UNDONE
                                    BINARY-LCM BINARY-GCD QUOTIENT
                                    MAKE-CHAIN-OR-COCHAIN SHIFT-M-FORM* KTHTERM
                                    ONE-MATRIX FASTER-ISQRT MAKE-UNION))
(setf (callers-list 'MAKE-UNIVERSAL-QUANTIFIED-SET :callers) '(SIMPLIFY
                                                               MAKE-UNION))
(setf (callers-list 'V :callers) '(MAKE-POLYNOMIAL-MORPHISM MERGE-NEW-BV))
(setf (callers-list 'VAR :callers) '(LOOP-VECTOR-BIND VARIABLE-INDEX
                                     WITH-TPOWER-SERIES MERGE-NEW-BV))
(setf (callers-list 'MERGE-NEW-BV :callers) '(MERGE-NEW-BV))
(setf (callers-list 'MERGE-BOUND-VARS :callers) '(SIMPLIFY))
(setf (callers-list 'DIFFERENT-KERNELS :callers) '(ADD-NEW-VARIABLE
                                                   GET-POLYNOMIAL-RING DERIV
                                                   DIFFERENT-KERNELS))
(setf (callers-list '%PLUS :callers) '(MAKE-MEAN-POINT SUBSTITUTE))
(setf (callers-list '%TIMES :callers) '(SUBSTITUTE))
(setf (callers-list 'EXPAND-PRODUCT1 :callers) '(EXPAND-PRODUCT EXPAND-OTHER
                                                 EXPAND-PLUS))
(setf (callers-list 'EXPAND-PLUS :callers) '(EXPAND-OTHER))
(setf (callers-list 'EXPAND-OTHER :callers) '(EXPAND-OTHER))
(setf (callers-list 'EXPAND-PRODUCT :callers) '(EXPAND))
(setf (callers-list 'COMBINATIONS :callers) '(BOUND-DEGREE-TERM-COUNT
                                              LTH-LOCAL-TERM
                                              WHAT-IS-THE-LTHTERM2
                                              WHAT-IS-THE-LTHTERM
                                              EXPAND-BINOMIAL-FORM))
(setf (callers-list 'EXPAND-BINOMIAL-FORM :callers) '(EXPAND
                                                      EXPAND-BINOMIAL-FORM))
(setf (callers-list 'FACT :callers) '(FACT))
(setf (callers-list 'ASH :callers) '(EXPT MAKE-ELEMENT MAKE-GFP-DOMAIN PRECI!
                                          INTEGER-NTH-ROOT FASTER-ISQRT))
(setf (callers-list 'INTEGER-LENGTH :callers) '(READ!LNUM PRECI!
                                                INTEGER-NTH-ROOT FASTER-ISQRT))
(setf (callers-list 'FASTER-ISQRT :callers) '(SQRT FASTER-ISQRT))
(setf (callers-list 'LOGBITP :callers) '(FASTER-ISQRT))
(setf (callers-list 'TRUNCATE :callers) '(BOUND-DEGREE-TERM-COUNT
                                          POLY-QUOTIENT* TRUNCATE2 TRUNCATE1
                                          COMPUTE-INVERSE BF-LOG BF-E BF-SQRT
                                          BF-PI-MACHIN BF-FLOOR BF-QUOTIENT
                                          ROUND!LAST CONVERT-NUMBER->CHARACTERS
                                          DECPREC! REPEATED-SQUARING
                                          INTEGER-NTH-ROOT))
(setf (callers-list 'ROUND :callers) '(ROUND2 ROUND1 INTEGER-NTH-ROOT))
(setf (callers-list 'ODDP :callers) '(EXPT REPEATED-SQUARING INTEGER-NTH-ROOT))
(setf (callers-list 'INTEGER-NTH-ROOT :callers) '(BOUND-DEGREE-TERM-COUNT EXPT
                                                  INTEGER-NTH-ROOT))
(setf (callers-list 'REM :callers) '(REMAINDER BF-ATAN BF-TAN BF-SIN BF-COS
                                     BF-LOG BF-EXP BF-SQRT ROUND!LAST
                                     SET-BRANCH-ORDER PROCESSI
                                     REDUCE-MODULO-INTEGER))
(setf (callers-list 'REDUCE-MODULO-INTEGER :callers) '(TIMES DIFFERENCE PLUS
                                                       RECIP MAKE-ELEMENT
                                                       FIND-PIVOT
                                                       EXPT-MODULO-INTEGER))
(setf (callers-list 'EXPT-MODULO-INTEGER :callers) '(MULTIPLICATIVE-ORDER EXPT
                                                     PRIME?))
(setf (callers-list 'CDR :callers) '(SQUARE-FREE CLIST-FACTOR CFACTOR FACTOR
                                     TERMS-INTERPOLATE ADD-VARIABLE-DEGREE
                                     POLY-EXPT ACCUMULATE-ACCUMULATION-LIST
                                     INSERT-INTO-ACCUMULATION-LIST
                                     USE-CHINESE-REMAINDER GET!CONST COERCE
                                     BOUNDARY MAKE-CHAIN-OR-COCHAIN CANONICAL
                                     NEWPRIME PRIME?))
(setf (callers-list 'FACTOR :callers) '(CFACTOR GET-FINITE-FIELD
                                        MAKE-FINITE-FIELD* MULTIPLICATIVE-ORDER
                                        TOTIENT FERMAT-INTEGER-FACTOR
                                        ALL-DIVISORS PRIME?))
(setf (callers-list 'CDAR :callers) '(MULTIPLICATIVE-ORDER TOTIENT PRIME?))
(setf (callers-list 'EVENP :callers) '(ODDP? EVEN? EXPT FIND-SMALLER-PRIME))
(setf (callers-list 'PRIME? :callers) '(GET-FINITE-FIELD MAKE-FINITE-FIELD*
                                        FIND-SMALLER-PRIME))
(setf (callers-list 'FIND-SMALLER-PRIME :callers) '(CHOICE-PRIMES NEWPRIME))
(setf (callers-list 'CAR :callers) '(SQUARE-FREE CLIST-FACTOR CFACTOR FACTOR
                                     MAKE-UPOLYNOMIAL TERMS-INTERPOLATE
                                     ADD-VARIABLE-DEGREE POLY-EXPT
                                     ACCUMULATE-ACCUMULATION-LIST
                                     INSERT-INTO-ACCUMULATION-LIST
                                     USE-CHINESE-REMAINDER GET!CONST COERCE
                                     BOUNDARY MAKE-CHAIN-OR-COCHAIN TAYLOR1
                                     %MAP-OVER-PROPERTIES CHOICE-PRIMES
                                     NEWPRIME))
(setf (callers-list 'CHOICE-PRIMES :callers) '(SPARSEINTERPSTAGEI
                                               SUBDETERMINANT* DETERMINANT*
                                               CHOICE-PRIMES))
(setf (callers-list 'CEILING :callers) '(CEILING2 CEILING1 READ!LNUM PRECI!
                                         TAYLOR1 CHOICE-PRIMES))
(setf (callers-list 'NEWPRIME :callers) '(SPMOD-GCD CHOICE-PRIMES))
(setf (callers-list 'MOD :callers) '(EXTENDED-GCD* HERMITE-ARRAY SYM-MOD))
(setf (callers-list 'INCF :callers) '(LOOP-VECTOR-BIND BF-E INITIALIZE-INSTANCE
                                      GROUPED? TRIM-ZEROES FWRITE
                                      WRITE-VERTEX-SET
                                      READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                      READ-SIMPLICIAL-COMPLEX PROCESSI
                                      UNIFORMIZE-FACTOR-LIST))
(setf (callers-list 'COUNT-MULTIPLE-INTEGER-FACTORS :callers) '(SIMPLE-INTEGER-FACTOR-INTERNAL
                                                                FACTOR))
(setf (callers-list 'UNIFORMIZE-FACTOR-LIST :callers) '(FACTOR))
(setf (callers-list 'PRIME :callers) '(ALL-DIVISORS))
(setf (callers-list 'ISQRT :callers) '(FERMAT-INTEGER-FACTOR
                                       SIMPLE-INTEGER-FACTOR-INTERNAL))
(setf (callers-list 'SIMPLE-INTEGER-FACTOR-INTERNAL :callers) '(SIMPLE-INTEGER-FACTOR-INTERNAL))
(setf (callers-list 'CAAR :callers) '(MULTIPLICATIVE-ORDER TOTIENT))
(setf (callers-list 'ATAN :callers) '(PHASE ATAN))
(setf (callers-list 'NUMBERP :callers) '(QUOTIENT WEYL:MAKE-ELEMENT
                                         READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                         TOO-BIG? ONE-MATRIX ZERO-MATRIX REF
                                         ATAN))
(setf (callers-list 'SYMBOLP :callers) '(INTERPOLATE GET-COMPARISON-FUN
                                         WEYLI::SUBCLASS-OF?))
(setf (callers-list 'FIND-CLASS :callers) '(MAP WEYLI::SUBCLASS-OF?))
(setf (callers-list 'SEARCH-LIST :callers) '(SEARCH-LIST))
(setf (callers-list 'SB-MOP:CLASS-DIRECT-SUPERCLASSES :callers) '(SEARCH-LIST))
(setf (callers-list 'WEYLI::ACCUM-APPLY-ARGS :callers) '(WEYLI::APPLY
                                                         WEYLI::ACCUM-APPLY-ARGS))
(setf (callers-list 'WEYLI::APPLY :callers) '(WEYLI::FUNCALL))
(setf (callers-list 'DELETE :callers) '(DELETE-PROPERTY DELETE-MORPHISM
                                        WEYLI:DELETE))
(setf (callers-list 'REPLACE :callers) '(WEYLI:REPLACE))
(setf (callers-list 'REDUCE :callers) '(COERCE WEYLI::REDUCE))
(setf (callers-list 'UNION :callers) '(SPMOD-GCD1 WEYLI::UNION))
(setf (callers-list 'INTERSECTION :callers) '(POLY-FIND-COMMON-VARS
                                              COMMON-ENDPOINT
                                              WEYLI::INTERSECTION))
(setf (callers-list 'ARRAY-DIMENSIONS :callers) '(SMITH-ARRAY SMITH*
                                                  HERMITE-ARRAY
                                                  INDEPENDENT-COLS
                                                  INDEPENDENT-ROWS INVERT-ARRAY
                                                  RECIP ARRAY-TIMES
                                                  WEYL:MAKE-ELEMENT
                                                  WEYLI::%COPY-ARRAY-CONTENTS*))
(setf (callers-list 'ARRAY-TOTAL-SIZE :callers) '(WEYLI::%COPY-ARRAY-CONTENTS*))
(setf (callers-list 'ARRAY-ELEMENT-TYPE :callers) '(WEYLI::%COPY-ARRAY-CONTENTS*))
(setf (callers-list 'TYPE-OF :callers) '(PARSE-NUMERIC-OBJ STRUCTURE-OF))
(setf (callers-list 'ASSOCIATE-PREDICATE :callers) '(WEYLI:>= WEYLI:<= WEYLI:>
                                                              WEYLI:= WEYLI:<))
(setf (callers-list 'ASSOCIATE-OPERATION :callers) '(WEYLI::LCM WEYLI:GCD
                                                                WEYLI:/ WEYLI:*
                                                                WEYLI:- WEYLI:+
                                                                WEYLI:MIN
                                                                WEYLI:MAX))
(setf (callers-list 'WEYLI::MAX-PAIR :callers) '(NEXT-LOOP))
(setf (callers-list 'WEYLI::MIN-PAIR :callers) '(NEXT-LOOP))
(setf (callers-list 'WEYLI::PLUS :callers) '(NEXT-LOOP))
(setf (callers-list 'WEYLI::MINUS :callers) '(NEXT-LOOP))
(setf (callers-list 'WEYLI::TIMES :callers) '(NEXT-LOOP))
(setf (callers-list 'WEYLI::QUOTIENT :callers) '(NEXT-LOOP))
(setf (callers-list 'WEYLI:RECIP :callers) '(NEXT-LOOP))
(setf (callers-list 'WEYLI::BINARY-GCD :callers) '(NEXT-LOOP))
(setf (callers-list 'WEYLI::BINARY-LCM :callers) '(NEXT-LOOP))
(setf (callers-list 'MATRIX-SPACE-ELEMENT :callers) '(WEYL:MAKE-ELEMENT
                                                      MAKE-ELEMENT))
(setf (callers-list 'WEYL:MAKE-ELEMENT :callers) '(ONE ZERO HERMITE*
                                                   SUBDETERMINANT* DETERMINANT*
                                                   WEYL:MAKE-ELEMENT))
(setf (callers-list 'WITH-MATRIX-DIMENSIONS :callers) '(SMITH HERMITE* HERMITE
                                                        SUBDETERMINANT*
                                                        SPARSE-DETERMINANT
                                                        DETERMINANT*
                                                        HADAMARD-BOUND COERCE
                                                        DEGREE-BOUNDS
                                                        DETERMINANT SUBSTITUTE
                                                        RECIP TRANSPOSE
                                                        FME-MATRIX-TIMES
                                                        MATRIX-FME-TIMES
                                                        DIFFERENCE PLUS REF
                                                        PRINT-OBJECT))
(setf (callers-list 'DIM1 :callers) '(SMITH HERMITE* HERMITE SUBDETERMINANT*
                                      SPARSE-DETERMINANT HADAMARD-BOUND COERCE
                                      DEGREE-BOUNDS DETERMINANT SUBSTITUTE
                                      RECIP TRANSPOSE FME-MATRIX-TIMES
                                      MATRIX-FME-TIMES PRINT-OBJECT))
(setf (callers-list 'MATRIX-VALUE :callers) '(DETERMINANT* SET-REF REF))
(setf (callers-list 'ROWS :callers) '(REF))
(setf (callers-list 'DECLARE :callers) '(SUBSTITUTE HERMITE* DETERMINANT* REF))
(setf (callers-list '1DIM1 :callers) '(DIFFERENCE PLUS))
(setf (callers-list '2DIM1 :callers) '(DIFFERENCE PLUS))
(setf (callers-list 'TIMES-ARRAY :callers) '(ARRAY-TIMES))
(setf (callers-list 'MATRIX-FME-TIMES :callers) '(TIMES))
(setf (callers-list 'GET-FREE-MODULE :callers) '(FME-MATRIX-TIMES
                                                 MATRIX-FME-TIMES))
(setf (callers-list 'FME-MATRIX-TIMES :callers) '(TIMES))
(setf (callers-list 'INVERT-ARRAY :callers) '(MAKE-DEGREE-MATRIX RECIP))
(setf (callers-list 'ORDERED-DOMAIN? :callers) '(SUBTRACT-ROWS))
(setf (callers-list 'FIND-PIVOT-ORDERED :callers) '(SUBTRACT-ROWS))
(setf (callers-list 'FIND-PIVOT-UNORDERED :callers) '(SUBTRACT-ROWS))
(setf (callers-list 'EXCHANGE-ROWS :callers) '(FIND-PIVOT SUBTRACT-ROWS))
(setf (callers-list 'SUBTRACT-ROWS :callers) '(SUBTRACT-ROWS))
(setf (callers-list 'GET-MATRIX-SPACE :callers) '(TILDE REVERSION DETERMINANT*
                                                  EVALUATE-MATRIX JACOBIAN
                                                  SUBSTITUTE))
(setf (callers-list 'PARTIAL-DERIV :callers) '(DERIV PARTIAL-DERIV JACOBIAN))
(setf (callers-list 'DESTRUCTURING-BIND :callers) '(WEYL:MAKE-ELEMENT))
(setf (callers-list 'ONE-MATRIX :callers) '(ONE))
(setf (callers-list 'TRANSPOSE :callers) '(SMITH HERMITE RECIP))
(setf (callers-list 'SB-INT:UNQUOTE :callers) '(WITH-LINEAR-SUPPORT
                                                PAIR-UP-TERMS
                                                MAP-OVER-EACH-TERM
                                                WITH-GROBNER-OPERATIONS
                                                WITH-TPOWER-SERIES
                                                EXTERNAL-NAME
                                                WITH-OPEN-MODULAR-ARITH))
(setf (callers-list '/= :callers) '(PRINT-TERM REVERSION CIRCLE-CENTER PROCESSI
                                    HERMITE-ARRAY SUBDETERMINANT*
                                    SPARSE-DETERMINANT FIND-PIVOT DETERMINANT))
(setf (callers-list 'DETERMINANT* :callers) '(SUBDETERMINANT* DETERMINANT))
(setf (callers-list 'INTERPOLATE :callers) '(INTERPOLATE SPARSEINTERPSTAGEI
                                             DETERMINANT*))
(setf (callers-list 'DEGREE-BOUNDS :callers) '(DETERMINANT*))
(setf (callers-list 'DEGREE :callers) '(MAKE-UPOLYNOMIAL DEGREE DEGREE-BOUNDS))
(setf (callers-list 'DETERMINANT :callers) '(DETERMINANT* EVALUATE-MATRIX))
(setf (callers-list 'LIST-COERCE :callers) '(INTERPOLATE SPARSEINTERPSTAGEI
                                             EVALUATE-MATRIX))
(setf (callers-list 'GET-POLYNOMIAL-RING :callers) '(SPARSEINTERPSTAGEI
                                                     EVALUATE-MATRIX))
(setf (callers-list 'HADAMARD-BOUND :callers) '(SUBDETERMINANT* DETERMINANT*))
(setf (callers-list 'GET-FINITE-FIELD :callers) '(SPARSEINTERPSTAGEI
                                                  USE-CHINESE-REMAINDER
                                                  GET-FACTOR-RING
                                                  SUBDETERMINANT* DETERMINANT*))
(setf (callers-list 'COMPUTE-RESULT :callers) '(SPARSEINTERPSTAGEI DETERMINANT*))
(setf (callers-list 'USE-CHINESE-REMAINDER :callers) '(SPARSEINTERPSTAGEI
                                                       DETERMINANT*))
(setf (callers-list 'DIMENSION :callers) '(DETERMINANT*))
(setf (callers-list 'CHARACTERISTIC :callers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                                CLIST-FACTOR-SQUAREFREE
                                                CLIST-PTH-ROOT
                                                CLIST-SQFR-DECOMPOSE
                                                CLIST-FACTOR FACTOR
                                                USE-CHINESE-REMAINDER
                                                GET-FINITE-FIELD HEIGHT RANDOM
                                                EXPT COERCE PRINT-OBJECT
                                                MAKE-ELEMENT GFP-PRINT-OBJECT
                                                NUMBER-OF-ELEMENTS
                                                CHARACTERISTIC DETERMINANT*))
(setf (callers-list 'GFP-VALUE :callers) '(PRINT-OBJECT COERCE FIND-PIVOT))
(setf (callers-list 'WITH-OPEN-MODULAR-ARITH :callers) '(FIND-PIVOT))
(setf (callers-list 'FIND-PIVOT :callers) '(FIND-PIVOT))
(setf (callers-list 'C* :callers) '(FIND-PIVOT))
(setf (callers-list 'COMPUTE-INVERSE :callers) '(QUOTIENT RECIP
                                                 MAKE-QUOTIENT-ELEMENT COERCE
                                                 FIND-PIVOT))
(setf (callers-list 'C- :callers) '(FIND-PIVOT))
(setf (callers-list 'MEMOIZE :callers) '(SPARSE-DET))
(setf (callers-list 'SPARSE-DET :callers) '(SPARSE-DET))
(setf (callers-list 'SUBDETERMINANT* :callers) '(SUBDETERMINANT))
(setf (callers-list 'INDEPENDENT-ROWS :callers) '(SUBDETERMINANT*))
(setf (callers-list 'INDEPENDENT-COLS :callers) '(SUBDETERMINANT*))
(setf (callers-list 'HERMITE* :callers) '(HERMITE))
(setf (callers-list 'SUBDETERMINANT :callers) '(SMITH* HERMITE*))
(setf (callers-list 'HERMITE-ARRAY :callers) '(HERMITE*))
(setf (callers-list 'EXTENDED-GCD :callers) '(PROCESSI HERMITE-ARRAY))
(setf (callers-list 'SYM-MOD :callers) '(PROCESSI HERMITE-ARRAY))
(setf (callers-list 'SMITH* :callers) '(SMITH))
(setf (callers-list 'SMITH-ARRAY :callers) '(SMITH*))
(setf (callers-list 'PROCESSI :callers) '(PROCESSI))
(setf (callers-list 'GCD :callers) '(POLY-GCD MAKE-IDEAL BINARY-LCM BINARY-GCD
                                     MULTIPLICATIVE-ORDER QUOTIENT-REDUCE*
                                     PROCESSI))
(setf (callers-list 'NAMED-SIMPLICIAL-COMPLEX :callers) '(INITIALIZE-INSTANCE))
(setf (callers-list 'ID-NUMBER-OF :callers) '(ORIENTED-SORT CELL-ORDER
                                              POINTS-ORDER %DELETE %INSERT
                                              COFACETS FACETS MEMBER GET-CELL
                                              CELL-ID PRINT-OBJECT FWRITE
                                              WRITE-VERTEX-SET REFINE-MESH-PREP
                                              BEND %SET-NAME NAME))
(setf (callers-list '%NAME-TABLE-OF :callers) '(ALL-NAMES %SET-NAME NAME))
(setf (callers-list 'CASE :callers) '(READ-BOUNDARY-SIMPLICIAL-COMPLEX PLACE
                                      FORCE-EDGE NEIGHBORS MEASURE %SET-NAME
                                      NAME))
(setf (callers-list 'NAME :callers) '(FWRITE MAKE-MESH-FROM-FILE NAME-REGION
                                      REFINE-MESH-PREP GRADE PLACE SPLIT
                                      %SPLIT-CONSTRAINT-ONE-SIDE REMOVE-VERTEX
                                      DELETE-MAXIMAL-CELL INSERT NAME))
(setf (callers-list '%CONSTRAINTS-OF :callers) '(READ-MESH FWRITE
                                                 BOUNDARY-COMPLEX-OF SPLIT
                                                 PLACE CONSTRAINT %SET-NAME
                                                 NAME))
(setf (callers-list 'REMHASH :callers) '(%DELETE %SET-NAME))
(setf (callers-list '%SET-NAME :callers) '(%SET-NAME))
(setf (callers-list 'PUSHNEW :callers) '(INITY P-LIST-OF-VARS
                                         GET-POLYNOMIAL-RING LIST-OF-VARIABLES
                                         NEXT-DOMAINS ALL-NAMES))
(setf (callers-list 'NTHCDR :callers) '(ROTATE-LIST))
(setf (callers-list 'BUTLAST :callers) '(ROTATE-LIST))
(setf (callers-list 'IDENTITY :callers) '(MEMBER-ROTATE))
(setf (callers-list 'ROTATE-LIST :callers) '(STAR-TRIANGULATE CCW-SIDE
                                             POINT-VS-TRIANGLE MEMBER-ROTATE))
(setf (callers-list 'POSITION :callers) '(MEMBER-ROTATE))
(setf (callers-list 'COMPLEX :callers) '(EXPT SQRT ARC COMPLEX-CIRCUMCENTER
                                              COMPLEXER))
(setf (callers-list 'CONVERT-TO-LISP-NUMBER :callers) '(ROUND2 CEILING2 FLOOR2
                                                        TRUNCATE2 BINARY>=
                                                        BINARY> BINARY= RECIP
                                                        EXPT
                                                        VERTICES-SORTED-BY-ANGLE
                                                        ARC SIMPLEX-SIZE ANGLE
                                                        COORDINATE-LIST
                                                        COMPLEXER))
(setf (callers-list 'QUEUE :callers) '(MAKE-QUEUE))
(setf (callers-list 'LAST :callers) '(MAKE-ELEMENT FACETS MAKE-QUEUE))
(setf (callers-list 'FRONT :callers) '(EMPTYQ? CLEARQ))
(setf (callers-list 'BACK :callers) '(CLEARQ))
(setf (callers-list 'SQRT :callers) '(POLY-FACTOR-CBOUND SQRT ABS DISTANCE
                                      ANGLE CIRCLE-CENTER))
(setf (callers-list 'WARN :callers) '(INITIALIZE-INSTANCE READ-MESH TOO-BIG?
                                                          TRIANGLE-CENTER PLACE
                                                          CIRCLE-CENTER))
(setf (callers-list 'MAKE-POINT :callers) '(MAKE-POINT READ-POINT
                                            DO-BACKGROUND-BOX CIRCUMCENTER
                                            MAKE-MEAN-POINT))
(setf (callers-list 'ACOS :callers) '(ACOS ANGLE))
(setf (callers-list 'DOT-PRODUCT :callers) '(VERTICES-SORTED-BY-ANGLE DISTANCE
                                             ANGLE))
(setf (callers-list 'MAKE-EUCLIDEAN-SPACE :callers) '(MAKE-PARAMETER-SPACE))
(setf (callers-list 'INVERSE-MAP :callers) '(MAKE-PARAMETER-SPACE))
(setf (callers-list 'VERTICES-OF :callers) '(CELL-ORDER VERTEX-SET TETRAHEDRON?
                                             TRIANGLE? SEGMENT? FACE? OPPOSITE
                                             DIMENSION-OF FACETS CELL-ID
                                             PRINT-OBJECT FWRITE
                                             WRITE-VERTEX-SET GRADE TOO-BIG?
                                             INSERT PLACE ADJ-VERTICES
                                             NEAR-BASE NEIGHBORHOOD
                                             VERTICES-SORTED-BY-ANGLE ANGLES
                                             ANGLE CIRCUMRADIUS CIRCUMCENTER
                                             POINT-VS-TRIANGLE COMMON-ENDPOINT
                                             MEASURE BOUNDING-BOX SIMPLEX-SIZE
                                             SPLIT))
(setf (callers-list 'HOME-OF :callers) '(REFINE-MESH-PREP
                                         BUILD-CDT-FROM-BOUNDARIES
                                         DO-BACKGROUND-BOX IMPROVE GRADE
                                         TRIANGLE-CENTER %DELETE-TOO-CLOSE
                                         DIMENSION-OF REMOVE-VERTEX FORCE-EDGE
                                         DELAUNAY? FLIP-OK? CCW-SIDE SPLIT))
(setf (callers-list 'SPLIT :callers) '(IMPROVE %SPLIT-CONSTRAINT-ONE-SIDE PLACE
                                       SPLIT-EDGE FLIP SPLIT))
(setf (callers-list 'DELETE-MAXIMAL-CELL :callers) '(REFINE-MESH-PREP
                                                     %SPLIT-CONSTRAINT-ONE-SIDE
                                                     REMOVE-VERTEX FORCE-EDGE
                                                     FLIP SPLIT))
(setf (callers-list 'INSERT :callers) '(MAKE-SIMPLICIAL-COMPLEX INTERSECTION
                                        UNION READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                        READ-SIMPLICIAL-COMPLEX
                                        DO-BACKGROUND-BOX PLACE REMOVE-VERTEX
                                        FORCE-EDGE SPLIT))
(setf (callers-list 'DISTANCE :callers) '(BUILD-CDT-FROM-BOUNDARIES SPLIT
                                          %DELETE-TOO-CLOSE CIRCUMRADIUS
                                          POINT-VS-TRIANGLE MEASURE
                                          SIMPLEX-SIZE))
(setf (callers-list 'SIGN-OF-PERMUTATION :callers) '(SIGN-OF-PERMUTATION BEND))
(setf (callers-list 'SQR :callers) '(DISTANCE))
(setf (callers-list 'BEND :callers) '(SPLIT FORCE-EDGE FLIP-OK? NEAR-BASE
                                      TRIANGULATE-TRIPLES CCW-SIDE
                                      POINT-VS-TRIANGLE EDGES-CROSS?))
(setf (callers-list 'COORDINATE-LIST :callers) '(TOO-BIG? BOUNDING-BOX))
(setf (callers-list 'BOUNDING-BOX :callers) '(BUILD-CDT-FROM-BOUNDARIES
                                              BOUNDING-BOX))
(setf (callers-list 'MAP-OVER-CELLS :callers) '(BOUNDARY COERCE
                                                MAX-DIMENSION-OF VERTEX-SET
                                                INTERSECTION FWRITE
                                                WRITE-VERTEX-SET BOUNDING-BOX))
(setf (callers-list 'CELL :callers) '(BOUNDARY PRINT-TERM MAX-DIMENSION-OF
                                      INTERSECTION UNION FWRITE BOUNDING-BOX))
(setf (callers-list 'COMPLEXER :callers) '(CIRCUMCENTER ARC MEASURE))
(setf (callers-list 'COMPLEX-CIRCUMCENTER :callers) '(CIRCUMCENTER ARC))
(setf (callers-list 'CIRCLE-CENTER :callers) '(ARC))
(setf (callers-list 'PHASE :callers) '(PHASE ARC))
(setf (callers-list 'COS :callers) '(CREATE-UNIT-QUATERNION COS ARC))
(setf (callers-list 'SIN :callers) '(CREATE-UNIT-QUATERNION SIN ARC))
(setf (callers-list 'CURVED-SIMPLEX :callers) '(MAKE-CURVED-SEGMENT ARC))
(setf (callers-list 'MAKE-PARAMETER-SPACE :callers) '(MAKE-CURVED-SEGMENT ARC))
(setf (callers-list 'GENERATOR :callers) '(MAKE-CURVED-SEGMENT ARC))
(setf (callers-list 'VECTOR :callers) '(WEYL:MAKE-ELEMENT MAKE-ELEMENT
                                                          TRUNCATE-ORDER COERCE
                                                          TRIM-ZEROES
                                                          MAKE-TPOWER-SERIES
                                                          MAKE-POINT
                                                          INITIALIZE-INSTANCE
                                                          MAKE-CURVED-SEGMENT
                                                          ARC))
(setf (callers-list 'TRIANGLE? :callers) '(SPLIT DIRECTED-LOCATE NEAR-BASE
                                           NEIGHBORHOOD ANGLE CIRCUMCENTER
                                           POINT-VS-TRIANGLE))
(setf (callers-list 'OPPOSITE :callers) '(IMPROVE GRADE INSERT SPLIT
                                          REMOVE-VERTEX FORCE-EDGE FLIP
                                          DELAUNAY? FLIP-OK? CCW-SIDE))
(setf (callers-list 'POINT-VS-TRIANGLE :callers) '(%SPLIT-CONSTRAINT-ONE-SIDE
                                                   PLACE TRIANGULATE-TRIPLES))
(setf (callers-list 'MAPC :callers) '(FLAT-TRIANGULATE STAR-TRIANGULATE))
(setf (callers-list 'TRIANGULATE-TRIPLES :callers) '(FLAT-TRIANGULATE
                                                     STAR-TRIANGULATE))
(setf (callers-list 'CIRCUMCENTER :callers) '(TRIANGLE-CENTER CIRCUMRADIUS))
(setf (callers-list 'ANGLE :callers) '(IMPROVE GRADE DELAUNAY? ANGLES ANGLE))
(setf (callers-list 'A :callers) '(NEAR-BASE VERTICES-SORTED-BY-ANGLE))
(setf (callers-list '%MOST-RECENT :callers) '(NAME-REGION INSERT-BOUNDARY
                                              LOCATE INSERT))
(setf (callers-list 'COFACETS :callers) '(%DELETE DELETE-MAXIMAL-CELL
                                          MAXIMAL-CELL? COFACETS ADJ-VERTICES
                                          NEIGHBOR NEIGHBORS))
(setf (callers-list 'GET-CELL :callers) '(CANONICAL INTERSECTION %INSERT
                                          CONSTRAINT PLACE FORCE-EDGE
                                          ADJ-VERTICES NEIGHBOR NEIGHBORS))
(setf (callers-list 'FACETS :callers) '(%DELETE %INSERT FACETS GRADE INSERT
                                        NEIGHBORHOOD))
(setf (callers-list 'NEIGHBOR :callers) '(IMPROVE REMOVE-VERTEX FORCE-EDGE
                                          DIRECTED-LOCATE NEIGHBORHOOD))
(setf (callers-list 'NEAR-BASE :callers) '(DIRECTED-LOCATE))
(setf (callers-list 'NEIGHBORS :callers) '(SPLIT %SPLIT-CONSTRAINT-ONE-SIDE
                                           REMOVE-VERTEX FORCE-EDGE SPLIT-EDGE
                                           FLIP DELAUNAY? FLIP-OK? LOCATE))
(setf (callers-list 'MAXIMAL-CELL? :callers) '(REFINE-MESH LOCATE))
(setf (callers-list 'DIRECTED-LOCATE :callers) '(%SPLIT-CONSTRAINT-ONE-SIDE
                                                 LOCATE))
(setf (callers-list 'CATCH :callers) '(POLY-TEST-QUOTIENT POLY-QUOTIENT LOCATE))
(setf (callers-list 'MAP-OVER-MAXIMAL-CELLS :callers) '(UNION FWRITE
                                                              MAKE-MESH-FROM-FILE
                                                              REFINE-MESH-PREP
                                                              TRIANGLES))
(setf (callers-list 'TRIANGLE :callers) '(TRIANGLES))
(setf (callers-list 'START :callers) '(FORCE-EDGE))
(setf (callers-list 'EDGES-CROSS? :callers) '(FORCE-EDGE))
(setf (callers-list 'VR :callers) '(FORCE-EDGE))
(setf (callers-list 'CCW-SIDE :callers) '(REMOVE-VERTEX FORCE-EDGE))
(setf (callers-list 'FLAT-TRIANGULATE :callers) '(FORCE-EDGE))
(setf (callers-list 'STAR-TRIANGULATE :callers) '(REMOVE-VERTEX))
(setf (callers-list 'SPLIT-EDGE :callers) '(IMPROVE PLACE))
(setf (callers-list 'REMOVE-VERTEX :callers) '(%DELETE-TOO-CLOSE PLACE))
(setf (callers-list 'PLACE :callers) '(BUILD-CDT-FROM-BOUNDARIES IMPROVE
                                       %SPLIT-CONSTRAINT-ONE-SIDE PLACE))
(setf (callers-list 'CONSTRAINT :callers) '(IMPROVE GRADE DELAUNAY?
                                            REMOVE-VERTEX SPLIT-EDGE FLIP
                                            FLIP-OK? NEIGHBOR))
(setf (callers-list 'SEGMENT? :callers) '(SPLIT PLACE))
(setf (callers-list 'FORCE-EDGE :callers) '(%SPLIT-CONSTRAINT-ONE-SIDE PLACE))
(setf (callers-list 'SET-DIFFERENCE :callers) '(OPPOSITE
                                                %SPLIT-CONSTRAINT-ONE-SIDE))
(setf (callers-list 'NEIGHBORHOOD :callers) '(NAME-REGION
                                              %SPLIT-CONSTRAINT-ONE-SIDE))
(setf (callers-list 'COMMON-ENDPOINT :callers) '(SPLIT))
(setf (callers-list '%SPLIT-CONSTRAINT-ONE-SIDE :callers) '(SPLIT))
(setf (callers-list 'DELAUNAY? :callers) '(INSERT))
(setf (callers-list 'FLIP :callers) '(INSERT))
(setf (callers-list 'NIL :callers) '(LOOP-VECTOR-BIND CHECK-DEGREE ADD-UNDONE
                                     REDUCE-ALL REFINE-MESH INSERT))
(setf (callers-list '%PENDING-LIST-OF :callers) '(REFINE-MESH INSERT-BOUNDARY
                                                  REFINE-MESH-PREP
                                                  BUILD-CDT-FROM-BOUNDARIES
                                                  INSERT))
(setf (callers-list 'ADJ-VERTICES :callers) '(%DELETE-TOO-CLOSE))
(setf (callers-list '%DEFAULT-NAME-OF :callers) '(SPLIT
                                                  %SPLIT-CONSTRAINT-ONE-SIDE
                                                  REMOVE-VERTEX))
(setf (callers-list '%DELETE-TOO-CLOSE :callers) '(SPLIT))
(setf (callers-list 'FUNCTIONP :callers) '(CONVERT-LIST GET-COMPARISON-FUN
                                           TOO-BIG?))
(setf (callers-list 'THE-BOUND :callers) '(TOO-BIG?))
(setf (callers-list 'MAKE-MEAN-POINT :callers) '(IMPROVE TOO-BIG?))
(setf (callers-list 'SIMPLEX-SIZE :callers) '(TOO-BIG?))
(setf (callers-list 'VERTICES-SORTED-BY-ANGLE :callers) '(IMPROVE GRADE))
(setf (callers-list 'TOO-BIG? :callers) '(GRADE))
(setf (callers-list 'TRIANGLE-CENTER :callers) '(IMPROVE))
(setf (callers-list 'IMPROVE :callers) '(REFINE-MESH IMPROVE))
(setf (callers-list 'MAKE-SIMPLEX :callers) '(FACETS
                                              READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                              READ-SIMPLICIAL-COMPLEX
                                              DO-BACKGROUND-BOX))
(setf (callers-list 'DO-BACKGROUND-BOX :callers) '(BUILD-CDT-FROM-BOUNDARIES))
(setf (callers-list 'BOUNDARY :callers) '(BOUNDARY MAKE-MESH-FROM-FILE
                                          BUILD-CDT-FROM-BOUNDARIES))
(setf (callers-list 'TRI :callers) '(REFINE-MESH-PREP))
(setf (callers-list 'MESH :callers) '(CREATE-MESH))
(setf (callers-list 'BUILD-CDT-FROM-BOUNDARIES :callers) '(NAME-REGION))
(setf (callers-list 'LOCATE :callers) '(NAME-REGION))
(setf (callers-list 'REFINE-MESH-PREP :callers) '(REFINE-MESH))
(setf (callers-list 'MAKE-QUEUE :callers) '(REFINE-MESH))
(setf (callers-list 'GRADE :callers) '(REFINE-MESH))
(setf (callers-list 'INSERTQ :callers) '(REFINE-MESH))
(setf (callers-list 'EMPTYQ? :callers) '(REFINE-MESH))
(setf (callers-list 'GETQ :callers) '(REFINE-MESH))
(setf (callers-list 'POINT :callers) '(MAKE-POINT %MM-BOUNDARY))
(setf (callers-list 'READ :callers) '(READ-MESH READ-SIZE-TABLE
                                      READ-REGION-POINTS
                                      READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                      READ-SIMPLICIAL-COMPLEX READ-VERTEX-SET
                                      READ-POINT MAKE-MESH-FROM-FILE))
(setf (callers-list 'MAKE-HASH-TABLE :callers) '(COBOUNDARY BOUNDARY READ-MESH
                                                 WRITE-VERTEX-SET
                                                 MAKE-MESH-FROM-FILE))
(setf (callers-list 'GET-EUCLIDEAN-SPACE :callers) '(READ-MESH
                                                     MAKE-MESH-FROM-FILE))
(setf (callers-list 'READ-VERTEX-SET :callers) '(READ-MESH MAKE-MESH-FROM-FILE))
(setf (callers-list 'READ-BOUNDARY-SIMPLICIAL-COMPLEX :callers) '(MAKE-MESH-FROM-FILE))
(setf (callers-list 'READ-REGION-POINTS :callers) '(MAKE-MESH-FROM-FILE))
(setf (callers-list 'READ-SIZE-TABLE :callers) '(MAKE-MESH-FROM-FILE))
(setf (callers-list 'CREATE-MESH :callers) '(READ-MESH MAKE-MESH-FROM-FILE))
(setf (callers-list 'INSERT-BOUNDARY :callers) '(MAKE-MESH-FROM-FILE))
(setf (callers-list 'NAME-REGION :callers) '(MAKE-MESH-FROM-FILE))
(setf (callers-list 'REFINE-MESH :callers) '(MAKE-MESH-FROM-FILE))
(setf (callers-list 'READ-POINT :callers) '(READ-REGION-POINTS READ-VERTEX-SET))
(setf (callers-list 'ARC :callers) '(READ-BOUNDARY-SIMPLICIAL-COMPLEX))
(setf (callers-list 'VERTEX :callers) '(WRITE-VERTEX-SET))
(setf (callers-list 'FWRITE :callers) '(WRITE-MESH FWRITE WRITE-VERTEX-SET))
(setf (callers-list 'ALL-NAMES :callers) '(FWRITE))
(setf (callers-list 'WRITE-VERTEX-SET :callers) '(FWRITE))
(setf (callers-list 'READ-SIMPLICIAL-COMPLEX :callers) '(READ-MESH))
(setf (callers-list 'MORPHISM-DOMAIN :callers) '(APPLY-MORPHISM DELETE-MORPHISM
                                                 GET-MORPHISMS-TO COMPOSE
                                                 PRINT-OBJECT))
(setf (callers-list 'MORPHISM-RANGE :callers) '(MAP-FUN NEXT-DOMAINS
                                                GET-EMBEDDABLE-DOMAINS
                                                DELETE-MORPHISM
                                                GET-MORPHISMS-FROM COMPOSE
                                                PRINT-OBJECT))
(setf (callers-list 'ASSOC :callers) '(POLY-SUBST %SET-COERCE COERCE
                                       RATIONAL-POLY-SUBST COMPOSE))
(setf (callers-list 'HOMOMORPHISM :callers) '(MAKE-HOMOMORPHISM COMPOSE))
(setf (callers-list 'MORPHISM-MAP :callers) '(MAP-FUN APPLY-MORPHISM COMPOSE))
(setf (callers-list 'COMPOSE :callers) '(GET-MORPHISMS-TO GET-MORPHISMS-FROM))
(setf (callers-list 'GET-MORPHISMS-FROM :callers) '(GET-MORPHISMS-TO
                                                    GET-MORPHISMS-FROM))
(setf (callers-list 'GET-MORPHISMS-TO :callers) '(GET-MORPHISMS-TO))
(setf (callers-list 'GET-MORPHISMS :callers) '(GET-AUTOMORPHISMS
                                               GET-HOMOMORPHISMS MAKE-MORPHISM))
(setf (callers-list 'MORPHISM :callers) '(MAKE-MORPHISM))
(setf (callers-list 'DELETE-MORPHISM :callers) '(MAKE-MORPHISM))
(setf (callers-list 'GET-RATIONAL-NUMBERS :callers) '(GET-QUOTIENT-FIELD
                                                      CANONICALIZE-NUMBER))
(setf (callers-list 'GET-REAL-NUMBERS :callers) '(HEIGHT CANONICALIZE-NUMBER))
(setf (callers-list 'GET-COMPLEX-NUMBERS :callers) '(CANONICALIZE-NUMBER))
(setf (callers-list 'APPLY-MORPHISM :callers) '(MAKE-POLYNOMIAL-MORPHISM COERCE
                                                APPLY-MORPHISM))
(setf (callers-list 'MAP-OVER-TREE :callers) '(NEXT-DOMAINS))
(setf (callers-list 'DOMAIN :callers) '(NEXT-DOMAINS))
(setf (callers-list 'REACHABLE-DOMAINS :callers) '(NEXT-DOMAINS))
(setf (callers-list 'D2 :callers) '(NEXT-DOMAINS))
(setf (callers-list 'TERMINATE-BRANCH :callers) '(NEXT-DOMAINS))
(setf (callers-list 'GET-HOMOMORPHISMS :callers) '(COERCE))
(setf (callers-list 'FUNCT-DOMAIN-OF :callers) '(HILBERT-SPACE-PRINT-OBJECT
                                                 FUNCTION-SPACE-PRINT-OBJECT
                                                 PRINT-OBJECT))
(setf (callers-list 'FUNCT-RANGE-OF :callers) '(HILBERT-SPACE-PRINT-OBJECT
                                                FUNCTION-SPACE-PRINT-OBJECT
                                                PRINT-OBJECT))
(setf (callers-list 'IN-BOUND? :callers) '(MAKE-MULTIPOLE-EXPANSION))
(setf (callers-list 'MULTIPOLE-EXPANSION :callers) '(MAKE-MULTIPOLE-EXPANSION))
(setf (callers-list 'RANGE-DOMAIN-OF :callers) '(MAKE-MULTIPOLE-EXPANSION))
(setf (callers-list 'MULTIPOLE :callers) '(SHIFT-MULTIPOLE))
(setf (callers-list 'RANGE-OF :callers) '(LOCALIZE PLUS SHIFT-LOCAL-FIELD
                                          SHIFT-MULTIPOLE))
(setf (callers-list 'SHIFT-M-FORM :callers) '(SHIFT-MULTIPOLE))
(setf (callers-list 'FORM-OF :callers) '(LOCALIZE PLUS SHIFT-LOCAL-FIELD
                                         SHIFT-MULTIPOLE))
(setf (callers-list 'CENTER-OF :callers) '(LOCALIZE PLUS SHIFT-LOCAL-FIELD
                                           SHIFT-MULTIPOLE))
(setf (callers-list 'LOCAL-FIELD :callers) '(LOCALIZE PLUS SHIFT-LOCAL-FIELD))
(setf (callers-list 'SHIFT-L-FORM :callers) '(SHIFT-LOCAL-FIELD))
(setf (callers-list 'NEQ :callers) '(PLUS))
(setf (callers-list 'MPEF-PAIRWISE-M-SUM :callers) '(MPEF-PAIRWISE-M-SUM PLUS))
(setf (callers-list 'DIST :callers) '(LOCALIZE))
(setf (callers-list 'LOCALIZE-FORM :callers) '(LOCALIZE))
(setf (callers-list 'SHIFT-M-FORM* :callers) '(SHIFT-M-FORM))
(setf (callers-list 'DIFFERENCE :callers) '(SHIFT-M-FORM))
(setf (callers-list 'WHAT-IS-THE-LTHTERM :callers) '(SHIFT-M-FORM*))
(setf (callers-list 'THE-KTHTERM :callers) '(LTH-LOCAL-TERM LOCALIZE-FORM*
                                             WHAT-IS-THE-LTHTERM2
                                             WHAT-IS-THE-LTHTERM))
(setf (callers-list 'SHIFT-L-FORM* :callers) '(SHIFT-L-FORM))
(setf (callers-list 'WHAT-IS-THE-LTHTERM2 :callers) '(SHIFT-L-FORM*))
(setf (callers-list 'LOCALIZE-FORM* :callers) '(LOCALIZE-FORM))
(setf (callers-list 'REST-OF-LOCAL :callers) '(LOCALIZE-FORM*))
(setf (callers-list 'LTH-LOCAL-TERM :callers) '(REST-OF-LOCAL))
(setf (callers-list 'EXTERNAL-NAME :callers) '(EXTERNAL-NAME))
(setf (callers-list 'INTERNAL-NAME :callers) '(EXTERNAL-NAME))
(setf (callers-list 'SYMBOL-NAME :callers) '(DEFINE-MATH-PROPERTY
                                             DEFINE-MATH-OPERATOR))
(setf (callers-list 'PRETTY-NAME-OF :callers) '(PRINT-OBJECT))
(setf (callers-list 'CREATOR-OF :callers) '(PRINT-OBJECT))
(setf (callers-list 'NREVERSE :callers) '(LOOP-VECTOR-BIND CHECK-DEGREE
                                          SPMOD-GCD2 POLY-SKELETON
                                          SOLVE-VANDERMONDETD TRANSFORM
                                          GET-POLYNOMIAL-RING BFPRIN1
                                          DEFINE-DOMAIN-CREATOR))
(setf (callers-list 'COMPARE-PTERM-LISTS :callers) '(TEST-PROPERTY
                                                     ASSERT-PROPERTY))
(setf (callers-list 'MAP-OVER-PROPERTIES :callers) '(DELETE-DOMAIN
                                                     SHOW-PROPERTIES))
(setf (callers-list 'PROP :callers) '(SHOW-PROPERTIES))
(setf (callers-list 'PRINT :callers) '(SPMOD-GCD POLY-MGCD SHOW-PROPERTIES))
(setf (callers-list 'PROPERTY :callers) '(DELETE-DOMAIN))
(setf (callers-list 'DELETE-PROPERTY :callers) '(DELETE-DOMAIN))
(setf (callers-list 'MAKE-PREDICATE :callers) '(MAKE-PREDICATE))
(setf (callers-list 'ASSERT-FUNCTION-NAME :callers) '(DEFINE-MATH-PROPERTY))
(setf (callers-list 'PREDICATE-FUNCTION-NAME :callers) '(DEFINE-MATH-PROPERTY))
(setf (callers-list 'SHADOWING-IMPORT :callers) '(USE-WEYL-PACKAGE
                                                  USE-WEYLI-PACKAGE))
(setf (callers-list 'USE-PACKAGE :callers) '(USE-WEYL-PACKAGE USE-WEYLI-PACKAGE))
(setf (callers-list 'FIND-PACKAGE :callers) '(INTERN-IN-PACKAGE))
(setf (callers-list 'QUOTIENT-ELEMENT :callers) '(MAKE-QUOTIENT-ELEMENT))
(setf (callers-list 'PRIN1 :callers) '(PRINT-OBJECT))
(setf (callers-list 'HEIGHT :callers) '(POLY-FACTOR-CBOUND POLY-HEIGHT HEIGHT))
(setf (callers-list 'MAKE-QUOTIENT-ELEMENT :callers) '(EXPT SQRT COERCE
                                                            EXPT-QUOTIENT RECIP
                                                            QUOTIENT-REDUCE*
                                                            MINUS))
(setf (callers-list 'QUOTIENT-REDUCE* :callers) '(QUOTIENT-REDUCE))
(setf (callers-list 'N1 :callers) '(EXPT EXPT-QUOTIENT RECIP))
(setf (callers-list 'EXPT-QUOTIENT :callers) '(EXPT))
(setf (callers-list 'POLY-MINUS? :callers) '(TERMS-CONTENT MINUS? TERMS-MINUS?
                                             MAKE-RATIONAL-FUNCTION*))
(setf (callers-list 'POLY-MINUS :callers) '(TERMS-SUBRESULTANT-GCD
                                            TERMS-CONTENT POLY-DIFFERENCE
                                            TERMS-DIFFERENCE TERMS-MINUS MINUS
                                            MAKE-RATIONAL-FUNCTION*))
(setf (callers-list 'MAKE-RATIONAL-FUNCTION :callers) '(EXPT MINUS
                                                             MAKE-QUOTIENT-ELEMENT
                                                             MAKE-RATIONAL-FUNCTION*))
(setf (callers-list 'POLY-1? :callers) '(DEGREE POLY-GCD TRANSFORM PRINT-TERM
                                         PARTIAL-DERIV RATFUN-REDUCE 1?
                                         PRINT-OBJECT))
(setf (callers-list 'PRINT-MPOLYNOMIAL-FORM :callers) '(PRINT-OBJECT))
(setf (callers-list 'POLY-GCD :callers) '(SPMOD-GCD1 POLY-LCM POLY-GCD
                                          TERMS-CONTENT RATFUN-REDUCE))
(setf (callers-list 'POLY-QUOTIENT :callers) '(SPMOD-GCD1
                                               TERMS-SUBRESULTANT-GCD
                                               POLY-CONTENT-AND-PRIM-PART
                                               POLY-LCM POLY-GCD
                                               TERMS-CQUOTIENT RATFUN-REDUCE))
(setf (callers-list 'MAKE-RATIONAL-FUNCTION* :callers) '(RECIP RATFUN-REDUCE))
(setf (callers-list 'NUM :callers) '(SUBSTITUTE RECIP))
(setf (callers-list 'POLY-EXPT :callers) '(TERMS-HORNERS-RULE
                                           TERMS-SUBRESULTANT-GCD
                                           TERMS-REDUCED-GCD
                                           TERMS-PSEUDO-REMAINDER POLY-EXPT
                                           TRANSFORM EXPT))
(setf (callers-list 'NUM-X :callers) '(PARTIAL-DERIV LIST-OF-VARIABLES))
(setf (callers-list 'POLY-LIST-OF-VARIABLES :callers) '(SPMOD-GCD1
                                                        POLY-FIND-COMMON-VARS
                                                        POLY-SPLIT-ON-VARS
                                                        LIST-OF-VARIABLES))
(setf (callers-list 'GET-VARIABLE-NAME :callers) '(LIST-OF-VARIABLES))
(setf (callers-list 'RATIONAL-TERMS-HORNERS-RULE :callers) '(RATIONAL-POLY-SUBST))
(setf (callers-list 'RATIONAL-POLY-SUBST :callers) '(SUBSTITUTE
                                                     RATIONAL-TERMS-HORNERS-RULE))
(setf (callers-list 'E- :callers) '(TERMS-HORNERS-RULE TERMS-SUBRESULTANT-GCD
                                    TERMS-REDUCED-GCD TERMS-PSEUDO-REMAINDER
                                    TERMS-QUOTIENT TRANSFORM
                                    RATIONAL-TERMS-HORNERS-RULE))
(setf (callers-list 'NUM-P :callers) '(PARTIAL-DERIV))
(setf (callers-list 'E1? :callers) '(DEGREE TERMS-SUBRESULTANT-GCD POLY-EXPT
                                     TRANSFORM PRINT-TERM PARTIAL-DERIV))
(setf (callers-list 'POLY-DERIVATIVE :callers) '(POLY-DERIVATIVE PARTIAL-DERIV))
(setf (callers-list 'LIST-OF-VARIABLES :callers) '(LIST-OF-VARIABLES
                                                   SPARSEINTERPSTAGEI DERIV))
(setf (callers-list 'VALUE-OF :callers) '(MAP-WITH-DOMAIN MAP LIST-OF-ELEMENTS
                                          SET-REF PRINT-OBJECT))
(setf (callers-list 'SUBCLASS-OF? :callers) '(MAP))
(setf (callers-list 'ELEMENT-VALUE :callers) '(PRINT-OBJECT))
(setf (callers-list 'EQUAL-FUNCTION-OF :callers) '(BINARY=))
(setf (callers-list 'GREATER-FUNCTION-OF :callers) '(ADD-RELATION EXPT
                                                     MAKE-EPOLYNOMIAL BINARY>))
(setf (callers-list 'SET-ELEMENT1 :callers) '(MAKE-ELEMENT))
(setf (callers-list 'SET-ELEMENT2 :callers) '(MAKE-ELEMENT))
(setf (callers-list 'SET-ELEMENTS :callers) '(RANDOM MAKE-GENERATOR
                                                     MAP-OVER-ELEMENTS MEMBER
                                                     SET-WITH-ELEMENT-LIST-PRINT-OBJECT))
(setf (callers-list 'ITEM :callers) '(INITIALIZE-INSTANCE))
(setf (callers-list 'SET-ELEMENT-LIST :callers) '(NOT-AN-ELEMENT INSERT
                                                  INITIALIZE-INSTANCE))
(setf (callers-list 'NOT-AN-ELEMENT :callers) '(NOT-AN-ELEMENT))
(setf (callers-list 'RANDOM :callers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                        NON-ZERO-RANDOM SPMOD-GCD2 SPMOD-GCD1
                                        INITY SPARSEINTERPSTAGEI
                                        RANDOM-FLOATING-NUMBER RANDOM-CONSTANT
                                        RANDOM))
(setf (callers-list 'FACTORIAL :callers) '(TAYLOR-EXP))
(setf (callers-list 'MAKE-TPOWER-SERIES :callers) '(EXPT TRUNCATE-ORDER COERCE
                                                         MAP-TPOWER-SERIES
                                                         MODIFY-BRANCH-ORDER
                                                         INITIALIZE-INSTANCE
                                                         MAKE-TPOWER-SERIES
                                                         REVERSION TPS-DERIV2
                                                         TPS-DERIV1
                                                         GET-DEFAULT-TAYLOR-EXPANSION
                                                         TAYLOR1 TAYLOR-EXP))
(setf (callers-list 'VALENCE :callers) '(EXPT TRUNCATE-ORDER
                                              LARGEST-STORED-COEFF
                                              MODIFY-BRANCH-ORDER PRINT-TERM
                                              REVERSION TIMES TAYLOR1
                                              SUBSTITUTE))
(setf (callers-list 'WITH-TPOWER-SERIES :callers) '(EXPT TPS-DERIV2 TPS-DERIV1
                                                         SUBSTITUTE))
(setf (callers-list '(TP TP) :callers) '(SUBSTITUTE))
(setf (callers-list 'TAYLOR1 :callers) '(TIMES DIFFERENCE PLUS TAYLOR1 TAYLOR))
(setf (callers-list 'LCM :callers) '(TAYLOR1))
(setf (callers-list 'BRANCH-ORDER :callers) '(TRUNCATE-ORDER SET-BRANCH-ORDER
                                              MODIFY-BRANCH-ORDER PRINT-TERM
                                              TAYLOR1))
(setf (callers-list 'GET-FUNCTION :callers) '(TAYLOR1))
(setf (callers-list 'GET-DEFAULT-TAYLOR-EXPANSION :callers) '(TAYLOR1))
(setf (callers-list 'ORDER :callers) '(TRUNCATE-ORDER MODIFY-BRANCH-ORDER
                                       PRINT-TERM REVERSION TIMES DIFFERENCE
                                       PLUS))
(setf (callers-list 'TPS-DERIV1 :callers) '(DERIV))
(setf (callers-list 'TPS-DERIV2 :callers) '(DERIV))
(setf (callers-list '(A A) :callers) '(EXPT TPS-DERIV2 TPS-DERIV1))
(setf (callers-list 'TRIM-ZEROES :callers) '(MAKE-TPOWER-SERIES TPS-DERIV2
                                             TPS-DERIV1))
(setf (callers-list 'COEFFS :callers) '(TRUNCATE-ORDER LARGEST-STORED-COEFF
                                        MAP-TPOWER-SERIES MODIFY-BRANCH-ORDER
                                        PRINT-TERM REVERSION))
(setf (callers-list 'QUOTIENT-REDUCE :callers) '(SOLVE-FOR-COEFFS))
(setf (callers-list 'COEFFICIENT :callers) '(SPARSEINTERPSTAGEI
                                             POLY-C-COEFFICIENT COEFFICIENT
                                             SOLVE-FOR-COEFFS))
(setf (callers-list 'MAKE-ELEMENT-FREE-MODULE-VECTOR :callers) '(MAKE-ELEMENT))
(setf (callers-list 'ABSTRACT-POINT :callers) '(MAKE-POINT))
(setf (callers-list 'NAMED-POINT :callers) '(MAKE-POINT))
(setf (callers-list 'CELL-ID :callers) '(%DELETE %INSERT GET-CELL BINARY=))
(setf (callers-list 'SIMPLEX :callers) '(APPLY MAKE-SIMPLEX))
(setf (callers-list 'CHOOSE :callers) '(FACETS))
(setf (callers-list 'FACET :callers) '(BOUNDARY FACETS))
(setf (callers-list 'SUBSETP :callers) '(POLY-SPLIT-ON-VARS FACE?))
(setf (callers-list 'GENSYM :callers) '(MAP-OVER-ORIENTED-COFACETS))
(setf (callers-list 'CELL-TABLE-OF :callers) '(%MAP-OVER-CELLS GET-CELL))
(setf (callers-list 'MULTIPLE-VALUE-LIST :callers) '(MEMBER))
(setf (callers-list 'FACET-TABLE-OF :callers) '(FACETS MEMBER))
(setf (callers-list 'REMOVE-DUPLICATES :callers) '(COFACETS FACETS))
(setf (callers-list 'COFACET-TABLE-OF :callers) '(COFACETS))
(setf (callers-list '%INSERT :callers) '(%INSERT))
(setf (callers-list '%DELETE :callers) '(%DELETE))
(setf (callers-list 'V-CELL :callers) '(VERTEX-SET))
(setf (callers-list 'SIMPLICIAL-COMPLEX :callers) '(MAKE-SIMPLICIAL-COMPLEX))
(setf (callers-list '%COERCION-CACHE-OF :callers) '(COERCE))
(setf (callers-list 'COMPLEX-OF :callers) '(COBOUNDARY BOUNDARY CANONICAL
                                            COBOUNDARY-DOMAIN BOUNDARY-DOMAIN
                                            COMPLEX-OF
                                            COCHAIN-MODULE-PRINT-OBJECT
                                            CHAIN-MODULE-PRINT-OBJECT))
(setf (callers-list 'CHAIN-MODULE :callers) '(GET-CHAIN-MODULE))
(setf (callers-list 'COCHAIN-MODULE :callers) '(GET-COCHAIN-MODULE))
(setf (callers-list 'GET-CHAIN-MODULE :callers) '(BOUNDARY-DOMAIN))
(setf (callers-list 'MAKE-SIMPLICIAL-COMPLEX :callers) '(COBOUNDARY-DOMAIN
                                                         BOUNDARY-DOMAIN))
(setf (callers-list 'MAX-DIMENSION-OF :callers) '(COBOUNDARY-DOMAIN
                                                  BOUNDARY-DOMAIN))
(setf (callers-list 'GET-COCHAIN-MODULE :callers) '(COBOUNDARY-DOMAIN))
(setf (callers-list 'PRINT-GROUPED :callers) '(PRINT-EXPONENT PRINT-TERM))
(setf (callers-list 'CHAIN-TERMS-OF :callers) '(COERCE COBOUNDARY DERIV
                                                       BOUNDARY-SET BOUNDARY
                                                       MINUS TIMES APPLY
                                                       PRINT-TERM))
(setf (callers-list 'PRINT-TERM :callers) '(PRINT-FORM PRINT-TERM))
(setf (callers-list 'MAKE-CHAIN :callers) '(DERIV BOUNDARY MINUS TIMES ZERO
                                            COERCE))
(setf (callers-list 'FACE :callers) '(COERCE))
(setf (callers-list 'POINTS-ORDER :callers) '(CELL-ORDER))
(setf (callers-list 'CELL-ORDER :callers) '(MAKE-CHAIN-OR-COCHAIN))
(setf (callers-list 'CHAIN-OR-COCHAIN :callers) '(MAKE-CHAIN-OR-COCHAIN))
(setf (callers-list 'MAKE-CHAIN-OR-COCHAIN :callers) '(MAKE-COCHAIN MAKE-CHAIN))
(setf (callers-list 'FACE? :callers) '(APPLY))
(setf (callers-list 'PAIR-UP-TERMS :callers) '(TERMS-DIFFERENCE TERMS-PLUS
                                               CHAIN-TERMS-TIMES
                                               FREE-GROUP-DIFFERENCE
                                               FREE-GROUP-PLUS))
(setf (callers-list 'SIMP1 :callers) '(CHAIN-TERMS-TIMES FREE-GROUP-DIFFERENCE
                                       FREE-GROUP-PLUS))
(setf (callers-list 'SIMP2 :callers) '(CHAIN-TERMS-TIMES FREE-GROUP-DIFFERENCE
                                       FREE-GROUP-PLUS))
(setf (callers-list 'FREE-GROUP-DIFFERENCE :callers) '(FREE-GROUP-MINUS))
(setf (callers-list 'SIMP :callers) '(COBOUNDARY DERIV BOUNDARY-SET
                                      FREE-GROUP-SCALAR-TIMES))
(setf (callers-list 'FREE-GROUP-SCALAR-TIMES :callers) '(TIMES))
(setf (callers-list 'FREE-GROUP-MINUS :callers) '(MINUS))
(setf (callers-list 'MAP-OVER-ORIENTED-FACETS :callers) '(BOUNDARY))
(setf (callers-list 'F :callers) '(MAP-TPOWER-SERIES BOUNDARY))
(setf (callers-list 'BOUNDARY-DOMAIN :callers) '(BOUNDARY))
(setf (callers-list 'EVEN? :callers) '(BOUNDARY-SET))
(setf (callers-list 'COBOUNDARY-DOMAIN :callers) '(COBOUNDARY))
(setf (callers-list 'MAP-OVER-ORIENTED-COFACETS :callers) '(COBOUNDARY))
(setf (callers-list 'COFACET :callers) '(COBOUNDARY))
(setf (callers-list 'MAKE-COCHAIN :callers) '(COERCE COBOUNDARY))
(setf (callers-list 'COPY-TREE :callers) '(COERCE))
(setf (callers-list 'RING? :callers) '(GET-TPOWER-SERIES-DOMAIN))
(setf (callers-list 'MAKE-TPOWER-SERIES-RING* :callers) '(GET-TPOWER-SERIES-DOMAIN))
(setf (callers-list 'FIELD? :callers) '(MAKE-IDEAL EXPT RECIP DENOMINATOR
                                        NUMERATOR GET-TPOWER-SERIES-DOMAIN))
(setf (callers-list 'TPOWER-SERIES :callers) '(COERCE MAKE-TPOWER-SERIES))
(setf (callers-list 'EVERY :callers) '(PRINT-GROUPED))
(setf (callers-list 'ALPHANUMERICP :callers) '(PRINT-GROUPED))
(setf (callers-list 'GROUPED? :callers) '(PRINT-GROUPED))
(setf (callers-list 'CHAR= :callers) '(READ!NUM BFPRIN1 GROUPED?))
(setf (callers-list 'CHAR :callers) '(GROUPED?))
(setf (callers-list 'PRINT-EXPONENT :callers) '(PRINT-TERM))
(setf (callers-list 'PRINT-TPOWER-SERIES :callers) '(PRINT-OBJECT))
(setf (callers-list 'DEFUN :callers) '(TPS-VAR-ORDER TPS-VAR-BO TPS-VAR-VAL))
(setf (callers-list 'FORM :callers) '(WITH-TPOWER-SERIES))
(setf (callers-list 'TPS-VAR-VAL :callers) '(WITH-TPOWER-SERIES))
(setf (callers-list 'TPS-VAR-BO :callers) '(WITH-TPOWER-SERIES))
(setf (callers-list 'TPS-VAR-ORDER :callers) '(WITH-TPOWER-SERIES))
(setf (callers-list 'TPS-VAR-COEFFS :callers) '(WITH-TPOWER-SERIES))
(setf (callers-list 'TPS-SPREAD-COEFFS :callers) '(MODIFY-BRANCH-ORDER))
(setf (callers-list 'MODIFY-BRANCH-ORDER :callers) '(SET-BRANCH-ORDER))
(setf (callers-list 'GE-ATOM? :callers) '(COERCE))
(setf (callers-list 'INTEGER? :callers) '(COERCE))
(setf (callers-list 'COPY-SEQ :callers) '(COERCE))
(setf (callers-list 'CLIST-DEGREE :callers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                              CLIST-FACTOR-SQUAREFREE
                                              CLIST-PTH-ROOT CLIST-DERIV
                                              CLIST-SQFR-DECOMPOSE
                                              CLIST-PRIMITIVE-PART!
                                              CLIST-FACTOR CLIST-DIVIDE
                                              CLIST-QUOTIENT CLIST-DIFFERENCE
                                              CLIST-MINUS? CLIST-PLUS
                                              CLIST-SIMPLIFY PRINT-TERM DEGREE
                                              COERCE))
(setf (callers-list 'SUBSEQ :callers) '(TRUNCATE-ORDER))
(setf (callers-list 'MAP-TPOWER-SERIES :callers) '(MINUS))
(setf (callers-list 'SET-BRANCH-ORDER :callers) '(EXPT))
(setf (callers-list 'ASSERT-INTEGRAL-DOMAIN :callers) '(INITIALIZE-INSTANCE))
(setf (callers-list 'FACTOR-NUMER-OF :callers) '(FACTOR-DOMAIN-PRINT-OBJECT))
(setf (callers-list 'FACTOR-DENOM-OF :callers) '(FACTOR-DOMAIN-PRINT-OBJECT))
(setf (callers-list 'ASSERT-ORDERED-DOMAIN :callers) '(INITIALIZE-INSTANCE))
(setf (callers-list 'ASSERT-COMPLETE-SET :callers) '(INITIALIZE-INSTANCE))
(setf (callers-list '%GLOBAL-ID-COUNTER-OF :callers) '(INITIALIZE-INSTANCE))
(setf (callers-list 'PSETF :callers) '(ORIENTED-SORT))
(setf (callers-list 'ORIENTED-SORT :callers) '(INITIALIZE-INSTANCE))
(setf (callers-list 'BIGFLOATP :callers) '(SAVE!CONST BF-INTEGERP ROUND!EP
                                           ROUND!MT CUT!EP CUT!MT CONV!EP
                                           CONV!MT))
(setf (callers-list 'PRECI! :callers) '(BF-TAN BF-SIN BF-COS SAVE!CONST
                                        BF-QUOTIENT ROUND!MT ORDER! CUT!MT
                                        CONV!MT))
(setf (callers-list 'INCPREC! :callers) '(BF-BINARY> BF-BINARY>= BF-FLOOR
                                          BF-DIFFERENCE BF-PLUS CONV!EP CONV!MT))
(setf (callers-list 'ROUND!LAST :callers) '(BF-EXP ROUND!EP ROUND!MT CONV!EP
                                            CONV!MT))
(setf (callers-list 'DECPREC! :callers) '(ROUND!EP ROUND!MT CUT!EP CUT!MT
                                          CONV!EP CONV!MT))
(setf (callers-list 'LOG :callers) '(LOG PRECI!))
(setf (callers-list 'DIGIT-CHAR :callers) '(CONVERT-NUMBER->CHARACTERS))
(setf (callers-list 'ROUND!MT :callers) '(BF-ACOS BF-ASIN BF-ATAN BF-SIN BF-COS
                                          BF-LOG BF-E BF-PI BF-SQRT
                                          BF-PI-MACHIN GET!CONST BF-EXPT
                                          BF-QUOTIENT PRINT-OBJECT))
(setf (callers-list 'CONVERT-NUMBER->CHARACTERS :callers) '(BFPRIN1
                                                            PRINT-OBJECT))
(setf (callers-list 'CHAR/= :callers) '(BFPRIN1))
(setf (callers-list 'BFPRIN1 :callers) '(BFPRIN1))
(setf (callers-list 'ORDER! :callers) '(BF-ATAN BF-SIN BF-COS BF-LOG BF-EXP
                                        BF-SQRT BFPRIN1))
(setf (callers-list 'PARSE-INTEGER :callers) '(READ!NUM))
(setf (callers-list 'INTEGER-DECODE-FLOAT :callers) '(CONVERT-TO-BIGFLOAT))
(setf (callers-list 'FLOAT-RADIX :callers) '(CONVERT-TO-BIGFLOAT))
(setf (callers-list 'CONV!MT :callers) '(BF-SQRT BF-QUOTIENT))
(setf (callers-list 'BF-EXPT :callers) '(EXPT BF-LOG BF-EXP BF-PI-AGM BF-EXPT))
(setf (callers-list 'BF-TIMES :callers) '(BF-ACOS BF-ASIN BF-ATAN BF-TAN BF-SIN
                                          BF-COS BF-LOG BF-EXP BF-PI-AGM
                                          BF-SQRT ROUND2 CEILING2 FLOOR2
                                          BF-EXPT))
(setf (callers-list 'BF-FLOOR :callers) '(BF-TAN BF-SIN ROUND2 CEILING2 FLOOR2
                                          BF-FLOOR))
(setf (callers-list 'CUT!EP :callers) '(BF-ATAN BF-SIN BF-COS BF-LOG BF-EXP
                                        BF-PI-AGM CEILING2 CEILING1 FLOOR1))
(setf (callers-list 'BF-INTEGER-PART :callers) '(CEILING2 CEILING1 FLOOR2
                                                 FLOOR1))
(setf (callers-list 'BF-DIFFERENCE :callers) '(BF-ACOS BF-ASIN BF-ATAN BF-TAN
                                               BF-SIN BF-LOG BF-EXP BF-PI-AGM
                                               BF-SQRT ROUND2 ROUND1 CEILING2
                                               CEILING1 FLOOR2 FLOOR1))
(setf (callers-list 'FLOOR1 :callers) '(TRUNCATE1))
(setf (callers-list 'CEILING1 :callers) '(TRUNCATE1))
(setf (callers-list 'FLOOR2 :callers) '(TRUNCATE2))
(setf (callers-list 'CEILING2 :callers) '(TRUNCATE2))
(setf (callers-list 'SAVE!CONST :callers) '(BF-E BF-PI-AGM BF-PI-MACHIN))
(setf (callers-list 'BF-ABS :callers) '(HEIGHT ABS BF-ACOS BF-ASIN BF-ATAN
                                        BF-SIN BF-COS BF-LOG BF-EXP BF-PI-AGM
                                        BF-SQRT))
(setf (callers-list 'BF-QUOTIENT :callers) '(BF-ACOS BF-ASIN BF-ATAN BF-TAN
                                             BF-SIN BF-COS BF-LOG BF-EXP
                                             BF-PI-AGM BF-SQRT))
(setf (callers-list 'BF-PLUS :callers) '(BF-ATAN BF-SIN BF-LOG BF-EXP BF-PI-AGM
                                         BF-SQRT))
(setf (callers-list 'BF-SQRT :callers) '(SQRT BF-ACOS BF-ASIN BF-ATAN BF-TAN
                                              BF-PI-AGM))
(setf (callers-list 'CUT!MT :callers) '(BF-ACOS BF-ASIN BF-ATAN BF-TAN BF-SIN
                                        BF-COS BF-EXP BF-PI-AGM))
(setf (callers-list 'GET!CONST :callers) '(BF-E BF-PI))
(setf (callers-list 'BF-PI-MACHIN :callers) '(BF-PI))
(setf (callers-list 'BF-PI-AGM :callers) '(BF-PI))
(setf (callers-list 'BF-PI :callers) '(BF-ACOS BF-ASIN BF-ATAN BF-TAN BF-SIN
                                       BF-COS PI-VALUE))
(setf (callers-list 'BF-E :callers) '(BF-LOG BF-EXP E-VALUE))
(setf (callers-list 'BF-EXP :callers) '(BF-LOG EXP))
(setf (callers-list 'BF-MINUS :callers) '(MINUS BF-ASIN BF-ATAN BF-TAN BF-SIN
                                          BF-LOG))
(setf (callers-list 'PROG :callers) '(BF-LOG))
(setf (callers-list 'BF-LOG :callers) '(LOG))
(setf (callers-list 'BF-SIN :callers) '(BF-TAN SIN BF-SIN BF-COS))
(setf (callers-list 'BF-COS :callers) '(COS BF-SIN))
(setf (callers-list 'BF-TAN :callers) '(TAN BF-TAN))
(setf (callers-list 'BF-ATAN :callers) '(BF-ACOS BF-ASIN ATAN BF-ATAN))
(setf (callers-list 'BF-ASIN :callers) '(ASIN BF-ASIN))
(setf (callers-list 'BF-ACOS :callers) '(ACOS))
(setf (callers-list 'FIELD-DEGREE :callers) '(GET-FINITE-FIELD RECIP
                                              MAKE-ELEMENT PRINT-OBJECT
                                              GF2^N-PRINT-OBJECT
                                              NUMBER-OF-ELEMENTS))
(setf (callers-list 'GFP :callers) '(MAKE-GFP-DOMAIN))
(setf (callers-list 'GFP-ELEMENT :callers) '(MAKE-ELEMENT))
(setf (callers-list 'PSETQ :callers) '(TERMS-GCDU COMPUTE-INVERSE))
(setf (callers-list 'TOTIENT :callers) '(MULTIPLICATIVE-ORDER))
(setf (callers-list 'LOGAND :callers) '(MAKE-ELEMENT MAKE-GFP-DOMAIN))
(setf (callers-list 'GF2^N :callers) '(MAKE-GFP-DOMAIN))
(setf (callers-list 'LOGXOR :callers) '(MAKE-GFP-DOMAIN))
(setf (callers-list 'GF2^N-ELEMENT :callers) '(MAKE-ELEMENT))
(setf (callers-list 'NUMBER-OF-ELEMENTS :callers) '(MULTIPLICATIVE-ORDER))
(setf (callers-list 'ALL-DIVISORS :callers) '(MULTIPLICATIVE-ORDER))
(setf (callers-list 'TIMES :callers) '(EXPT))
(setf (callers-list 'GFM :callers) '(MAKE-GFM-DOMAIN))
(setf (callers-list 'GFM-ELEMENT :callers) '(MAKE-ELEMENT))
(setf (callers-list 'MAKE-GFM-DOMAIN :callers) '(MAKE-FINITE-FIELD*))
(setf (callers-list 'MAKE-GFP-DOMAIN :callers) '(MAKE-FINITE-FIELD*))
(setf (callers-list 'MAKE-FINITE-FIELD* :callers) '(GET-FINITE-FIELD
                                                    MAKE-FINITE-FIELD))
(setf (callers-list 'RING-OF :callers) '(ADD-RELATION TIMES PLUS
                                         INITIALIZE-INSTANCE GET-FACTOR-RING))
(setf (callers-list 'GENERATORS-OF :callers) '(BINARY= TIMES PLUS
                                               IDEAL-PRINT-OBJECT
                                               GET-FACTOR-RING))
(setf (callers-list 'MODULUS :callers) '(USE-CHINESE-REMAINDER))
(setf (callers-list 'VALUE :callers) '(USE-CHINESE-REMAINDER))
(setf (callers-list 'COMPLEXP :callers) '(WEYL:MAKE-ELEMENT))
(setf (callers-list 'RANDOM-FLOATING-NUMBER :callers) '(RANDOM))
(setf (callers-list 'COMPLETE-SET? :callers) '(EXPT SQRT))
(setf (callers-list 'EXTENDED-GCD* :callers) '(EXTENDED-GCD EXTENDED-GCD*))
(setf (callers-list 'SIGNUM :callers) '(EXTENDED-GCD))
(setf (callers-list 'TAN :callers) '(TAN))
(setf (callers-list 'ASIN :callers) '(ASIN))
(setf (callers-list 'SINH :callers) '(SINH))
(setf (callers-list 'COSH :callers) '(COSH))
(setf (callers-list 'TANH :callers) '(TANH))
(setf (callers-list 'ASINH :callers) '(ASINH))
(setf (callers-list 'ACOSH :callers) '(ACOSH))
(setf (callers-list 'ATANH :callers) '(ATANH))
(setf (callers-list 'EPOLYNOMIAL :callers) '(GENERATORS-OF MAKE-EPOLYNOMIAL*))
(setf (callers-list 'MAKE-EPOLYNOMIAL :callers) '(ADD-RELATION MAKE-EPOLYNOMIAL))
(setf (callers-list 'MAKE-EPOLYNOMIAL* :callers) '(EXPT MINUS SCAN-POLY-FORM
                                                        MAKE-EPOLYNOMIAL))
(setf (callers-list 'GREATER-FUNCTION :callers) '(SCAN-POLY-FORM
                                                  MAKE-EPOLYNOMIAL))
(setf (callers-list 'SCAN-POLY-FORM :callers) '(SCAN-POLY-FORM))
(setf (callers-list 'GET-COMPARISON-FUN :callers) '(CONVERT-LIST
                                                    INITIALIZE-INSTANCE
                                                    SCAN-POLY-FORM))
(setf (callers-list 'GTERM-CONSTANT? :callers) '(PRINT-OBJECT))
(setf (callers-list 'FBOUNDP :callers) '(MAKE-COMPARISON-FUN GET-COMPARISON-FUN))
(setf (callers-list 'SYMBOL-FUNCTION :callers) '(MAKE-COMPARISON-FUN
                                                 GET-COMPARISON-FUN))
(setf (callers-list 'MAKE-COMPARISON-FUN :callers) '(GET-COMPARISON-FUN))
(setf (callers-list 'COMPILE :callers) '(MAKE-COMPARISON-FUN))
(setf (callers-list 'CONVERT-TERM :callers) '(CONVERT-TERM))
(setf (callers-list 'TRANSFORM-TERM :callers) '(TRANSFORM-TERM))
(setf (callers-list 'TERMS0? :callers) '(TERMS-GCDU POLY-C-COEFFICIENT
                                         POLY-COEFFICIENT POLY-DEGREE
                                         POLY-VARIABLE-LIST
                                         TERMS-SUBRESULTANT-GCD
                                         TERMS-REDUCED-GCD TERMS-PRIMITIVE-GCD
                                         TERMS-EUCLIDEAN-GCD TERMS-PRIM-PART
                                         TERMS-CONTENT TERMS-PSEUDO-REMAINDER
                                         TERMS-QUOTIENT TERMS-TIMES TERMS-TERM
                                         POLY-SIMP POLY-MONOMIAL? GTERMS-PRIM*
                                         TERMS-REDUCE REDUCE-ALL CRITERION1
                                         TERMS-S-POLY GTERMS-TIMES
                                         COLLECT-OLD-TERM))
(setf (callers-list 'COLLECT-OLD-TERM :callers) '(COLLECT-OLD-TERM))
(setf (callers-list 'LT :callers) '(GTERMS-PRIM* TERMS-REDUCE ADD-UNDONE
                                    REDUCE-ALL CRITERION1 TERMS-S-POLY
                                    GTERMS-EXPT GTERMS-TIMES COLLECT-OLD-TERM))
(setf (callers-list 'SLOT-VALUE :callers) '(MINUS))
(setf (callers-list 'GTERMS-MINUS :callers) '(MINUS))
(setf (callers-list 'MAKE-ETERM :callers) '(GTERMS-EXPT GTERMS-MINUS))
(setf (callers-list 'TERMS0 :callers) '(TERMS-QUOTIENT TERMS-MON-TIMES
                                        GTERMS-MON-TIMES))
(setf (callers-list 'THE :callers) '(CLIST-TIMES GTERM-CONSTANT? GTERM-EQUAL
                                     GTERM-DOMINATES GTERM-DISJOINT GTERM-LCM
                                     GTERM-QUOT GTERM-TIMES))
(setf (callers-list 'GTERMS-MON-TIMES :callers) '(GTERMS-TIMES))
(setf (callers-list 'GTERM-TIMES :callers) '(TERMS-S-POLY GTERMS-TIMES))
(setf (callers-list 'GTERM-EQUAL :callers) '(GTERMS-TIMES))
(setf (callers-list 'GTERMS-EXPT :callers) '(EXPT))
(setf (callers-list 'GTERMS-TIMES :callers) '(GTERMS-EXPT))
(setf (callers-list 'SUPER-DOMAINS-OF :callers) '(INITIALIZE-INSTANCE))
(setf (callers-list 'IDEAL :callers) '(MAKE-IDEAL))
(setf (callers-list 'PID-IDEAL :callers) '(MAKE-IDEAL))
(setf (callers-list 'MAKE-IDEAL :callers) '(TIMES PLUS))
(setf (callers-list 'BINARY= :callers) '(BINARY=))
(setf (callers-list 'GROBNER-BASIS :callers) '(MAKE-IDEAL))
(setf (callers-list 'ADD-RELATION :callers) '(ADD-RELATION MAKE-IDEAL))
(setf (callers-list 'NEW-FUNCTION :callers) '(CONVERT-LIST))
(setf (callers-list 'CONVERT-LIST :callers) '(CONVERT-LIST))
(setf (callers-list 'REDUCIBLES-OF :callers) '(ADD-RELATION))
(setf (callers-list 'GTERM-LCM :callers) '(ADD-UNDONE REDUCE-ALL TERMS-S-POLY))
(setf (callers-list 'GTERM-QUOT :callers) '(TERMS-S-POLY))
(setf (callers-list 'WITH-GROBNER-OPERATIONS :callers) '(NEW-BASIS REDUCE-ALL
                                                         REDUCE-BASIS))
(setf (callers-list 'GTERM-DOMINATES :callers) '(TERMS-REDUCE REDUCE-ALL
                                                 CRITERION1))
(setf (callers-list 'CRITERION1 :callers) '(CRITERION1))
(setf (callers-list 'REDUCE-ALL :callers) '(CRITERION1))
(setf (callers-list 'NEW-BASIS :callers) '(CRITERION1))
(setf (callers-list 'GTERM-DISJOINT :callers) '(CRITERION1))
(setf (callers-list 'TERMS-REDUCE :callers) '(REDUCE-ALL CRITERION1))
(setf (callers-list 'GTERMS-PRIM* :callers) '(TERMS-REDUCE CRITERION1))
(setf (callers-list 'TERMS-S-POLY :callers) '(TERMS-REDUCE CRITERION1))
(setf (callers-list 'E> :callers) '(CHECK-DEGREE TERMS-PSEUDO-REMAINDER
                                    TERMS-TIMES ADD-UNDONE))
(setf (callers-list 'ADD-UNDONE :callers) '(ADD-UNDONE))
(setf (callers-list 'E< :callers) '(POLY-GCD TERMS-PSEUDO-REMAINDER
                                    TERMS-QUOTIENT TERMS-TERM ADD-UNDONE))
(setf (callers-list 'MAKE-POLYNOMIAL-RING* :callers) '(GET-POLYNOMIAL-RING))
(setf (callers-list 'MPOLYNOMIAL :callers) '(MAKE-POLYNOMIAL))
(setf (callers-list 'VARIABLE-INDEX-TABLE :callers) '(SET-VARIABLE-NUMBER-PROPERTY
                                                      GET-VARIABLE-NUMBER-PROPERTY
                                                      GET-VARIABLE-NAME
                                                      VARIABLE-SYMBOL))
(setf (callers-list 'INSERT-INTO-ACCUMULATION-LIST :callers) '(INSERT-INTO-ACCUMULATION-LIST))
(setf (callers-list 'ACCUMULATE-ACCUMULATION-LIST :callers) '(ACCUMULATE-ACCUMULATION-LIST))
(setf (callers-list 'MAKE-AUTOMORPHISM :callers) '(MAKE-POLYNOMIAL-MORPHISM))
(setf (callers-list 'TRANSFORM :callers) '(TRANSFORM))
(setf (callers-list 'MAKE-POLYNOMIAL-MORPHISM :callers) '(MAKE-POLYNOMIAL-MORPHISM))
(setf (callers-list 'POLY-MONOMIAL? :callers) '(POLY-EXPT PRINT-TERM
                                                POLY-MONOMIAL?))
(setf (callers-list 'PRINT-FORM :callers) '(PRINT-TERM))
(setf (callers-list 'E= :callers) '(DENSE-INTERPOLATE-COEFFICIENTS
                                    POLY-COEFFICIENT TERMS-TIMES TERMS-TERM))
(setf (callers-list 'E1 :callers) '(COMPUTE-VANDERMONDE-Q POLY-SUBST RESULTANT
                                    TERMS-DIFFERENCE TERMS-PLUS))
(setf (callers-list 'E2 :callers) '(TERMS-DIFFERENCE TERMS-PLUS))
(setf (callers-list 'TERMS-PLUS :callers) '(TERMS-INTERPOLATE TERMS-QUOTIENT
                                            POLY-PLUS))
(setf (callers-list 'TERMS-MINUS :callers) '(POLY-MINUS))
(setf (callers-list 'TERMS-MINUS? :callers) '(POLY-MINUS?))
(setf (callers-list 'TERMS-DIFFERENCE :callers) '(TERMS-PSEUDO-REMAINDER
                                                  TERMS-QUOTIENT
                                                  POLY-DIFFERENCE))
(setf (callers-list 'TE :callers) '(TERMS-CQUOTIENT TERMS-MON-TIMES))
(setf (callers-list 'E+ :callers) '(TERMS-TIMES TERMS-MON-TIMES))
(setf (callers-list 'E-Y :callers) '(TERMS-TIMES))
(setf (callers-list 'E-X :callers) '(TERMS-TIMES))
(setf (callers-list 'E* :callers) '(POLY-EXPT))
(setf (callers-list 'THROW :callers) '(POLY-QUOTIENT* TERMS-QUOTIENT))
(setf (callers-list 'POLY-QUOTIENT* :callers) '(TERMS-QUOTIENT))
(setf (callers-list 'TERMS-CQUOTIENT :callers) '(SOLVE-VANDERMONDETD
                                                 SOLVE-VANDERMONDET
                                                 SOLVE-VANDERMONDE
                                                 TERMS-SUBRESULTANT-GCD
                                                 TERMS-REDUCED-GCD
                                                 TERMS-PRIM-PART POLY-QUOTIENT*))
(setf (callers-list 'TERMS-QUOTIENT :callers) '(SOLVE-VANDERMONDETD
                                                SOLVE-VANDERMONDET
                                                SOLVE-VANDERMONDE
                                                POLY-QUOTIENT*))
(setf (callers-list 'EMINUS? :callers) '(DENSE-INTERPOLATE-COEFFICIENTS
                                         TERMS-PSEUDO-REMAINDER))
(setf (callers-list 'REMAINDER :callers) '(POLY-PSEUDO-REMAINDER))
(setf (callers-list 'TERMS-COEF-REMAINDER :callers) '(POLY-PSEUDO-REMAINDER))
(setf (callers-list 'POLY-PSEUDO-REMAINDER :callers) '(TERMS-COEF-REMAINDER))
(setf (callers-list 'POLY-HEIGHT :callers) '(POLY-FACTOR-CBOUND HEIGHT
                                             POLY-HEIGHT))
(setf (callers-list 'TERMS-CONTENT :callers) '(TERMS-PRIM-PART POLY-CONTENT))
(setf (callers-list 'POLY-CONTENT :callers) '(POLY-CONTENT-AND-PRIM-PART
                                              POLY-GCD))
(setf (callers-list 'POLY-DEGREE :callers) '(SPMOD-GCD2 POLY-DEGREE DEGREE
                                             POLY-SPLIT-ON-VARS))
(setf (callers-list 'POLY-COEFFICIENT :callers) '(PARSE-LINEAR-EQUATION
                                                  POLY-COEFFICIENT COEFFICIENT
                                                  POLY-SPLIT-ON-VARS))
(setf (callers-list 'POLY-SPLIT-ON-VARS :callers) '(POLY-FIND-COMMON-VARS))
(setf (callers-list 'OP :callers) '(POLY-MGCD))
(setf (callers-list 'POLY-FIND-COMMON-VARS :callers) '(POLY-MGCD))
(setf (callers-list 'RANDOM-CONSTANT :callers) '(POLY-MGCD))
(setf (callers-list 'SPMOD-GCD1 :callers) '(POLY-MGCD))
(setf (callers-list 'POLY-TEST-QUOTIENT :callers) '(SPMOD-GCD2 POLY-MGCD))
(setf (callers-list 'TERMS-PRIM-PART :callers) '(TERMS-SUBRESULTANT-GCD
                                                 TERMS-REDUCED-GCD
                                                 TERMS-PRIMITIVE-GCD
                                                 TERMS-EUCLIDEAN-GCD
                                                 POLY-PRIM-PART))
(setf (callers-list 'TERMS-MONICIZE :callers) '(TERMS-GCDU POLY-MONICIZE))
(setf (callers-list 'TERMS-EUCLIDEAN-GCD :callers) '(POLY-EUCLIDEAN-GCD))
(setf (callers-list 'TERMS-PRIMITIVE-GCD :callers) '(POLY-PRIMITIVE-GCD))
(setf (callers-list 'TERMS-REDUCED-GCD :callers) '(POLY-REDUCED-GCD))
(setf (callers-list 'E1+ :callers) '(TERMS-REDUCED-GCD))
(setf (callers-list 'TERMS-SUBRESULTANT-GCD :callers) '(POLY-RESULTANT
                                                        POLY-SUBRESULTANT-GCD))
(setf (callers-list 'POLY-SUBST :callers) '(CHECK-DEGREE SPMOD-GCD2 SUBSTITUTE
                                            TERMS-HORNERS-RULE TERMS-SUBST
                                            RESULTANT))
(setf (callers-list 'POLY-RESULTANT :callers) '(RESULTANT))
(setf (callers-list 'EODDP :callers) '(TERMS-SUBRESULTANT-GCD))
(setf (callers-list 'TERMS-COERCE :callers) '(POLY-COERCE))
(setf (callers-list 'POLY-COERCE :callers) '(TERMS-COERCE))
(setf (callers-list 'TERMS-HORNERS-RULE :callers) '(SOLVE-VANDERMONDETD
                                                    SOLVE-VANDERMONDET
                                                    SOLVE-VANDERMONDE
                                                    TERMS-INTERPOLATE
                                                    POLY-SUBST))
(setf (callers-list 'POLY-VARIABLE-LIST :callers) '(POLY-VARIABLE-LIST))
(setf (callers-list 'TERMS-DERIVATIVE :callers) '(POLY-DERIVATIVE))
(setf (callers-list 'TERMS-MAX-COEFFICIENT :callers) '(TERMS-MAX-COEFFICIENT
                                                       POLY-MAX-COEFFICIENT))
(setf (callers-list 'IGNORE :callers) '(TERMS-LIST-OF-VARS TERMS-DEGREE-VECTOR
                                        TERMS-MAX-COEFFICIENT))
(setf (callers-list 'EMAX :callers) '(POLY-DEGREE))
(setf (callers-list 'TERMS-DEGREE-VECTOR :callers) '(TERMS-DEGREE-VECTOR
                                                     POLY-DEGREE-VECTOR))
(setf (callers-list 'MORE-MAIN-ORDER-NUMBER? :callers) '(ADD-VARIABLE-DEGREE
                                                         POLY-DEGREE-VECTOR))
(setf (callers-list 'ADD-VARIABLE-DEGREE :callers) '(TERMS-DEGREE-VECTOR))
(setf (callers-list 'P-LIST-OF-VARS :callers) '(P-LIST-OF-VARS
                                                TERMS-LIST-OF-VARS))
(setf (callers-list 'TERMS-LIST-OF-VARS :callers) '(P-LIST-OF-VARS))
(setf (callers-list 'POLY-C-COEFFICIENT :callers) '(POLY-C-COEFFICIENT
                                                    COEFFICIENT))
(setf (callers-list 'POLY-LEADING-COEFFICIENT :callers) '(POLY-LEADING-COEFFICIENT))
(setf (callers-list 'VARIABLE-HASH-TABLE :callers) '(VARIABLE-INDEX))
(setf (callers-list 'SET-VARIABLE-NUMBER-PROPERTY :callers) '(SET-VARIABLE-PROPERTY))
(setf (callers-list 'COPY-ARRAY-CONTENTS :callers) '(ADD-NEW-VARIABLE))
(setf (callers-list 'WITH-LINEAR-SUPPORT :callers) '(DENSE-INTERPOLATE-COEFFICIENTS
                                                     SOLVE-VANDERMONDETD
                                                     SOLVE-VANDERMONDET
                                                     SOLVE-VANDERMONDE
                                                     COMPUTE-VANDERMONDE-Q
                                                     TERMS-INTERPOLATE))
(setf (callers-list 'LINEAR-FORM :callers) '(SOLVE-VANDERMONDETD
                                             SOLVE-VANDERMONDET
                                             SOLVE-VANDERMONDE
                                             COMPUTE-VANDERMONDE-Q
                                             TERMS-INTERPOLATE))
(setf (callers-list 'TERMS-INTERPOLATE :callers) '(POLY-INTERPOLATE))
(setf (callers-list 'POLY-INTERPOLATE :callers) '(DENSE-INTERPOLATE-COEFFICIENTS
                                                  INTERPOLATE))
(setf (callers-list 'DEGREE-PARTITION :callers) '(DEGREE-PARTITION INTERPOLATE))
(setf (callers-list 'BOUND-DEGREE-TERM-COUNT :callers) '(INTERPOLATE))
(setf (callers-list 'MAKE-DEGREE-MATRIX :callers) '(INTERPOLATE))
(setf (callers-list 'EXPT-LIST :callers) '(INTERPOLATE))
(setf (callers-list 'COMPUTE-VANDERMONDE-Q :callers) '(SOLVE-VANDERMONDETD
                                                       SOLVE-VANDERMONDET
                                                       SOLVE-VANDERMONDE))
(setf (callers-list 'POLY-SKELETON :callers) '(SPMOD-GCD2 PSKELETON
                                               POLY-SKELETON))
(setf (callers-list 'SPARSEINTERPSTAGEI :callers) '(SPARSEINTERPSTAGE))
(setf (callers-list 'PSKELETON :callers) '(SPARSEINTERPSTAGEI))
(setf (callers-list 'INITY :callers) '(SPARSEINTERPSTAGEI))
(setf (callers-list 'SOLVE-VANDERMONDET :callers) '(SPARSEINTERPSTAGEI))
(setf (callers-list 'SPARSEINTERPSTAGE :callers) '(INTERPOLATE))
(setf (callers-list 'POLY-FACTOR-CBOUND :callers) '(SPMOD-GCD))
(setf (callers-list 'POLY-CONTENT-AND-PRIM-PART :callers) '(SPMOD-GCD1))
(setf (callers-list 'POLY-PRIM-PART :callers) '(SPMOD-GCD1))
(setf (callers-list 'SPMOD-GCD2 :callers) '(SPMOD-GCD2 SPMOD-GCD1))
(setf (callers-list 'POLY-GCDU :callers) '(SPMOD-GCD2))
(setf (callers-list 'SPMOD-GCD3 :callers) '(SPMOD-GCD2))
(setf (callers-list 'DENSE-INTERPOLATE-COEFFICIENTS :callers) '(DENSE-INTERPOLATE-COEFFICIENTS
                                                                SPMOD-GCD2))
(setf (callers-list 'CHECK-DEGREE :callers) '(CHECK-DEGREE))
(setf (callers-list 'TERMS-GCDU+ :callers) '(CHECK-DEGREE))
(setf (callers-list 'VAR-NUM :callers) '(CHECK-DEGREE))
(setf (callers-list 'NON-ZERO-RANDOM :callers) '(CHECK-DEGREE))
(setf (callers-list 'INTERPOLATE-FROM-SKEL :callers) '(CHECK-DEGREE))
(setf (callers-list 'EVAL-MONOMIAL :callers) '(INTERPOLATE-FROM-SKEL))
(setf (callers-list 'SOLVE-VANDERMONDETD :callers) '(INTERPOLATE-FROM-SKEL))
(setf (callers-list 'MAKE-MONOMIAL :callers) '(MAKE-MONOMIAL))
(setf (callers-list 'TERMS-GCDU :callers) '(TERMS-GCDU+ POLY-GCDU))
(setf (callers-list 'COEF-LIST0? :callers) '(CLIST-SQFR-DECOMPOSE CLIST-FACTOR
                                             CLIST-EXTENDED-GCD CLIST-GCD
                                             CLIST-DIVIDE CLIST-REMAINDER
                                             CLIST-QUOTIENT 0?))
(setf (callers-list 'COEF-LIST1? :callers) '(CLIST-DIVIDE 1?))
(setf (callers-list 'UPOLYNOMIAL :callers) '(MAKE-UPOLYNOMIAL
                                             WEYL:MAKE-UPOLYNOMIAL))
(setf (callers-list 'CLIST-SIMPLIFY :callers) '(CLIST-DERIV CLIST-DIVIDE
                                                MAKE-UPOLYNOMIAL
                                                WEYL:MAKE-UPOLYNOMIAL))
(setf (callers-list 'MAKE-UPOLYNOMIAL :callers) '(DERIVATION SQUARE-FREE FACTOR
                                                  EXTENDED-GCD EXPT MINUS
                                                  MAKE-UPOLYNOMIAL))
(setf (callers-list 'PRINT-UPOLYNOMIAL :callers) '(PRINT-OBJECT))
(setf (callers-list 'CLIST-GET :callers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                           CLIST-FACTOR-SQUAREFREE
                                           CLIST-PTH-ROOT CLIST-DERIV
                                           CLIST-PRIMITIVE-PART! CLIST-DIVIDE
                                           CLIST-TIMES CLIST-MINUS? CLIST-MINUS
                                           CLIST-SIMPLIFY PRINT-TERM))
(setf (callers-list 'CLIST-SUBSEQ :callers) '(CLIST-SIMPLIFY))
(setf (callers-list 'ZIPPER-SUM :callers) '(ZIPPER-SUM))
(setf (callers-list 'CLIST-MINUS :callers) '(MINUS))
(setf (callers-list 'MAKE-CLIST :callers) '(CLIST-PTH-ROOT CLIST-DERIV
                                            CLIST-DIVIDE CLIST-MINUS))
(setf (callers-list 'CLIST-LENGTH :callers) '(CLIST-DERIV CLIST-TIMES
                                              CLIST-MINUS))
(setf (callers-list 'CLIST-MINUS? :callers) '(MINUS?))
(setf (callers-list 'CLIST-EXPTSQ :callers) '(EXPT))
(setf (callers-list 'CLIST-TIMES :callers) '(CLIST-EXPT-MOD-POLY
                                             CLIST-EXTENDED-GCD CLIST-LCM
                                             CLIST-EXPTSQ))
(setf (callers-list 'COEF-LIST1 :callers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                            CLIST-EXPT-MOD-POLY
                                            CLIST-FACTOR-SQUAREFREE
                                            CLIST-EXPTSQ))
(setf (callers-list 'CLIST-DIVIDE :callers) '(CLIST-EXTENDED-GCD
                                              CLIST-REMAINDER CLIST-QUOTIENT))
(setf (callers-list 'COEF-LIST0 :callers) '(CLIST-DERIV CLIST-DIVIDE))
(setf (callers-list 'COPY-CLIST :callers) '(CLIST-DIVIDE))
(setf (callers-list 'DO* :callers) '(CLIST-DIVIDE))
(setf (callers-list 'CLIST-REMAINDER :callers) '(CLIST-EXPT-MOD-POLY CLIST-GCD))
(setf (callers-list 'CLIST-QUOTIENT :callers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                                CLIST-FACTOR-SQUAREFREE
                                                CLIST-SQFR-DECOMPOSE CLIST-LCM))
(setf (callers-list 'CLIST-GCD :callers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                           CLIST-FACTOR-SQUAREFREE
                                           CLIST-SQFR-DECOMPOSE CLIST-LCM))
(setf (callers-list 'CLIST-EXTENDED-GCD :callers) '(CLIST-EXTENDED-GCD
                                                    EXTENDED-GCD))
(setf (callers-list 'CLIST-DIFFERENCE :callers) '(CLIST-FACTOR-SQUAREFREE
                                                  CLIST-EXTENDED-GCD))
(setf (callers-list 'CLIST-FACTOR :callers) '(CLIST-FACTOR FACTOR))
(setf (callers-list 'CLIST-DERIV :callers) '(DERIVATION CLIST-SQFR-DECOMPOSE
                                             CLIST-FACTOR))
(setf (callers-list 'CLIST-PTH-ROOT :callers) '(CLIST-SQFR-DECOMPOSE
                                                CLIST-FACTOR))
(setf (callers-list 'PP :callers) '(CLIST-FACTOR))
(setf (callers-list 'CLIST-SQFR-DECOMPOSE :callers) '(SQUARE-FREE CLIST-FACTOR))
(setf (callers-list 'CLIST-FACTOR-SQUAREFREE :callers) '(CLIST-FACTOR))
(setf (callers-list 'CLIST-PRIMITIVE-PART! :callers) '(CLIST-SQFR-DECOMPOSE))
(setf (callers-list 'CLIST-X :callers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                         CLIST-FACTOR-SQUAREFREE))
(setf (callers-list 'CLIST-EXPT-MOD-POLY :callers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                                     CLIST-FACTOR-SQUAREFREE))
(setf (callers-list 'CLIST-FACTOR-PRODUCT-NTH-DEGREES :callers) '(CLIST-FACTOR-SQUAREFREE))
(setf (callers-list 'CLIST-PLUS :callers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES))
(setf (callers-list 'PROJECTIVE-SPACE-ELEMENT :callers) '(MAKE-PROJECTIVE-SPACE-ELEMENT))
(setf (callers-list 'MAKE-PROJECTIVE-SPACE-ELEMENT :callers) '(MAKE-ELEMENT))
(setf (callers-list 'MAKE-VECTOR-SPACE :callers) '(MAKE-AFFINE-SPACE))
(setf (callers-list 'PROJECT :callers) '(MAP-FUN))
(setf (callers-list 'MAKE-MORPHISM :callers) '(MAP-FUN))
(setf (callers-list 'MAP-FUN :callers) '(MAP-FUN))
(setf (callers-list 'PRINT-FREE-MODULE-ELEMENT :callers) '(PRINT-OBJECT))
(setf (callers-list 'LOOP-VECTOR-BIND :callers) '(IMAGPART REALPART CONJUGATE
                                                           SUBSTITUTE DERIV
                                                           DERIVATION
                                                           MULTIPLY-VECTOR-BY-SCALAR
                                                           MINUS))
(setf (callers-list 'I :callers) '(IMAGPART REALPART CONJUGATE SUBSTITUTE DERIV
                                            DERIVATION
                                            MULTIPLY-VECTOR-BY-SCALAR MINUS))
(setf (callers-list '(E (TUPLE-VALUE VECTOR)) :callers) '(IMAGPART REALPART
                                                                   CONJUGATE
                                                                   DERIV
                                                                   DERIVATION
                                                                   MULTIPLY-VECTOR-BY-SCALAR
                                                                   MINUS))
(setf (callers-list 'MULTIPLY-VECTOR-BY-SCALAR :callers) '(QUOTIENT TIMES))
(setf (callers-list 'LIST-OPERATIONS :callers) '(DERIVATION))
(setf (callers-list '(E (TUPLE-VALUE V)) :callers) '(SUBSTITUTE))
(setf (callers-list 'VARIABLE-MINIMAL-POLYNOMIAL :callees) '(LIST QUOTE LIST*
                                                                  SB-INT:QUASIQUOTE))
(setf (callers-list 'MINIMAL-POLYNOMIAL :callees) '(VARIABLE-INDEX
                                                    GET-VARIABLE-NUMBER-PROPERTY
                                                    ERROR GE-EQUAL FUNCTION
                                                    MEMBER UNLESS WITH-SLOTS))
(setf (callers-list 'SET-MINIMAL-POLYNOMIAL :callees) '(POLY-TERMS
                                                        GET-VARIABLE-NUMBER-PROPERTY
                                                        SETF DISPLAY
                                                        WITH-OUTPUT-TO-STRING
                                                        POLY-ORDER-NUMBER =
                                                        VARIABLE-INDEX
                                                        POLY-FORM LET DOMAIN-OF
                                                        EQL ERROR GE-EQUAL
                                                        FUNCTION MEMBER UNLESS
                                                        WITH-SLOTS COERCE SETQ))
(setf (callers-list 'MAKE-POLYNOMIAL :callees) '(MPOLYNOMIAL LABELS FIRST
                                                 ARRAY-DIMENSION - POLY-FORM
                                                 LET* ERROR DOMAIN-OF EQL
                                                 UNLESS ALGEBRAIC-OBJECT
                                                 MAKE-INSTANCE))
(setf (callers-list 'ALG-POLY-TIMES :callees) '(MORE-MAIN? TERMS-TIMES
                                                TERMS-PSEUDO-REMAINDER
                                                POLY-ORDER-NUMBER
                                                MINIMAL-POLYNOMIAL LET
                                                SAME-VARIABLE? E0 POLY-TERMS
                                                TERMS-MON-TIMES POLY-SIMP * IF
                                                POLY-COEF? COND))
(setf (callers-list 'EXPT :callees) '(CLIST-EXPTSQ MAKE-UPOLYNOMIAL GTERMS-EXPT
                                      MAKE-EPOLYNOMIAL* GREATER-FUNCTION-OF ASH
                                      RECIP BF-EXPT MAKE-BIGFLOAT FP-VALUE
                                      QO-DENOMINATOR QO-NUMERATOR COMPLETE-SET?
                                      ODDP MAKE-QUOTIENT-ELEMENT FIELD? 1?
                                      COMPLEX EVENP = AND INTEGER-NTH-ROOT ABS
                                      TIMES CHARACTERISTIC EXPT-MODULO-INTEGER
                                      MAKE-ELEMENT EQL WITH-SLOTS
                                      MAKE-TPOWER-SERIES < ARRAY-DIMENSION LOOP
                                      SVREF SETF LENGTH 1- 1+ MAKE-ARRAY ERROR
                                      NUMERATOR / DENOMINATOR SET-BRANCH-ORDER
                                      * + ZEROP COND CONVERT-TO-LISP-NUMBER
                                      SETQ COEFFICIENT-DOMAIN-OF ZERO LET*
                                      (A A) WITH-TPOWER-SERIES CALL-NEXT-METHOD
                                      VALENCE 0? TYPEP INTEGERP OR NOT -
                                      POLY-EXPT MAKE-RATIONAL-FUNCTION MINUSP
                                      IF QF-RING N1
                                      WITH-NUMERATOR-AND-DENOMINATOR
                                      INTEGER-VALUE EXPT-QUOTIENT X FUNCALL
                                      QUOTE BODY-OF EXPT BOUND-VARS-OF
                                      MAKE-APP-FUNCTION POLY-FORM ONE
                                      ALG-POLY-TIMES FUNCTION REPEATED-SQUARING
                                      %FUNCALL MAKE-POLYNOMIAL
                                      BIND-DOMAIN-CONTEXT DOMAIN-OF LET))
(setf (callers-list 'CHOOSE :callees) '(LIST* QUOTE LIST SB-INT:QUASIQUOTE
                                              %GETF COND))
(setf (callers-list '%CHOOSE :callees) '(LABELS ERROR
                                          INTEGERP
                                          NULL
                                          OR
                                          UNLESS))
(setf (callers-list 'PICK :callees) '(REMOVE NULL + MINUSP ERROR LET SETQ LOOP
                                             LENGTH > IF FIRST CONS 1- REST
                                             PICK %FUNCALL ZEROP COND))
(setf (callers-list 'PICK-NULL :callees) '(+ PICK MINUSP ZEROP = OR ERROR >
                                             NULL COND LENGTH REST PICK-NULL
                                             %FUNCALL FIRST CONS LET WHEN))
(setf (callers-list '%CHOOSE-REPEATS :callees) '(LABELS ERROR
                                                  INTEGERP
                                                  NULL
                                                  OR
                                                  UNLESS))
(setf (callers-list 'PERMUTE :callees) '(LIST* QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'PERMUTE% :callees) '(LABELS))
(setf (callers-list '%PARTITION1 :callees) '(LABELS))
(setf (callers-list 'PART-INT :callees) '(1+ MINUSP OR PLUSP NOT IF VALUES CONS
                                             - PART-INT + LOOP FUN FUNCALL
                                             ZEROP COND))
(setf (callers-list '%PARTITION2 :callees) '(LABELS))
(setf (callers-list 'PARTITION :callees) '(LIST* NULL AND COND ERROR WHEN PUSH
                                                 MEMBER UNLESS CDDR FUNCTION
                                                 KEYWORD LOOP QUOTE LIST
                                                 SB-INT:QUASIQUOTE GETF OR LET))
(setf (callers-list 'MAP-OVER-TREE :callees) '(APPEND LIST* LIST
                                                      SB-INT:QUASIQUOTE COND
                                                      ERROR AND WHEN QUOTE
                                                      %GETF OR LET))
(setf (callers-list 'AVL-SIZE :callees) '(+ 1+ AVL-RIGHT AVL-LEFT AVL-SIZE IF
                                            AVL-ROOT LET))
(setf (callers-list 'PRINT-OBJECT :callees) '(PRINT-FREE-MODULE-ELEMENT
                                              PRINT-UPOLYNOMIAL EQL DISPLAY
                                              ZEROP UNLESS GTERM-CONSTANT?
                                              MINUS? SVREF POLY-FORM LENGTH 0?
                                              FP-VALUE INTEGER-VALUE GFP-VALUE
                                              FIELD-DEGREE CHARACTERISTIC ABS
                                              CONVERT-NUMBER->CHARACTERS
                                              ROUND!MT SETQ RING-VARIABLES
                                              PRINT-TPOWER-SERIES FLET
                                              VERTICES-OF CALL-NEXT-METHOD
                                              ID-NUMBER-OF ELEMENT-VALUE
                                              VALUE-OF QF-RING
                                              PRINT-MPOLYNOMIAL-FORM POLY-1?
                                              PRIN1 1? NUMERATOR
                                              WITH-NUMERATOR-AND-DENOMINATOR
                                              CREATOR-OF PRETTY-NAME-OF
                                              NARGS-OF FUNCT-RANGE-OF
                                              FUNCT-DOMAIN-OF MORPHISM-RANGE
                                              MORPHISM-DOMAIN CLASS-OF
                                              CLASS-NAME < DIM1
                                              WITH-MATRIX-DIMENSIONS RHS-OF
                                              LHS-OF EXPONENT-OF BASE-OF LIST
                                              DOMAIN-OF SIMP-TIMES-TERMS
                                              SAFE-DISPLAY GE-MINUS? MINUS
                                              PLUS? IF REAL? NUMBER? REST FIRST
                                              TERMS-OF ARGS-OF DISPLAY-LIST
                                              WRITE-CHAR FUNCT-OF PRINT-OBJECT
                                              DERIVS-OF NAME-OF SYMBOL-OF PRINC
                                              ATOM NULL NOT AND COND STRING-OF
                                              LET - FUNCTION-X LET* BODY-OF
                                              BOUND-VARS-OF FREQ-VAR-OF
                                              SPACE-VAR-OF ARGUMENT-OF
                                              PRINT-FUNCTION FUNCALL WITH-SLOTS
                                              AREF ARRAY-DIMENSION TUPLE-VALUE
                                              LOOP FUNCTION %APPLY ELEMENT-KEY
                                              AVL-BALANCE 1+ AVL-SIZE FORMAT))
(setf (callers-list 'UPDATE-NODE :callees) '(AVL-RIGHT AVL-LEFT AVL-BALANCE
                                             SETF))
(setf (callers-list 'AVL-HEIGHT :callees) '(MAX 1+ ABS > FORMAT AVL-BALANCE -
                                                EQL NOT COND AVL-RIGHT AVL-LEFT
                                                AVL-HEIGHT IF AVL-ROOT LET))
(setf (callers-list 'LEFT-MOST :callees) '(LABELS))
(setf (callers-list 'FIND-LEFT-MOST :callees) '(FIND-LEFT-MOST AVL-LEFT NULL
                                                COND))
(setf (callers-list 'MAP-OVER-EACH-NODE :callees) '(LABELS))
(setf (callers-list 'MAP-OVER :callees) '(WHEN AVL-ROOT
                                           LET
                                           AVL-RIGHT
                                           %FUNCALL
                                           MAP-OVER
                                           AVL-LEFT
                                           NULL
                                           UNLESS))
(setf (callers-list 'MAKE-GENERATOR :callees) '(POP LAMBDA SET-ELEMENTS
                                                    MACROLET LET))
(setf (callers-list 'CURRENT-STATE :callees) ''SB-INT:QUASIQUOTE)
(setf (callers-list 'SET-CURRENT-STATE :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'CURRENT-NODE :callees) ''SB-INT:QUASIQUOTE)
(setf (callers-list 'NEW-NODE :callees) '(LABELS LIST
                                           QUOTE
                                           LIST*
                                           SB-INT:QUASIQUOTE))
(setf (callers-list 'SCAN :callees) '(FUNCTION AVL-ROOT PROG1 POP AVL-RIGHT
                                      SCAN NEW-NODE SET-CURRENT-STATE
                                      CURRENT-NODE AVL-LEFT CURRENT-STATE EQL
                                      NULL COND))
(setf (callers-list 'RIGHT-MOST :callees) '(LABELS))
(setf (callers-list 'FIND-RIGHT-MOST :callees) '(FIND-RIGHT-MOST AVL-RIGHT NULL
                                                 COND))
(setf (callers-list 'AVL-NEXT :callees) '(LABELS AVL-ROOT
                                           AVL-NEXT))
(setf (callers-list 'NEXT-LOOP :callees) '(WEYLI::BINARY-LCM WEYLI::BINARY-GCD
                                                             WEYLI:RECIP
                                                             WEYLI::QUOTIENT
                                                             WEYLI::TIMES
                                                             WEYLI::MINUS
                                                             WEYLI::PLUS
                                                             WEYLI::MIN-PAIR
                                                             WEYLI::MAX-PAIR
                                                             FIRST REST NULL
                                                             AVL-LEFT OR
                                                             AVL-RIGHT
                                                             NEXT-LOOP > NOT IF
                                                             AND))
(setf (callers-list 'AVL-PREVIOUS :callees) '(LABELS AVL-ROOT
                                               AVL-PREVIOUS))
(setf (callers-list 'BALANCE-RIGHT :callees) '(MINUSP IF ZEROP 1- VALUES
                                                      AVL-LEFT UPDATE-NODE SETQ
                                                      AVL-BALANCE PLUSP COND
                                                      AVL-RIGHT LET))
(setf (callers-list 'BALANCE-LEFT :callees) '(PLUSP IF ZEROP 1- VALUES
                                                    AVL-RIGHT UPDATE-NODE SETQ
                                                    AVL-BALANCE MINUSP COND
                                                    AVL-LEFT LET))
(setf (callers-list 'INSERT :callees) '(WITH-SLOTS CONS
                                           SECOND
                                         >
                                         NULL
                                         OR
                                         MAKE-ELEMENT
                                         FUNCTION
                                         %APPLY
                                         REST
                                         SET-ELEMENT-LIST
                                         %PENDING-LIST-OF
                                         PUSH
                                         MEMBER
                                         WHEN
                                         NIL
                                         RETURN-FROM
                                         RETURN
                                         NOT
                                         VERTICES-OF
                                         FACETS
                                         LOOP
                                         FLIP
                                         DELAUNAY?
                                         OPPOSITE
                                         LET
                                         QUOTE
                                         TYPEP
                                         COND
                                         %MOST-RECENT
                                         ERROR
                                         DIMENSION-OF
                                         =
                                         UNLESS
                                         CALL-NEXT-METHOD
                                         NAME
                                         SETF
                                         LABELS))
(setf (callers-list 'AVL-INSERT :callees) '(AVL-ROOT SETF MINUSP BALANCE-LEFT <
                                            - PLUSP BALANCE-RIGHT + SETQ
                                            AVL-INSERT MULTIPLE-VALUE-BIND >
                                            AVL-RIGHT AVL-LEFT AVL-BALANCE
                                            UPDATE-NODE = COND MAKE-ELEMENT
                                            FUNCTION %APPLY VALUES NULL IF))
(setf (callers-list 'DELETE-HEAD :callees) '(ZEROP NOT BALANCE-RIGHT
                                                   MULTIPLE-VALUE-SETQ > IF
                                                   AVL-BALANCE - UPDATE-NODE
                                                   SETQ AVL-RIGHT AVL-LEFT NULL
                                                   COND VALUES SETF AVL-ROOT
                                                   DELETE-HEAD
                                                   MULTIPLE-VALUE-BIND))
(setf (callers-list 'DELETE-TAIL :callees) '(ZEROP NOT BALANCE-LEFT
                                                   MULTIPLE-VALUE-SETQ < IF
                                                   AVL-BALANCE + UPDATE-NODE
                                                   SETQ AVL-LEFT AVL-RIGHT NULL
                                                   COND VALUES SETF AVL-ROOT
                                                   DELETE-TAIL
                                                   MULTIPLE-VALUE-BIND))
(setf (callers-list 'ERASE-NODE :callees) '(ZEROP IF - DELETE-TAIL +
                                                  UPDATE-NODE SETQ DELETE-HEAD
                                                  MULTIPLE-VALUE-BIND
                                                  AVL-BALANCE PLUSP VALUES
                                                  AVL-RIGHT AVL-LEFT NULL AND
                                                  COND))
(setf (callers-list 'DELETE :callees) '(FLET LABELS
                                         AVL-ROOT
                                         LET))
(setf (callers-list 'DELETE-LEFT :callees) '(AVL-DELETE AVL-LEFT SETF
                                             ERASE-NODE MULTIPLE-VALUE-BIND =
                                             VALUES NULL COND))
(setf (callers-list 'DELETE-RIGHT :callees) '(AVL-DELETE AVL-RIGHT SETF
                                              ERASE-NODE MULTIPLE-VALUE-BIND =
                                              VALUES NULL COND))
(setf (callers-list 'AVL-DELETE :callees) '(ERASE-NODE AVL-ROOT SETF = NULL
                                            BALANCE-RIGHT - DELETE-LEFT ZEROP
                                            VALUES BALANCE-LEFT < IF AVL-LEFT
                                            AVL-BALANCE + UPDATE-NODE SETQ
                                            AVL-RIGHT DELETE-RIGHT
                                            MULTIPLE-VALUE-BIND > COND))
(setf (callers-list 'MEMBER :callees) '(FACET-TABLE-OF ID-NUMBER-OF GETHASH
                                        MULTIPLE-VALUE-LIST SECOND > RETURN =
                                        SET-ELEMENTS LOOP LABELS))
(setf (callers-list 'SEARCH-NODE :callees) '(AVL-ROOT AVL-LEFT AVL-RIGHT
                                             SEARCH-NODE > = NULL COND))
(setf (callers-list 'MAKE-ELEMENT :callees) '(VECTOR FUNCTION %APPLY AND / LAST
                                                     MAKE-PROJECTIVE-SPACE-ELEMENT
                                                     ONE COERCE AREF SETF
                                                     COEFFICIENT-DOMAIN-OF 1+
                                                     DIMENSION-OF GFM-ELEMENT
                                                     FIELD-DEGREE ASH 1- LOGAND
                                                     GF2^N-ELEMENT
                                                     REDUCE-MODULO-INTEGER
                                                     GFP-ELEMENT CHARACTERISTIC
                                                     LET
                                                     MAKE-ELEMENT-FREE-MODULE-VECTOR
                                                     SET-ELEMENT2 SET-ELEMENT1
                                                     DOMAIN-ELEMENT-CLASSES
                                                     LIST MAKE-ARRAY
                                                     MAKE-ELEMENT RETURN EQL
                                                     LENGTH REST LOOP UNLESS
                                                     CONS IF SETQ
                                                     ARRAY-DIMENSION
                                                     MATRIX-SPACE-ELEMENT
                                                     IMAGPART REALPART
                                                     FLOATING-POINT-NUMBER
                                                     DENOMINATOR NUMERATOR
                                                     RATIONAL-NUMBER ERROR
                                                     COMPLEX-NUMBER NUMBER?
                                                     RATIONAL-INTEGER 0? NULL
                                                     OR COND FIRST
                                                     AVL-NODE-AS-PAIRS AVL-NODE
                                                     MAKE-INSTANCE))
(setf (callers-list 'RING-VARIABLES :callees) '(QF-RING RING-VARIABLES QUOTE
                                                FIRST EQL NOT ATOM OR LOOP
                                                WITH-SLOTS))
(setf (callers-list 'DIFFERENTIAL-RING-PRINT-OBJECT :callees) '(PRINC
                                                                RING-VARIABLES
                                                                DISPLAY-LIST
                                                                COEFFICIENT-DOMAIN-OF
                                                                FORMAT))
(setf (callers-list 'COERCE :callees) '(REF SVREF 0? PLUS? FUNCTION LABELS
                                        LENGTH ZEROP GFP-VALUE CHARACTERISTIC
                                        COMPUTE-INVERSE CDR MAP POLY-TERMS CAR
                                        MIN LAMBDA :UNNAMED-LAMBDA REDUCE
                                        CLIST-DEGREE LET* POLY-FORM COPY-SEQ
                                        TPOWER-SERIES EQUAL INTEGER? GE-EXPT? *
                                        GE-TIMES? + TERMS-OF GE-PLUS? GE-ATOM?
                                        ZERO GE-EQUAL WITH-SLOTS VECTOR
                                        MAKE-TPOWER-SERIES CHAIN-TERMS-OF
                                        COPY-TREE MAKE-COCHAIN FACE
                                        MAP-OVER-CELLS DIMENSION-OF MAKE-CHAIN
                                        PUSH %COERCION-CACHE-OF ASSOC OR -
                                        BASE-OF EXPT EXPONENT-OF GE-MINUS? /
                                        MAKE-QUOTIENT-ELEMENT QF-RING
                                        MAKE-GE-TIMES SIMPLIFY 1? MAKE-GE-EXPT
                                        RECIP NUMBER? DENOMINATOR NUMERATOR
                                        CANONICALIZE-NUMBER APPLY-MORPHISM REST
                                        GET-HOMOMORPHISMS SETQ ERROR UNLESS
                                        TYPEP NULL AREF SETF LIST MAKE-ARRAY
                                        LET DIM1 WITH-MATRIX-DIMENSIONS FLET
                                        MAKE-GE-VARIABLE CN-IMAGPART
                                        CN-REALPART IMAGPART REALPART
                                        COMPLEX-NUMBER BIGFLOAT-EXPONENT
                                        BIGFLOAT-MANTISSA MAKE-BIGFLOAT
                                        FP-VALUE QO-DENOMINATOR QO-NUMERATOR
                                        RATIONAL-NUMBER MAKE-INSTANCE
                                        INTEGER-VALUE DOMAIN-OF IF MAKE-ELEMENT
                                        CALL-NEXT-METHOD COERCIBLE? RETURN
                                        SECOND COERCE DERIV THIRD LOOP QUOTE
                                        FIRST EQL ATOM NOT AND
                                        COEFFICIENT-DOMAIN-OF ONE MAKE-TERMS
                                        VARIABLE-INDEX CONS MAKE-POLYNOMIAL
                                        RING-VARIABLES MEMBER COND))
(setf (callers-list 'VARIABLE-DERIVATION :callees) '(LIST QUOTE LIST*
                                                          SB-INT:QUASIQUOTE))
(setf (callers-list 'VARIABLE-DERIVATIVE-ORDER :callees) '(LIST QUOTE LIST*
                                                                SB-INT:QUASIQUOTE))
(setf (callers-list 'SET-VARIABLE-DERIVATION :callees) '(POLY-FORM NOT
                                                         DOMAIN-OF
                                                         VARIABLE-INDEX
                                                         GET-VARIABLE-NUMBER-PROPERTY
                                                         SETF EQL COND ERROR
                                                         GE-EQUAL FUNCTION
                                                         MEMBER UNLESS
                                                         WITH-SLOTS COERCE SETQ))
(setf (callers-list 'ADD-NEW-VARIABLE :callees) '(AREF NCONC
                                                       COPY-ARRAY-CONTENTS
                                                       APPEND + LIST MAKE-ARRAY
                                                       LENGTH LET* NULL UNLESS
                                                       GE-EQUAL FUNCTION MEMBER
                                                       LOOP DIFFERENT-KERNELS
                                                       LET WITH-SLOTS
                                                       VARIABLE-DERIVATION SETF
                                                       COERCE SETQ
                                                       CALL-NEXT-METHOD PROG1))
(setf (callers-list 'STANDARD-DERIVATION :callees) '(ONE MAKE-TERMS CONS SETF
                                                     VARIABLE-INDEX SETQ
                                                     ADD-NEW-VARIABLE SECOND
                                                     NOT OR IF LIST
                                                     SB-INT:QUASIQUOTE THIRD 1+
                                                     QUOTE FIRST GE-VARIABLE?
                                                     POLY-ORDER-NUMBER
                                                     VARIABLE-SYMBOL LET* EQL
                                                     ZERO NULL COND
                                                     VARIABLE-DERIVATION LET))
(setf (callers-list 'POLY-DERIVATION :callees) '(POLY-DIFFERENTIATE-COEFS E1-
                                                 COLLECT-TERM COERCE E0? UNLESS
                                                 E POLY-TERMS
                                                 MAP-OVER-EACH-TERM
                                                 MAKE-POLY-FORM POLY-TIMES
                                                 POLY-0? IF POLY-PLUS %FUNCALL
                                                 SETQ ZERO POLY-COEF? COND LET
                                                 STANDARD-DERIVATION FUNCTION))
(setf (callers-list 'POLY-DIFFERENTIATE-COEFS :callees) '(POLY-PLUS SETQ E RED
                                                          MAP-OVER-EACH-TERM LC
                                                          POLY-DERIVATION LE
                                                          MAKE-TERMS
                                                          MAKE-POLY-FORM
                                                          POLY-TIMES POLY-TERMS
                                                          ONE LET*))
(setf (callers-list 'DERIVATION :callees) '(MAKE-ELEMENT DERIV SVREF SETF
                                            (E (TUPLE-VALUE VECTOR)) I
                                            LOOP-VECTOR-BIND MAKE-ARRAY
                                            DIMENSION-OF LIST-OPERATIONS MEMBER
                                            COND COEFFICIENT-DOMAIN-OF LET*
                                            CLIST-DERIV MAKE-UPOLYNOMIAL
                                            POLY-TIMES POLY-DIFFERENCE
                                            RATFUN-REDUCE N
                                            WITH-NUMERATOR-AND-DENOMINATOR
                                            QF-RING POLY-FORM POLY-DERIVATION
                                            MAKE-POLYNOMIAL BIND-DOMAIN-CONTEXT
                                            ERROR QUOTE TYPEP UNLESS DOMAIN-OF
                                            LET))
(setf (callers-list 'DIMENSION-OF :callees) '(DOMAIN-OF VERTICES-OF - HOME-OF
                                              DIMENSION-OF TUPLE-VALUE LENGTH))
(setf (callers-list 'INITIALIZE-INSTANCE :callees) '(AREF MAX LIST MAKE-ARRAY
                                                          MAKE-POLYNOMIAL
                                                          RING-VARIABLES LENGTH
                                                          GET-COMPARISON-FUN
                                                          CONS SUPER-DOMAINS-OF
                                                          UNLESS RING-OF WARN
                                                          COPY-LIST
                                                          ORIENTED-SORT
                                                          MULTIPLE-VALUE-BIND
                                                          %GLOBAL-ID-COUNTER-OF
                                                          INCF
                                                          ASSERT-COMPLETE-SET
                                                          ASSERT-ORDERED-DOMAIN
                                                          ASSERT-INTEGRAL-DOMAIN
                                                          ONE ZERO
                                                          MAKE-TPOWER-SERIES
                                                          SET-ELEMENT-LIST REST
                                                          MAKE-ELEMENT %GETF
                                                          ITEM LOOP LET VECTOR
                                                          FUNCTION %APPLY SETQ
                                                          LISTP CLASS-OF
                                                          CLASS-NAME ERROR NULL
                                                          COND
                                                          NAMED-SIMPLICIAL-COMPLEX
                                                          MAKE-INSTANCE
                                                          REPARSE-PRINT-STRING
                                                          PARSE-OPERATIONS
                                                          QUOTE SETF WITH-SLOTS))
(setf (callers-list 'DIRECT-SUM-PRINT-OBJECT :callees) '(AREF ARRAY-DIMENSION
                                                              TUPLE-VALUE LOOP
                                                              FORMAT FUNCTION
                                                              %APPLY))
(setf (callers-list 'DEFINE-DIRECT-SUM :callees) '(LOOP APPEND LIST* QUOTE LIST SB-INT:QUASIQUOTE FORMAT INTERN LET))
(setf (callers-list 'MAKE-DIRECT-SUM* :callees) '(LABELS ERROR
                                                   NULL
                                                   WHEN))
(setf (callers-list 'ITERATE :callees) '(LIST SB-INT:QUASIQUOTE COERCE
                                              DOMAIN-ELEMENT-CLASSES
                                              MAP-WITH-DOMAIN LAMBDA
                                              :UNNAMED-LAMBDA FUNCTION
                                              MAKE-HOMOMORPHISM
                                              GET-RATIONAL-INTEGERS CONS LET
                                              ITERATE %MAKE-DIRECT-SUM FIRST
                                              REST NULL COND))
(setf (callers-list 'MAKE-DIRECT-SUM :callees) '(MAKE-DIRECT-SUM* %APPLY FALSE
                                                 FUNCTION ADD-DOMAIN))
(setf (callers-list '%MAKE-DIRECT-SUM-INTERNAL :callees) '(FLET))
(setf (callers-list 'DOMAIN-LIST :callees) '(CONS LIST DOMAIN-LIST NCONC TYPE
                                                  MAKE-INSTANCE IF QUOTE TYPEP
                                                  COND REF DIMENSION-OF LOOP))
(setf (callers-list 'GET-DIRECT-SUM :callees) '(MAKE-DIRECT-SUM* %APPLY RETURN
                                                NOT LOOP LENGTH DIMENSION-OF 1-
                                                = REF EQL QUOTE TYPEP AND
                                                LAMBDA :UNNAMED-LAMBDA FUNCTION
                                                ADD-DOMAIN))
(setf (callers-list 'ONE :callees) '(WEYL:MAKE-ELEMENT COERCE WITH-SLOTS
                                                       ONE-MATRIX ONE QUOTE MAP))
(setf (callers-list '0? :callees) '(REF UNLESS DOMAIN-OF DIMENSION-OF
                                    COEF-LIST0? POLY-FORM NULL IMAGPART
                                    REALPART AND BIGFLOAT-MANTISSA EQUAL
                                    FP-VALUE INTEGER-VALUE ZEROP QO-NUMERATOR
                                    POLY-0? WITH-SLOTS BODY-OF RETURN AREF 0?
                                    NOT ARRAY-DIMENSION LOOP TUPLE-VALUE LET))
(setf (callers-list 'RECIP :callees) '(CONVERT-TO-LISP-NUMBER * + IMAGPART
                                       REALPART FP-VALUE 0? WHEN TYPEP FIELD?
                                       OR COND INTEGER-VALUE FIELD-DEGREE -
                                       EXPT COMPUTE-INVERSE
                                       REDUCE-MODULO-INTEGER WITH-SLOTS
                                       MAKE-RATIONAL-FUNCTION* NUM
                                       MAKE-QUOTIENT-ELEMENT MINUS SETQ MINUS?
                                       IF N1 WITH-NUMERATOR-AND-DENOMINATOR
                                       TRANSPOSE COEFFICIENT-DOMAIN-OF
                                       INVERT-ARRAY AREF SETF SECOND FIRST LOOP
                                       MAKE-ARRAY ARRAY-DIMENSIONS LET* ERROR
                                       EQL UNLESS DIM1 WITH-MATRIX-DIMENSIONS
                                       RHS-OF LHS-OF / MAKE-GE-EQN=
                                       MAKE-ELEMENT MAKE-GE-EXPT SIMPLIFY LET
                                       COERCE BODY-OF BOUND-VARS-OF X FUNCALL
                                       MAKE-APP-FUNCTION RECIP FUNCTION
                                       DOMAIN-OF QUOTE MAP-WITH-DOMAIN))
(setf (callers-list 'ZERO :callees) '(MAKE-ARRAY DOMAIN-ELEMENT-CLASSES FIRST
                                                 MAKE-INSTANCE
                                                 COEFFICIENT-DOMAIN-OF
                                                 DIMENSION-OF LET
                                                 WEYL:MAKE-ELEMENT COERCE
                                                 MAKE-CHAIN WITH-SLOTS ZERO
                                                 QUOTE MAP))
(setf (callers-list '1? :callees) '(COEF-LIST1? LC LE REST NULL POLY-FORM
                                    IMAGPART 0? REALPART BIGFLOAT-EXPONENT
                                    BIGFLOAT-MANTISSA EQUAL FP-VALUE
                                    INTEGER-VALUE = EQL QO-DENOMINATOR
                                    QO-NUMERATOR POLY-1? AND WITH-SLOTS BODY-OF
                                    RETURN AREF 1? NOT ARRAY-DIMENSION LOOP
                                    TUPLE-VALUE LET))
(setf (callers-list 'MINUS :callees) '(SVREF SETF (E (TUPLE-VALUE VECTOR)) I
                                             LOOP-VECTOR-BIND MAKE-ARRAY
                                             DIMENSION-OF LET* CLIST-MINUS
                                             MAKE-UPOLYNOMIAL MAKE-POLYNOMIAL
                                             POLY-FORM GTERMS-MINUS SLOT-VALUE
                                             MAKE-EPOLYNOMIAL* CN-IMAGPART
                                             CN-REALPART BF-MINUS FP-VALUE
                                             QO-DENOMINATOR QO-NUMERATOR
                                             INTEGER-VALUE EQL IF WITH-SLOTS
                                             MAP-TPOWER-SERIES CHAIN-TERMS-OF
                                             FREE-GROUP-MINUS MAKE-CHAIN
                                             POLY-MINUS MAKE-RATIONAL-FUNCTION
                                             QF-RING BIND-DOMAIN-CONTEXT
                                             MAKE-QUOTIENT-ELEMENT NUMERATOR
                                             WITH-NUMERATOR-AND-DENOMINATOR
                                             RHS-OF LHS-OF MAKE-GE-EQN=
                                             MAKE-ELEMENT LIST MAKE-GE-TIMES
                                             SIMPLIFY LET COERCE - MAP BODY-OF
                                             BOUND-VARS-OF X FUNCALL
                                             MAKE-APP-FUNCTION MINUS FUNCTION
                                             DOMAIN-OF QUOTE MAP-WITH-DOMAIN))
(setf (callers-list 'GETF :callees) '(PROPERTY-LIST-OF GETF))
(setf (callers-list 'PUTF :callees) '(PROPERTY-LIST-OF GETF SETF))
(setf (callers-list 'DOMAIN-PRINT-OBJECT :callees) '(CLASS-OF CLASS-NAME FORMAT))
(setf (callers-list 'DEFINE-OPERATIONS :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'PARSE-OPERATION-LIST :callees) '(LIST GETHASH SETF CDDDR
                                                           FUNCTION
                                                           (OPERATION
                                                            . ARGUMENTS)
                                                           LOOP WITH-SLOTS))
(setf (callers-list 'LIST-OPERATIONS :callees) '(PUSH LAMBDA :UNNAMED-LAMBDA
                                                      MAPHASH LET WITH-SLOTS))
(setf (callers-list 'OPERATION-ARGUMENTS :callees) '(GETHASH SECOND QUOTE
                                                             CLASS-OF
                                                             CLASS-NAME SUBST
                                                             WITH-SLOTS))
(setf (callers-list 'OPERATION-VALUES :callees) '(GETHASH THIRD QUOTE CLASS-OF
                                                          CLASS-NAME SUBST
                                                          WITH-SLOTS))
(setf (callers-list 'DESCRIBE-OPERATIONS :callees) '(LABELS FORMAT
                                                      FIRST
                                                      REST
                                                      NULL
                                                      AND
                                                      COND
                                                      QUOTE
                                                      GET
                                                      CLASS-OF
                                                      CLASS-NAME
                                                      LET*))
(setf (callers-list 'CANONICALIZE-CLASS :callees) '(%FUNCALL CONS PUSH FUNCTION
                                                    SETQ UNLESS THIRD REST
                                                    SECOND FIRST LAMBDA
                                                    :UNNAMED-LAMBDA MAPHASH
                                                    WITH-SLOTS FRESH-LINE
                                                    FORMAT CANONICALIZE-CLASS
                                                    MAPCAR EQUAL ATOM QUOTE EQL
                                                    COND))
(setf (callers-list 'REQUIRED-OPERATIONS :callees) '(LABELS CONS
                                                      FIRST
                                                      REST
                                                      NULL
                                                      AND
                                                      COND
                                                      QUOTE
                                                      GET
                                                      CLASS-OF
                                                      CLASS-NAME
                                                      LET*))
(setf (callers-list 'MAP-OVER-ARGLIST-COMBINATIONS :callees) '(LABELS))
(setf (callers-list 'RECUR :callees) '(ERROR GET LOOP QUOTE EQL CONS REST RECUR
                                             FIRST ATOM REVERSE %FUNCALL NULL
                                             COND))
(setf (callers-list 'RESET-DOMAINS :callees) '(DOMAIN-MORPHISMS-TO
                                               DOMAIN-MORPHISMS-FROM SETF SETQ))
(setf (callers-list 'ADD-DOMAIN :callees) '(LIST* QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'ADD-DOMAIN-INTERNAL :callees) '(PUSH SETQ NULL WHEN
                                                          %FUNCALL LAMBDA
                                                          :UNNAMED-LAMBDA
                                                          FUNCTION FIND LET))
(setf (callers-list 'DEFINE-DOMAIN-CREATOR :callees) '(APPEND LIST* LIST
                                                              SB-INT:QUASIQUOTE
                                                              NREVERSE SETQ
                                                              FIRST PUSH ATOM
                                                              QUOTE MEMBER COND
                                                              LOOP FORMAT
                                                              INTERN LET LABELS))
(setf (callers-list 'PARSE-ARGS :callees) '(WHEN APPEND
                                             LIST
                                             LIST*
                                             SB-INT:QUASIQUOTE
                                             FORMAT
                                             INTERN
                                             LET
                                             CONS
                                             ATOM
                                             ERROR
                                             EQL
                                             REST
                                             PARSE-ARGS
                                             QUOTE
                                             FIRST
                                             MEMBER
                                             NULL
                                             COND))
(setf (callers-list 'WITH-NEW-WEYL-CONTEXT :callees) '(%GETF OR LIST QUOTE
                                                       LIST* SB-INT:QUASIQUOTE))
(setf (callers-list 'DEFINE-DOMAIN-ELEMENT-CLASSES :callees) '(LIST* QUOTE LIST
                                                                     SB-INT:QUASIQUOTE))
(setf (callers-list 'DEFMETHOD-SD :callees) '(LIST* QUOTE LIST
                                                    SB-INT:QUASIQUOTE FIRST
                                                    ATOM IF LET))
(setf (callers-list 'BIND-DOMAIN-CONTEXT :callees) '(LIST* QUOTE LIST
                                                           SB-INT:QUASIQUOTE))
(setf (callers-list 'MAKE-GE-FOURIER :callees) '(GE-FOURIER MAKE-INSTANCE))
(setf (callers-list 'GE-EQUAL :callees) '(ARGS-OF FUNCT-OF EXPONENT-OF BASE-OF
                                          TERMS-OF GE-LEQUAL = EQL FREQ-VAR-OF
                                          SPACE-VAR-OF ARGUMENT-OF GE-EQUAL AND))
(setf (callers-list 'GE-GREAT :callees) '(EXPONENT-OF GE-EQUAL BASE-OF
                                          GE-LGREAT RETURN TERMS-OF LOOP
                                          STRING-OF STRING-GREATERP >
                                          FREQ-VAR-OF SPACE-VAR-OF ARGUMENT-OF
                                          GE-GREAT COND))
(setf (callers-list 'GE-FOURIER :callees) '(CONS MAKE-GE-TIMES REMOVE RETURN
                                                 NULL WHEN SETQ TERMS-OF LOOP
                                                 MAKE-GE-PLUS SIMPLIFY
                                                 CALL-NEXT-METHOD DEPENDS-ON?
                                                 GE-EQUAL COND ERROR EQL AND
                                                 UNLESS LET DOMAIN-OF
                                                 MAKE-GE-FOURIER COERCE
                                                 GE-FOURIER))
(setf (callers-list 'FOURIER :callees) '(GE-FOURIER CDDR FUNCTION SV LOOP
                                         COERCE SETQ MAKE-ELEMENT))
(setf (callers-list 'MAKE-GE-IFOURIER :callees) '(GE-IFOURIER MAKE-INSTANCE))
(setf (callers-list 'MAKE-APP-FUNCTION :callees) '(LENGTH APPLICABLE-FUNCTION
                                                          MAKE-INSTANCE
                                                          FUNCT-OF RETURN NOT
                                                          ARGS-OF AND EXPAND
                                                          QUOTE TYPEP WHEN
                                                          REVERSE SUBSTITUTE
                                                          SETQ PUSH GE-EQUAL
                                                          COND FORMAT INTERN
                                                          LOOP COERCE LAMBDA
                                                          :UNNAMED-LAMBDA
                                                          MAPCAR DOMAIN-OF LET*))
(setf (callers-list 'APPLY :callees) '(RETURN FACE? WHEN CHAIN-TERMS-OF SIMPLEX
                                              QUOTE FIRST TYPEP COND FLET LET
                                              COERCE SUBSTITUTE BOUND-VARS-OF
                                              LOOP DOMAIN-OF BODY-OF LET* ERROR
                                              LENGTH NARGS-OF EQL UNLESS
                                              ACCUM-APPLY-ARGS SETQ))
(setf (callers-list 'CANONICALIZE-FUNCTIONS :callees) '(VALUES SUBSTITUTE SETQ
                                                               GE-EQUAL
                                                               BOUND-VARS-OF
                                                               LOOP BODY-OF LET
                                                               ERROR NARGS-OF
                                                               EQL UNLESS))
(setf (callers-list 'DEFINE-APPLICABLE-FUNCTION-BINARY :callees) '(LIST* QUOTE
                                                                         LIST
                                                                         SB-INT:QUASIQUOTE))
(setf (callers-list 'DERIV :callees) '(FUNCTION %APPLY SVREF
                                       (E (TUPLE-VALUE VECTOR)) I
                                       LOOP-VECTOR-BIND DIMENSION-OF 0?
                                       CHAIN-TERMS-OF SIMP MAKE-CHAIN
                                       TPS-DERIV2 TPS-DERIV1 GE-EQUAL
                                       RING-VARIABLES PARTIAL-DERIV * QF-RING
                                       ADD-NEW-VARIABLE DIFFERENT-KERNELS
                                       DEPENDS-ON? LIST-OF-VARIABLES ZERO
                                       BIND-DOMAIN-CONTEXT COPY-LIST
                                       MAKE-FUNCTION-DERIV REST FIRST NTH GETF
                                       OR WHEN GE-DERIV COERCE SETQ
                                       MAKE-ELEMENT NULL IF DOMAIN-OF
                                       MAKE-SAMPLED-FUNCTION / - 1- = + DO
                                       DERIV-2POINT AREF SETF LIST MAKE-ARRAY
                                       LENGTH FUNCTION-Y FUNCTION-X LET* ERROR
                                       ELT NARGS-OF < MINUSP NOT AND QUOTE
                                       TYPEP COND LOOP BODY-OF CONS DERIV APPLY
                                       BOUND-VARS-OF MAKE-APP-FUNCTION))
(setf (callers-list 'DEF-GE-1OPER :callees) '(LIST* QUOTE LIST
                                                    SB-INT:QUASIQUOTE STRING
                                                    FORMAT INTERN LET))
(setf (callers-list 'DEFSIMPLIFY-FUNCT :callees) '(LIST* QUOTE LIST
                                                         SB-INT:QUASIQUOTE
                                                         FORMAT INTERN LET))
(setf (callers-list 'DEFDERIV-FUNCT :callees) '(LIST* QUOTE LIST
                                                      SB-INT:QUASIQUOTE FORMAT
                                                      INTERN LET))
(setf (callers-list 'NORM :callees) '(INNER-PRODUCT))
(setf (callers-list 'CHECK-CACHED-VECTOR :callees) '(FLET LENGTH
                                                      LET))
(setf (callers-list 'EQUAL-VECTOR :callees) '(1- ROTATEF ZEROP EQUAL-VECTOR
                                                 SVREF SETF MAKE-ARRAY SETQ
                                                 NULL COND RETURN AREF = UNLESS
                                                 LOOP LENGTH EQL AND WHEN))
(setf (callers-list 'MAKE-SAMPLED-FUNCTION :callees) '(CHECK-CACHED-VECTOR
                                                       SAMPLED-FUNCTION
                                                       MAKE-INSTANCE))
(setf (callers-list 'PRINT-TABLE :callees) '(AREF FORMAT LENGTH LOOP FUNCTION-Y
                                                  FUNCTION-X LET))
(setf (callers-list 'MAKE-SAMPLED-FUNCTION-1 :callees) '(GET-FUNCTION-SPACE
                                                         CANONICALIZE-NUMBER
                                                         DOMAIN-OF QUOTE TYPEP
                                                         SETQ
                                                         MAKE-SAMPLED-FUNCTION
                                                         FUNCTION FUNCALL AREF
                                                         SETF LOOP FLOAT MAPCAR
                                                         LISTP IF LIST
                                                         MAKE-ARRAY LENGTH LET*))
(setf (callers-list 'RESAMPLE :callees) '(SMOOTH2 + SETF LOOP LENGTH 1- - /
                                          AREF FUNCTION-X MAKE-ARRAY LET*))
(setf (callers-list 'SMOOTH2 :callees) '(DOMAIN-OF MAKE-SAMPLED-FUNCTION
                                         POLYNOMIAL-INTERPOLATE SETF AREF LOOP
                                         FUNCTION-Y FUNCTION-X LENGTH
                                         MAKE-ARRAY LET))
(setf (callers-list 'EVALUATE-AT :callees) '(FUNCTION-Y FUNCTION-X
                                             POLYNOMIAL-INTERPOLATE))
(setf (callers-list 'POLYNOMIAL-INTERPOLATE :callees) '(1+ * SETF 1- > MINUSP
                                                           IF / + FLOOR MAX <
                                                           WHEN LOOP LIST
                                                           MAKE-ARRAY MIN SETQ
                                                           ARRAY-DIMENSION AREF
                                                           - ABS LET*))
(setf (callers-list 'MAP :callees) '(TYPE MAKE-INSTANCE SUBCLASS-OF? IF REF
                                     %APPLY ARRAY-DIMENSION VALUE-OF LOOP LET
                                     ERROR FIND-CLASS QUOTE TYPEP CLASS-OF NULL
                                     COND SETQ FUNCTION-X DOMAIN-OF
                                     MAKE-SAMPLED-FUNCTION OPER FUNCALL AREF
                                     SETF DOTIMES LENGTH LIST MAKE-ARRAY
                                     FUNCTION-Y LET*))
(setf (callers-list 'TIMES :callees) '(TYPEP MULTIPLY-VECTOR-BY-SCALAR
                                             COERCIBLE? SETQ CALL-NEXT-METHOD
                                             GENERATORS-OF LOOP MAKE-IDEAL
                                             APPLY COEFFICIENT-DOMAIN-OF
                                             RING-OF EQL AND COND
                                             REDUCE-MODULO-INTEGER MAKE-ELEMENT
                                             WITH-SLOTS CHAIN-TERMS-OF
                                             FREE-GROUP-SCALAR-TIMES MAKE-CHAIN
                                             + VALENCE - = IF ORDER DOMAIN-OF
                                             TAYLOR1 LET FME-MATRIX-TIMES
                                             MATRIX-FME-TIMES * LAMBDA
                                             :UNNAMED-LAMBDA QUOTE MAP))
(setf (callers-list 'QUOTIENT :callees) '(CALL-NEXT-METHOD COERCIBLE? SETQ
                                          MULTIPLY-VECTOR-BY-SCALAR EQL NUMBERP
                                          NOT AND DOMAIN-OF
                                          COEFFICIENT-DOMAIN-OF LET ERROR
                                          COMPUTE-INVERSE MAKE-ELEMENT EQ COND
                                          WITH-SLOTS EXPT * / LAMBDA
                                          :UNNAMED-LAMBDA QUOTE MAP))
(setf (callers-list 'CONJUGATE :callees) '(SETF (E (TUPLE-VALUE VECTOR)) I
                                                LOOP-VECTOR-BIND MAKE-ARRAY
                                                DIMENSION-OF LET*
                                                AREF MAKE-ELEMENT
                                                TUPLE-VALUE LET
                                                CN-IMAGPART -
                                                CN-REALPART COMPLEX-NUMBER
                                                MAKE-INSTANCE ERROR
                                                DOMAIN-OF TYPEP
                                                OR COND
                                                CONJUGATE QUOTE
                                                MAP))
(setf (callers-list 'REALPART :callees) '(AREF SETF (E (TUPLE-VALUE VECTOR)) I
                                               LOOP-VECTOR-BIND MAKE-ARRAY
                                               DIMENSION-OF LET*
                                               BIGFLOAT-EXPONENT
                                               BIGFLOAT-MANTISSA MAKE-BIGFLOAT
                                               MAKE-ELEMENT TYPEP COND
                                               DOMAIN-OF CN-REALPART LET
                                               REALPART QUOTE MAP))
(setf (callers-list 'IMAGPART :callees) '(AREF SETF (E (TUPLE-VALUE VECTOR)) I
                                               LOOP-VECTOR-BIND MAKE-ARRAY
                                               DIMENSION-OF LET*
                                               BIGFLOAT-EXPONENT
                                               BIGFLOAT-MANTISSA MAKE-BIGFLOAT
                                               MAKE-ELEMENT TYPEP COND
                                               DOMAIN-OF CN-IMAGPART LET
                                               IMAGPART QUOTE MAP))
(setf (callers-list 'DERIV-2POINT :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'TRAPEZOIDAL :callees) '(LIST QUOTE LIST* SB-INT:QUASIQUOTE))
(setf (callers-list 'INTEGRAL :callees) '(TRAPEZOIDAL + SETQ AREF <= >= OR 1+
                                          DO LENGTH FUNCTION-Y FUNCTION-X LET*
                                          INDEF-INTEGRAL NULL AND COND))
(setf (callers-list 'SIMPSON :callees) '(VALUES + / * - SVREF LET*))
(setf (callers-list 'INDEF-INTEGRAL :callees) '(SETQ SIMPSON
                                                       MULTIPLE-VALUE-BIND
                                                     DOMAIN-OF
                                                       MAKE-SAMPLED-FUNCTION
                                                     TRAPEZOIDAL 1-
                                                     = IF
                                                     >= +
                                                     DO AREF
                                                     SETF LIST
                                                     MAKE-ARRAY LENGTH
                                                     FUNCTION-Y FUNCTION-X
                                                     LET*))
(setf (callers-list 'SET-MEMOIZATION :callees) '(GETHASH SETF WITH-SLOTS))
(setf (callers-list 'GET-MEMOIZATION :callees) '(GETHASH WITH-SLOTS))
(setf (callers-list '%MEMOIZE :callees) '(LIST* QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'MEMOIZE :callees) '(QUOTE LIST* SB-INT:QUASIQUOTE))
(setf (callers-list 'MAKE-QUOTIENT-ELEMENT :callees) '(RATIONAL-INTEGER = COND
                                                       COMPUTE-INVERSE *
                                                       MAKE-ELEMENT WITH-SLOTS
                                                       ERROR DOMAIN-OF EQL
                                                       UNLESS COERCE POLY-FORM
                                                       MAKE-RATIONAL-FUNCTION
                                                       QUOTIENT-ELEMENT
                                                       RATIONAL-NUMBER
                                                       MAKE-INSTANCE))
(setf (callers-list 'SIMPLIFY :callees) '(MAKE-UNIVERSAL-QUANTIFIED-SET
                                          EXPRS-OF BOUND-VARS-OF
                                          MERGE-BOUND-VARS MULTIPLE-VALUE-BIND
                                          MAKE-GE-EQN>= MAKE-GE-EQN> RHS-OF
                                          LHS-OF MAKE-GE-EQN= * MAKE-GE-EXPT
                                          GE-EXPT? EXPT NUMBER? AND 1? 0? COND
                                          BASE-OF EXPONENT-OF SIMP-TIMES-TERMS
                                          TERMS-OF SIMP-PLUS-TERMS SIMPLIFIER
                                          IF DOMAIN-OF MAKE-GE-FUNCT APPLY SETQ
                                          QUOTE FUNCT-OF GETF ARGS-OF SIMPLIFY
                                          MAPCAR LET MAKE-ELEMENT))
(setf (callers-list 'REPARSE-PRINT-STRING :callees) '(STRING-OF SETF REST FIRST
                                                      GETF SETQ WHEN FORMAT
                                                      STRING-DOWNCASE SYMBOL-OF
                                                      ATOM COND LET))
(setf (callers-list 'MAKE-GE-VARIABLE :callees) '(PUSH GE-VARIABLE
                                                       MAKE-INSTANCE SETQ
                                                       RETURN SYMBOL-OF EQUAL
                                                       WHEN GE-VARIABLES LOOP))
(setf (callers-list 'ADD-SUBSCRIPTS :callees) '(ADD-SUBSCRIPTS %APPLY PUSH
                                                REPARSE-PRINT-STRING SETF
                                                DOMAIN-OF GE-VARIABLE
                                                MAKE-INSTANCE FIRST COND EQUAL
                                                AND LAMBDA :UNNAMED-LAMBDA
                                                FUNCTION GE-VARIABLES MEMBER
                                                COPY-LIST GETF APPEND SYMBOL-OF
                                                LET* COERCE SETQ))
(setf (callers-list 'SEARCH-FOR-FUNCTION :callees) '(RETURN ERROR NARGS-OF =
                                                            NAME-OF STRING=
                                                            QUOTE TYPEP NOT AND
                                                            WHEN LOOP))
(setf (callers-list 'GET-FUNCTION :callees) '(GE-FUNCTIONS SEARCH-FOR-FUNCTION
                                              OR STRING STRING-DOWNCASE SETQ))
(setf (callers-list 'MAKE-FUNCTION :callees) '(PUSH GE-FUNCTION MAKE-INSTANCE
                                                    ERROR NULL WHEN UNLESS
                                                    GE-FUNCTIONS
                                                    SEARCH-FOR-FUNCTION OR LET
                                                    STRING STRING-DOWNCASE SETQ))
(setf (callers-list 'ADD-FUNCTION-TO-DOMAIN :callees) '(PUSH FUNCTION-CLASS
                                                             MAKE-INSTANCE
                                                             UNLESS RETURN SETQ
                                                             DERIVS-OF EQUAL
                                                             NAME-OF EQL TYPEP
                                                             AND WHEN
                                                             GE-FUNCTIONS LOOP
                                                             QUOTE IF LET))
(setf (callers-list 'MINUSP :callees) '(MINUS?))
(setf (callers-list 'PLUSP :callees) '(PLUS?))
(setf (callers-list 'ZEROP :callees) '(0?))
(setf (callers-list 'MAKE-FUNCTION-DERIV :callees) '(APPEND LIST DERIVS-OF
                                                            COPY-LIST CONS SORT
                                                            QUOTE TYPEP IF
                                                            NAME-OF DOMAIN-OF
                                                            ADD-FUNCTION-TO-DOMAIN
                                                            ERROR NARGS-OF <
                                                            NOT MINUSP OR WHEN))
(setf (callers-list 'MAKE-FUNCTION-INTEGRATE :callees) '(NAME-OF DOMAIN-OF
                                                         ADD-FUNCTION-TO-DOMAIN
                                                         REMOVE SETQ MEMBER
                                                         COND DERIVS-OF QUOTE
                                                         TYPEP IF LET ERROR
                                                         NARGS-OF < NOT MINUSP
                                                         OR WHEN))
(setf (callers-list 'MAKE-GE-FUNCT :callees) '(COPY-LIST LENGTH MAKE-FUNCTION
                                                         GE-FUNCTION? IF
                                                         GE-APPLICATION
                                                         MAKE-INSTANCE))
(setf (callers-list 'CHECK-DOMAIN :callees) '(COERCE GE-APPLICATION
                                                     MAKE-INSTANCE SIMPLIFY
                                                     DOMAIN-OF CHECK-DOMAIN OR
                                                     WHEN LOOP ACCUM-APPLY-ARGS
                                                     EQL NOT ERROR SETQ QUOTE
                                                     TYPEP IF NULL COND))
(setf (callers-list 'FUNCT :callees) '(LAMBDA :UNNAMED-LAMBDA
                                        MAPCAR
                                        LIST
                                        QUOTE
                                        LIST*
                                        SB-INT:QUASIQUOTE))
(setf (callers-list 'DISPLAY-LIST :callees) '(DECF FIRST PRINT-OBJECT OR LET
                                                   WHEN))
(setf (callers-list 'INITIALIZE-CONTEXTS :callees) '(FUN FUNCALL LOOP
                                                     GENERAL-EXPRESSIONS
                                                     MAKE-INSTANCE SETQ))
(setf (callers-list 'WITH-NEW-CONTEXT :callees) '(QUOTE LIST* SB-INT:QUASIQUOTE))
(setf (callers-list 'CHECK-POINT-CONTEXT :callees) '(LIST* QUOTE LIST
                                                           SB-INT:QUASIQUOTE))
(setf (callers-list 'MAKE-GE-PLUS :callees) '(GE-PLUS MAKE-INSTANCE))
(setf (callers-list 'MAKE-GE-TIMES :callees) '(GE-TIMES MAKE-INSTANCE))
(setf (callers-list 'MAKE-GE-EXPT :callees) '(GE-EXPT MAKE-INSTANCE))
(setf (callers-list 'COERCE-OBJ :callees) '(ERROR MAKE-GE-EXPT MAKE-ELEMENT
                                                  CONS SECOND LIST NULL IF
                                                  MAKE-GE-TIMES REST COERCE-OBJ
                                                  MAPCAR MAKE-GE-PLUS QUOTE
                                                  FIRST EQL COND COERCE))
(setf (callers-list 'PARENTHESIZED-DISPLAY :callees) '(PRINT-OBJECT PRINC))
(setf (callers-list 'SAFE-DISPLAY :callees) '(PARENTHESIZED-DISPLAY
                                              PRINT-OBJECT GE-EXPT?
                                              GE-VARIABLE? REALPART 0? QUOTE
                                              TYPEP NOT NUMBER? AND OR IF))
(setf (callers-list 'GE-LEQUAL :callees) '(POP FIRST GE-EQUAL NOT OR GE-LEQUAL
                                               RETURN-FROM NULL AND WHEN LOOP))
(setf (callers-list 'GE-LGREAT :callees) '(POP GE-GREAT FIRST GE-EQUAL RETURN
                                               NULL COND LOOP))
(setf (callers-list 'GE-MINUS? :callees) '(TERMS-OF FIRST LET GE-TIMES? MINUS?
                                           REAL? NUMBER? AND COND))
(setf (callers-list 'MERGE-TERMS-IN-SUM :callees) '(LIST* QUOTE LIST
                                                          SB-INT:QUASIQUOTE))
(setf (callers-list 'SIMP-PLUS-TERMS :callees) '(LABELS LET
                                                  MERGE-TERMS-IN-SUM))
(setf (callers-list 'LOOP-OVER-TERMS :callees) '(MAKE-GE-EXPT 1? EXP BASE-OF
                                                 EXPONENT-OF LET GE-EXPT? *
                                                 SIMP-TIMES-TERMS RETURN-FROM
                                                 WHEN MAKE-ELEMENT MAKE-GE-PLUS
                                                 0? NOT CONS MAKE-GE-TIMES NULL
                                                 EQL OR IF C LIST REST ADD-TERM
                                                 FIRST GE-TIMES? TERMS-OF
                                                 LOOP-OVER-TERMS GE-PLUS? +
                                                 NUMBER? COND SIMPLIFY SETQ
                                                 LOOP))
(setf (callers-list 'SIMP-TIMES-TERMS :callees) '(LABELS LET
                                                   MERGE-TERMS-IN-SUM))
(setf (callers-list 'GET-VARIABLE-PROPERTY :callees) '(VARIABLE-INDEX
                                                       GET-VARIABLE-NUMBER-PROPERTY
                                                       COERCE SETQ LIST PUSH
                                                       PROGN REST %GETF RETURN
                                                       FIRST EQL WHEN
                                                       GE-CONTEXT LOOP))
(setf (callers-list 'SET-VARIABLE-PROPERTY :callees) '(VARIABLE-INDEX
                                                       SET-VARIABLE-NUMBER-PROPERTY
                                                       COERCE SETQ LIST PUSH
                                                       PROGN RETURN REST %GETF
                                                       SETF FIRST EQL WHEN
                                                       GE-CONTEXT LOOP))
(setf (callers-list 'DECLARE-DEPENDENCIES :callees) '(SETF PUSH GE-EQUAL
                                                           FUNCTION MEMBER
                                                           UNLESS COERCE
                                                           SETQ LOOP
                                                           DOMAIN-OF
                                                             GET-VARIABLE-PROPERTY
                                                           LET))
(setf (callers-list 'DEPENDS-ON? :callees) '(EXPONENT-OF BASE-OF TERMS-OF
                                             ARGS-OF FUNCT-OF NAME-OF EQL QUOTE
                                             TYPEP AND DOMAIN-OF
                                             GET-VARIABLE-PROPERTY GE-EQUAL
                                             FUNCTION MEMBER OR RETURN
                                             DEPENDS-ON? APPLY WHEN LOOP))
(setf (callers-list 'GE-DERIV :callees) '(COERCE GE-DERIV))
(setf (callers-list 'MAKE-GE-EQN= :callees) '(GE-EQN= MAKE-INSTANCE))
(setf (callers-list 'EQN= :callees) '(COERCE SIMPLIFY MAKE-GE-EQN=))
(setf (callers-list 'MAKE-GE-EQN> :callees) '(GE-EQN> MAKE-INSTANCE))
(setf (callers-list 'EQN> :callees) '(COERCE SIMPLIFY MAKE-GE-EQN>))
(setf (callers-list 'MAKE-GE-EQN>= :callees) '(GE-EQN>= MAKE-INSTANCE))
(setf (callers-list 'EQN>= :callees) '(COERCE SIMPLIFY MAKE-GE-EQN>=))
(setf (callers-list 'DEFINE-GE2-STANDARD-METHODS :callees) '(LIST* QUOTE LIST
                                                                   SB-INT:QUASIQUOTE))
(setf (callers-list 'MAKE-UNION :callees) '(CONS LIST
                                                 MAKE-UNIVERSAL-QUANTIFIED-SET
                                                 SIMPLIFY ERROR EQ NOT IF
                                                 DOLIST DOMAIN-OF LET COERCE
                                                 MAKE-UNION APPLY))
(setf (callers-list 'MAKE-UNIVERSAL-QUANTIFIED-SET :callees) '(QUOTE
                                                               UNIVERSAL-QUANTIFIED-SET
                                                               MAKE-INSTANCE))
(setf (callers-list 'UQ-SET-PRINT-OBJECT :callees) '(EXPRS-OF REST SECOND FIRST
                                                     FORMAT BOUND-VARS-OF LET))
(setf (callers-list 'MERGE-BOUND-VARS :callees) '(FLET LET))
(setf (callers-list 'MERGE-NEW-BV :callees) '(VALUES EXPRS-OF APPEND
                                                     MERGE-NEW-BV BOUND-VARS-OF
                                                     VAR TYPEP NOT COND
                                                     SIMPLIFY SETQ LIST PUSH
                                                     ERROR GE-EQUAL WHEN V LOOP))
(setf (callers-list 'DIFFERENT-KERNELS :callees) '(RHS-OF LHS-OF
                                                   CALL-NEXT-METHOD BASE-OF
                                                   QUOTE TYPEP EXPONENT-OF
                                                   INTEGERP OR
                                                   DIFFERENT-KERNELS SETQ
                                                   TERMS-OF LOOP CONS GE-EQUAL
                                                   FUNCTION MEMBER IF))
(setf (callers-list 'SUBSTITUTE :callees) '(SVREF (E (TUPLE-VALUE V)) I
                                                  LOOP-VECTOR-BIND DIMENSION-OF
                                                  AND POLY-FORM POLY-SUBST
                                                  MAKE-POLYNOMIAL = * +
                                                  ARRAY-DIMENSION - >= DECLARE
                                                  (TP TP) WITH-TPOWER-SERIES
                                                  ONE ZERO VALENCE PLUSP
                                                  GE-EQUAL RATIONAL-POLY-SUBST
                                                  / BIND-DOMAIN-CONTEXT NUM
                                                  WITH-NUMERATOR-AND-DENOMINATOR
                                                  VARIABLE-INDEX SETQ
                                                  COERCIBLE? PUSH NUMERATOR
                                                  VARIABLE-SYMBOL FUNCTION FIND
                                                  UNLESS RING-VARIABLES FIRST
                                                  QF-RING LET* ERROR
                                                  COEFFICIENT-DOMAIN-OF NOT
                                                  GET-MATRIX-SPACE MAKE-ELEMENT
                                                  AREF SETF LOOP LIST
                                                  MAKE-ARRAY DIM1
                                                  WITH-MATRIX-DIMENSIONS RHS-OF
                                                  LHS-OF DOMAIN-OF CLASS-OF
                                                  MAKE-INSTANCE DERIVS-OF DERIV
                                                  QUOTE TYPEP STRING= COND
                                                  NAME-OF LET ARGS-OF FUNCT-OF
                                                  EXPONENT-OF BASE-OF EXPT
                                                  %TIMES TERMS-OF LAMBDA
                                                  :UNNAMED-LAMBDA MAPCAR %PLUS
                                                  APPLY EQL IF COERCE
                                                  SUBSTITUTE))
(setf (callers-list 'EXPAND-PRODUCT1 :callees) '(FLET))
(setf (callers-list 'EXPAND-PLUS :callees) '(CONS TERMS-OF EXPAND-PRODUCT1 LOOP))
(setf (callers-list 'EXPAND-OTHER :callees) '(EXPAND-OTHER EXPAND LET GE-EXPT?
                                              REST EXPAND-PLUS FIRST GE-PLUS?
                                              LIST NULL COND CONS
                                              EXPAND-PRODUCT1 LOOP))
(setf (callers-list 'EXPAND-PRODUCT :callees) '(DOMAIN-OF SIMP-TIMES-TERMS
                                                TERMS-OF EXPAND-PRODUCT1 LOOP))
(setf (callers-list 'EXPAND :callees) '(EXPT SIMP-TIMES-TERMS GE-TIMES?
                                             INTEGER-VALUE EXPAND-BINOMIAL-FORM
                                             QUOTE TYPEP AND COND EXPONENT-OF
                                             BASE-OF PUSH APPEND GE-PLUS? POP
                                             EXPAND SETQ LOOP TERMS-OF
                                             DOMAIN-OF SIMP-PLUS-TERMS FIRST
                                             REST NULL IF EXPAND-PRODUCT LET))
(setf (callers-list 'EXPAND-BINOMIAL-FORM :callees) '(- * PUSH
                                                        EXPAND-BINOMIAL-FORM
                                                        COMBINATIONS 1+ LOOP
                                                        LET FIRST EXPT LIST
                                                        REST NULL COND))
(setf (callers-list 'FACTORIAL :callees) '(LABELS))
(setf (callers-list 'FACT :callees) '(ERROR MINUSP 1- FACT * < IF))
(setf (callers-list 'POCHHAMMER :callees) '(+ * SETQ LOOP LET ZEROP ERROR
                                              MINUSP COND))
(setf (callers-list 'FASTER-ISQRT :callees) '(* LOGBITP EQ IF + FLOOR
                                                MULTIPLE-VALUE-SETQ 1+
                                                FASTER-ISQRT - INTEGER-LENGTH
                                                ASH SETQ > COND LET))
(setf (callers-list 'INTEGER-NTH-ROOT :callees) '(INTEGER-NTH-ROOT ODDP RETURN
                                                  = IF * + ROUND SETQ EXPT LOOP
                                                  INTEGER-LENGTH TRUNCATE ASH -
                                                  LET PLUSP ZEROP COND))
(setf (callers-list 'REDUCE-MODULO-INTEGER :callees) '(+ < IF REM SETQ ZEROP
                                                         UNLESS))
(setf (callers-list 'EXPT-MODULO-INTEGER :callees) '(* REDUCE-MODULO-INTEGER
                                                       LAMBDA :UNNAMED-LAMBDA
                                                       FUNCTION
                                                       REPEATED-SQUARING
                                                       %FUNCALL))
(setf (callers-list 'PRIME? :callees) '(CDAR FACTOR SETQ CDR NULL 1-
                                             EXPT-MODULO-INTEGER = < OR > AND))
(setf (callers-list 'FIND-SMALLER-PRIME :callees) '(RETURN PRIME? < - LOOP 1-
                                                           SETQ EVENP IF))
(setf (callers-list 'NEWPRIME :callees) '(RETURN CAR < LIST NCONC
                                                 FIND-SMALLER-PRIME SETQ CDR DO
                                                 NULL IF))
(setf (callers-list 'CHOICE-PRIMES :callees) '(NEWPRIME CONS CEILING
                                               CHOICE-PRIMES < IF CAR LET
                                               FIND-SMALLER-PRIME LIST))
(setf (callers-list 'SYM-MOD :callees) '(- / FLOOR > IF MOD ABS LET*))
(setf (callers-list 'REPEATED-SQUARING :callees) '(RETURN TRUNCATE %FUNCALL
                                                          SETQ ODDP LOOP LET
                                                          ZEROP IF LAMBDA))
(setf (callers-list 'POWER-OF? :callees) '(ERROR > VALUES RETURN = * LOOP QUOTE
                                                 TYPEP COND))
(setf (callers-list 'COUNT-MULTIPLE-INTEGER-FACTORS :callees) '(LIST* QUOTE
                                                                      LIST
                                                                      SB-INT:QUASIQUOTE))
(setf (callers-list 'UNIFORMIZE-FACTOR-LIST :callees) '(INCF SECOND = NOT REST
                                                             NULL OR FIRST <
                                                             LAMBDA
                                                             :UNNAMED-LAMBDA
                                                             SORT LOOP))
(setf (callers-list 'FACTOR :callees) '(ERROR POLY-FORM CLIST-FACTOR CDR CAR
                                              MAKE-UPOLYNOMIAL LAMBDA
                                              :UNNAMED-LAMBDA MAPCAR
                                              CHARACTERISTIC < QUOTE TYPEP
                                              DOMAIN-OF BIND-DOMAIN-CONTEXT
                                              UNIFORMIZE-FACTOR-LIST RETURN IF
                                              APPEND %FUNCALL
                                              MULTIPLE-VALUE-SETQ LOOP = UNLESS
                                              COUNT-MULTIPLE-INTEGER-FACTORS -
                                              SETQ CONS PUSH MINUSP WHEN LET))
(setf (callers-list 'ALL-DIVISORS :callees) '(< SORT RETURN APPEND SETQ EXPT *
                                                PRIME LIST LOOP FACTOR LET))
(setf (callers-list 'SIMPLE-INTEGER-FACTOR :callees) '(FLET LET))
(setf (callers-list 'SIMPLE-INTEGER-FACTOR-INTERNAL :callees) '(SIMPLE-INTEGER-FACTOR-INTERNAL
                                                                FUNCTION POP +
                                                                SETQ
                                                                COUNT-MULTIPLE-INTEGER-FACTORS
                                                                CONS > VALUES
                                                                RETURN = COND
                                                                LOOP ISQRT LET))
(setf (callers-list 'FERMAT-INTEGER-FACTOR :callees) '(FACTOR CONS LIST VALUES
                                                       1? IF RETURN LET ZEROP
                                                       WHEN * - + ISQRT 1+ LOOP))
(setf (callers-list 'TOTIENT :callees) '(NULL 1- CDAR CAAR EXPT - * REST FACTOR
                                              DO))
(setf (callers-list 'ATAN :callees) '(BF-ATAN DOMAIN-OF BIND-DOMAIN-CONTEXT
                                      ERROR WHEN COERCE NUMBERP ATAN NULL COND))
(setf (callers-list 'WEYLI::SUBCLASS-OF? :callees) '(LABELS FIND-CLASS
                                                      SETQ
                                                      SYMBOLP
                                                      WHEN))
(setf (callers-list 'SEARCH-LIST :callees) '(EQL
                                             SB-MOP:CLASS-DIRECT-SUPERCLASSES
                                             SEARCH-LIST LOOP MEMBER OR))
(setf (callers-list 'WEYLI::%APPLY :callees) '(QUOTE LIST* SB-INT:QUASIQUOTE))
(setf (callers-list 'WEYLI::ACCUM-APPLY-ARGS :callees) '(WEYLI::ACCUM-APPLY-ARGS
                                                         CONS FIRST REST NULL
                                                         IF))
(setf (callers-list 'WEYLI::APPLY :callees) '(WEYLI::ACCUM-APPLY-ARGS FUNCTION
                                                                      APPLY
                                                                      ERROR
                                                                      NULL IF))
(setf (callers-list 'WEYLI::%FUNCALL :callees) '(QUOTE LIST* SB-INT:QUASIQUOTE))
(setf (callers-list 'WEYLI::FUNCALL :callees) '(WEYLI::APPLY))
(setf (callers-list 'WEYLI::%GETF :callees) '(QUOTE LIST . `IF))
(setf (callers-list 'WEYLI::GETF :callees) '(GETF))
(setf (callers-list 'WEYLI::PUTF :callees) '(GETF SETF))
(setf (callers-list 'WEYLI:DELETE :callees) '(DELETE APPLY))
(setf (callers-list 'WEYLI:MEMBER :callees) '(MEMBER APPLY))
(setf (callers-list 'WEYLI:REPLACE :callees) '(REPLACE APPLY))
(setf (callers-list 'WEYLI:SUBSTITUTE :callees) '(SUBSTITUTE APPLY))
(setf (callers-list 'WEYLI:MAP :callees) '(MAP APPLY))
(setf (callers-list 'WEYLI::REDUCE :callees) '(REDUCE APPLY))
(setf (callers-list 'WEYLI::UNION :callees) '(UNION APPLY))
(setf (callers-list 'WEYLI::INTERSECTION :callees) '(INTERSECTION APPLY))
(setf (callers-list 'WEYLI::DEFSUBST :callees) '(QUOTE LIST* SB-INT:QUASIQUOTE))
(setf (callers-list 'WEYLI::%COPY-ARRAY-CONTENTS* :callees) '(ERROR AREF SETF
                                                                    DOTIMES
                                                                    ARRAY-ELEMENT-TYPE
                                                                    ARRAY-TOTAL-SIZE
                                                                    MAKE-ARRAY
                                                                    LET
                                                                    ARRAY-DIMENSIONS
                                                                    EQUAL IF))
(setf (callers-list 'WEYLI::COPY-ARRAY-CONTENTS :callees) '(QUOTE LIST
                                                            SB-INT:QUASIQUOTE))
(setf (callers-list 'WEYLI::CIRCULAR-LIST :callees) '(NCONC))
(setf (callers-list 'STRUCTURE-OF :callees) '(TYPE-OF))
(setf (callers-list 'ASSOCIATE-PREDICATE :callees) '(QUOTE CONS FIRST REST NULL
                                                     IF LIST SB-INT:QUASIQUOTE
                                                     X LOOP LET))
(setf (callers-list 'WEYLI:< :callees) '(QUOTE ASSOCIATE-PREDICATE REST ERROR
                                         NULL COND))
(setf (callers-list 'WEYLI:= :callees) '(QUOTE ASSOCIATE-PREDICATE REST ERROR
                                         NULL COND))
(setf (callers-list 'WEYLI:> :callees) '(QUOTE ASSOCIATE-PREDICATE REST ERROR
                                         NULL COND))
(setf (callers-list 'WEYLI:<= :callees) '(QUOTE ASSOCIATE-PREDICATE REST ERROR
                                          NULL COND))
(setf (callers-list 'WEYLI:>= :callees) '(QUOTE ASSOCIATE-PREDICATE REST ERROR
                                          NULL COND))
(setf (callers-list 'ASSOCIATE-OPERATION :callees) '(LABELS))
(setf (callers-list 'WEYLI:MAX :callees) '(QUOTE ASSOCIATE-OPERATION FIRST REST
                                           ERROR NULL COND))
(setf (callers-list 'WEYLI:%MAX :callees) '(LABELS ERROR
                                             NULL
                                             IF))
(setf (callers-list 'WEYLI:MIN :callees) '(QUOTE ASSOCIATE-OPERATION FIRST REST
                                           ERROR NULL COND))
(setf (callers-list 'WEYLI:%MIN :callees) '(LABELS ERROR
                                             NULL
                                             IF))
(setf (callers-list 'WEYLI:+ :callees) '(QUOTE ASSOCIATE-OPERATION FIRST REST
                                         ERROR NULL COND))
(setf (callers-list 'WEYLI:%PLUS :callees) '(LABELS ERROR
                                              NULL
                                              IF))
(setf (callers-list 'WEYLI:- :callees) '(ASSOCIATE-OPERATION FIRST QUOTE LIST
                                                             SB-INT:QUASIQUOTE
                                                             REST ERROR NULL
                                                             COND))
(setf (callers-list 'WEYLI:%DIFFERENCE :callees) '(LABELS ERROR
                                                    NULL
                                                    IF))
(setf (callers-list 'WEYLI:* :callees) '(QUOTE ASSOCIATE-OPERATION FIRST REST
                                         ERROR NULL COND))
(setf (callers-list 'WEYLI:%TIMES :callees) '(LABELS ERROR
                                               NULL
                                               IF))
(setf (callers-list 'WEYLI:/ :callees) '(ASSOCIATE-OPERATION FIRST QUOTE LIST
                                                             SB-INT:QUASIQUOTE
                                                             REST ERROR NULL
                                                             COND))
(setf (callers-list 'WEYLI:%QUOTIENT :callees) '(LABELS ERROR
                                                  NULL
                                                  IF))
(setf (callers-list 'WEYLI:GCD :callees) '(QUOTE ASSOCIATE-OPERATION FIRST REST
                                           ERROR NULL COND))
(setf (callers-list 'WEYLI::%GCD :callees) '(LABELS ERROR
                                              NULL
                                              IF))
(setf (callers-list 'WEYLI::LCM :callees) '(QUOTE ASSOCIATE-OPERATION FIRST
                                            REST ERROR NULL COND))
(setf (callers-list 'WEYLI::%LCM :callees) '(LABELS ERROR
                                              NULL
                                              IF))
(setf (callers-list 'WEYLI::FLOOR :callees) '(QUOTE LIST . `IF))
(setf (callers-list 'WEYLI::CEILING :callees) '(QUOTE LIST . `IF))
(setf (callers-list 'WEYLI::ROUND :callees) '(QUOTE LIST . `IF))
(setf (callers-list 'WEYLI::TRUNCATE :callees) '(QUOTE LIST . `IF))
(setf (callers-list 'MATRIX-SPACE-PRINT-OBJECT :callees) '(COEFFICIENT-DOMAIN-OF
                                                           FORMAT))
(setf (callers-list 'WEYL:MAKE-ELEMENT :callees) '(1- VECTOR QUOTE TYPEP
                                                      DIMENSION-OF THIRD
                                                      DOMAIN-ELEMENT-CLASSES
                                                      ARRAY-DIMENSION
                                                      COMPLEX-NUMBER COMPLEXP
                                                      NUMBERP 0? AND OR COND
                                                      FLOATING-POINT-NUMBER
                                                      DENOMINATOR NUMERATOR
                                                      RATIONAL-NUMBER
                                                      RATIONAL-INTEGER NOT WHEN
                                                      FUNCTION %APPLY
                                                      MAKE-ELEMENT LET
                                                      DESTRUCTURING-BIND
                                                      WEYL:MAKE-ELEMENT ERROR
                                                      RETURN EQL LENGTH REST
                                                      UNLESS CONS NULL IF SETQ
                                                      MATRIX-SPACE-ELEMENT
                                                      MAKE-INSTANCE COERCE AREF
                                                      SETF LOOP LIST MAKE-ARRAY
                                                      COEFFICIENT-DOMAIN-OF
                                                      SECOND FIRST
                                                      ARRAY-DIMENSIONS LET*))
(setf (callers-list 'MATRIX-DIMENSIONS :callees) '(DOMAIN-OF DIMENSION-OF LET
                                                   VALUES WITH-SLOTS))
(setf (callers-list 'DIMENSIONS :callees) '(DOMAIN-OF DIMENSION-OF LIST
                                            WITH-SLOTS))
(setf (callers-list 'WITH-MATRIX-DIMENSIONS :callees) '(IF LIST*
                                                           POP
                                                           REST
                                                           APPEND
                                                           SETQ
                                                           EQL
                                                           FIRST
                                                           ATOM
                                                           NOT
                                                           AND
                                                           LOOP
                                                           QUOTE
                                                           SB-INT:QUASIQUOTE
                                                           LIST
                                                           LET))
(setf (callers-list 'REF :callees) '(TUPLE-VALUE ERROR DOMAIN-OF MAKE-ELEMENT
                                     SETF LOOP LIST MAKE-ARRAY DECLARE ROWS
                                     WITH-MATRIX-DIMENSIONS EQL MATRIX-VALUE
                                     AREF NUMBERP COND SECOND FIRST LET))
(setf (callers-list 'SET-REF :callees) '(VALUE-OF SECOND FIRST MATRIX-VALUE
                                         AREF SETF))
(setf (callers-list 'ZERO-MATRIX :callees) '(COEFFICIENT-DOMAIN-OF ZERO LIST
                                             MAKE-ARRAY MAKE-ELEMENT ERROR
                                             NUMBERP UNLESS))
(setf (callers-list 'ONE-MATRIX :callees) '(EQ NOT IF DIMENSION-OF LET
                                               MAKE-ELEMENT AREF SETF LOOP LIST
                                               MAKE-ARRAY ONE
                                               COEFFICIENT-DOMAIN-OF ZERO LET*
                                               ERROR NUMBERP UNLESS))
(setf (callers-list 'PLUS :callees) '(CALL-NEXT-METHOD GENERATORS-OF APPEND
                                      MAKE-IDEAL APPLY COEFFICIENT-DOMAIN-OF
                                      RING-OF REDUCE-MODULO-INTEGER WITH-SLOTS
                                      ORDER TAYLOR1 FORM-OF MPEF-PAIRWISE-M-SUM
                                      RANGE-OF MIN QUOTE LOCAL-FIELD
                                      MAKE-INSTANCE CENTER-OF NEQ MAKE-ELEMENT
                                      + AREF SETF LOOP LIST MAKE-ARRAY ERROR
                                      AND UNLESS 2DIM1 1DIM1
                                      WITH-MATRIX-DIMENSIONS EQL COND DOMAIN-OF
                                      LET))
(setf (callers-list 'DIFFERENCE :callees) '(REDUCE-MODULO-INTEGER WITH-SLOTS
                                            ORDER TAYLOR1 MAKE-ELEMENT - AREF
                                            SETF LOOP LIST MAKE-ARRAY ERROR AND
                                            UNLESS 2DIM1 1DIM1
                                            WITH-MATRIX-DIMENSIONS EQL COND
                                            DOMAIN-OF LET))
(setf (callers-list 'ARRAY-TIMES :callees) '(TIMES-ARRAY ERROR FIRST SECOND
                                             LENGTH EQL AND UNLESS
                                             ARRAY-DIMENSIONS LET))
(setf (callers-list 'TIMES-ARRAY :callees) '(SETF + AREF
                                                  * LOOP
                                                  LIST MAKE-ARRAY
                                                  LET))
(setf (callers-list 'MATRIX-FME-TIMES :callees) '(RETURN + REF AREF * LOOP
                                                         GET-FREE-MODULE = IF
                                                         MAKE-ELEMENT FUNCTION
                                                         %APPLY ERROR
                                                         DIMENSION-OF UNLESS
                                                         DIM1
                                                         WITH-MATRIX-DIMENSIONS
                                                         EQL COND DOMAIN-OF
                                                         COEFFICIENT-DOMAIN-OF
                                                         LET))
(setf (callers-list 'FME-MATRIX-TIMES :callees) '(RETURN + AREF REF * LOOP
                                                         GET-FREE-MODULE = IF
                                                         MAKE-ELEMENT FUNCTION
                                                         %APPLY ERROR
                                                         DIMENSION-OF UNLESS
                                                         DIM1
                                                         WITH-MATRIX-DIMENSIONS
                                                         EQL COND DOMAIN-OF
                                                         COEFFICIENT-DOMAIN-OF
                                                         LET))
(setf (callers-list 'TRANSPOSE :callees) '(MAKE-ELEMENT AREF SETF LOOP LIST
                                           MAKE-ARRAY DIM1
                                           WITH-MATRIX-DIMENSIONS DOMAIN-OF LET))
(setf (callers-list 'INVERT-ARRAY :callees) '(FLET IF
                                               AREF
                                               SETF
                                               ONE
                                               ZERO
                                               LOOP
                                               MAKE-ARRAY
                                               SETQ
                                               COND
                                               ERROR
                                               SECOND
                                               FIRST
                                               EQL
                                               REST
                                               NULL
                                               AND
                                               UNLESS
                                               ARRAY-DIMENSIONS
                                               LET))
(setf (callers-list 'EXCHANGE-ROWS :callees) '(ONE MINUS * SETQ AREF ROTATEF
                                               LOOP))
(setf (callers-list 'FIND-PIVOT-ORDERED :callees) '(VALUES RETURN SETQ ABS >
                                                           WHEN AREF 1+ LOOP))
(setf (callers-list 'FIND-PIVOT-UNORDERED :callees) '(VALUES RETURN ERROR IF
                                                             SETQ NOT 0? AND
                                                             WHEN AREF 1+ LOOP))
(setf (callers-list 'SUBTRACT-ROWS :callees) '(1- SUBTRACT-ROWS 1+ / 1?
                                                  EXCHANGE-ROWS EQL
                                                  FIND-PIVOT-UNORDERED
                                                  FIND-PIVOT-ORDERED
                                                  ORDERED-DOMAIN? IF
                                                  MULTIPLE-VALUE-BIND * - SETF
                                                  LOOP LET AREF 0? UNLESS))
(setf (callers-list 'JACOBIAN :callees) '(GET-MATRIX-SPACE MAKE-ELEMENT
                                          PARTIAL-DERIV AREF SETF LOOP LIST
                                          MAKE-ARRAY LENGTH FIRST DOMAIN-OF
                                          LET*))
(setf (callers-list 'GL-N-PRINT-OBJECT :callees) '(COEFFICIENT-DOMAIN-OF FORMAT
                                                   DIMENSION-OF LET))
(setf (callers-list 'PSL-N-PRINT-OBJECT :callees) '(COEFFICIENT-DOMAIN-OF
                                                    FORMAT DIMENSION-OF LET))
(setf (callers-list 'SL-N-PRINT-OBJECT :callees) '(COEFFICIENT-DOMAIN-OF FORMAT
                                                   DIMENSION-OF LET))
(setf (callers-list 'DETERMINANT :callees) '(DETERMINANT* LIST MAKE-ARRAY SETQ
                                             ERROR /= IF DIM1
                                             WITH-MATRIX-DIMENSIONS DOMAIN-OF
                                             COEFFICIENT-DOMAIN-OF ONE))
(setf (callers-list 'O-N-PRINT-OBJECT :callees) '(COEFFICIENT-DOMAIN-OF FORMAT
                                                  DIMENSION-OF LET))
(setf (callers-list 'SO-N-PRINT-OBJECT :callees) '(COEFFICIENT-DOMAIN-OF FORMAT
                                                   DIMENSION-OF LET))
(setf (callers-list 'WITH-OPEN-MODULAR-ARITH :callees) '(SB-INT:UNQUOTE LIST*
                                                                        QUOTE
                                                                        LIST
                                                                        SB-INT:QUASIQUOTE))
(setf (callers-list 'DETERMINANT* :callees) '(ONE FLET CHARACTERISTIC LET*
                                              DECLARE DIMENSION
                                              WITH-MATRIX-DIMENSIONS
                                              USE-CHINESE-REMAINDER
                                              COMPUTE-RESULT RETURN
                                              MATRIX-VALUE GET-MATRIX-SPACE
                                              WEYL:MAKE-ELEMENT DETERMINANT
                                              GET-FINITE-FIELD MAKE-ELEMENT
                                              HADAMARD-BOUND CHOICE-PRIMES LOOP
                                              DEGREE-BOUNDS QUOTE INTERPOLATE
                                              SETQ))
(setf (callers-list 'DEGREE-BOUNDS :callees) '(MIN * > IF AREF DEGREE COERCE
                                                   SETQ LOOP DOMAIN-OF
                                                   COEFFICIENT-DOMAIN-OF
                                                   RING-VARIABLES LET DIM1
                                                   WITH-MATRIX-DIMENSIONS))
(setf (callers-list 'EVALUATE-MATRIX :callees) '(GET-POLYNOMIAL-RING SETQ
                                                 RING-VARIABLES LIST-COERCE
                                                 SUBSTITUTE COERCE DETERMINANT
                                                 EQL COND GET-MATRIX-SPACE
                                                 FIRST DOMAIN-OF
                                                 COEFFICIENT-DOMAIN-OF LET))
(setf (callers-list 'HADAMARD-BOUND :callees) '(EXPT * SETQ > IF LOOP MIN AREF
                                                     LET DIM1
                                                     WITH-MATRIX-DIMENSIONS))
(setf (callers-list 'FIND-PIVOT :callees) '(COND RECIP ZERO 0? C- +
                                                 EXCHANGE-ROWS >
                                                 COMPUTE-INVERSE
                                                 REDUCE-MODULO-INTEGER * C* /=
                                                 FIND-PIVOT SETQ -
                                                 WITH-OPEN-MODULAR-ARITH
                                                 GFP-VALUE SETF RETURN AREF =
                                                 NOT IF LOOP))
(setf (callers-list 'SPARSE-DETERMINANT :callees) '(LABELS ZERO
                                                     ONE
                                                     COEFFICIENT-DOMAIN-OF
                                                     DOMAIN-OF
                                                     LET*
                                                     ERROR
                                                     /=
                                                     IF
                                                     DIM1
                                                     WITH-MATRIX-DIMENSIONS))
(setf (callers-list 'SPARSE-DET :callees) '(RETURN - + REMOVE 1+ SPARSE-DET *
                                                   SETQ AREF 0? UNLESS NOT LOOP
                                                   NULL IF QUOTE LIST
                                                   . `MEMOIZE))
(setf (callers-list 'INDEPENDENT-ROWS :callees) '(FLET SECOND
                                                   ARRAY-DIMENSIONS
                                                   FIRST
                                                   LET))
(setf (callers-list 'INDEPENDENT-COLS :callees) '(FLET SECOND
                                                   ARRAY-DIMENSIONS
                                                   FIRST
                                                   LET))
(setf (callers-list 'SUBDETERMINANT :callees) '(DOMAIN-OF COEFFICIENT-DOMAIN-OF
                                                SUBDETERMINANT*))
(setf (callers-list 'SUBDETERMINANT* :callees) '(> COND COERCE GET-FINITE-FIELD
                                                   HADAMARD-BOUND CHOICE-PRIMES
                                                   DOMAIN-OF WEYL:MAKE-ELEMENT
                                                   DETERMINANT* VALUES ERROR
                                                   LENGTH /= IF
                                                   INDEPENDENT-COLS
                                                   INDEPENDENT-ROWS AREF SETF
                                                   LOOP QUOTE LET LIST
                                                   MAKE-ARRAY SETQ DIM1
                                                   WITH-MATRIX-DIMENSIONS))
(setf (callers-list 'HERMITE :callees) '(DOMAIN-OF COEFFICIENT-DOMAIN-OF
                                         HERMITE* TRANSPOSE SETQ > IF DIM1
                                         WITH-MATRIX-DIMENSIONS))
(setf (callers-list 'HERMITE* :callees) '(ABS HERMITE-ARRAY DOMAIN-OF
                                              WEYL:MAKE-ELEMENT INTEGER-VALUE
                                              AREF SETF LOOP LENGTH LIST
                                              MAKE-ARRAY LET SUBDETERMINANT
                                              MULTIPLE-VALUE-BIND DECLARE DIM1
                                              WITH-MATRIX-DIMENSIONS))
(setf (callers-list 'HERMITE-ARRAY :callees) '(DECF FLOOR 1+ MOD / SYM-MOD * +
                                                    EXTENDED-GCD
                                                    MULTIPLE-VALUE-SETQ = IF
                                                    AREF /= COND SETF > LOOP -
                                                    LIST MAKE-ARRAY SECOND
                                                    ARRAY-DIMENSIONS FIRST LET*))
(setf (callers-list 'SMITH :callees) '(DOMAIN-OF COEFFICIENT-DOMAIN-OF SMITH*
                                       TRANSPOSE SETQ > IF DIM1
                                       WITH-MATRIX-DIMENSIONS))
(setf (callers-list 'SMITH* :callees) '(ABS SMITH-ARRAY INTEGER-VALUE AREF SETF
                                            SECOND FIRST LOOP ARRAY-DIMENSIONS
                                            MAKE-ARRAY LET SUBDETERMINANT
                                            MULTIPLE-VALUE-BIND))
(setf (callers-list 'SMITH-ARRAY :callees) '(FLET QUOTE
                                              MAKE-ARRAY
                                              ARRAY-DIMENSIONS
                                              FIRST
                                              LET*))
(setf (callers-list 'PROCESSI :callees) '(GCD DECF REM >= AND PROCESSI NOT
                                              QUOTE = IF INCF / SYM-MOD * +
                                              EXTENDED-GCD MULTIPLE-VALUE-SETQ
                                              AREF /= COND - SETF > LOOP LET))
(setf (callers-list 'NAME :callees) '(ERROR CALL-NEXT-METHOD %CONSTRAINTS-OF
                                            NAME DIMENSION-OF CASE
                                            %NAME-TABLE-OF ID-NUMBER-OF GETHASH))
(setf (callers-list '%SET-NAME :callees) '(ERROR CALL-NEXT-METHOD
                                                 %CONSTRAINTS-OF %SET-NAME
                                                 DIMENSION-OF CASE REMHASH
                                                 %NAME-TABLE-OF ID-NUMBER-OF
                                                 GETHASH SETF IF))
(setf (callers-list 'DELETE-MAXIMAL-CELL :callees) '(LABELS WITH-SLOTS
                                                      COFACETS
                                                      WHEN
                                                      ERROR
                                                      MEMBER
                                                      UNLESS
                                                      CALL-NEXT-METHOD
                                                      NAME
                                                      SETF))
(setf (callers-list 'ALL-NAMES :callees) '(%NAME-TABLE-OF PUSHNEW LAMBDA
                                           :UNNAMED-LAMBDA MAPHASH LET))
(setf (callers-list 'ROTATE-LIST :callees) '(LENGTH - BUTLAST NTHCDR APPEND))
(setf (callers-list 'MEMBER-ROTATE :callees) '(POSITION ROTATE-LIST IDENTITY
                                                        EQL FUNCTION))
(setf (callers-list 'COMPLEXER :callees) '(REF CONVERT-TO-LISP-NUMBER COMPLEX
                                           ERROR DOMAIN-OF DIMENSION-OF =
                                           UNLESS))
(setf (callers-list 'COORDINATE-LIST :callees) '(REF CONVERT-TO-LISP-NUMBER
                                                 DOMAIN-OF DIMENSION-OF LOOP))
(setf (callers-list 'SQR :callees) '(*))
(setf (callers-list 'MAKE-QUEUE :callees) '(LAST QUEUE MAKE-INSTANCE COPY-LIST
                                                 SETF))
(setf (callers-list 'CLEARQ :callees) '(BACK FRONT SETF))
(setf (callers-list 'INSERTQ :callees) '(LIST REST SETF COND WITH-SLOTS))
(setf (callers-list 'GETQ :callees) '(REST SETF IF FIRST LET WITH-SLOTS))
(setf (callers-list 'EMPTYQ? :callees) '(FRONT NOT))
(setf (callers-list 'COMPLEX-CIRCUMCENTER :callees) '(* + COMPLEX SETF ERROR =
                                                        WHEN IMAGPART REALPART
                                                        / - LET*))
(setf (callers-list 'CIRCLE-CENTER :callees) '(CONJUGATE PLUSP WARN = UNLESS
                                                         REALPART /= COND +
                                                         SQRT ABS / - * LET*))
(setf (callers-list 'MAKE-MEAN-POINT :callees) '(SETF EQL UNLESS
                                                      MAKE-POINT LENGTH
                                                      FLOAT %PLUS
                                                      APPLY /
                                                      COERCE LAMBDA
                                                      :UNNAMED-LAMBDA MAPCAR
                                                      LET*))
(setf (callers-list 'ANGLE :callees) '(SECOND FIRST - ANGLE APPLY COERCE
                                              VERTICES-OF REMOVE ERROR
                                              TRIANGLE? UNLESS IF * SQRT
                                              DOT-PRODUCT /
                                              CONVERT-TO-LISP-NUMBER ACOS
                                              REALPART LET))
(setf (callers-list 'MAKE-PARAMETER-SPACE :callees) '(COERCE MAPCAR INVERSE-MAP
                                                             FUNCALL
                                                             MAKE-ELEMENT
                                                             LAMBDA
                                                             :UNNAMED-LAMBDA
                                                             FUNCTION
                                                             MAKE-HOMOMORPHISM
                                                             MAKE-EUCLIDEAN-SPACE
                                                             LET ERROR FIRST
                                                             LENGTH SETF IF
                                                             UNLESS))
(setf (callers-list 'SPLIT :callees) '(* %DELETE-TOO-CLOSE SECOND DISTANCE MIN
                                         LET* NAME %DEFAULT-NAME-OF SETF ERROR
                                         %SPLIT-CONSTRAINT-ONE-SIDE BEND EQL
                                         OPPOSITE FIRST NEIGHBORS
                                         COMMON-ENDPOINT %CONSTRAINTS-OF
                                         SEGMENT? CALL-NEXT-METHOD TRIANGLE?
                                         COND RETURN INSERT DELETE-MAXIMAL-CELL
                                         SPLIT APPLY CLASS-OF MAKE-INSTANCE
                                         SUBST HOME-OF VERTICES-OF LOOP))
(setf (callers-list 'SIMPLEX-SIZE :callees) '(SETF DISTANCE
                                                     CONVERT-TO-LISP-NUMBER
                                                   REST FIRST
                                                   LENGTH 1-
                                                   VERTICES-OF LOOP))
(setf (callers-list 'BEND :callees) '(> COND REF - + SIGN-OF-PERMUTATION *
                                        THIRD SECOND FIRST COERCE ID-NUMBER-OF
                                        FUNCTION < COPY-LIST SORT LET* ERROR
                                        LENGTH = UNLESS))
(setf (callers-list 'DISTANCE :callees) '(RETURN SQR LOOP LENGTH = COERCE
                                                 CALL-NEXT-METHOD ERROR UNLESS
                                                 DOT-PRODUCT SQRT - LET))
(setf (callers-list 'EDGES-CROSS? :callees) '(SECOND FIRST BEND EQL NOT AND))
(setf (callers-list 'BOUNDING-BOX :callees) '(UNLESS SETF
                                               CELL
                                               MAP-OVER-CELLS
                                               VERTICES-OF
                                               SECOND
                                               MAX
                                               MIN
                                               MAPCAR
                                               REST
                                               FIRST
                                               BOUNDING-BOX
                                               LENGTH
                                               =
                                               IF
                                               LIST
                                               COERCE
                                               COORDINATE-LIST
                                               LET))
(setf (callers-list 'MEASURE :callees) '(ERROR CONJUGATE IMAGPART * / - THIRD
                                               COERCE COMPLEXER LET* SECOND
                                               FIRST DISTANCE DIMENSION-OF CASE
                                               VERTICES-OF LET))
(setf (callers-list 'ARC :callees) '(VECTOR REF GENERATOR FUNCALL
                                            MAKE-PARAMETER-SPACE LIST
                                            CURVED-SIMPLEX MAKE-INSTANCE
                                            IMAGPART REALPART MAKE-ELEMENT SIN
                                            COS COMPLEX LAMBDA :UNNAMED-LAMBDA
                                            FUNCTION * + < UNLESS ABS - PHASE
                                            SETF ROTATEF EQL NOT WHEN
                                            CONVERT-TO-LISP-NUMBER
                                            CIRCLE-CENTER COMPLEX-CIRCUMCENTER
                                            COND COERCE COMPLEXER LET*))
(setf (callers-list 'MAKE-CURVED-SEGMENT :callees) '(VECTOR REF GENERATOR
                                                            FUNCALL LAMBDA
                                                            :UNNAMED-LAMBDA
                                                            FUNCTION
                                                            MAKE-PARAMETER-SPACE
                                                            LIST CURVED-SIMPLEX
                                                            MAKE-INSTANCE))
(setf (callers-list 'COMMON-ENDPOINT :callees) '(VERTICES-OF INTERSECTION FIRST))
(setf (callers-list 'POINT-VS-TRIANGLE :callees) '(SECOND FIRST DISTANCE 0?
                                                          VALUES RETURN MEMBER
                                                          AND COND LIST SETF
                                                          EQL IF BEND
                                                          ROTATE-LIST
                                                          VERTICES-OF LOOP
                                                          ERROR TRIANGLE?
                                                          UNLESS))
(setf (callers-list 'CCW-SIDE :callees) '(ROTATE-LIST HOME-OF BEND APPLY EQL IF
                                          OPPOSITE LET))
(setf (callers-list 'TRIANGULATE-TRIPLES :callees) '(RETURN DECF NOT = NULL OR
                                                            POINT-VS-TRIANGLE
                                                            IF LIST
                                                            MAKE-INSTANCE APPLY
                                                            SETF BEND EQL THIRD
                                                            SETQ FIRST WHEN
                                                            SECOND POP > AND
                                                            LENGTH - LOOP))
(setf (callers-list 'STAR-TRIANGULATE :callees) '(TRIANGULATE-TRIPLES APPLY
                                                  ROTATE-LIST FIRST THIRD SETF
                                                  MAPC LIST LAMBDA
                                                  :UNNAMED-LAMBDA MAPCAR LET))
(setf (callers-list 'FLAT-TRIANGULATE :callees) '(TRIANGULATE-TRIPLES APPLY
                                                  REST FIRST THIRD SETF MAPC
                                                  LIST LAMBDA :UNNAMED-LAMBDA
                                                  MAPCAR LET))
(setf (callers-list 'CIRCUMCENTER :callees) '(IMAGPART REALPART MAKE-POINT
                                                       VERTICES-OF COERCE
                                                       COMPLEXER LAMBDA
                                                       :UNNAMED-LAMBDA MAPCAR
                                                       COMPLEX-CIRCUMCENTER
                                                       APPLY LET ERROR
                                                       TRIANGLE? UNLESS))
(setf (callers-list 'CIRCUMRADIUS :callees) '(CIRCUMCENTER VERTICES-OF FIRST
                                              DISTANCE))
(setf (callers-list 'ANGLES :callees) '(ANGLE VERTICES-OF LOOP))
(setf (callers-list 'VERTICES-SORTED-BY-ANGLE :callees) '(FIRST FUNCTION < SORT
                                                                REST RETURN
                                                                ROTATEF CONS
                                                                DOT-PRODUCT
                                                                CONVERT-TO-LISP-NUMBER
                                                                - VERTICES-OF
                                                                COERCE LAMBDA
                                                                :UNNAMED-LAMBDA
                                                                MAPCAR A LOOP))
(setf (callers-list 'NEIGHBORS :callees) '(GET-CELL COFACETS LENGTH CASE))
(setf (callers-list 'NEIGHBOR :callees) '(CALL-NEXT-METHOD CONSTRAINT NOT AND
                                          UNLESS EQL FUNCTION GET-CELL COFACETS
                                          FIND))
(setf (callers-list 'NEIGHBORHOOD :callees) '(PUSH MEMBER NOT AND VERTICES-OF
                                                   NEIGHBOR FACETS POP LIST
                                                   LOOP ERROR TRIANGLE? UNLESS))
(setf (callers-list 'NEAR-BASE :callees) '(ROTATEF LIST EQL BEND VERTICES-OF A
                                                   LOOP ERROR TRIANGLE? UNLESS))
(setf (callers-list 'DIRECTED-LOCATE :callees) '(VALUES NEIGHBOR SETF RETURN
                                                        NEAR-BASE LOOP ERROR
                                                        TRIANGLE? UNLESS))
(setf (callers-list 'LOCATE :callees) '(CATCH DIRECTED-LOCATE
                                         MAXIMAL-CELL?
                                         IF
                                         %MOST-RECENT
                                         LET
                                         LIST
                                         NEIGHBORS
                                         FIRST
                                         OR))
(setf (callers-list 'TRIANGLES :callees) '(PUSH TRIANGLE MAP-OVER-MAXIMAL-CELLS
                                                LET))
(setf (callers-list 'ADJ-VERTICES :callees) '(SECOND FIRST EQL IF VERTICES-OF
                                                     LIST GET-CELL COFACETS
                                                     LOOP))
(setf (callers-list 'FLIP-OK? :callees) '(CALL-NEXT-METHOD CONSTRAINT UNLESS
                                          REVERSE SECOND BEND APPLY EQL LENGTH
                                          = AND HOME-OF OPPOSITE FIRST LAMBDA
                                          :UNNAMED-LAMBDA MAPCAR NEIGHBORS LET*))
(setf (callers-list 'DELAUNAY? :callees) '(CALL-NEXT-METHOD CONSTRAINT IF
                                           OPPOSITE ANGLE + <= LENGTH < OR
                                           HOME-OF SETF UNLESS SECOND FIRST
                                           NEIGHBORS LET*))
(setf (callers-list 'FLIP :callees) '(CALL-NEXT-METHOD ERROR CONSTRAINT IF
                                      SPLIT DELETE-MAXIMAL-CELL SECOND OPPOSITE
                                      FIRST NEIGHBORS LET*))
(setf (callers-list 'SPLIT-EDGE :callees) '(LET CALL-NEXT-METHOD
                                             ERROR
                                             CONSTRAINT
                                             IF
                                             SPLIT
                                             NEIGHBORS
                                             LOOP))
(setf (callers-list 'FORCE-EDGE :callees) '(CALL-NEXT-METHOD LET INSERT REVERSE
                                            CLASS-OF CONS FLAT-TRIANGULATE
                                            APPEND PUSH BEND CASE
                                            DELETE-MAXIMAL-CELL FIRST ERROR
                                            NEIGHBOR EQL CCW-SIDE VR RETURN
                                            OPPOSITE EDGES-CROSS? IF HOME-OF
                                            SETF LIST NEIGHBORS START LOOP
                                            GET-CELL UNLESS))
(setf (callers-list 'REMOVE-VERTEX :callees) '(NAME %DEFAULT-NAME-OF
                                               CALL-NEXT-METHOD CONSTRAINT
                                               UNLESS INSERT STAR-TRIANGULATE
                                               DELETE-MAXIMAL-CELL RETURN NULL
                                               IF EQL FUNCTION FIND NEIGHBOR
                                               SETF OPPOSITE LENGTH CCW-SIDE
                                               HOME-OF CLASS-OF FIRST LIST
                                               NEIGHBORS LOOP))
(setf (callers-list 'PLACE :callees) '(NAME SETF AND CALL-NEXT-METHOD LET
                                       FORCE-EDGE SEGMENT? VERTICES-OF LOOP
                                       %CONSTRAINTS-OF INSERT DIMENSION-OF >
                                       WHEN PLACE REMOVE-VERTEX WARN SPLIT-EDGE
                                       LISTP COND SPLIT CASE POINT-VS-TRIANGLE
                                       MULTIPLE-VALUE-BIND MEMBER ERROR LIST
                                       GET-CELL UNLESS))
(setf (callers-list 'CONSTRAINT :callees) '(%CONSTRAINTS-OF GET-CELL))
(setf (callers-list '%SPLIT-CONSTRAINT-ONE-SIDE :callees) '(CALL-NEXT-METHOD
                                                            NAME
                                                            %DEFAULT-NAME-OF
                                                            SETF SPLIT
                                                            DELETE-MAXIMAL-CELL
                                                            OR NEIGHBORHOOD
                                                            SET-DIFFERENCE LOOP
                                                            SECOND FIRST LIST
                                                            FORCE-EDGE PLACE
                                                            DIRECTED-LOCATE
                                                            NEIGHBORS LET
                                                            POINT-VS-TRIANGLE
                                                            EQL AND COND))
(setf (callers-list '%DELETE-TOO-CLOSE :callees) '(REMOVE-VERTEX DISTANCE <
                                                   ADJ-VERTICES HOME-OF LOOP))
(setf (callers-list 'TRIANGLE-CENTER :callees) '(CIRCUMCENTER WARN HOME-OF EQL
                                                 UNLESS))
(setf (callers-list 'TOO-BIG? :callees) '(SIMPLEX-SIZE < IF WARN VERTICES-OF
                                          MAKE-MEAN-POINT COORDINATE-LIST
                                          THE-BOUND APPLY FUNCTIONP NUMBERP
                                          NULL COND LET))
(setf (callers-list 'GRADE :callees) '(VERTICES-OF FACETS LOOP NAME MEMBER
                                       TOO-BIG? OPPOSITE CONSTRAINT NOT OR <
                                       FIRST THIRD ANGLE > SECOND AND COND
                                       VERTICES-SORTED-BY-ANGLE HOME-OF LET*))
(setf (callers-list 'IMPROVE :callees) '(MAKE-MEAN-POINT SPLIT-EDGE NEIGHBOR
                                         IMPROVE > SPLIT TRIANGLE-CENTER PLACE
                                         < COND CONSTRAINT OPPOSITE ANGLE
                                         VERTICES-SORTED-BY-ANGLE THIRD HOME-OF
                                         LET*))
(setf (callers-list 'DO-BACKGROUND-BOX :callees) '(MAKE-SIMPLEX INSERT
                                                   MAKE-POINT APPLY SECOND +
                                                   FIRST - LAMBDA
                                                   :UNNAMED-LAMBDA MAPCAR
                                                   HOME-OF LET*))
(setf (callers-list 'BUILD-CDT-FROM-BOUNDARIES :callees) '(PLACE BOUNDARY
                                                           DISTANCE APPLY *
                                                           DO-BACKGROUND-BOX
                                                           SETF REVERSE HOME-OF
                                                           %PENDING-LIST-OF
                                                           FIRST MAPCAR
                                                           BOUNDING-BOX LOOP))
(setf (callers-list 'REFINE-MESH-PREP :callees) '(ID-NUMBER-OF FUNCTION > SORT
                                                  %PENDING-LIST-OF
                                                  DELETE-MAXIMAL-CELL PUSH NAME
                                                  IF TRI MAP-OVER-MAXIMAL-CELLS
                                                  LET HOME-OF SETF))
(setf (callers-list 'BOUNDARY-COMPLEX-OF :callees) '(%CONSTRAINTS-OF))
(setf (callers-list 'CREATE-MESH :callees) '(MESH MAKE-INSTANCE SETF))
(setf (callers-list 'INSERT-BOUNDARY :callees) '(%PENDING-LIST-OF LIST PUSH
                                                 DIMENSION-OF < ERROR
                                                 %MOST-RECENT WHEN))
(setf (callers-list 'NAME-REGION :callees) '(LOCATE NEIGHBORHOOD NAME SETF
                                             LAMBDA :UNNAMED-LAMBDA MAPCAR
                                             BUILD-CDT-FROM-BOUNDARIES
                                             %MOST-RECENT UNLESS))
(setf (callers-list 'REFINE-MESH :callees) '(IMPROVE IF GETQ NIL RETURN-FROM
                                             RETURN EMPTYQ? SETF INSERTQ GRADE
                                             EQL NOT MAXIMAL-CELL? AND WHEN
                                             %PENDING-LIST-OF MAKE-QUEUE LOOP
                                             REFINE-MESH-PREP))
(setf (callers-list 'MAKE-MESH :callees) '(APPEND RETURN REST LIST* QUOTE LIST
                                                  SB-INT:QUASIQUOTE STRING=
                                                  COND ERROR LISTP IF TYPE LOOP))
(setf (callers-list '%MM-GET-POINT :callees) '(REST FIRST STRING= LIST* QUOTE
                                                    LIST SB-INT:QUASIQUOTE ATOM
                                                    COND))
(setf (callers-list '%MM-BOUNDARY :callees) '(RETURN REST SETF SECOND WHEN
                                                     MEMBER OR LET LISTP IF
                                                     POINT LOOP LIST LAMBDA
                                                     :UNNAMED-LAMBDA MAPCAR
                                                     QUOTE LIST*
                                                     SB-INT:QUASIQUOTE STRING=
                                                     COND))
(setf (callers-list 'DEFUN-BOUNDARY :callees) '(LIST* QUOTE LIST
                                                      SB-INT:QUASIQUOTE))
(setf (callers-list 'DEFMESH :callees) '(LIST* QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'MAKE-MESH-FROM-FILE :callees) '(RETURN OR REFINE-MESH
                                                            NAME-REGION NAME
                                                            INSERT-BOUNDARY
                                                            BOUNDARY
                                                            MAP-OVER-MAXIMAL-CELLS
                                                            CREATE-MESH LET
                                                            READ-SIZE-TABLE
                                                            LIST
                                                            READ-REGION-POINTS
                                                            READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                                            READ-VERTEX-SET
                                                            GET-EUCLIDEAN-SPACE
                                                            SETF WHEN COND
                                                            QUOTE
                                                            MAKE-HASH-TABLE
                                                            LOOP ERROR READ
                                                            STRING= UNLESS))
(setf (callers-list 'READ-POINT :callees) '(READ DIMENSION-OF LOOP MAKE-POINT
                                                 APPLY))
(setf (callers-list 'READ-VERTEX-SET :callees) '(READ-POINT GETHASH SETF READ
                                                 LOOP))
(setf (callers-list 'READ-SIMPLICIAL-COMPLEX :callees) '(INCF GETHASH
                                                              MAKE-SIMPLEX
                                                              APPLY INSERT SETF
                                                              QUOTE TYPEP >=
                                                              READ LOOP))
(setf (callers-list 'READ-BOUNDARY-SIMPLICIAL-COMPLEX :callees) '(INCF
                                                                  MAKE-SIMPLEX
                                                                  ARC APPLY
                                                                  INSERT APPEND
                                                                  > GETHASH EQL
                                                                  SECOND AREF
                                                                  CASE LENGTH
                                                                  FIRST STRING
                                                                  LET WHEN
                                                                  LISTP IF LET*
                                                                  SETF QUOTE
                                                                  TYPEP ERROR =
                                                                  NUMBERP AND
                                                                  UNLESS >=
                                                                  READ LOOP))
(setf (callers-list 'READ-REGION-POINTS :callees) '(ERROR QUOTE TYPEP UNLESS
                                                          LIST READ-POINT READ
                                                          LOOP))
(setf (callers-list 'READ-SIZE-TABLE :callees) '(ERROR QUOTE TYPEP AND UNLESS
                                                       READ LOOP))
(setf (callers-list 'FWRITE :callees) '(CALL-NEXT-METHOD %CONSTRAINTS-OF
                                        WRITE-VERTEX-SET FWRITE NAME EQL WHEN
                                        MAP-OVER-CELLS IF INCF CELL
                                        MAP-OVER-MAXIMAL-CELLS ALL-NAMES LET
                                        ID-NUMBER-OF GETHASH VERTICES-OF REF
                                        DOMAIN-OF DIMENSION-OF LOOP FORMAT
                                        APPLY))
(setf (callers-list 'WRITE-VERTEX-SET :callees) '(ID-NUMBER-OF GETHASH FWRITE
                                                  DIMENSION-OF FORMAT INCF
                                                  VERTICES-OF FIRST SETF VERTEX
                                                  MAP-OVER-CELLS
                                                  MAKE-HASH-TABLE LET))
(setf (callers-list 'WRITE-MESH :callees) '(FWRITE SETF UNLESS))
(setf (callers-list 'READ-MESH :callees) '(WARN EQL QUOTE %CONSTRAINTS-OF
                                                READ-SIMPLICIAL-COMPLEX
                                                READ-VERTEX-SET CREATE-MESH
                                                GET-EUCLIDEAN-SPACE ERROR
                                                UNLESS SETF STRING= WHEN
                                                MAKE-HASH-TABLE READ LET))
(setf (callers-list 'COMPOSE :callees) '(ERROR LIST PUSH MORPHISM-MAP %FUNCALL
                                               LAMBDA HOMOMORPHISM
                                               MAKE-INSTANCE MORPHISM-DOMAIN
                                               MORPHISM-RANGE EQL SECOND ASSOC
                                               SETQ COND GETHASH LET))
(setf (callers-list 'GET-MORPHISMS :callees) '(LABELS LET))
(setf (callers-list 'GET-MORPHISMS-FROM :callees) '(GET-MORPHISMS-FROM SETQ
                                                    COMPOSE IF PUSH
                                                    MORPHISM-RANGE EQL COND
                                                    TYPEP NULL OR WHEN
                                                    DOMAIN-MORPHISMS-FROM LOOP))
(setf (callers-list 'GET-MORPHISMS-TO :callees) '(GET-MORPHISMS-FROM COND
                                                  MORPHISM-DOMAIN
                                                  GET-MORPHISMS-TO PUSH COMPOSE
                                                  IF SETQ TYPEP NULL OR WHEN
                                                  DOMAIN-MORPHISMS-TO LOOP))
(setf (callers-list 'MAKE-MORPHISM :callees) '(DOMAIN-MORPHISMS-TO
                                               DOMAIN-MORPHISMS-FROM PUSH
                                               DELETE-MORPHISM LOOP WHEN
                                               MORPHISM MAKE-INSTANCE
                                               GET-MORPHISMS LET))
(setf (callers-list 'DELETE-MORPHISM :callees) '(DOMAIN-MORPHISMS-TO DELETE
                                                 DOMAIN-MORPHISMS-FROM SETF
                                                 MORPHISM-RANGE MORPHISM-DOMAIN
                                                 LET))
(setf (callers-list 'MAKE-HOMOMORPHISM :callees) '(DOMAIN-MORPHISMS-TO
                                                   DOMAIN-MORPHISMS-FROM PUSH
                                                   HOMOMORPHISM MAKE-INSTANCE
                                                   LET))
(setf (callers-list 'GET-HOMOMORPHISMS :callees) ''GET-MORPHISMS)
(setf (callers-list 'GET-EMBEDDABLE-DOMAINS :callees) '(MORPHISM-RANGE PUSH
                                                        QUOTE TYPEP WHEN
                                                        DOMAIN-MORPHISMS-FROM
                                                        LOOP LET))
(setf (callers-list 'MAKE-AUTOMORPHISM :callees) '(MAKE-HOMOMORPHISM))
(setf (callers-list 'GET-AUTOMORPHISMS :callees) ''GET-MORPHISMS)
(setf (callers-list 'APPLY-MORPHISM :callees) '(CANONICALIZE-NUMBER
                                                APPLY-MORPHISM MORPHISM-MAP
                                                %FUNCALL MORPHISM-DOMAIN
                                                DOMAIN-OF EQL WHEN))
(setf (callers-list 'CANONICALIZE-NUMBER :callees) '(CN-IMAGPART CN-REALPART
                                                     IMAGPART REALPART
                                                     GET-COMPLEX-NUMBERS
                                                     BIGFLOAT-EXPONENT
                                                     BIGFLOAT-MANTISSA
                                                     MAKE-BIGFLOAT FP-VALUE
                                                     GET-REAL-NUMBERS
                                                     FLOATING-POINT-NUMBER
                                                     QO-DENOMINATOR
                                                     QO-NUMERATOR DENOMINATOR
                                                     NUMERATOR
                                                     GET-RATIONAL-NUMBERS
                                                     RATIONAL-NUMBER
                                                     MAKE-INSTANCE
                                                     INTEGER-VALUE QUOTE
                                                     DOMAIN-OF TYPEP COND
                                                     GET-RATIONAL-INTEGERS
                                                     MAKE-ELEMENT))
(setf (callers-list 'REACHABLE-DOMAINS :callees) '(FLET))
(setf (callers-list 'NEXT-DOMAINS :callees) '(TERMINATE-BRANCH PUSHNEW MEMBER
                                              WHEN D2 REACHABLE-DOMAINS PUSH
                                              DOMAIN MAP-OVER-TREE LET
                                              MORPHISM-RANGE
                                              DOMAIN-MORPHISMS-FROM LOOP))
(setf (callers-list 'FIND-COMMON-DOMAINS :callees) '(FLET))
(setf (callers-list 'COERCIBLE? :callees) '(COERCE LET))
(setf (callers-list 'DEF-BINARY-COERCION :callees) '(LIST* WHEN QUOTE LIST
                                                           SB-INT:QUASIQUOTE))
(setf (callers-list 'MAKE-MULTIPOLE-EXPANSION :callees) '(RANGE-DOMAIN-OF
                                                          MULTIPOLE-EXPANSION
                                                          MAKE-INSTANCE COERCE
                                                          SVREF SETF LOOP ZERO
                                                          MAKE-ARRAY
                                                          COEFFICIENT-DOMAIN-OF
                                                          LET* ERROR IN-BOUND?
                                                          NOT WHEN))
(setf (callers-list 'SHIFT-MULTIPOLE :callees) '(COERCE CENTER-OF FORM-OF
                                                        SHIFT-M-FORM ABS
                                                        RANGE-OF + QUOTE
                                                        MULTIPOLE MAKE-INSTANCE
                                                        DOMAIN-OF LET))
(setf (callers-list 'SHIFT-LOCAL-FIELD :callees) '(FORM-OF SHIFT-L-FORM QUOTE
                                                   LOCAL-FIELD MAKE-INSTANCE
                                                   ERROR RANGE-OF CENTER-OF -
                                                   ABS > WHEN))
(setf (callers-list 'LOCALIZE :callees) '(FORM-OF LOCALIZE-FORM QUOTE
                                          LOCAL-FIELD MAKE-INSTANCE ERROR
                                          RANGE-OF COERCE * CENTER-OF DIST <
                                          WHEN))
(setf (callers-list 'IN-BOUND? :callees) '(INTEGER-VALUE FP-VALUE CN-IMAGPART
                                           CN-REALPART < AND))
(setf (callers-list 'THE-KTHTERM :callees) '(ZERO - NTH OR))
(setf (callers-list 'KTHTERM :callees) '(COERCE EQ IF NTH LET))
(setf (callers-list 'SHIFT-M-FORM :callees) '(DIFFERENCE SHIFT-M-FORM*))
(setf (callers-list 'SHIFT-M-FORM* :callees) '(+ WHAT-IS-THE-LTHTERM LIST
                                                 APPEND SETF EQ DO))
(setf (callers-list 'WHAT-IS-THE-LTHTERM :callees) '(COMBINATIONS - EXPT
                                                     THE-KTHTERM * SETF + =
                                                     COERCE DO))
(setf (callers-list 'DIST :callees) '(- ABS))
(setf (callers-list 'MPEF-PAIRWISE-M-SUM :callees) '(REST MPEF-PAIRWISE-M-SUM
                                                          FIRST + CONS NULL
                                                          COND))
(setf (callers-list 'SHIFT-L-FORM :callees) '(- SHIFT-L-FORM*))
(setf (callers-list 'SHIFT-L-FORM* :callees) '(WHAT-IS-THE-LTHTERM2 LIST APPEND
                                               SETF DOTIMES LET))
(setf (callers-list 'WHAT-IS-THE-LTHTERM2 :callees) '(COMBINATIONS - MINUS EXPT
                                                      THE-KTHTERM * + SETF =
                                                      COERCE DO))
(setf (callers-list 'LOCALIZE-FORM :callees) '(- LOCALIZE-FORM*))
(setf (callers-list 'LOCALIZE-FORM* :callees) '(REST-OF-LOCAL - / EXPT
                                                THE-KTHTERM * + SETF = COERCE
                                                DO CONS))
(setf (callers-list 'REST-OF-LOCAL :callees) '(+ LTH-LOCAL-TERM LIST APPEND
                                                 SETF - = DO))
(setf (callers-list 'LTH-LOCAL-TERM :callees) '(COMBINATIONS - RECIP EXPT
                                                THE-KTHTERM * + SETF = COERCE
                                                DO))
(setf (callers-list 'MATH-OPERATOR :callees) '(QUOTE LIST* SB-INT:QUASIQUOTE))
(setf (callers-list 'DEFINE-MATH-OPERATOR-ACCESSORS :callees) '(FLET))
(setf (callers-list 'INTERNAL-NAME :callees) '(FORMAT INTERN))
(setf (callers-list 'EXTERNAL-NAME :callees) '(INTERNAL-NAME SB-INT:UNQUOTE
                                               EXTERNAL-NAME LIST LOOP QUOTE
                                               LIST* SB-INT:QUASIQUOTE FORMAT
                                               INTERN))
(setf (callers-list 'DEFINE-MATH-OPERATOR :callees) '(FORMAT SYMBOL-NAME INTERN
                                                             GETF LOOP APPEND
                                                             LIST QUOTE LIST*
                                                             SB-INT:QUASIQUOTE))
(setf (callers-list 'COMPARE-PTERM-LISTS :callees) '(RETURN EQL UNLESS LOOP))
(setf (callers-list 'ASSERT-PROPERTY :callees) '(CONS SETF RETURN
                                                      COMPARE-PTERM-LISTS WHEN
                                                      LOOP GETHASH LET))
(setf (callers-list 'TEST-PROPERTY :callees) '(RETURN COMPARE-PTERM-LISTS WHEN
                                                      LOOP GETHASH LET))
(setf (callers-list 'DELETE-PROPERTY :callees) '(DELETE GETHASH SETF))
(setf (callers-list '%MAP-OVER-PROPERTIES :callees) '(RETURN FUNCTION FUNCALL
                                                             CAR EQL WHEN LOOP
                                                             LAMBDA
                                                             :UNNAMED-LAMBDA
                                                             MAPHASH))
(setf (callers-list 'MAP-OVER-PROPERTIES :callees) '(LIST* QUOTE LIST
                                                           SB-INT:QUASIQUOTE))
(setf (callers-list 'SHOW-PROPERTIES :callees) '(QUOTE LIST PRINT PROP
                                                 MAP-OVER-PROPERTIES))
(setf (callers-list 'DELETE-DOMAIN :callees) '(DELETE-PROPERTY PROPERTY
                                               MAP-OVER-PROPERTIES))
(setf (callers-list 'DEFINE-PRIMITIVE-PROPERTY :callees) '(LABELS FORMAT
                                                            INTERN
                                                            LET
                                                            ERROR
                                                            MEMBER
                                                            WHEN))
(setf (callers-list 'MAKE-PREDICATE :callees) '(MAPCAR LIST* WHEN REVERSE PUSH
                                                       ATOM SETQ EQL COND LOOP
                                                       APPEND REST
                                                       MAKE-PREDICATE FIRST
                                                       QUOTE LIST
                                                       SB-INT:QUASIQUOTE NULL
                                                       IF))
(setf (callers-list 'ASSERT-FUNCTION-NAME :callees) '(FORMAT INTERN ERROR
                                                             MEMBER OR UNLESS))
(setf (callers-list 'PREDICATE-FUNCTION-NAME :callees) '(FORMAT INTERN ERROR
                                                                MEMBER OR
                                                                UNLESS))
(setf (callers-list 'DEFINE-MATH-PROPERTY :callees) '(SYMBOL-NAME
                                                      PREDICATE-FUNCTION-NAME
                                                      REST FIRST
                                                      ASSERT-FUNCTION-NAME
                                                      APPEND LIST*
                                                      SB-INT:QUASIQUOTE REVERSE
                                                      LIST PUSH ATOM IF SETQ
                                                      QUOTE EQL COND LOOP
                                                      FORMAT INTERN LET NULL
                                                      ERROR MEMBER WHEN))
(setf (callers-list 'USE-WEYLI-PACKAGE :callees) '(USE-PACKAGE SHADOWING-IMPORT))
(setf (callers-list 'USE-WEYL-PACKAGE :callees) '(USE-PACKAGE SHADOWING-IMPORT))
(setf (callers-list 'INTERN-IN-PACKAGE :callees) '(INTERN FIND-PACKAGE LOOP))
(setf (callers-list 'QUOTIENT-FIELD-PRINT-OBJECT :callees) '(FORMAT WITH-SLOTS))
(setf (callers-list 'NUMERATOR :callees) '(ERROR QUOTE TYPEP FIELD? OR COND
                                                 QF-RING MAKE-POLYNOMIAL
                                                 DOMAIN-OF LET QO-NUMERATOR))
(setf (callers-list 'DENOMINATOR :callees) '(ERROR ONE QUOTE TYPEP FIELD? OR
                                                   COND MAKE-ELEMENT QF-RING
                                                   MAKE-POLYNOMIAL DOMAIN-OF
                                                   LET QO-DENOMINATOR))
(setf (callers-list 'HEIGHT :callees) '(POLY-FORM POLY-HEIGHT CN-IMAGPART
                                        CN-REALPART LET BF-ABS
                                        BIND-DOMAIN-CONTEXT FP-VALUE
                                        QO-DENOMINATOR QO-NUMERATOR
                                        INTEGER-VALUE ABS DOMAIN-OF
                                        CHARACTERISTIC GET-REAL-NUMBERS
                                        MAKE-ELEMENT DENOMINATOR NUMERATOR
                                        HEIGHT MAX))
(setf (callers-list 'MINUS? :callees) '(CLIST-MINUS? POLY-FORM POLY-MINUS?
                                        DOMAIN-OF BIND-DOMAIN-CONTEXT
                                        BIGFLOAT-MANTISSA FP-VALUE
                                        INTEGER-VALUE MINUSP QO-NUMERATOR
                                        MINUS?))
(setf (callers-list 'QUOTIENT-REDUCE* :callees) '(MAKE-QUOTIENT-ELEMENT MINUS
                                                  MINUS? / 1? UNLESS GCD LET
                                                  ZERO 0? IF ONE SETQ NULL WHEN
                                                  WITH-SLOTS))
(setf (callers-list 'QUOTIENT-REDUCE :callees) '(POLY-FORM RATFUN-REDUCE
                                                 QUOTIENT-REDUCE* ERROR
                                                 DOMAIN-OF EQL NOT WHEN
                                                 WITH-SLOTS))
(setf (callers-list 'EXPT-QUOTIENT :callees) '(- MINUS EXPT
                                                 MAKE-QUOTIENT-ELEMENT MINUS?
                                                 IF N1
                                                 WITH-NUMERATOR-AND-DENOMINATOR))
(setf (callers-list 'RATFUN-FIELD-PRINT-OBJECT :callees) '(PRINC RING-VARIABLES
                                                                 DISPLAY-LIST
                                                                 QF-RING
                                                                 COEFFICIENT-DOMAIN-OF
                                                                 FORMAT))
(setf (callers-list 'MAKE-RATIONAL-FUNCTION* :callees) '(MAKE-RATIONAL-FUNCTION
                                                         POLY-MINUS POLY-MINUS?
                                                         ONE RECIP POLY-TIMES
                                                         SETQ POLY-COEF? QUOTE
                                                         TYPEP AND COND
                                                         BIND-DOMAIN-CONTEXT
                                                         COEFFICIENT-DOMAIN-OF
                                                         QF-RING LET*))
(setf (callers-list 'RATFUN-REDUCE :callees) '(MAKE-RATIONAL-FUNCTION*
                                               POLY-QUOTIENT POLY-1? UNLESS
                                               POLY-GCD LET ZERO POLY-0? IF
                                               QF-RING ONE SETQ NULL WHEN))
(setf (callers-list 'LIST-OF-VARIABLES :callees) '(RETURN REF LIST-OF-VARIABLES
                                                          SETQ DIMENSION-OF
                                                          POLY-FORM LET
                                                          GE-EQUAL FUNCTION
                                                          GET-VARIABLE-NAME
                                                          PUSHNEW
                                                          POLY-LIST-OF-VARIABLES
                                                          LOOP NUM-X
                                                          WITH-NUMERATOR-AND-DENOMINATOR
                                                          QF-RING DOMAIN-OF
                                                          LET*))
(setf (callers-list 'RATIONAL-POLY-SUBST :callees) '(POLY-TERMS
                                                     RATIONAL-TERMS-HORNERS-RULE
                                                     ERROR WHEN EQL FUNCTION
                                                     POLY-ORDER-NUMBER ASSOC
                                                     SECOND OR SETQ COERCE
                                                     POLY-COEF? NULL COND LET))
(setf (callers-list 'RATIONAL-TERMS-HORNERS-RULE :callees) '(E- EXPT * + SETQ E
                                                             RED
                                                             MAP-OVER-EACH-TERM
                                                             LC
                                                             RATIONAL-POLY-SUBST
                                                             LE LET))
(setf (callers-list 'PARTIAL-DERIV :callees) '(MAKE-POLYNOMIAL POLY-FORM COND
                                               POLY-DERIVATIVE POLY-TIMES
                                               POLY-DIFFERENCE RATFUN-REDUCE
                                               BIND-DOMAIN-CONTEXT LC POLY-1?
                                               LE E1? POLY-TERMS SETQ RED NULL
                                               1? EQL AND UNLESS NUM-P NUM-X
                                               WITH-NUMERATOR-AND-DENOMINATOR
                                               CALL-NEXT-METHOD GE-EQUAL
                                               FUNCTION MEMBER IF QF-RING
                                               WITH-SLOTS DOMAIN-OF LET COERCE
                                               PARTIAL-DERIV ERROR))
(setf (callers-list 'LIST-OF-ELEMENTS :callees) '(AREF ARRAY-DIMENSION LOOP
                                                       VALUE-OF LET))
(setf (callers-list 'MAP-WITH-DOMAIN :callees) '(REF AREF %APPLY
                                                 ARRAY-DIMENSION VALUE-OF LOOP
                                                 TYPE MAKE-INSTANCE))
(setf (callers-list 'BINARY= :callees) '(RETURN BINARY= FUNCTION MEMBER UNLESS
                                                GENERATORS-OF LOOP EQL OR - 0?
                                                CONVERT-TO-LISP-NUMBER =
                                                CELL-ID EQUAL ELEMENT-KEY
                                                DOMAIN-OF EQUAL-FUNCTION-OF
                                                %FUNCALL))
(setf (callers-list 'BINARY> :callees) '(CONVERT-TO-LISP-NUMBER > ELEMENT-KEY
                                         DOMAIN-OF GREATER-FUNCTION-OF %FUNCALL))
(setf (callers-list 'SET-WITH-ELEMENT-LIST-PRINT-OBJECT :callees) '(REST FIRST
                                                                         FORMAT
                                                                         PRINC
                                                                         NULL
                                                                         IF
                                                                         SET-ELEMENTS
                                                                         LET))
(setf (callers-list 'NOT-AN-ELEMENT :callees) '(> RETURN SETF SECOND =
                                                  NOT-AN-ELEMENT REST NULL
                                                  SET-ELEMENT-LIST LOOP ERROR))
(setf (callers-list 'MAP-OVER-ELEMENTS :callees) '(%FUNCALL SET-ELEMENTS LOOP))
(setf (callers-list 'RANDOM :callees) '(COMPLEX-NUMBER MAKE-INSTANCE
                                        RANDOM-FLOATING-NUMBER - ZEROP IF /
                                        CHARACTERISTIC MAKE-ELEMENT LENGTH
                                        RANDOM NTH SET-ELEMENTS LET))
(setf (callers-list 'DEFINE-TAYLOR-EXPANSION-FUN :callees) '(LIST* QUOTE LIST
                                                                   SB-INT:QUASIQUOTE
                                                                   FORMAT
                                                                   INTERN LET))
(setf (callers-list 'TAYLOR-EXP :callees) '(MAKE-TPOWER-SERIES RETURN FACTORIAL
                                            / LIST APPEND SETQ LOOP LET))
(setf (callers-list 'TAYLOR :callees) '(COERCE TAYLOR1))
(setf (callers-list 'TAYLOR1 :callees) '(NULL NOT COEFFICIENT-DOMAIN-OF
                                              COERCIBLE? NTH DERIV DERIVS-OF
                                              GET-DEFAULT-TAYLOR-EXPANSION
                                              SUBSTITUTE LIST GETF APPLY
                                              STRING= ARGS-OF CAR FUNCT-OF
                                              NAME-OF GET-FUNCTION ERROR
                                              NUMERATOR CEILING / BRANCH-ORDER
                                              DENOMINATOR LCM LET*
                                              INTEGER-VALUE QUOTE TYPEP EXPT
                                              EXPONENT-OF BASE-OF = - VALENCE >
                                              IF * TAYLOR1 + SETQ TERMS-OF LOOP
                                              ZERO LET COERCE
                                              MAKE-TPOWER-SERIES RING-VARIABLES
                                              GE-EQUAL COND))
(setf (callers-list 'GET-DEFAULT-TAYLOR-EXPANSION :callees) '(LENGTH COERCE
                                                                     LAMBDA
                                                                     :UNNAMED-LAMBDA
                                                                     MAPCAR
                                                                     MAKE-TPOWER-SERIES
                                                                     RING-VARIABLES
                                                                     QF-RING
                                                                     QUOTE
                                                                     TYPEP IF
                                                                     COEFFICIENT-DOMAIN-OF
                                                                     LET*))
(setf (callers-list 'TPS-DERIV1 :callees) '(MAKE-TPOWER-SERIES TRIM-ZEROES
                                            MULTIPLE-VALUE-BIND / + * SVREF
                                            SETF LOOP MAKE-ARRAY SETQ -
                                            COEFFICIENT-DOMAIN-OF ZERO
                                            DOMAIN-OF LET* (A A)
                                            WITH-TPOWER-SERIES))
(setf (callers-list 'TPS-DERIV2 :callees) '(+ MAKE-TPOWER-SERIES TRIM-ZEROES
                                              MULTIPLE-VALUE-BIND DERIV SVREF
                                              SETF LOOP MAKE-ARRAY SETQ -
                                              COEFFICIENT-DOMAIN-OF ZERO
                                              DOMAIN-OF LET* (A A)
                                              WITH-TPOWER-SERIES))
(setf (callers-list 'REVERSION :callees) '(ORDER REF MAKE-TPOWER-SERIES RECIP
                                           MAKE-ELEMENT * SETQ - AREF SETF LOOP
                                           ZERO LIST MAKE-ARRAY COEFFS LENGTH
                                           DOMAIN-OF COEFFICIENT-DOMAIN-OF
                                           GET-MATRIX-SPACE LET* ERROR VALENCE
                                           /= IF))
(setf (callers-list 'SOLVE-FOR-COEFFS :callees) '(/ NUMERATOR COEFFICIENT -
                                                    QUOTIENT-REDUCE LENGTH NTH
                                                    LET))
(setf (callers-list 'EUCLIDEAN-SPACE-PRINT-OBJECT :callees) '(DIMENSION-OF
                                                              FORMAT))
(setf (callers-list 'MAKE-POINT :callees) '(NAMED-POINT ABSTRACT-POINT IF
                                            TUPLE-VALUE MAKE-POINT APPLY 1-
                                            AREF COERCE LENGTH LOOP VECTOR
                                            FUNCTION %APPLY POINT MAKE-INSTANCE
                                            ERROR NULL DIMENSION-OF
                                            ARRAY-DIMENSION EQL AND UNLESS
                                            COEFFICIENT-DOMAIN-OF LET))
(setf (callers-list 'MAKE-SIMPLEX :callees) '(COPY-LIST SIMPLEX MAKE-INSTANCE
                                                        CONS ERROR EQL NOT
                                                        DOMAIN-OF LOOP))
(setf (callers-list 'CELL-ID :callees) '(CONS LENGTH = IF LET VERTICES-OF
                                              ID-NUMBER-OF MAPCAR))
(setf (callers-list 'FACETS :callees) '(REMOVE-DUPLICATES RETURN FACETS
                                                          FACET-TABLE-OF
                                                          ID-NUMBER-OF GETHASH
                                                          LAST FIRST CONS LOOP
                                                          MAKE-SIMPLEX APPLY
                                                          PUSH DIMENSION-OF
                                                          FACET VERTICES-OF
                                                          CHOOSE LET REST IF
                                                          WITH-SLOTS))
(setf (callers-list 'OPPOSITE :callees) '(REMOVE VERTICES-OF SET-DIFFERENCE))
(setf (callers-list 'FACE? :callees) '(VERTICES-OF SUBSETP))
(setf (callers-list 'SEGMENT? :callees) '(VERTICES-OF LENGTH = QUOTE TYPEP AND))
(setf (callers-list 'TRIANGLE? :callees) '(VERTICES-OF LENGTH = QUOTE TYPEP OR
                                           AND))
(setf (callers-list 'TETRAHEDRON? :callees) '(VERTICES-OF LENGTH = QUOTE TYPEP
                                              AND))
(setf (callers-list 'SIGN-OF-PERMUTATION :callees) '(SUBSTITUTE * MEMBER REST
                                                                SIGN-OF-PERMUTATION
                                                                FIRST EQL NULL
                                                                AND COND))
(setf (callers-list 'MAP-OVER-ORIENTED-FACETS :callees) '(LIST QUOTE LIST*
                                                               SB-INT:QUASIQUOTE))
(setf (callers-list 'MAP-OVER-ORIENTED-COFACETS :callees) '(LIST QUOTE LIST*
                                                                 SB-INT:QUASIQUOTE
                                                                 GENSYM LET))
(setf (callers-list 'GET-CELL :callees) '(< ID-NUMBER-OF MAPCAR SORT
                                            CELL-TABLE-OF CELL-ID GETHASH
                                            MEMBER IF))
(setf (callers-list 'COFACETS :callees) '(REMOVE-DUPLICATES RETURN COFACETS
                                                            LOOP
                                                            COFACET-TABLE-OF
                                                            ID-NUMBER-OF
                                                            GETHASH))
(setf (callers-list 'MAXIMAL-CELL? :callees) '(COFACETS NULL MEMBER AND))
(setf (callers-list '%INSERT :callees) '(RETURN CELL-ID ID-NUMBER-OF GETHASH
                                                PUSH %INSERT SETF FACETS LOOP
                                                GET-CELL OR))
(setf (callers-list '%DELETE :callees) '(CELL-ID %DELETE REMHASH ID-NUMBER-OF
                                         GETHASH COND COFACETS REMOVE SETF
                                         FACETS LOOP))
(setf (callers-list '%MAP-OVER-CELLS :callees) '(CELL-TABLE-OF FUNCTION FUNCALL
                                                 DIMENSION-OF = NULL OR WHEN
                                                 LAMBDA :UNNAMED-LAMBDA MAPHASH))
(setf (callers-list 'MAP-OVER-CELLS :callees) '(LIST* QUOTE LIST
                                                      SB-INT:QUASIQUOTE))
(setf (callers-list 'MAP-OVER-MAXIMAL-CELLS :callees) '(LIST* QUOTE LIST
                                                              SB-INT:QUASIQUOTE))
(setf (callers-list 'UNION :callees) '(INSERT CELL MAP-OVER-MAXIMAL-CELLS
                                       MAKE-INSTANCE LET CLASS-OF EQL UNLESS
                                       ERROR WHEN))
(setf (callers-list 'INTERSECTION :callees) '(INSERT GET-CELL CELL
                                              MAP-OVER-CELLS MAKE-INSTANCE LET
                                              CLASS-OF EQL UNLESS ERROR WHEN))
(setf (callers-list 'VERTEX-SET :callees) '(VERTICES-OF FIRST PUSH V-CELL
                                            MAP-OVER-CELLS LET))
(setf (callers-list 'MAKE-SIMPLICIAL-COMPLEX :callees) '(RETURN INSERT
                                                                SIMPLICIAL-COMPLEX
                                                                MAKE-INSTANCE
                                                                LOOP))
(setf (callers-list 'MAX-DIMENSION-OF :callees) '(DIMENSION-OF MAX SETF CELL
                                                  MAP-OVER-CELLS LET))
(setf (callers-list '%SET-COERCE :callees) '(CONS PUSH DOMAIN-OF EQL UNLESS
                                                  ERROR ASSOC WHEN WITH-SLOTS))
(setf (callers-list 'CHAIN-MODULE-PRINT-OBJECT :callees) '(COEFFICIENT-DOMAIN-OF
                                                           COMPLEX-OF
                                                           DIMENSION-OF FORMAT))
(setf (callers-list 'COCHAIN-MODULE-PRINT-OBJECT :callees) '(COEFFICIENT-DOMAIN-OF
                                                             COMPLEX-OF
                                                             DIMENSION-OF
                                                             FORMAT))
(setf (callers-list 'COMPLEX-OF :callees) '(DOMAIN-OF COMPLEX-OF))
(setf (callers-list 'GET-CHAIN-MODULE :callees) '(QUOTE CHAIN-MODULE
                                                  MAKE-INSTANCE))
(setf (callers-list 'GET-COCHAIN-MODULE :callees) '(QUOTE COCHAIN-MODULE
                                                    MAKE-INSTANCE))
(setf (callers-list 'BOUNDARY-DOMAIN :callees) '(MAX-DIMENSION-OF 1-
                                                 GET-RATIONAL-INTEGERS LIST
                                                 MAKE-SIMPLICIAL-COMPLEX
                                                 DOMAIN-OF
                                                 COEFFICIENT-DOMAIN-OF -
                                                 COMPLEX-OF GET-CHAIN-MODULE
                                                 ERROR DIMENSION-OF = IF))
(setf (callers-list 'COBOUNDARY-DOMAIN :callees) '(GET-RATIONAL-INTEGERS LIST
                                                   MAKE-SIMPLICIAL-COMPLEX
                                                   COEFFICIENT-DOMAIN-OF +
                                                   GET-COCHAIN-MODULE ERROR
                                                   COMPLEX-OF MAX-DIMENSION-OF
                                                   DOMAIN-OF DIMENSION-OF = IF))
(setf (callers-list 'PRINT-TERM :callees) '(ZEROP CLIST-GET CLIST-DEGREE LET >
                                                  = FORMAT E1? PRINT-FORM
                                                  IMAGPART REALPART POLY-COEF?
                                                  POLY-MONOMIAL? OR E0? POLY-1?
                                                  AND ORDER /= MINUS
                                                  ARRAY-DIMENSION >= + COEFFS
                                                  AREF VALENCE PROGN
                                                  BRANCH-ORDER PRINT-EXPONENT
                                                  DISPLAY NOT IF PRINT-OBJECT
                                                  0? PRINT-TERM CELL LOOP NULL
                                                  REST FIRST CHAIN-TERMS-OF
                                                  LET* PRINT-GROUPED 1? UNLESS
                                                  - SETQ PRINC MINUS? COND))
(setf (callers-list 'CANONICAL :callees) '(MINUS CDR > IF CONS FIRST COMPLEX-OF
                                           GET-CELL MULTIPLE-VALUE-BIND))
(setf (callers-list 'POINTS-ORDER :callees) '(EQL RETURN ID-NUMBER-OF < COND
                                                  LOOP))
(setf (callers-list 'CELL-ORDER :callees) '(POINTS-ORDER OR ID-NUMBER-OF
                                            FUNCTION < VERTICES-OF COPY-LIST
                                            SORT LET))
(setf (callers-list 'MAKE-CHAIN-OR-COCHAIN :callees) '(CHAIN-OR-COCHAIN
                                                       MAKE-INSTANCE PUSH 0? +
                                                       CDR SETF SECOND FIRST EQ
                                                       COND CAR CELL-ORDER
                                                       LAMBDA :UNNAMED-LAMBDA
                                                       SORT LOOP LET))
(setf (callers-list 'MAKE-CHAIN :callees) ''MAKE-CHAIN-OR-COCHAIN)
(setf (callers-list 'MAKE-COCHAIN :callees) ''MAKE-CHAIN-OR-COCHAIN)
(setf (callers-list 'FREE-GROUP-PLUS :callees) '(COLLECT-TERM 0? NOT + LET IF
                                                 SIMP2 SIMP1 PAIR-UP-TERMS))
(setf (callers-list 'FREE-GROUP-DIFFERENCE :callees) '(COLLECT-TERM 0? NOT -
                                                       LET IF SIMP2 SIMP1
                                                       PAIR-UP-TERMS))
(setf (callers-list 'FREE-GROUP-MINUS :callees) '(FREE-GROUP-DIFFERENCE))
(setf (callers-list 'FREE-GROUP-SCALAR-TIMES :callees) '(CONS * SIMP LOOP 0?
                                                              COND))
(setf (callers-list 'CHAIN-TERMS-TIMES :callees) '(COLLECT-TERM 0? NOT IF * LET
                                                   AND WHEN SIMP2 SIMP1
                                                   PAIR-UP-TERMS))
(setf (callers-list 'BOUNDARY :callees) '(LAMBDA :UNNAMED-LAMBDA
                                           MAPHASH
                                           -
                                           CDR
                                           GETHASH
                                           CAR
                                           FACET
                                           CHAIN-TERMS-OF
                                           LOOP
                                           MAKE-HASH-TABLE
                                           BOUNDARY-DOMAIN
                                           BOUNDARY
                                           +
                                           SETF
                                           DIMENSION-OF
                                           1+
                                           CELL
                                           MAP-OVER-CELLS
                                           ZERO
                                           LET
                                           MAKE-CHAIN
                                           MINUS
                                           IF
                                           CONS
                                           PUSH
                                           F
                                           MAP-OVER-ORIENTED-FACETS
                                           COMPLEX-OF
                                           COEFFICIENT-DOMAIN-OF
                                           ONE
                                           LET*))
(setf (callers-list 'BOUNDARY-SET :callees) '(RETURN PUSH EVEN? UNLESS
                                                     CHAIN-TERMS-OF SIMP LOOP))
(setf (callers-list 'COBOUNDARY :callees) '(MAKE-COCHAIN CONS PUSH LAMBDA
                                            :UNNAMED-LAMBDA MAPHASH - + GETHASH
                                            COFACET MAP-OVER-ORIENTED-COFACETS
                                            CHAIN-TERMS-OF SIMP LOOP
                                            COEFFICIENT-DOMAIN-OF ZERO SETF
                                            COMPLEX-OF MAKE-HASH-TABLE
                                            COBOUNDARY-DOMAIN IF LET))
(setf (callers-list 'TP-FIELD-PRINT-OBJECT :callees) '(PRINC RING-VARIABLES
                                                             DISPLAY FORMAT
                                                             WITH-SLOTS))
(setf (callers-list 'TP-RING-PRINT-OBJECT :callees) '(PRINC RING-VARIABLES
                                                            DISPLAY FORMAT
                                                            WITH-SLOTS))
(setf (callers-list 'GET-TPOWER-SERIES-DOMAIN :callees) '(ERROR FIELD?
                                                                MAKE-TPOWER-SERIES-RING*
                                                                LIST
                                                                RING-VARIABLES
                                                                EQUAL
                                                                COEFFICIENT-DOMAIN-OF
                                                                EQL QUOTE TYPEP
                                                                AND LAMBDA
                                                                :UNNAMED-LAMBDA
                                                                FUNCTION
                                                                ADD-DOMAIN
                                                                RING? COND
                                                                COERCE LET))
(setf (callers-list 'MAKE-TPOWER-SERIES :callees) '(+ IF TRIM-ZEROES
                                                      MULTIPLE-VALUE-BIND
                                                      LAMBDA :UNNAMED-LAMBDA
                                                      MAP MAKE-TPOWER-SERIES
                                                      COEFFICIENT-DOMAIN-OF LET
                                                      COERCE VECTOR QUOTE APPLY
                                                      MAX TPOWER-SERIES
                                                      MAKE-INSTANCE))
(setf (callers-list 'TRIM-ZEROES :callees) '(RETURN SETF - MAKE-ARRAY VECTOR
                                                    VALUES = INCF SVREF 0? IF
                                                    LOOP LENGTH LET))
(setf (callers-list 'PRINT-GROUPED :callees) '(PRINC GROUPED? ALPHANUMERICP
                                                     EVERY OR IF FORMAT LET))
(setf (callers-list 'GROUPED? :callees) '(= DECF INCF COND LOOP CHAR CHAR= AND
                                            LENGTH - LET))
(setf (callers-list 'PRINT-EXPONENT :callees) '(PRINT-GROUPED PRINC PROGN / 1?
                                                NOT IF))
(setf (callers-list 'PRINT-TPOWER-SERIES :callees) '(LABELS))
(setf (callers-list 'TPS-SPREAD-COEFFS :callees) '(RETURN 1+ < IF SETF LOOP - *
                                                          + MAKE-ARRAY AREF
                                                          DOMAIN-OF ZERO LENGTH
                                                          LET*))
(setf (callers-list 'TPS-VAR-VAL :callees) '(DEFUN FORMAT INTERN))
(setf (callers-list 'TPS-VAR-BO :callees) '(DEFUN FORMAT INTERN))
(setf (callers-list 'TPS-VAR-ORDER :callees) '(DEFUN FORMAT INTERN))
(setf (callers-list 'TPS-VAR-COEFFS :callees) '(FORMAT INTERN))
(setf (callers-list 'WITH-TPOWER-SERIES :callees) '(SB-INT:UNQUOTE WHEN
                                                                   TPS-VAR-COEFFS
                                                                   TPS-VAR-ORDER
                                                                   TPS-VAR-BO
                                                                   TPS-VAR-VAL
                                                                   LIST VAR
                                                                   LIST*
                                                                   SB-INT:QUASIQUOTE
                                                                   REST APPEND
                                                                   SETQ QUOTE
                                                                   FIRST EQL
                                                                   ATOM NOT AND
                                                                   FORM LOOP
                                                                   LET))
(setf (callers-list 'MODIFY-BRANCH-ORDER :callees) '(BRANCH-ORDER ORDER VALENCE
                                                     * COEFFS TPS-SPREAD-COEFFS
                                                     DOMAIN-OF
                                                     MAKE-TPOWER-SERIES 1? IF))
(setf (callers-list 'SET-BRANCH-ORDER :callees) '(ERROR / MODIFY-BRANCH-ORDER
                                                        REM ZEROP BRANCH-ORDER
                                                        = COND))
(setf (callers-list 'MAP-TPOWER-SERIES :callees) '(COEFFS F QUOTE MAP DOMAIN-OF
                                                   MAKE-TPOWER-SERIES))
(setf (callers-list 'LARGEST-STORED-COEFF :callees) '(COEFFS ARRAY-DIMENSION -
                                                      VALENCE +))
(setf (callers-list 'TRUNCATE-ORDER :callees) '(SUBSEQ COEFFS ARRAY-DIMENSION -
                                                       + ORDER >=
                                                       COEFFICIENT-DOMAIN-OF
                                                       ZERO VECTOR DOMAIN-OF
                                                       MAKE-TPOWER-SERIES
                                                       VALENCE < COND
                                                       BRANCH-ORDER * LET))
(setf (callers-list '%BIND-DYNAMIC-DOMAIN-CONTEXT :callees) '(CALL-NEXT-METHOD
                                                              COEFFICIENT-DOMAIN-OF
                                                              LET))
(setf (callers-list 'CHARACTERISTIC :callees) '(QF-RING COEFFICIENT-DOMAIN-OF
                                                CHARACTERISTIC))
(setf (callers-list 'FACTOR-DOMAIN-PRINT-OBJECT :callees) '(FACTOR-DENOM-OF
                                                            FACTOR-NUMER-OF
                                                            FORMAT))
(setf (callers-list 'WITH-NUMERATOR-AND-DENOMINATOR :callees) '(LIST QUOTE
                                                                     LIST*
                                                                     SB-INT:QUASIQUOTE))
(setf (callers-list 'ORIENTED-SORT :callees) '(VALUES RETURN PSETF NULL SETF
                                                      FIRST ID-NUMBER-OF < WHEN
                                                      REST LOOP))
(setf (callers-list 'FUNCTION-SPACE-PRINT-OBJECT :callees) '(FUNCT-RANGE-OF
                                                             FUNCT-DOMAIN-OF
                                                             FORMAT))
(setf (callers-list 'HILBERT-SPACE-PRINT-OBJECT :callees) '(FUNCT-RANGE-OF
                                                            FUNCT-DOMAIN-OF
                                                            FORMAT))
(setf (callers-list 'BIGFLOATP :callees) '(QUOTE CLASS-OF CLASS-NAME EQL))
(setf (callers-list 'DECPREC! :callees) '(+ EXPT TRUNCATE MAKE-BIGFLOAT
                                            WITH-SLOTS))
(setf (callers-list 'INCPREC! :callees) '(- EXPT * MAKE-BIGFLOAT WITH-SLOTS))
(setf (callers-list 'CONV!MT :callees) '(1- DECPREC! ROUND!LAST INCPREC! <
                                            PRECI! - SETQ ZEROP COND > INTEGERP
                                            AND ERROR BIGFLOATP UNLESS))
(setf (callers-list 'CONV!EP :callees) '(DECPREC! ROUND!LAST INCPREC! <
                                         BIGFLOAT-EXPONENT - SETQ ZEROP COND
                                         INTEGERP ERROR BIGFLOATP UNLESS))
(setf (callers-list 'CUT!MT :callees) '(DECPREC! PRECI! - SETQ PLUSP IF >
                                        INTEGERP AND ERROR BIGFLOATP UNLESS))
(setf (callers-list 'CUT!EP :callees) '(DECPREC! BIGFLOAT-EXPONENT - SETQ > NOT
                                        IF INTEGERP ERROR BIGFLOATP UNLESS))
(setf (callers-list 'PRECI! :callees) '(- ASH / + LOG CEILING < IF VALUES
                                          INTEGER-LENGTH BIGFLOAT-MANTISSA ABS
                                          1+ LET*))
(setf (callers-list 'ORDER! :callees) '(BIGFLOAT-EXPONENT PRECI! +
                                        BIGFLOAT-MANTISSA ZEROP IF))
(setf (callers-list 'CONVERT-NUMBER->CHARACTERS :callees) '(DIGIT-CHAR PUSH
                                                                       TRUNCATE
                                                                       MULTIPLE-VALUE-SETQ
                                                                       NOT LOOP
                                                                       LET LIST
                                                                       ZEROP IF))
(setf (callers-list 'ROUND!LAST :callees) '(BIGFLOAT-EXPONENT MAKE-BIGFLOAT -
                                            MINUSP 1+ TRUNCATE REM < IF SETQ
                                            BIGFLOAT-MANTISSA ABS LET))
(setf (callers-list 'ROUND!MT :callees) '(DECPREC! ROUND!LAST EQUAL PRECI! -
                                          SETQ COND MINUSP NOT INTEGERP AND
                                          ERROR BIGFLOATP UNLESS))
(setf (callers-list 'ROUND!EP :callees) '(DECPREC! ROUND!LAST EQUAL
                                          BIGFLOAT-EXPONENT 1- - SETQ < COND
                                          INTEGERP ERROR BIGFLOATP UNLESS))
(setf (callers-list 'BFPRIN1 :callees) '(< CONS ORDER! ABS
                                           CONVERT-NUMBER->CHARACTERS PRINC
                                           BFPRIN1 OR WRITE-CHAR NREVERSE SETQ
                                           SECOND CHAR/= REST IF FIRST CHAR=
                                           AND REVERSE LOOP PUSH MINUSP WHEN))
(setf (callers-list 'READ!LNUM :callees) '(SECOND PLUSP IF MAKE-BIGFLOAT RETURN
                                                  - ABS EXPT * + SETQ FIRST 1+
                                                  INTEGER-LENGTH CEILING REST
                                                  ERROR INTEGERP LOOP))
(setf (callers-list 'READ!NUM :callees) '(MAKE-BIGFLOAT DECF - EXPT * + AREF
                                          CHAR= COND SETQ UNLESS PARSE-INTEGER
                                          MULTIPLE-VALUE-BIND LET))
(setf (callers-list 'CONVERT-TO-BIGFLOAT :callees) '(- FLOAT-RADIX EXPT *
                                                       MINUSP IF
                                                       INTEGER-DECODE-FLOAT
                                                       MULTIPLE-VALUE-BIND
                                                       FP-VALUE QO-DENOMINATOR
                                                       QO-NUMERATOR / LET
                                                       INTEGER-VALUE DOMAIN-OF
                                                       MAKE-BIGFLOAT))
(setf (callers-list 'BF-ABS :callees) '(BIGFLOAT-EXPONENT - MAKE-BIGFLOAT
                                        BIGFLOAT-MANTISSA > IF))
(setf (callers-list 'BF-MINUS :callees) '(BIGFLOAT-EXPONENT BIGFLOAT-MANTISSA -
                                          MAKE-BIGFLOAT))
(setf (callers-list 'BF-PLUS :callees) '(- INCPREC! > BIGFLOAT-MANTISSA +
                                           MAKE-BIGFLOAT = COND
                                           BIGFLOAT-EXPONENT LET))
(setf (callers-list 'BF-DIFFERENCE :callees) '(INCPREC! > BIGFLOAT-MANTISSA -
                                               MAKE-BIGFLOAT = COND
                                               BIGFLOAT-EXPONENT LET))
(setf (callers-list 'BF-TIMES :callees) '(BIGFLOAT-EXPONENT + BIGFLOAT-MANTISSA
                                          * MAKE-BIGFLOAT))
(setf (callers-list 'BF-QUOTIENT :callees) '(BIGFLOAT-EXPONENT -
                                             BIGFLOAT-MANTISSA TRUNCATE
                                             MAKE-BIGFLOAT PRECI! + CONV!MT
                                             WITH-SLOTS ROUND!MT))
(setf (callers-list 'BF-EXPT :callees) '(BF-TIMES ROUND!MT LAMBDA
                                         :UNNAMED-LAMBDA FUNCTION
                                         REPEATED-SQUARING %FUNCALL - BF-EXPT
                                         MAKE-BIGFLOAT / < IF))
(setf (callers-list 'BF-FLOOR :callees) '(- INCPREC! BF-FLOOR >
                                            BIGFLOAT-MANTISSA TRUNCATE
                                            MAKE-BIGFLOAT = COND
                                            BIGFLOAT-EXPONENT LET))
(setf (callers-list 'BF-INTEGER-PART :callees) '(EXPT * ZEROP IF WITH-SLOTS))
(setf (callers-list 'FLOOR1 :callees) '(ERROR FP-VALUE MAKE-ELEMENT
                                              QO-DENOMINATOR QO-NUMERATOR
                                              MULTIPLE-VALUE-BIND ZERO FLOOR
                                              BF-DIFFERENCE BF-INTEGER-PART
                                              VALUES CUT!EP SETQ
                                              BIND-DOMAIN-CONTEXT DOMAIN-OF LET))
(setf (callers-list 'FLOOR2 :callees) '(ERROR MAKE-ELEMENT
                                              CONVERT-TO-LISP-NUMBER
                                              MULTIPLE-VALUE-BIND FLOOR
                                              BF-TIMES BF-DIFFERENCE
                                              BF-INTEGER-PART VALUES BF-FLOOR
                                              COERCE SETQ BIND-DOMAIN-CONTEXT
                                              DOMAIN-OF LET))
(setf (callers-list 'CEILING1 :callees) '(ERROR FP-VALUE MAKE-ELEMENT
                                                QO-DENOMINATOR QO-NUMERATOR
                                                MULTIPLE-VALUE-BIND ZERO
                                                CEILING BF-DIFFERENCE
                                                BF-INTEGER-PART VALUES + EQL
                                                UNLESS CUT!EP SETQ
                                                BIND-DOMAIN-CONTEXT DOMAIN-OF
                                                LET))
(setf (callers-list 'CEILING2 :callees) '(ERROR MAKE-ELEMENT
                                                CONVERT-TO-LISP-NUMBER
                                                MULTIPLE-VALUE-BIND CEILING
                                                BF-TIMES BF-DIFFERENCE
                                                BF-INTEGER-PART VALUES + CUT!EP
                                                EQL UNLESS BF-FLOOR COERCE SETQ
                                                BIND-DOMAIN-CONTEXT DOMAIN-OF
                                                LET))
(setf (callers-list 'ROUND1 :callees) '(ERROR FP-VALUE MAKE-ELEMENT
                                              QO-DENOMINATOR QO-NUMERATOR
                                              MULTIPLE-VALUE-BIND ZERO ROUND
                                              BF-DIFFERENCE VALUES COERCE +
                                              FLOOR SETQ BIND-DOMAIN-CONTEXT
                                              DOMAIN-OF LET))
(setf (callers-list 'ROUND2 :callees) '(ERROR MAKE-ELEMENT
                                              CONVERT-TO-LISP-NUMBER
                                              MULTIPLE-VALUE-BIND ROUND
                                              BF-TIMES BF-DIFFERENCE VALUES * +
                                              BF-FLOOR COERCE SETQ
                                              BIND-DOMAIN-CONTEXT DOMAIN-OF LET))
(setf (callers-list 'TRUNCATE1 :callees) '(ERROR FP-VALUE MAKE-ELEMENT
                                                 QO-DENOMINATOR QO-NUMERATOR
                                                 MULTIPLE-VALUE-BIND DOMAIN-OF
                                                 ZERO VALUES TRUNCATE CEILING1
                                                 FLOOR1 PLUS? IF))
(setf (callers-list 'TRUNCATE2 :callees) '(ERROR DOMAIN-OF MAKE-ELEMENT VALUES
                                                 CONVERT-TO-LISP-NUMBER
                                                 MULTIPLE-VALUE-BIND TRUNCATE
                                                 CEILING2 FLOOR2 PLUS? IF))
(setf (callers-list 'BF-BINARY= :callees) '(BIGFLOAT-MANTISSA = AND WITH-SLOTS))
(setf (callers-list 'BF-BINARY>= :callees) '(- INCPREC! > BIGFLOAT-MANTISSA >=
                                               = COND WITH-SLOTS))
(setf (callers-list 'BF-BINARY> :callees) '(- INCPREC! BIGFLOAT-MANTISSA > =
                                              COND WITH-SLOTS))
(setf (callers-list 'BF-INTEGERP :callees) '(BIGFLOAT-EXPONENT MINUSP NOT
                                             BIGFLOATP AND))
(setf (callers-list 'GET!CONST :callees) '(ROUND!MT CDR EQUAL CAR < NULL OR
                                           COND QUOTE GET LET > INTEGERP AND
                                           ERROR ATOM UNLESS))
(setf (callers-list 'SAVE!CONST :callees) '(PRECI! CONS QUOTE GET SETF
                                            BIGFLOATP ERROR ATOM UNLESS))
(setf (callers-list 'SET!CONST :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'DEFINE-BFLOAT-CONSTANT :callees) '(LIST* QUOTE LIST
                                                              SB-INT:QUASIQUOTE))
(setf (callers-list 'BF-PI-MACHIN :callees) '(QUOTE SAVE!CONST * MAKE-BIGFLOAT
                                              ROUND!MT - SETQ ZEROP NOT LOOP
                                              EXPT TRUNCATE + LET*))
(setf (callers-list 'BF-SQRT :callees) '(ROUND!MT BF-DIFFERENCE BF-PLUS
                                         BF-TIMES BF-QUOTIENT BF-ABS > < OR
                                         LOOP BIGFLOAT-MANTISSA *
                                         BIGFLOAT-EXPONENT REM ZEROP SETQ
                                         CONV!MT MAKE-BIGFLOAT ORDER! 1+
                                         TRUNCATE - + LET* COERCE 0? IF))
(setf (callers-list 'BF-PI-AGM :callees) '(QUOTE SAVE!CONST BF-EXPT CUT!MT *
                                           CUT!EP BF-PLUS BF-TIMES SETQ
                                           BF-DIFFERENCE BF-ABS > LOOP BF-SQRT
                                           BF-QUOTIENT - MAKE-BIGFLOAT COERCE +
                                           LET*))
(setf (callers-list 'BF-PI :callees) '(BF-PI-AGM BF-PI-MACHIN QUOTE GET!CONST
                                       MAKE-BIGFLOAT ROUND!MT < COND))
(setf (callers-list 'PI-VALUE :callees) '(BF-PI BIND-DOMAIN-CONTEXT))
(setf (callers-list 'BF-E :callees) '(SAVE!CONST - * TRUNCATE SETQ INCF ZEROP
                                      LOOP NULL WHEN EXPT + QUOTE GET!CONST
                                      LET* MAKE-BIGFLOAT ROUND!MT > NOT COND))
(setf (callers-list 'E-VALUE :callees) '(BF-E BIND-DOMAIN-CONTEXT))
(setf (callers-list 'BF-EXP :callees) '(ROUND!LAST MINUS? CUT!MT REM BF-PLUS
                                        BF-QUOTIENT ORDER! MAX BF-TIMES CUT!EP
                                        1+ * > LOOP - MAKE-BIGFLOAT LET BF-E
                                        BF-EXPT ZEROP IF SETQ BF-DIFFERENCE
                                        FLOOR BF-ABS + LET* COERCE 0? COND))
(setf (callers-list 'EXP :callees) '(FP-VALUE EXP MAKE-ELEMENT BF-EXP DOMAIN-OF
                                     BIND-DOMAIN-CONTEXT))
(setf (callers-list 'BF-LOG :callees) '(ROUND!MT REM MAX BF-TIMES CUT!EP BF-ABS
                                        - MAKE-BIGFLOAT PROG BF-DIFFERENCE
                                        BF-PLUS 1+ LOOP BF-EXPT ORDER! *
                                        TRUNCATE ZEROP < BF-QUOTIENT BF-MINUS
                                        SETQ BF-EXP BF-E + LET* COERCE = COND >
                                        INTEGERP AND UNLESS ERROR PLUS? NOT
                                        WHEN))
(setf (callers-list 'LOG :callees) '(FP-VALUE LOG MAKE-ELEMENT BF-LOG DOMAIN-OF
                                     BIND-DOMAIN-CONTEXT))
(setf (callers-list 'BF-COS :callees) '(ROUND!MT BF-QUOTIENT ORDER! MAX BF-ABS
                                        LOOP CUT!EP MAKE-BIGFLOAT LET = BF-SIN
                                        BF-TIMES CUT!MT EQUAL REM NOT * FLOOR <
                                        BF-PI / PRECI! + LET* - SETQ MINUS?
                                        WHEN COERCE 0? COND ERROR > INTEGERP
                                        AND UNLESS))
(setf (callers-list 'BF-SIN :callees) '(ROUND!MT ZEROP BF-PLUS BF-QUOTIENT MAX
                                        1- * BF-ABS > LOOP CUT!EP MAKE-BIGFLOAT
                                        ORDER! 1+ MIN UNLESS BF-COS CUT!MT
                                        EQUAL - REM NOT BF-DIFFERENCE BF-FLOOR
                                        FLOOR SETQ < BF-PI BF-TIMES PRECI! +
                                        LET* BF-SIN BF-MINUS MINUS? COERCE 0?
                                        COND))
(setf (callers-list 'SIN :callees) '(FP-VALUE SIN MAKE-ELEMENT BF-SIN DOMAIN-OF
                                     BIND-DOMAIN-CONTEXT))
(setf (callers-list 'COS :callees) '(FP-VALUE COS MAKE-ELEMENT BF-COS DOMAIN-OF
                                     BIND-DOMAIN-CONTEXT))
(setf (callers-list 'BF-TAN :callees) '(BF-QUOTIENT BF-SQRT BF-SIN EQUAL CUT!MT
                                        = OR IF REM NOT BF-DIFFERENCE BF-FLOOR
                                        FLOOR SETQ < BF-PI BF-TIMES PRECI! +
                                        LET* BF-TAN BF-MINUS MINUS? COERCE 0?
                                        COND ERROR > INTEGERP AND UNLESS))
(setf (callers-list 'TAN :callees) '(FP-VALUE TAN MAKE-ELEMENT BF-TAN DOMAIN-OF
                                     BIND-DOMAIN-CONTEXT))
(setf (callers-list 'BF-ATAN :callees) '(BF-SQRT CUT!MT REM ZEROP MAX BF-ABS
                                         LOOP CUT!EP SETQ MAKE-BIGFLOAT ORDER!
                                         MIN - < BF-QUOTIENT BF-PLUS
                                         BF-DIFFERENCE ROUND!MT = BF-PI
                                         BF-TIMES + LET* BF-ATAN BF-MINUS
                                         MINUS? COERCE 0? COND ERROR > INTEGERP
                                         AND UNLESS))
(setf (callers-list 'BF-ASIN :callees) '(* CUT!MT BF-SQRT BF-QUOTIENT BF-ATAN
                                           1+ BF-PI BF-TIMES ROUND!MT -
                                           MAKE-BIGFLOAT BF-DIFFERENCE < + LET
                                           BF-ASIN BF-MINUS MINUS? COND
                                           INTEGERP AND UNLESS ERROR COERCE
                                           BF-ABS > OR WHEN))
(setf (callers-list 'ASIN :callees) '(FP-VALUE ASIN MAKE-ELEMENT BF-ASIN
                                      DOMAIN-OF BIND-DOMAIN-CONTEXT))
(setf (callers-list 'BF-ACOS :callees) '(BF-ATAN MINUS? IF BF-DIFFERENCE CUT!MT
                                         BF-SQRT BF-QUOTIENT SETQ BF-PI
                                         BF-TIMES ROUND!MT - MAKE-BIGFLOAT <
                                         COND + LET INTEGERP AND UNLESS ERROR
                                         COERCE BF-ABS > OR WHEN))
(setf (callers-list 'ACOS :callees) '(FP-VALUE ACOS MAKE-ELEMENT BF-ACOS
                                      DOMAIN-OF BIND-DOMAIN-CONTEXT))
(setf (callers-list 'NUMBER-OF-ELEMENTS :callees) '(FIELD-DEGREE EXPT
                                                    CHARACTERISTIC))
(setf (callers-list 'MAKE-GFP-DOMAIN :callees) '(COERCE :UNNAMED-LAMBDA
                                                        FUNCTION LOGXOR ZEROP
                                                        LOOP GF2^N SETQ - NTH
                                                        LOGAND 1- ASH LET*
                                                        LENGTH + < ERROR
                                                        INTEGER-VALUE INTEGERP
                                                        IF MAKE-ELEMENT LAMBDA
                                                        MAKE-HOMOMORPHISM
                                                        GET-RATIONAL-INTEGERS
                                                        QUOTE GFP MAKE-INSTANCE
                                                        LET = COND))
(setf (callers-list 'GFP-PRINT-OBJECT :callees) '(CHARACTERISTIC FORMAT))
(setf (callers-list 'COMPUTE-INVERSE :callees) '(* - PSETQ TRUNCATE SETQ ERROR
                                                   ZEROP VALUES RETURN EQL LOOP
                                                   + < IF LET))
(setf (callers-list 'PLUS? :callees) '(BIGFLOAT-MANTISSA FP-VALUE QO-NUMERATOR
                                       INTEGER-VALUE ZEROP PLUSP 0? NOT))
(setf (callers-list 'REMAINDER :callees) '(REM ERROR))
(setf (callers-list 'BINARY-GCD :callees) '(CALL-NEXT-METHOD COERCE QUOTE TYPEP
                                            ONE EQL DOMAIN-OF LET GCD ERROR
                                            MAKE-ELEMENT EQ COND WITH-SLOTS))
(setf (callers-list 'BINARY-LCM :callees) '(CALL-NEXT-METHOD COERCE QUOTE TYPEP
                                            EQL DOMAIN-OF LET GCD / * ERROR
                                            MAKE-ELEMENT EQ COND WITH-SLOTS))
(setf (callers-list 'MULTIPLICATIVE-ORDER :callees) '(EXPT 1? ALL-DIVISORS LOOP
                                                           DOMAIN-OF
                                                           NUMBER-OF-ELEMENTS
                                                           1- RETURN *
                                                           EXPT-MODULO-INTEGER
                                                           WHEN CAAR / SETQ
                                                           CDAR = 1+ NULL REST
                                                           FACTOR DO TOTIENT
                                                           LET GCD EQL NOT COND
                                                           WITH-SLOTS))
(setf (callers-list 'GF2^N-PRINT-OBJECT :callees) '(FIELD-DEGREE FORMAT))
(setf (callers-list 'MAKE-GFM-DOMAIN :callees) '(INTEGER-VALUE MAKE-ELEMENT
                                                 LAMBDA :UNNAMED-LAMBDA
                                                 FUNCTION MAKE-HOMOMORPHISM
                                                 GET-RATIONAL-INTEGERS GFM
                                                 MAKE-INSTANCE LET))
(setf (callers-list 'MAKE-FINITE-FIELD* :callees) '(ERROR IF REST FIRST FACTOR
                                                          LET* MAKE-GFP-DOMAIN
                                                          PRIME?
                                                          MAKE-GFM-DOMAIN NULL
                                                          COND))
(setf (callers-list 'MAKE-FINITE-FIELD :callees) '(MAKE-FINITE-FIELD* FALSE
                                                   FUNCTION ADD-DOMAIN))
(setf (callers-list 'GET-FINITE-FIELD :callees) '(ERROR FIELD-DEGREE EXPT
                                                        FACTOR REST
                                                        CHARACTERISTIC AND
                                                        PRIME?
                                                        MAKE-FINITE-FIELD*
                                                        QUOTE CLASS-OF
                                                        CLASS-NAME EQL LAMBDA
                                                        :UNNAMED-LAMBDA
                                                        FUNCTION ADD-DOMAIN
                                                        NULL COND))
(setf (callers-list 'GET-FACTOR-RING :callees) '(ERROR GENERATORS-OF FIRST
                                                       GET-FINITE-FIELD RING-OF
                                                       EQL COND))
(setf (callers-list 'USE-CHINESE-REMAINDER :callees) '(- * + VALUE MAKE-ELEMENT
                                                         WITH-SLOTS RECIP LOOP
                                                         SETQ MODULUS
                                                         CHARACTERISTIC COERCE
                                                         DOMAIN-OF TYPEP IF CDR
                                                         CAR QUOTE
                                                         GET-FINITE-FIELD LET*))
(setf (callers-list 'COMPUTE-RESULT :callees) '(- FLOOR > IF WITH-SLOTS))
(setf (callers-list 'RATIONAL-INTEGERS-PRINT-OBJECT :callees) '(PRINC))
(setf (callers-list 'RATIONAL-NUMBERS-PRINT-OBJECT :callees) '(PRINC))
(setf (callers-list 'GET-QUOTIENT-FIELD :callees) '(GET-RATIONAL-NUMBERS))
(setf (callers-list 'REAL-NUMBERS-PRINT-OBJECT :callees) '(PRINC))
(setf (callers-list 'COMPLEX-NUMBERS-PRINT-OBJECT :callees) '(PRINC))
(setf (callers-list 'DEF-REALIMAG-PART :callees) '(LIST* QUOTE LIST
                                                         SB-INT:QUASIQUOTE))
(setf (callers-list 'ABS :callees) '(* + SQRT CN-IMAGPART CN-REALPART LET
                                       BF-ABS BIND-DOMAIN-CONTEXT FP-VALUE
                                       QO-DENOMINATOR QO-NUMERATOR
                                       RATIONAL-NUMBER MAKE-INSTANCE
                                       INTEGER-VALUE DOMAIN-OF MAKE-ELEMENT ABS))
(setf (callers-list 'PHASE :callees) '(ATAN MAKE-ELEMENT CN-IMAGPART
                                            CN-REALPART LET DOMAIN-OF ZERO
                                            PHASE))
(setf (callers-list 'RANDOM-CONSTANT :callees) '(RANDOM))
(setf (callers-list 'RANDOM-FLOATING-NUMBER :callees) '(- ZEROP IF / RANDOM
                                                          FLOAT + LET))
(setf (callers-list 'CONVERT-TO-LISP-NUMBER :callees) '(FP-VALUE QO-DENOMINATOR
                                                        QO-NUMERATOR /
                                                        INTEGER-VALUE))
(setf (callers-list 'PARSE-NUMERIC-OBJ :callees) '(ERROR CLASS-OF CLASS-NAME
                                                         QO-DENOMINATOR
                                                         QO-NUMERATOR /
                                                         DOMAIN-OF
                                                         INTEGER-VALUE TYPE-OF
                                                         IF VALUES QUOTE TYPEP
                                                         COND))
(setf (callers-list 'INTEGER? :callees) '(INTEGERP))
(setf (callers-list 'SQRT :callees) '(- PLUS? + CN-IMAGPART CN-REALPART BF-SQRT
                                        BIND-DOMAIN-CONTEXT FP-VALUE
                                        MAKE-QUOTIENT-ELEMENT AND
                                        QO-DENOMINATOR QO-NUMERATOR / ERROR
                                        INTEGER-VALUE MAKE-ELEMENT
                                        COMPLETE-SET? COND DOMAIN-OF LET
                                        COMPLEX MINUS? IF SETQ * = UNLESS
                                        FASTER-ISQRT ABS LET* SQRT))
(setf (callers-list 'WITH-CONTAGION :callees) '(LIST QUOTE LIST*
                                                     SB-INT:QUASIQUOTE FIRST
                                                     SECOND SETQ ATOM IF LET))
(setf (callers-list 'DEFINE-BINARY-CONTAGIONS :callees) '(LIST WHEN APPEND
                                                               QUOTE LIST*
                                                               SB-INT:QUASIQUOTE))
(setf (callers-list 'CONTAGION :callees) '(COERCE VALUES))
(setf (callers-list 'BINARY>= :callees) '(CONVERT-TO-LISP-NUMBER >=))
(setf (callers-list 'MAX-PAIR :callees) '(CALL-NEXT-METHOD EQL COND > IF))
(setf (callers-list 'MIN-PAIR :callees) '(CALL-NEXT-METHOD EQL COND > IF))
(setf (callers-list 'EVEN? :callees) '(INTEGER-VALUE EVENP))
(setf (callers-list 'ODDP? :callees) '(INTEGER-VALUE EVENP))
(setf (callers-list 'EXTENDED-GCD* :callees) '(FLOOR * - MOD EXTENDED-GCD*
                                                     MULTIPLE-VALUE-BIND VALUES
                                                     = IF))
(setf (callers-list 'EXTENDED-GCD :callees) '(MAKE-UPOLYNOMIAL POLY-FORM
                                              CLIST-EXTENDED-GCD
                                              COEFFICIENT-DOMAIN-OF SETQ
                                              DOMAIN-OF LET SIGNUM * VALUES ABS
                                              EXTENDED-GCD* MULTIPLE-VALUE-BIND))
(setf (callers-list 'SINH :callees) '(FP-VALUE SINH DOMAIN-OF MAKE-ELEMENT))
(setf (callers-list 'COSH :callees) '(FP-VALUE COSH DOMAIN-OF MAKE-ELEMENT))
(setf (callers-list 'TANH :callees) '(FP-VALUE TANH DOMAIN-OF MAKE-ELEMENT))
(setf (callers-list 'ASINH :callees) '(FP-VALUE ASINH DOMAIN-OF MAKE-ELEMENT))
(setf (callers-list 'ACOSH :callees) '(FP-VALUE ACOSH DOMAIN-OF MAKE-ELEMENT))
(setf (callers-list 'ATANH :callees) '(FP-VALUE ATANH DOMAIN-OF MAKE-ELEMENT))
(setf (callers-list 'MAKE-EPOLYNOMIAL* :callees) '(EPOLYNOMIAL MAKE-INSTANCE))
(setf (callers-list 'MAKE-EPOLYNOMIAL :callees) '(LABELS LET*
                                                   LIST
                                                   AREF
                                                   SETF
                                                   RING-VARIABLES
                                                   LENGTH
                                                   1+
                                                   MAKE-ARRAY
                                                   SETQ
                                                   0?
                                                   CALL-NEXT-METHOD
                                                   NULL
                                                   COND
                                                   COEFFICIENT-DOMAIN-OF
                                                   COERCIBLE?
                                                   LET
                                                   GREATER-FUNCTION
                                                   SORT
                                                   MAKE-EPOLYNOMIAL*
                                                   GREATER-FUNCTION-OF
                                                   EQL
                                                   IF
                                                   POLY-FORM
                                                   MAKE-EPOLYNOMIAL))
(setf (callers-list 'SCAN-POLY-FORM :callees) '(GREATER-FUNCTION SORT
                                                MAKE-EPOLYNOMIAL*
                                                GET-COMPARISON-FUN
                                                SCAN-POLY-FORM E POLY-TERMS
                                                MAP-OVER-EACH-TERM SETQ
                                                POLY-ORDER-NUMBER LET REVERSE
                                                CONS 1+ MAKE-ARRAY PUSH LOOP 0?
                                                UNLESS POLY-COEF? COND))
(setf (callers-list 'GET-COMPARISON-FUN :callees) '(ERROR REVERSE 1+ LOOP
                                                          MAKE-COMPARISON-FUN
                                                          EQL SYMBOL-FUNCTION
                                                          FBOUNDP FUNCTIONP
                                                          SYMBOLP NOT AND COND))
(setf (callers-list 'MAKE-COMPARISON-FUN :callees) '(SYMBOL-FUNCTION VALUES
                                                                     LOOP >
                                                                     WHEN
                                                                     APPEND
                                                                     LIST* LIST
                                                                     SB-INT:QUASIQUOTE
                                                                     COMPILE
                                                                     FBOUNDP
                                                                     AND UNLESS
                                                                     QUOTE SETQ
                                                                     NULL IF
                                                                     REST FIRST
                                                                     FORMAT
                                                                     INTERN LET))
(setf (callers-list 'CONVERT-TERM :callees) '(POLY-FORM LIST* LIST
                                              SB-INT:QUASIQUOTE + SVREF >
                                              MAKE-POLYNOMIAL RETURN POLY-PLUS
                                              SETQ REST FIRST LOOP MAKE-TERMS
                                              CONS - CONVERT-TERM AREF ZEROP
                                              COND))
(setf (callers-list 'TRANSFORM-TERM :callees) '(TRANSFORM-TERM POLY-FORM
                                                SIMP-PLUS-TERMS
                                                SIMP-TIMES-TERMS NTH EXPT PUSH
                                                ZEROP UNLESS 1+ LOOP AREF
                                                COERCE LIST LET))
(setf (callers-list 'SAME-GREATER-FUNCTIONS :callees) '(LIST QUOTE LIST*
                                                             SB-INT:QUASIQUOTE))
(setf (callers-list 'MAKE-ETERM :callees) '(> 1+ DO SVREF SETF MAKE-ARRAY
                                              ARRAY-DIMENSION LET*))
(setf (callers-list 'GTERMS-PLUS :callees) '(MACROLET LIST
                                              LET))
(setf (callers-list 'COLLECT-TERM :callees) '(LIST QUOTE LIST*
                                                   SB-INT:QUASIQUOTE))
(setf (callers-list 'COLLECT-OLD-TERM :callees) '(ELT - COLLECT-TERM 0? UNLESS
                                                      SVREF + %FUNCALL OR RED
                                                      LT COLLECT-OLD-TERM REST
                                                      RETURN TERMS0? COND LOOP
                                                      SETQ LIST QUOTE LIST*
                                                      SB-INT:QUASIQUOTE))
(setf (callers-list 'GTERMS-MINUS :callees) '(SVREF - MAKE-ETERM LOOP))
(setf (callers-list 'GTERMS-DIFFERENCE :callees) '(MACROLET LIST
                                                    LET))
(setf (callers-list 'GTERMS-MON-TIMES :callees) '(+ * SETF MAKE-ARRAY LOOP
                                                    TERMS0 0? IF
                                                    ARRAY-DIMENSION SVREF LET))
(setf (callers-list 'GTERM-TIMES :callees) '(+ THE SVREF SETF LOOP MAKE-ARRAY
                                               LET))
(setf (callers-list 'GTERM-QUOT :callees) '(- THE SVREF SETF LOOP MAKE-ARRAY
                                              LET))
(setf (callers-list 'GTERM-LCM :callees) '(THE MAX SVREF SETF LOOP MAKE-ARRAY
                                               LET))
(setf (callers-list 'GTERM-DISJOINT :callees) '(RETURN SVREF THE ZEROP OR NOT
                                                       LOOP))
(setf (callers-list 'GTERM-DOMINATES :callees) '(RETURN SVREF THE < LOOP))
(setf (callers-list 'GTERM-EQUAL :callees) '(RETURN SVREF THE = NOT WHEN LOOP))
(setf (callers-list 'GTERM-CONSTANT? :callees) '(RETURN SVREF THE ZEROP NOT
                                                        WHEN LOOP))
(setf (callers-list 'GTERMS-TIMES :callees) '(AND WHEN + GTERM-EQUAL RETURN
                                                  LIST SETF %FUNCALL TERMS0? OR
                                                  COND GTERM-TIMES SVREF * 0?
                                                  UNLESS RED LOOP CONS SETQ
                                                  FIRST LENGTH LT
                                                  GTERMS-MON-TIMES LET))
(setf (callers-list 'GTERMS-EXPT :callees) '(GTERMS-TIMES SETF LOOP LET ONE LT
                                             MAKE-ETERM LIST E0? COND))
(setf (callers-list 'MAKE-MPOLYNOMIAL :callees) '(LABELS RING-VARIABLES
                                                   LENGTH
                                                   LET*))
(setf (callers-list 'IDEAL-PRINT-OBJECT :callees) '(REST FIRST FORMAT
                                                         GENERATORS-OF LET))
(setf (callers-list 'MAKE-IDEAL :callees) '(ADD-RELATION ERROR GROBNER-BASIS
                                            COEFFICIENT-DOMAIN-OF FIELD? COND
                                            LET RETURN GCD SETQ REST FIRST
                                            PID-IDEAL ONE LIST COERCE LOOP
                                            IDEAL MAKE-INSTANCE))
(setf (callers-list 'WITH-GROBNER-OPERATIONS :callees) '(SB-INT:UNQUOTE LIST*
                                                                        QUOTE
                                                                        LIST
                                                                        SB-INT:QUASIQUOTE))
(setf (callers-list 'CHECK-SAME-DOMAIN :callees) '(RETURN EQL UNLESS REST LOOP
                                                          FIRST DOMAIN-OF LET))
(setf (callers-list '(SETF GREATER-FUNCTION) :callees) '(FLET EQL
                                                          UNLESS
                                                          WITH-SLOTS))
(setf (callers-list 'CONVERT-LIST :callees) '(CONVERT-LIST RING-VARIABLES
                                              LENGTH GET-COMPARISON-FUN SETQ
                                              FUNCTIONP UNLESS NEW-FUNCTION
                                              SORT LOOP))
(setf (callers-list 'ADD-RELATION :callees) '(REDUCIBLES-OF POLY-FORM PUSH
                                              GREATER-FUNCTION-OF
                                              MAKE-EPOLYNOMIAL COERCE
                                              ADD-RELATION DOMAIN-OF EQL NOT IF
                                              RING-OF LET))
(setf (callers-list 'GENERATORS-OF :callees) '(EPOLYNOMIAL MAKE-INSTANCE LOOP
                                               APPEND WITH-SLOTS))
(setf (callers-list 'RESET-GROBNER-BASIS :callees) '(SETQ WITH-SLOTS))
(setf (callers-list 'TERMS-S-POLY :callees) '(0? UNLESS + %FUNCALL OR * SETF
                                              GTERM-TIMES SETQ REST RETURN
                                              TERMS0? COND LOOP - SVREF
                                              GTERM-QUOT RED LIST LT GTERM-LCM
                                              FIRST LENGTH LET*))
(setf (callers-list 'REDUCE-BASIS :callees) '(FLET WITH-GROBNER-OPERATIONS))
(setf (callers-list 'CRITERION1 :callees) '(PUSH LIST TERMS0? TERMS-S-POLY
                                                 GTERMS-PRIM* TERMS-REDUCE
                                                 GTERM-DISJOINT FIRST NULL POP
                                                 SETQ NEW-BASIS REDUCE-ALL
                                                 CRITERION1 RETURN-FROM OR
                                                 THIRD SECOND LET LAMBDA
                                                 :UNNAMED-LAMBDA FUNCTION
                                                 MEMBER UNLESS LT
                                                 GTERM-DOMINATES EQL NOT AND
                                                 WHEN LOOP))
(setf (callers-list 'REDUCE-ALL :callees) '(GTERM-LCM LIST MEMBER AND NIL PUSH
                                            LT GTERM-DOMINATES TERMS0? UNLESS
                                            APPEND POP TERMS-REDUCE SETQ NULL
                                            NOT LOOP LET
                                            WITH-GROBNER-OPERATIONS))
(setf (callers-list 'NEW-BASIS :callees) '(FLET WITH-GROBNER-OPERATIONS))
(setf (callers-list 'ADD-UNDONE :callees) '(FIRST E< LAMBDA :UNNAMED-LAMBDA
                                                  SORT ADD-UNDONE NOT APPEND
                                                  SETQ GTERM-LCM LIST PUSH
                                                  RETURN EQ EQL AND NIL LOOP
                                                  ROTATEF LT E> WHEN))
(setf (callers-list 'TERMS-REDUCE :callees) '(TERMS-S-POLY GTERMS-PRIM* SETQ LT
                                              GTERM-DOMINATES RETURN TERMS0?
                                              WHEN LOOP FIRST LENGTH LET))
(setf (callers-list 'GTERMS-PRIM* :callees) '(* SETF LOOP 1? LT SVREF / LET
                                                TERMS0? UNLESS))
(setf (callers-list 'POLYNOMIAL-RING-PRINT-OBJECT :callees) '(PRINC
                                                              RING-VARIABLES
                                                              DISPLAY-LIST
                                                              COEFFICIENT-DOMAIN-OF
                                                              FORMAT))
(setf (callers-list 'GET-POLYNOMIAL-RING :callees) '(MAKE-POLYNOMIAL-RING*
                                                     RING-VARIABLES GE-LEQUAL
                                                     COEFFICIENT-DOMAIN-OF EQL
                                                     QUOTE TYPEP AND LAMBDA
                                                     :UNNAMED-LAMBDA ADD-DOMAIN
                                                     NREVERSE SETQ GE-EQUAL
                                                     FUNCTION PUSHNEW COERCE
                                                     DIFFERENT-KERNELS LOOP LET))
(setf (callers-list 'POLY-ORDER-NUMBER :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'POLY-TERMS :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'POLY-COEF? :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'SCALAR? :callees) '(LENGTH = POLY-FORM POLY-COEF?))
(setf (callers-list 'MAKE-POLY-FORM :callees) '(POLY-ORDER-NUMBER CONS))
(setf (callers-list 'VARIABLE-SYMBOL :callees) '(POLY-FORM POLY-ORDER-NUMBER
                                                 VARIABLE-INDEX-TABLE AREF))
(setf (callers-list 'MORE-MAIN-ORDER-NUMBER? :callees) '(<))
(setf (callers-list 'LE :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'LC :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'LT :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'RED :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'MAKE-TERMS :callees) '(QUOTE LIST SB-INT:QUASIQUOTE NULL
                                            IF))
(setf (callers-list 'MAKE-MANY-TERMS :callees) '(REST LIST* SECOND FIRST LIST
                                                      QUOTE SB-INT:QUASIQUOTE
                                                      NULL IF))
(setf (callers-list 'TERMS0? :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'TERMS0 :callees) '(QUOTE))
(setf (callers-list 'MAKE-POLY :callees) '(VARIABLE-INDEX CONS MAKE-POLYNOMIAL
                                           COERCE MAKE-TERMS SETQ UNLESS))
(setf (callers-list 'MAP-OVER-EACH-TERM :callees) '(EQL NOT AND SB-INT:UNQUOTE
                                                        LIST QUOTE LIST*
                                                        SB-INT:QUASIQUOTE))
(setf (callers-list 'PAIR-UP-TERMS :callees) '(SB-INT:UNQUOTE LIST* QUOTE LIST
                                                              SB-INT:QUASIQUOTE
                                                              ERROR ATOM UNLESS))
(setf (callers-list 'ACCUMULATE-TERMS :callees) '(LIST* QUOTE LIST
                                                        SB-INT:QUASIQUOTE))
(setf (callers-list 'INSERT-INTO-ACCUMULATION-LIST :callees) '(INSERT-INTO-ACCUMULATION-LIST
                                                               LIST CDR NULL
                                                               WHEN %FUNCALL
                                                               SETQ SETF CAR EQ
                                                               COND))
(setf (callers-list 'ACCUMULATE-ACCUMULATION-LIST :callees) '(%FUNCALL SETQ
                                                              UNLESS DO CDR
                                                              ACCUMULATE-ACCUMULATION-LIST
                                                              CAR EQ NULL COND))
(setf (callers-list 'E= :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'E> :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'E< :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'E0? :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'E1? :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'E+ :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'E1+ :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'E1- :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'E- :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'E* :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'E/ :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'EMINUS? :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'EODDP :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'EMINUS :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'EMAX :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'MAKE-POLYNOMIAL-MORPHISM :callees) '(APPLY-MORPHISM
                                                          ARRAY-DIMENSION
                                                          TUPLE-VALUE
                                                          MAKE-ELEMENT
                                                          MAKE-POLYNOMIAL-MORPHISM
                                                          %APPLY ERROR QUOTE
                                                          TYPEP AND UNLESS
                                                          LABELS
                                                          BIND-DOMAIN-CONTEXT
                                                          LAMBDA
                                                          :UNNAMED-LAMBDA
                                                          MAKE-HOMOMORPHISM
                                                          MAKE-AUTOMORPHISM
                                                          FUNCTION EQL IF
                                                          %FUNCALL POLY-FORM
                                                          VARIABLE-INDEX AREF
                                                          SETF V LOOP
                                                          COEFFICIENT-DOMAIN-OF
                                                          RING-VARIABLES LENGTH
                                                          MAKE-ARRAY LET))
(setf (callers-list 'TRANSFORM :callees) '(NREVERSE MAKE-GE-PLUS FIRST REST
                                                    NULL LIST MAKE-GE-TIMES
                                                    MAKE-GE-EXPT E1? POLY-1?
                                                    E0? PUSH VARIABLE-SYMBOL
                                                    LET IF POLY-FORM
                                                    MAKE-POLYNOMIAL E-
                                                    POLY-EXPT POLY-TIMES
                                                    POLY-PLUS SETQ E RED
                                                    MAP-OVER-EACH-TERM
                                                    POLY-ORDER-NUMBER AREF LC
                                                    TRANSFORM LE POLY-TERMS
                                                    LET* COERCE POLY-COEF? COND))
(setf (callers-list 'POLY-MONOMIAL? :callees) '(LC POLY-MONOMIAL? POLY-TERMS
                                                RED TERMS0? POLY-COEF? COND))
(setf (callers-list 'PRINT-MPOLYNOMIAL-FORM :callees) '(LABELS NOT
                                                         QUOTE
                                                         TYPEP
                                                         AND
                                                         COEFFICIENT-DOMAIN-OF
                                                         LET*))
(setf (callers-list 'PRINT-FORM :callees) '(PROGN
                                            MINUS?
                                            REAL?
                                            NUMBER?
                                            E
                                            RED
                                            MAP-OVER-EACH-TERM
                                            LE
                                            PRINT-TERM
                                            SETQ
                                            ONE
                                            -
                                            =
                                            AND
                                            WHEN
                                            LC
                                            POLY-ORDER-NUMBER
                                            VARIABLE-SYMBOL
                                            POLY-TERMS
                                            LET
                                            PRINC
                                            POLY-COEF?
                                            IF))
(setf (callers-list 'POLY-SIMP :callees) '(MAKE-POLY-FORM LC RED LE E0? AND
                                           ERROR ATOM ZERO TERMS0? COND))
(setf (callers-list 'TERMS-TERM :callees) '(E< LC RETURN LE E= COND ZERO
                                            TERMS0? RED DO))
(setf (callers-list 'TERMS-PLUS :callees) '(COLLECT-TERM POLY-0? NOT POLY-PLUS
                                            LET IF E2 E1 PAIR-UP-TERMS))
(setf (callers-list 'POLY-PLUS :callees) '(MORE-MAIN? SAME-VARIABLE? POLY-TERMS
                                           E0 MAKE-TERMS TERMS-PLUS POLY-SIMP
                                           POLY-0? + IF POLY-COEF? COND))
(setf (callers-list 'POLY-MINUS :callees) '(POLY-TERMS TERMS-MINUS
                                            MAKE-POLY-FORM MINUS POLY-COEF?
                                            COND))
(setf (callers-list 'TERMS-MINUS :callees) '(POLY-MINUS COLLECT-TERM E
                                             MAP-OVER-EACH-TERM))
(setf (callers-list 'POLY-MINUS? :callees) '(POLY-TERMS TERMS-MINUS? MINUS?
                                             POLY-COEF? IF))
(setf (callers-list 'TERMS-MINUS? :callees) '(LC POLY-MINUS?))
(setf (callers-list 'TERMS-DIFFERENCE :callees) '(POLY-MINUS COLLECT-TERM
                                                  POLY-0? NOT POLY-DIFFERENCE
                                                  LET IF E2 E1 PAIR-UP-TERMS))
(setf (callers-list 'POLY-DIFFERENCE :callees) '(MORE-MAIN? SAME-VARIABLE?
                                                 POLY-TERMS E0 MAKE-TERMS
                                                 TERMS-DIFFERENCE POLY-SIMP
                                                 POLY-MINUS POLY-0? - IF
                                                 POLY-COEF? COND))
(setf (callers-list 'TERMS-MON-TIMES :callees) '(POLY-TIMES E+ COLLECT-TERM TE
                                                 MAP-OVER-EACH-TERM TERMS0
                                                 POLY-0? IF))
(setf (callers-list 'TERMS-TIMES :callees) '(WHEN POLY-PLUS
                                              E=
                                              RETURN
                                              MAKE-TERMS
                                              SETF
                                              E>
                                              TERMS0?
                                              OR
                                              COND
                                              E+
                                              POLY-TIMES
                                              POLY-0?
                                              UNLESS
                                              E-X
                                              RED
                                              E-Y
                                              LOOP
                                              CONS
                                              SETQ
                                              LC
                                              LE
                                              TERMS-MON-TIMES
                                              LET))
(setf (callers-list 'POLY-TIMES :callees) '(MORE-MAIN? TERMS-TIMES
                                            SAME-VARIABLE? E0 POLY-TERMS
                                            TERMS-MON-TIMES POLY-SIMP * IF
                                            POLY-COEF? COND))
(setf (callers-list 'POLY-EXPTSQ :callees) '(ONE POLY-TIMES FUNCTION
                                             REPEATED-SQUARING %FUNCALL))
(setf (callers-list 'POLY-EXPT :callees) '(NULL COERCE POLY-PLUS - * / CDR
                                                MAKE-POLY-FORM = 1+ CAR
                                                POLY-TIMES CONS LIST RED DO LE
                                                E* MAKE-TERMS POLY-SIMP POLY-0?
                                                IF POLY-TERMS LC POLY-EXPT LET
                                                POLY-MONOMIAL? EXPT POLY-COEF?
                                                E1? ONE E0? COND))
(setf (callers-list 'TERMS-QUOTIENT :callees) '(RETURN TERMS0? IF MAKE-TERMS
                                                       TERMS-PLUS
                                                       TERMS-MON-TIMES
                                                       TERMS-DIFFERENCE E- LC
                                                       POLY-QUOTIENT* SETQ
                                                       THROW LE E< TERMS0 DO))
(setf (callers-list 'POLY-QUOTIENT* :callees) '(TERMS-QUOTIENT POLY-SIMP
                                                POLY-TERMS TERMS-CQUOTIENT
                                                MAKE-POLY-FORM MORE-MAIN? OR 0?
                                                TRUNCATE MULTIPLE-VALUE-BIND /
                                                QUOTE TYPEP IF POLY-COEF? THROW
                                                POLY-0? COND))
(setf (callers-list 'POLY-QUOTIENT :callees) '(CATCH LET))
(setf (callers-list 'TERMS-CQUOTIENT :callees) '(POLY-QUOTIENT COLLECT-TERM TE
                                                 MAP-OVER-EACH-TERM))
(setf (callers-list 'POLY-TEST-QUOTIENT :callees) '(CATCH LET))
(setf (callers-list 'TERMS-PSEUDO-REMAINDER :callees) '(E> POLY-EXPT E0?
                                                        EMINUS? RETURN TERMS0?
                                                        COND LC E0
                                                        TERMS-MON-TIMES
                                                        TERMS-DIFFERENCE SETQ
                                                        E- DO LE E< IF))
(setf (callers-list 'POLY-PSEUDO-REMAINDER :callees) '(TERMS-COEF-REMAINDER
                                                       MORE-MAIN? POLY-TERMS
                                                       TERMS-PSEUDO-REMAINDER
                                                       POLY-SIMP SAME-VARIABLE?
                                                       ZERO WITH-SLOTS
                                                       REMAINDER POLY-COEF?
                                                       COND))
(setf (callers-list 'TERMS-COEF-REMAINDER :callees) '(POLY-PSEUDO-REMAINDER
                                                      COLLECT-TERM E
                                                      MAP-OVER-EACH-TERM))
(setf (callers-list 'POLY-TRUNCATE2 :callees) '(ERROR ZERO / POLY-TIMES VALUES
                                                      QUOTE TYPEP POLY-COEF?
                                                      COND))
(setf (callers-list 'POLY-HEIGHT :callees) '(POLY-HEIGHT MAX SETQ E POLY-TERMS
                                             MAP-OVER-EACH-TERM LET HEIGHT
                                             POLY-COEF? IF))
(setf (callers-list 'POLY-FACTOR-CBOUND :callees) '(POLY-HEIGHT SQRT POLY-TERMS
                                                    LE EXPT * HEIGHT POLY-COEF?
                                                    IF))
(setf (callers-list 'TERMS-CONTENT :callees) '(POLY-MINUS POLY-MINUS? IF
                                               TERMS0? RED POLY-GCD LC DO))
(setf (callers-list 'POLY-CONTENT :callees) '(POLY-TERMS TERMS-CONTENT
                                              POLY-COEF? COND))
(setf (callers-list 'POLY-GCD :callees) '(POLY-QUOTIENT %FUNCALL POLY-TIMES LET
                                          ROTATEF POLY-TERMS LE E< IF
                                          MORE-MAIN? POLY-CONTENT POLY-GCD GCD
                                          POLY-COEF? POLY-1? COND))
(setf (callers-list 'POLY-LCM :callees) '(POLY-GCD POLY-QUOTIENT POLY-TIMES))
(setf (callers-list 'POLY-SPLIT-ON-VARS :callees) '(SETQ PUSH 0?
                                                         POLY-COEFFICIENT
                                                           POLY-DEGREE
                                                         1+ MEMBER
                                                         NOT LOOP
                                                         SUBSETP POLY-COEF?
                                                         OR UNLESS
                                                         LIST LET
                                                         POLY-LIST-OF-VARIABLES
                                                           REVERSE))
(setf (callers-list 'POLY-FIND-COMMON-VARS :callees) '(POLY-SPLIT-ON-VARS NCONC
                                                       WHEN RETURN INTERSECTION
                                                       EQUAL UNLESS FIRST REST
                                                       POLY-LIST-OF-VARIABLES
                                                       REVERSE SETQ LOOP LET))
(setf (callers-list 'POLY-MGCD :callees) '(RETURN NULL IF PUSH
                                                  POLY-TEST-QUOTIENT UNLESS
                                                  SPMOD-GCD1 PRINT WHEN
                                                  RANDOM-CONSTANT POLY-TIMES
                                                  POLY-PLUS CDDR FUNCTION
                                                  POLY-FIND-COMMON-VARS OP
                                                  SECOND FIRST SETQ LOOP LET))
(setf (callers-list 'POLY-CONTENT-AND-PRIM-PART :callees) '(POLY-QUOTIENT
                                                            VALUES POLY-CONTENT
                                                            LET))
(setf (callers-list 'TERMS-PRIM-PART :callees) '(TERMS-CONTENT TERMS-CQUOTIENT
                                                 TERMS0? IF))
(setf (callers-list 'POLY-PRIM-PART :callees) '(POLY-TERMS TERMS-PRIM-PART
                                                MAKE-POLY-FORM))
(setf (callers-list 'TERMS-MONICIZE :callees) '(* COLLECT-TERM E
                                                  MAP-OVER-EACH-TERM LC RECIP
                                                  LET))
(setf (callers-list 'POLY-MONICIZE :callees) '(POLY-TERMS TERMS-MONICIZE
                                               MAKE-POLY-FORM))
(setf (callers-list 'TERMS-EUCLIDEAN-GCD :callees) '(ONE E0 MAKE-TERMS RETURN
                                                     LE E0? IF TERMS-PRIM-PART
                                                     TERMS0?
                                                     TERMS-PSEUDO-REMAINDER DO))
(setf (callers-list 'POLY-EUCLIDEAN-GCD :callees) '(POLY-TERMS
                                                    TERMS-EUCLIDEAN-GCD
                                                    POLY-SIMP))
(setf (callers-list 'TERMS-PRIMITIVE-GCD :callees) '(ONE E0 MAKE-TERMS RETURN
                                                     LE E0? IF TERMS0?
                                                     TERMS-PSEUDO-REMAINDER
                                                     TERMS-PRIM-PART DO))
(setf (callers-list 'POLY-PRIMITIVE-GCD :callees) '(POLY-TERMS
                                                    TERMS-PRIMITIVE-GCD
                                                    POLY-SIMP))
(setf (callers-list 'POLY-REDUCED-GCD :callees) '(POLY-TERMS TERMS-REDUCED-GCD
                                                  POLY-SIMP))
(setf (callers-list 'TERMS-REDUCED-GCD :callees) '(SETQ ONE E0
                                                        MAKE-TERMS RETURN
                                                        E0? IF
                                                        TERMS-PRIM-PART TERMS0?
                                                        E1+ LC
                                                        POLY-EXPT
                                                          TERMS-PSEUDO-REMAINDER
                                                        TERMS-CQUOTIENT DO
                                                        LE E-
                                                        LET))
(setf (callers-list 'POLY-SUBRESULTANT-GCD :callees) '(POLY-SIMP ONE LE E0? IF
                                                       POLY-TERMS
                                                       TERMS-SUBRESULTANT-GCD
                                                       LET))
(setf (callers-list 'RESULTANT :callees) '(POLY-RESULTANT POLY-SUBST
                                           MAKE-POLYNOMIAL BIND-DOMAIN-CONTEXT
                                           E1 MAKE-TERMS QUOTE MAKE-POLY-FORM
                                           POLY-ORDER-NUMBER LIST COERCE
                                           POLY-FORM COEFFICIENT-DOMAIN-OF ONE
                                           SETQ ERROR EQL UNLESS DOMAIN-OF LET))
(setf (callers-list 'POLY-RESULTANT :callees) '(ZERO LC LE E0? IF POLY-TERMS
                                                TERMS-SUBRESULTANT-GCD LET))
(setf (callers-list 'TERMS-SUBRESULTANT-GCD :callees) '(POLY-QUOTIENT E1?
                                                        POLY-MINUS POLY-EXPT LC
                                                        POLY-TIMES EODDP SETQ
                                                        RETURN E0? IF
                                                        TERMS-PRIM-PART TERMS0?
                                                        TERMS-PSEUDO-REMAINDER
                                                        TERMS-CQUOTIENT DO LE
                                                        E- LET))
(setf (callers-list 'POLY-COERCE :callees) '(POLY-TERMS TERMS-COERCE POLY-SIMP
                                             COERCE POLY-COEF? COND))
(setf (callers-list 'TERMS-COERCE :callees) '(POLY-COERCE COLLECT-TERM E
                                              MAP-OVER-EACH-TERM))
(setf (callers-list 'POLY-SUBST :callees) '(ONE E1 MAKE-TERMS POLY-SIMP
                                            POLY-TERMS TERMS-HORNERS-RULE EQL
                                            FUNCTION POLY-ORDER-NUMBER ASSOC
                                            SECOND SETQ COERCE POLY-COEF? NULL
                                            COND LET))
(setf (callers-list 'TERMS-SUBST :callees) '(COLLECT-TERM POLY-SUBST SETQ
                                             POLY-0? UNLESS E
                                             MAP-OVER-EACH-TERM LET))
(setf (callers-list 'TERMS-HORNERS-RULE :callees) '(E- POLY-EXPT POLY-TIMES
                                                    POLY-PLUS SETQ E RED
                                                    MAP-OVER-EACH-TERM LC
                                                    POLY-SUBST LE LET))
(setf (callers-list 'POLY-VARIABLE-LIST :callees) '(LC POLY-VARIABLE-LIST SETQ
                                                    TERMS0? RED POLY-TERMS DO
                                                    PUSH POLY-ORDER-NUMBER
                                                    MEMBER NOT WHEN POLY-COEF?
                                                    COND))
(setf (callers-list 'POLY-DERIVATIVE :callees) '(COLLECT-TERM POLY-DERIVATIVE
                                                 SETQ POLY-0? NOT IF E
                                                 MAP-OVER-EACH-TERM LET
                                                 MORE-MAIN? POLY-TERMS
                                                 TERMS-DERIVATIVE POLY-SIMP
                                                 SAME-VARIABLE? ZERO POLY-COEF?
                                                 COND))
(setf (callers-list 'TERMS-DERIVATIVE :callees) '(COERCE POLY-TIMES E1-
                                                         COLLECT-TERM E0? NOT
                                                         IF E
                                                         MAP-OVER-EACH-TERM))
(setf (callers-list 'POLY-MAX-COEFFICIENT :callees) '(POLY-TERMS
                                                      TERMS-MAX-COEFFICIENT
                                                      POLY-COEF? UNLESS))
(setf (callers-list 'TERMS-MAX-COEFFICIENT :callees) '(POLY-TERMS
                                                       TERMS-MAX-COEFFICIENT
                                                       ABS MAX POLY-COEF? IF
                                                       SETQ IGNORE
                                                       MAP-OVER-EACH-TERM))
(setf (callers-list 'DEGREE :callees) '(CLIST-DEGREE ERROR POLY-DEGREE
                                        BIND-DOMAIN-CONTEXT LC POLY-1? LE E1?
                                        POLY-FORM POLY-TERMS SETQ RED NULL EQL
                                        AND COND DOMAIN-OF LET COERCE DEGREE))
(setf (callers-list 'POLY-DEGREE :callees) '(LC POLY-DEGREE EMAX SETQ TERMS0?
                                             RED DO MORE-MAIN? POLY-TERMS LE
                                             SAME-VARIABLE? E0 POLY-COEF? COND))
(setf (callers-list 'POLY-DEGREE-VECTOR :callees) '(FIRST
                                                    MORE-MAIN-ORDER-NUMBER?
                                                    LAMBDA :UNNAMED-LAMBDA SORT
                                                    TERMS-DEGREE-VECTOR
                                                    POLY-TERMS LE
                                                    POLY-ORDER-NUMBER CONS LIST
                                                    LET POLY-COEF? UNLESS))
(setf (callers-list 'ADD-VARIABLE-DEGREE :callees) '(CONS LIST NCONC SETQ
                                                          MORE-MAIN-ORDER-NUMBER?
                                                          SETF CDR > IF CAR EQL
                                                          LOOP))
(setf (callers-list 'TERMS-DEGREE-VECTOR :callees) '(TERMS-DEGREE-VECTOR
                                                     POLY-TERMS LE
                                                     POLY-ORDER-NUMBER
                                                     ADD-VARIABLE-DEGREE SETQ
                                                     POLY-COEF? UNLESS IGNORE
                                                     MAP-OVER-EACH-TERM))
(setf (callers-list 'POLY-LIST-OF-VARIABLES :callees) '(LABELS))
(setf (callers-list 'TERMS-LIST-OF-VARS :callees) '(P-LIST-OF-VARS IGNORE
                                                    MAP-OVER-EACH-TERM))
(setf (callers-list 'P-LIST-OF-VARS :callees) '(P-LIST-OF-VARS POLY-TERMS
                                                TERMS-LIST-OF-VARS
                                                POLY-ORDER-NUMBER PUSHNEW
                                                POLY-COEF? COND))
(setf (callers-list 'COEFFICIENT :callees) '(POLY-C-COEFFICIENT
                                             POLY-COEFFICIENT POLY-FORM
                                             POLY-COEF? NOT IF EQL COND
                                             MAKE-POLYNOMIAL
                                             BIND-DOMAIN-CONTEXT DOMAIN-OF LET
                                             COERCE COEFFICIENT))
(setf (callers-list 'POLY-COEFFICIENT :callees) '(POLY-COEFFICIENT ONE
                                                  MAKE-TERMS POLY-SIMP
                                                  POLY-TIMES POLY-PLUS SETQ
                                                  MORE-MAIN? LC RETURN LE E=
                                                  TERMS0? RED POLY-TERMS DO
                                                  SAME-VARIABLE? ZERO E0? IF
                                                  POLY-COEF? COND))
(setf (callers-list 'POLY-C-COEFFICIENT :callees) '(RED LC POLY-C-COEFFICIENT
                                                    ONE LE MAKE-TERMS POLY-SIMP
                                                    POLY-TIMES POLY-PLUS SETQ
                                                    TERMS0? ZERO POLY-TERMS DO
                                                    COEFFICIENT POLY-COEF? COND))
(setf (callers-list 'POLY-LEADING-COEFFICIENT :callees) '(POLY-TERMS LC
                                                          POLY-LEADING-COEFFICIENT
                                                          POLY-COEF? IF))
(setf (callers-list 'GET-VARIABLE-NAME :callees) '(VARIABLE-INDEX-TABLE AREF))
(setf (callers-list 'VARIABLE-INDEX :callees) '(RETURN GE-EQUAL WHEN
                                                       VARIABLE-HASH-TABLE VAR
                                                       LOOP COERCE SETQ
                                                       POLY-FORM
                                                       POLY-ORDER-NUMBER))
(setf (callers-list 'PARSE-LINEAR-EQUATION :callees) '(REVERSE MAKE-POLYNOMIAL
                                                               LAMBDA
                                                               :UNNAMED-LAMBDA
                                                               MAPCAR VALUES
                                                               RETURN FIRST
                                                               POLY-TIMES
                                                               POLY-DIFFERENCE
                                                               POLY-COEFFICIENT
                                                               PUSH SETQ ERROR
                                                               EQL POLY-FORM
                                                               LOOP
                                                               BIND-DOMAIN-CONTEXT
                                                               DOMAIN-OF LET))
(setf (callers-list 'GET-VARIABLE-NUMBER-PROPERTY :callees) '(VARIABLE-INDEX-TABLE
                                                              AREF %GETF))
(setf (callers-list 'SET-VARIABLE-NUMBER-PROPERTY :callees) '(VARIABLE-INDEX-TABLE
                                                              AREF %GETF SETF))
(setf (callers-list 'WITH-LINEAR-SUPPORT :callees) '(SB-INT:UNQUOTE LIST* QUOTE
                                                                    LIST
                                                                    SB-INT:QUASIQUOTE))
(setf (callers-list 'TERMS-INTERPOLATE :callees) '(ERROR SETQ POLY-0? WHEN NULL
                                                         CDR TERMS-TIMES FIRST
                                                         LINEAR-FORM
                                                         TERMS-HORNERS-RULE - /
                                                         TERMS-MON-TIMES
                                                         TERMS-PLUS CAR E0
                                                         MAKE-TERMS DO
                                                         WITH-LINEAR-SUPPORT))
(setf (callers-list 'POLY-INTERPOLATE :callees) '(TERMS-INTERPOLATE POLY-SIMP))
(setf (callers-list 'INTERPOLATE :callees) '(1- NTH SPARSEINTERPSTAGE CONS
                                                %FUNCALL INTERPOLATE
                                                COEFFICIENT-DOMAIN-OF
                                                RING-VARIABLES LIST-COERCE LET*
                                                RETURN AREF EXPT-LIST * + ZERO
                                                MAKE-DEGREE-MATRIX
                                                BOUND-DEGREE-TERM-COUNT 1+
                                                DEGREE-PARTITION REST MAPCAR OR
                                                WHEN UNLESS ERROR COERCE
                                                SYMBOLP SETQ FIRST COND LENGTH
                                                EQL QUOTE TYPEP AND IF LOOP
                                                POLY-FORM POLY-INTERPOLATE
                                                MAKE-POLYNOMIAL
                                                BIND-DOMAIN-CONTEXT DOMAIN-OF
                                                LET))
(setf (callers-list 'EXPT-LIST :callees) '(RETURN EXPT * SETQ FIRST DOMAIN-OF
                                                  ONE LOOP))
(setf (callers-list 'BOUND-DEGREE-TERM-COUNT :callees) '(ERROR INTEGER-NTH-ROOT
                                                               TRUNCATE 1-
                                                               RETURN +
                                                               COMBINATIONS >
                                                               WHEN LOOP EQL
                                                               COND))
(setf (callers-list 'DEGREE-PARTITION :callees) '(- 1+ CONS 1- DEGREE-PARTITION
                                                    LOOP 0? LIST
                                                    SB-INT:QUASIQUOTE 1? COND))
(setf (callers-list 'MAKE-DEGREE-MATRIX :callees) '(INVERT-ARRAY RETURN EXPT *
                                                    SETQ AREF SETF ONE LOOP
                                                    LENGTH LIST MAKE-ARRAY LET))
(setf (callers-list 'COMPUTE-VANDERMONDE-Q :callees) '(LINEAR-FORM TERMS-TIMES
                                                       SETQ REST LOOP FIRST -
                                                       E0 ONE E1 MAKE-TERMS LET
                                                       WITH-LINEAR-SUPPORT))
(setf (callers-list 'SOLVE-VANDERMONDE :callees) '(ARRAY-DIMENSION * + AREF
                                                                   SETF E
                                                                   TERMS-HORNERS-RULE
                                                                   TERMS-CQUOTIENT
                                                                   MAP-OVER-EACH-TERM
                                                                   LINEAR-FORM
                                                                   TERMS-QUOTIENT
                                                                   LOOP LENGTH
                                                                   MAKE-ARRAY
                                                                   LET*
                                                                   WITH-LINEAR-SUPPORT
                                                                   COMPUTE-VANDERMONDE-Q
                                                                   SETQ UNLESS))
(setf (callers-list 'SOLVE-VANDERMONDET :callees) '(PUSH AREF * + E
                                                         TERMS-HORNERS-RULE
                                                         TERMS-CQUOTIENT
                                                         MAP-OVER-EACH-TERM
                                                         LINEAR-FORM
                                                         TERMS-QUOTIENT LOOP
                                                         LENGTH MAKE-ARRAY LET
                                                         WITH-LINEAR-SUPPORT
                                                         COMPUTE-VANDERMONDE-Q
                                                         SETQ UNLESS))
(setf (callers-list 'SOLVE-VANDERMONDETD :callees) '(/ NREVERSE PUSH AREF * + E
                                                       TERMS-HORNERS-RULE
                                                       TERMS-CQUOTIENT
                                                       MAP-OVER-EACH-TERM
                                                       LINEAR-FORM
                                                       TERMS-QUOTIENT LOOP
                                                       LENGTH MAKE-ARRAY LET
                                                       WITH-LINEAR-SUPPORT
                                                       COMPUTE-VANDERMONDE-Q
                                                       SETQ UNLESS))
(setf (callers-list 'POLY-SKELETON :callees) '(ERROR MORE-MAIN? NREVERSE CONS
                                                     PUSH REST POLY-SKELETON E
                                                     POLY-TERMS
                                                     MAP-OVER-EACH-TERM LET
                                                     FIRST SAME-VARIABLE? LOOP
                                                     LIST POLY-COEF? COND))
(setf (callers-list 'PSKELETON :callees) '(POLY-SKELETON COERCE POLY-FORM
                                           LAMBDA :UNNAMED-LAMBDA MAPCAR LET))
(setf (callers-list 'SPARSEINTERPSTAGE :callees) '(DOMAIN-OF
                                                   COEFFICIENT-DOMAIN-OF
                                                   SPARSEINTERPSTAGEI))
(setf (callers-list 'SPARSEINTERPSTAGEI :callees) '(COEFFICIENT POLY-FORM
                                                    USE-CHINESE-REMAINDER
                                                    COMPUTE-RESULT + NTH COERCE
                                                    INTERPOLATE AREF SETF
                                                    SOLVE-VANDERMONDET EXPT
                                                    %FUNCALL APPEND MEMBER
                                                    INITY MULTIPLE-VALUE-SETQ
                                                    RANDOM - RING-VARIABLES
                                                    GET-POLYNOMIAL-RING
                                                    GET-FINITE-FIELD SETQ LOOP
                                                    ZERO ONE QUOTE *
                                                    CHOICE-PRIMES REVERSE 1-
                                                    LIST MAKE-ARRAY LENGTH
                                                    PSKELETON LIST-OF-VARIABLES
                                                    LIST-COERCE DOMAIN-OF LET*))
(setf (callers-list 'INITY :callees) '(VALUES RETURN PUSHNEW AREF EXPT * RANDOM
                                              1- SETQ LENGTH < LOOP QUOTE LET))
(setf (callers-list 'LIST-COERCE :callees) '(COERCE LOOP))
(setf (callers-list 'SPMOD-GCD :callees) '(PRINT PUSH + > * FIRST LOOP NEWPRIME
                                                 LIST POLY-FACTOR-CBOUND MIN
                                                 LET))
(setf (callers-list 'SPMOD-GCD1 :callees) '(POLY-QUOTIENT SPMOD-GCD2
                                            POLY-PRIM-PART POLY-TIMES RANDOM
                                            POLY-GCD LIST REST LOOP SETQ ERROR
                                            FIRST POLY-ORDER-NUMBER EQL AND
                                            UNLESS POLY-TERMS LC <
                                            POLY-LIST-OF-VARIABLES UNION SORT
                                            LET POLY-CONTENT-AND-PRIM-PART
                                            MULTIPLE-VALUE-BIND))
(setf (callers-list 'SPMOD-GCD2 :callees) '(ERROR POLY-TEST-QUOTIENT AND
                                                  DENSE-INTERPOLATE-COEFFICIENTS
                                                  SPMOD-GCD3 RANDOM POLY-DEGREE
                                                  MIN LOOP SECOND NREVERSE
                                                  LENGTH MAX PUSH POLY-SKELETON
                                                  SETQ E POLY-TERMS
                                                  MAP-OVER-EACH-TERM REST FIRST
                                                  LIST POLY-SUBST SPMOD-GCD2
                                                  LET POLY-GCDU POLY-TIMES NULL
                                                  COND))
(setf (callers-list 'NON-ZERO-RANDOM :callees) '(RETURN 0? NOT WHEN RANDOM LOOP))
(setf (callers-list 'SPMOD-GCD3 :callees) '(FLET))
(setf (callers-list 'CHECK-DEGREE :callees) '(NREVERSE POLY-0? UNLESS
                                                       INTERPOLATE-FROM-SKEL
                                                       RED SETF LC ZERO COND E
                                                       REVERSE POLY-SUBST PUSH
                                                       EXPT 1+ NIL SETQ
                                                       NON-ZERO-RANDOM LIST
                                                       VAR-NUM LOOP LET
                                                       POLY-TERMS TERMS-GCDU+
                                                       CHECK-DEGREE NULL IF
                                                       CONS ERROR FIRST LE E>
                                                       WHEN))
(setf (callers-list 'EVAL-MONOMIAL :callees) '(* SETQ REST LOOP FIRST EXPT LET))
(setf (callers-list 'INTERPOLATE-FROM-SKEL :callees) '(LABELS ONE
                                                        ZERO
                                                        SOLVE-VANDERMONDETD
                                                        EVAL-MONOMIAL
                                                        LOOP
                                                        LET*))
(setf (callers-list 'MAKE-MONOMIAL :callees) '(POLY-PLUS SETQ POLY-0? UNLESS
                                               LOOP MAKE-TERMS POLY-SIMP
                                               POLY-TIMES REST MAKE-MONOMIAL
                                               FIRST E0? ERROR NULL COND))
(setf (callers-list 'DENSE-INTERPOLATE-COEFFICIENTS :callees) '(POLY-SIMP
                                                                DENSE-INTERPOLATE-COEFFICIENTS
                                                                POLY-TIMES
                                                                POLY-PLUS RED
                                                                SETF LC E=
                                                                FIRST EMINUS?
                                                                NOT REVERSE MAX
                                                                SAME-VARIABLE?
                                                                POLY-TERMS LE
                                                                E0 MAKE-TERMS
                                                                PUSH
                                                                POLY-INTERPOLATE
                                                                SETQ MORE-MAIN?
                                                                NULL OR
                                                                POLY-COEF? COND
                                                                LOOP LET
                                                                WITH-LINEAR-SUPPORT))
(setf (callers-list 'POLY-GCDU :callees) '(ERROR POLY-TERMS TERMS-GCDU
                                                 POLY-SIMP SAME-VARIABLE? ONE
                                                 POLY-COEF? OR COND))
(setf (callers-list 'TERMS-GCDU :callees) '(TERMS-PSEUDO-REMAINDER PSETQ
                                            TERMS-MONICIZE ONE E0 MAKE-TERMS LE
                                            E0? IF TERMS0? DO))
(setf (callers-list 'TERMS-GCDU+ :callees) '(E0 TERMS-GCDU TERMS-MON-TIMES))
(setf (callers-list 'COEF-LIST0 :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'COEF-LIST1 :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'CLIST-X :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'COPY-CLIST :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'CLIST-DEGREE :callees) '(LIST QUOTE LIST*
                                                   SB-INT:QUASIQUOTE))
(setf (callers-list 'CLIST-ZERO-DEG? :callees) '(LIST QUOTE LIST*
                                                      SB-INT:QUASIQUOTE))
(setf (callers-list 'CLIST-LENGTH :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'MAKE-CLIST :callees) '(QUOTE LIST* SB-INT:QUASIQUOTE))
(setf (callers-list 'CLIST-GET :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'CLIST-SUBSEQ :callees) '(QUOTE LIST SB-INT:QUASIQUOTE))
(setf (callers-list 'WEYL:MAKE-UPOLYNOMIAL :callees) '(1- MAKE-ARRAY LENGTH
                                                          LET* CLIST-SIMPLIFY
                                                          UPOLYNOMIAL
                                                          MAKE-INSTANCE COERCE
                                                          SVREF SETF
                                                          ARRAY-DIMENSION LOOP
                                                          COEFFICIENT-DOMAIN-OF
                                                          LET ERROR
                                                          RING-VARIABLES REST
                                                          NULL UNLESS))
(setf (callers-list 'MAKE-UPOLYNOMIAL :callees) '(MAKE-UPOLYNOMIAL E POLY-TERMS
                                                  MAP-OVER-EACH-TERM SVREF SETF
                                                  POLY-COEF? IF
                                                  COEFFICIENT-DOMAIN-OF ZERO
                                                  DEGREE 1+ POLY-FORM DOMAIN-OF
                                                  CAR LET* REVERSE LENGTH
                                                  MAKE-ARRAY CLIST-SIMPLIFY
                                                  UPOLYNOMIAL MAKE-INSTANCE
                                                  ERROR RING-VARIABLES REST
                                                  NULL UNLESS))
(setf (callers-list 'PRINT-UPOLYNOMIAL :callees) '(LABELS))
(setf (callers-list 'CLIST-SIMPLIFY :callees) '(+ CLIST-SUBSEQ RETURN - SETQ
                                                  LOOP CLIST-GET 0? NOT = OR IF
                                                  CLIST-DEGREE LET))
(setf (callers-list 'CLIST-PLUS :callees) '(FLET CLIST-DEGREE
                                             LET))
(setf (callers-list 'ZIPPER-SUM :callees) '(- RETURN 0? ZERO ZIPPER-SUM >= 1+
                                              MAKE-ARRAY SETQ > COND + SVREF
                                              SETF MINUSP NOT LOOP))
(setf (callers-list 'CLIST-MINUS :callees) '(MINUS CLIST-GET SETF = +
                                             CLIST-LENGTH MAKE-CLIST DO))
(setf (callers-list 'CLIST-MINUS? :callees) '(CLIST-DEGREE CLIST-GET MINUS?))
(setf (callers-list 'CLIST-DIFFERENCE :callees) '(FLET CLIST-DEGREE
                                                   LET))
(setf (callers-list 'CLIST-TIMES :callees) '(* SETF CLIST-GET = DO ZERO + THE -
                                               MAKE-ARRAY CLIST-LENGTH LET*))
(setf (callers-list 'CLIST-EXPTSQ :callees) '(COEF-LIST1 CLIST-TIMES FUNCTION
                                              REPEATED-SQUARING %FUNCALL))
(setf (callers-list 'CLIST-QUOTIENT :callees) '(IF CLIST-DIVIDE
                                                   MULTIPLE-VALUE-BIND
                                                   CLIST-DEGREE
                                                   >
                                                   ERROR
                                                   COEF-LIST0?
                                                   COND))
(setf (callers-list 'CLIST-REMAINDER :callees) '(CLIST-DIVIDE
                                                 MULTIPLE-VALUE-BIND ERROR
                                                 COEF-LIST0? COND))
(setf (callers-list 'CLIST-DIVIDE :callees) '(* DO SETF / LET CLIST-SIMPLIFY =
                                                DO* + MAKE-CLIST COPY-CLIST -
                                                CLIST-GET LET* CLIST-DEGREE >
                                                COEF-LIST0 VALUES COEF-LIST1?
                                                ERROR COEF-LIST0? COND))
(setf (callers-list 'CLIST-GCD :callees) '(COEF-LIST0? CLIST-REMAINDER DO))
(setf (callers-list 'CLIST-LCM :callees) '(CLIST-GCD CLIST-QUOTIENT CLIST-TIMES))
(setf (callers-list 'CLIST-EXTENDED-GCD :callees) '(CLIST-TIMES
                                                    CLIST-DIFFERENCE
                                                    CLIST-EXTENDED-GCD
                                                    CLIST-DIVIDE
                                                    MULTIPLE-VALUE-BIND
                                                    MAKE-ARRAY VALUES
                                                    COEF-LIST0? IF))
(setf (callers-list 'CFACTOR :callees) '(ERROR = IF CDR CAR EXPT * SETQ LAMBDA
                                               :UNNAMED-LAMBDA MAPCAR DOMAIN-OF
                                               ONE FACTOR LET*))
(setf (callers-list 'CLIST-FACTOR :callees) '(CLIST-FACTOR-SQUAREFREE
                                              CLIST-SQFR-DECOMPOSE PP LOOP
                                              CLIST-PTH-ROOT CLIST-FACTOR CDR *
                                              CAR LAMBDA :UNNAMED-LAMBDA MAPCAR
                                              CHARACTERISTIC LET CONS LIST
                                              CLIST-DEGREE = CLIST-DERIV
                                              COEF-LIST0? IF))
(setf (callers-list 'CLIST-PRIMITIVE-PART! :callees) '(ONE / SETF LOOP 1?
                                                       UNLESS CLIST-GET
                                                       CLIST-DEGREE LET*))
(setf (callers-list 'SQUARE-FREE :callees) '(POLY-FORM CLIST-SQFR-DECOMPOSE CDR
                                             CAR MAKE-UPOLYNOMIAL CONS LAMBDA
                                             :UNNAMED-LAMBDA MAPCAR DOMAIN-OF
                                             BIND-DOMAIN-CONTEXT))
(setf (callers-list 'CLIST-SQFR-DECOMPOSE :callees) '(PLUSP CLIST-QUOTIENT > IF
                                                            CLIST-GCD REVERSE
                                                            RETURN
                                                            CLIST-PTH-ROOT
                                                            CLIST-DEGREE =
                                                            UNLESS
                                                            CLIST-PRIMITIVE-PART!
                                                            CONS PUSH
                                                            CLIST-DERIV SETQ
                                                            COEF-LIST0? WHEN
                                                            CHARACTERISTIC LOOP))
(setf (callers-list 'CLIST-DERIV :callees) '(COERCE * CLIST-GET SETF
                                                    CLIST-SIMPLIFY DO
                                                    CLIST-LENGTH - MAKE-CLIST
                                                    LET COEF-LIST0 CLIST-DEGREE
                                                    = IF))
(setf (callers-list 'CLIST-PTH-ROOT :callees) '(CLIST-GET SETF = - DO +
                                                MAKE-CLIST CLIST-DEGREE /
                                                CHARACTERISTIC LET*))
(setf (callers-list 'CLIST-FACTOR-SQUAREFREE :callees) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                                         > CLIST-EXPT-MOD-POLY
                                                         CLIST-DIFFERENCE
                                                         CLIST-GCD < COEF-LIST1
                                                         COND * + DO
                                                         CLIST-QUOTIENT APPEND
                                                         SETQ CLIST-GET 0? WHEN
                                                         CHARACTERISTIC CLIST-X
                                                         LET LIST CLIST-DEGREE
                                                         = IF))
(setf (callers-list 'CLIST-EXPT-MOD-POLY :callees) '(COEF-LIST1 CLIST-TIMES
                                                     CLIST-REMAINDER LAMBDA
                                                     :UNNAMED-LAMBDA FUNCTION
                                                     REPEATED-SQUARING %FUNCALL))
(setf (callers-list 'CLIST-FACTOR-PRODUCT-NTH-DEGREES :callees) '(RANDOM
                                                                  CLIST-GET
                                                                  SETF PUSH >
                                                                  COND
                                                                  CLIST-QUOTIENT
                                                                  COEF-LIST1
                                                                  CLIST-EXPT-MOD-POLY
                                                                  CLIST-PLUS
                                                                  CLIST-GCD
                                                                  LET* DOLIST
                                                                  NULL DO
                                                                  CLIST-X
                                                                  CHARACTERISTIC
                                                                  EXPT - / LET
                                                                  LIST
                                                                  CLIST-DEGREE
                                                                  = IF))
(setf (callers-list 'PROJECTIVE-SPACE-PRINT-OBJECT :callees) '(COEFFICIENT-DOMAIN-OF
                                                               DIMENSION-OF
                                                               FORMAT))
(setf (callers-list 'MAKE-PROJECTIVE-SPACE-ELEMENT :callees) '(PROJECTIVE-SPACE-ELEMENT
                                                               MAKE-INSTANCE))
(setf (callers-list 'VECTOR-SET-REF :callees) '(FIRST TUPLE-VALUE AREF SETF))
(setf (callers-list 'MAKE-AFFINE-SPACE :callees) '(LABELS SETF
                                                    NULL
                                                    WHEN
                                                    COEFFICIENT-DOMAIN-OF
                                                    MAKE-VECTOR-SPACE
                                                    DIMENSION-OF
                                                    LET*))
(setf (callers-list 'PROJECT :callees) '(/ = 1+ REF LOOP))
(setf (callers-list 'MAP-FUN :callees) '(MORPHISM-MAP MORPHISM-RANGE VALUES
                                         MAP-FUN MAKE-MORPHISM SETQ PROJECT
                                         MAKE-ELEMENT FUNCTION %APPLY))
(setf (callers-list 'QUATERNION-DOMAIN-PRINT-OBJECT :callees) '(COEFFICIENT-DOMAIN-OF
                                                                FORMAT))
(setf (callers-list 'UNIT-QUATERNION-DOMAIN-PRINT-OBJECT :callees) '(COEFFICIENT-DOMAIN-OF
                                                                     FORMAT))
(setf (callers-list 'CREATE-UNIT-QUATERNION :callees) '(REF SIN * / COS
                                                        MAKE-ELEMENT ERROR
                                                        DOMAIN-OF DIMENSION-OF
                                                        = UNLESS))
(setf (callers-list 'LOOP-VECTOR-BIND :callees) '(APPEND FIRST SECOND NIL LIST*
                                                         QUOTE NULL WHEN ATOM
                                                         COND NREVERSE
                                                         SB-INT:QUASIQUOTE LIST
                                                         PUSH INCF FORMAT
                                                         INTERN VAR LOOP SETQ
                                                         LET))
(setf (callers-list 'FREE-MODULE-PRINT-OBJECT :callees) '(DIMENSION-OF
                                                          COEFFICIENT-DOMAIN-OF
                                                          FORMAT))
(setf (callers-list 'MAKE-ELEMENT-FREE-MODULE-VECTOR :callees) '(DOMAIN-ELEMENT-CLASSES
                                                                 FIRST
                                                                 MAKE-INSTANCE
                                                                 ERROR
                                                                 ARRAY-DIMENSION
                                                                 EQL UNLESS
                                                                 DIMENSION-OF
                                                                 LET))
(setf (callers-list 'PRINT-FREE-MODULE-ELEMENT :callees) '(PRINC LOOP REF
                                                                 PRINT-OBJECT
                                                                 0? UNLESS
                                                                 WRITE-CHAR
                                                                 TUPLE-VALUE
                                                                 ARRAY-DIMENSION
                                                                 DIMENSION-OF
                                                                 QUOTE TYPEP IF
                                                                 DOMAIN-OF LET*))
(setf (callers-list 'MULTIPLY-VECTOR-BY-SCALAR :callees) '(MAKE-ELEMENT * SVREF
                                                           SETF
                                                           (E
                                                            (TUPLE-VALUE
                                                             VECTOR))
                                                           I LOOP-VECTOR-BIND
                                                           MAKE-ARRAY
                                                           DIMENSION-OF
                                                           DOMAIN-OF LET*))
(setf (callers-list 'CROSS-PRODUCT :callees) '(CALL-NEXT-METHOD AREF * -
                                               MAKE-ELEMENT TUPLE-VALUE SETQ
                                               DIMENSION-OF = EQL AND COND LET
                                               DOMAIN-OF ERROR))
(setf (callers-list 'TILDE :callees) '(CALL-NEXT-METHOD - SB-INT:QUASIQUOTE
                                       LIST MAKE-ARRAY MAKE-ELEMENT ZERO REF
                                       COEFFICIENT-DOMAIN-OF GET-MATRIX-SPACE
                                       LET DIMENSION-OF = COND DOMAIN-OF ERROR))
(setf (callers-list 'DOMAIN :readers) '(CREATE-UNIT-QUATERNION MAKE-UPOLYNOMIAL
                                        WEYL:MAKE-UPOLYNOMIAL INTERPOLATE
                                        SET-VARIABLE-PROPERTY
                                        SET-VARIABLE-NUMBER-PROPERTY
                                        GET-VARIABLE-NUMBER-PROPERTY
                                        VARIABLE-INDEX GET-VARIABLE-NAME
                                        PRINT-FORM PRINT-MPOLYNOMIAL-FORM
                                        MAKE-POLYNOMIAL-MORPHISM MAKE-POLY
                                        VARIABLE-SYMBOL MAKE-MPOLYNOMIAL
                                        CONVERT-TERM SCAN-POLY-FORM
                                        MAKE-EPOLYNOMIAL MAKE-EPOLYNOMIAL*
                                        RANDOM-CONSTANT MULTIPLICATIVE-ORDER
                                        RANDOM EXPT RECIP MINUS
                                        NUMBER-OF-ELEMENTS E-VALUE PI-VALUE
                                        CHARACTERISTIC
                                        %BIND-DYNAMIC-DOMAIN-CONTEXT
                                        MAKE-TPOWER-SERIES BOUNDARY %SET-COERCE
                                        MAKE-SIMPLEX MAKE-POINT
                                        SOLVE-FOR-COEFFS TAYLOR1 TAYLOR
                                        DEFINE-TAYLOR-EXPANSION-FUN
                                        DELETE-DOMAIN SHOW-PROPERTIES
                                        %MAP-OVER-PROPERTIES
                                        DEFINE-DOMAIN-CREATOR
                                        MAKE-MULTIPOLE-EXPANSION
                                        SUBDETERMINANT* FIND-PIVOT
                                        EXCHANGE-ROWS DETERMINANT* ONE-MATRIX
                                        ZERO-MATRIX WEYL:MAKE-ELEMENT
                                        MAKE-GE-EQN>= MAKE-GE-EQN> MAKE-GE-EQN=
                                        GET-VARIABLE-PROPERTY COERCE-OBJ
                                        MAKE-GE-EXPT MAKE-GE-TIMES MAKE-GE-PLUS
                                        MAKE-GE-FUNCT MAKE-FUNCTION
                                        GET-FUNCTION MAKE-GE-VARIABLE
                                        MAKE-ELEMENT MAKE-QUOTIENT-ELEMENT
                                        GET-MEMOIZATION SET-MEMOIZATION
                                        MAKE-SAMPLED-FUNCTION-1
                                        MAKE-SAMPLED-FUNCTION MAKE-GE-IFOURIER
                                        MAKE-GE-FOURIER ZERO ONE PRINT-OBJECT
                                        INITIALIZE-INSTANCE DIMENSION-OF
                                        ADD-NEW-VARIABLE
                                        SET-VARIABLE-DERIVATION COERCE
                                        RING-VARIABLES MAKE-POLYNOMIAL
                                        SET-MINIMAL-POLYNOMIAL
                                        MINIMAL-POLYNOMIAL))
(setf (callers-list 'VARIABLE :readers) '(SET-VARIABLE-PROPERTY
                                          GET-VARIABLE-PROPERTY VARIABLE-INDEX
                                          MAKE-POLY SUBSTITUTE ADD-NEW-VARIABLE
                                          SET-VARIABLE-DERIVATION COERCE
                                          SET-MINIMAL-POLYNOMIAL
                                          MINIMAL-POLYNOMIAL))
(setf (callers-list 'VARIABLES :readers) '(ADD-NEW-VARIABLE INITIALIZE-INSTANCE
                                           PARSE-LINEAR-EQUATION
                                           GET-POLYNOMIAL-RING COERCE DERIV
                                           PARTIAL-DERIV SUBSTITUTE
                                           SET-VARIABLE-DERIVATION
                                           SET-MINIMAL-POLYNOMIAL
                                           MINIMAL-POLYNOMIAL))
(setf (callers-list 'MINIMAL-POLYNOMIAL :readers) '(SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'FORM :readers) '(DEFINE-BFLOAT-CONSTANT WITH-TPOWER-SERIES
                                      MAKE-POLYNOMIAL))
(setf (callers-list '*DOMAIN* :readers) '(SQUARE-FREE FACTOR BF-ACOS BF-ASIN
                                          BF-ATAN BF-SIN BF-COS BF-LOG BF-EXP
                                          BF-E BF-PI BF-PI-AGM BF-SQRT
                                          BF-PI-MACHIN BF-FLOOR BF-EXPT
                                          BF-QUOTIENT BF-TIMES BF-DIFFERENCE
                                          BF-PLUS BF-MINUS BF-ABS READ!NUM
                                          READ!LNUM ROUND!LAST INCPREC!
                                          DECPREC! RATIONAL-POLY-SUBST
                                          STANDARD-DERIVATION ALG-POLY-TIMES))
(setf (callers-list 'BASE :readers) '(ATAN LOOP-OVER-TERMS MAKE-GE-EXPT EXPT))
(setf (callers-list '*COEFFICIENT-DOMAIN* :readers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                                      CLIST-EXPT-MOD-POLY
                                                      CLIST-FACTOR-SQUAREFREE
                                                      CLIST-PTH-ROOT
                                                      CLIST-DERIV
                                                      CLIST-SQFR-DECOMPOSE
                                                      CLIST-PRIMITIVE-PART!
                                                      CLIST-FACTOR FACTOR
                                                      CLIST-DIVIDE CLIST-EXPTSQ
                                                      CLIST-TIMES ZIPPER-SUM
                                                      TERMS-GCDU POLY-GCDU
                                                      INTERPOLATE-FROM-SKEL
                                                      CHECK-DEGREE SPMOD-GCD2
                                                      SPMOD-GCD1
                                                      COMPUTE-VANDERMONDE-Q
                                                      POLY-C-COEFFICIENT
                                                      POLY-COEFFICIENT
                                                      POLY-DERIVATIVE
                                                      POLY-SUBST POLY-RESULTANT
                                                      POLY-SUBRESULTANT-GCD
                                                      TERMS-REDUCED-GCD
                                                      TERMS-PRIMITIVE-GCD
                                                      TERMS-EUCLIDEAN-GCD
                                                      POLY-MGCD POLY-TRUNCATE2
                                                      POLY-QUOTIENT* POLY-EXPT
                                                      POLY-EXPTSQ TERMS-TERM
                                                      POLY-SIMP GTERMS-EXPT
                                                      THE-KTHTERM
                                                      POLY-DIFFERENTIATE-COEFS
                                                      POLY-DERIVATION
                                                      STANDARD-DERIVATION EXPT))
(setf (callers-list 'EXPT :readers) '(INTERPOLATE EXPT))
(setf (callers-list 'OPTIONS :readers) '(MAKE-TPOWER-SERIES WEYLI::REDUCE
                                         MAP-OVER-TREE PARTITION CHOOSE))
(setf (callers-list 'N :readers) '(PROJECT MAKE-AFFINE-SPACE
                                   CLIST-SQFR-DECOMPOSE EXPT DENOMINATOR
                                   NUMERATOR CONVERT-NUMBER->CHARACTERS
                                   GET-COCHAIN-MODULE GET-CHAIN-MODULE
                                   COORDINATE-LIST WEYL:MAKE-ELEMENT
                                   MAKE-ELEMENT FACTOR POWER-OF? POCHHAMMER
                                   PRINT-OBJECT RESAMPLE DERIVATION PARTITION
                                   %CHOOSE-REPEATS %CHOOSE CHOOSE))
(setf (callers-list 'VAR :readers) '(LOOP-VECTOR-BIND SPMOD-GCD1
                                     SPARSEINTERPSTAGEI ADD-NEW-VARIABLE
                                     VARIABLE-INDEX PARSE-LINEAR-EQUATION
                                     COEFFICIENT DEGREE RESULTANT
                                     POLY-SPLIT-ON-VARS GET-POLYNOMIAL-RING
                                     WITH-TPOWER-SERIES DERIV DEGREE-BOUNDS
                                     JACOBIAN SUBSTITUTE MAKE-UNION GE-DERIV
                                     DEPENDS-ON? DECLARE-DEPENDENCIES
                                     SET-VARIABLE-PROPERTY
                                     GET-VARIABLE-PROPERTY ADD-SUBSCRIPTS
                                     PRINT-OBJECT COERCE MAKE-GE-VARIABLE
                                     INITIALIZE-INSTANCE REPARSE-PRINT-STRING
                                     PARTITION PERMUTE CHOOSE))
(setf (callers-list 'BODY :readers) '(LOOP-VECTOR-BIND WITH-LINEAR-SUPPORT
                                      PAIR-UP-TERMS MAP-OVER-EACH-TERM
                                      WITH-GROBNER-OPERATIONS
                                      SAME-GREATER-FUNCTIONS WITH-CONTAGION
                                      WITH-NUMERATOR-AND-DENOMINATOR
                                      WITH-TPOWER-SERIES MAP-OVER-MAXIMAL-CELLS
                                      MAP-OVER-CELLS MAP-OVER-ORIENTED-COFACETS
                                      MAP-OVER-ORIENTED-FACETS
                                      DEFINE-TAYLOR-EXPANSION-FUN
                                      DEFINE-MATH-PROPERTY MAP-OVER-PROPERTIES
                                      DEFINE-DOMAIN-CREATOR DEFMESH
                                      DEFUN-BOUNDARY MAKE-MESH
                                      WITH-OPEN-MODULAR-ARITH
                                      WITH-MATRIX-DIMENSIONS WEYLI::DEFSUBST
                                      MERGE-TERMS-IN-SUM CHECK-POINT-CONTEXT
                                      WITH-NEW-CONTEXT MEMOIZE %MEMOIZE
                                      DEFDERIV-FUNCT DEFSIMPLIFY-FUNCT
                                      BIND-DOMAIN-CONTEXT DEFMETHOD-SD
                                      WITH-NEW-WEYL-CONTEXT ADD-DOMAIN
                                      MAP-OVER-TREE PARTITION PERMUTE CHOOSE))
(setf (callers-list 'FN :readers) '(PICK-NULL PICK))
(setf (callers-list 'WHILE :readers) '(ZIPPER-SUM
                                       DENSE-INTERPOLATE-COEFFICIENTS SPMOD-GCD
                                       INITY SPARSEINTERPSTAGEI TERMS-REDUCE
                                       REDUCE-ALL CRITERION1 BF-ATAN BF-SIN
                                       BF-COS BF-LOG BF-EXP BF-E BF-PI-AGM
                                       BF-SQRT BF-PI-MACHIN BFPRIN1
                                       CONVERT-NUMBER->CHARACTERS
                                       WITH-TPOWER-SERIES %MM-BOUNDARY
                                       NEIGHBORHOOD TRIANGULATE-TRIPLES
                                       PROCESSI HERMITE-ARRAY
                                       WITH-MATRIX-DIMENSIONS EXPAND PICK))
(setf (callers-list 'DO :readers) '(PRINT-FREE-MODULE-ELEMENT LOOP-VECTOR-BIND
                                    CLIST-SQFR-DECOMPOSE CLIST-PRIMITIVE-PART!
                                    ZIPPER-SUM WEYL:MAKE-UPOLYNOMIAL
                                    DENSE-INTERPOLATE-COEFFICIENTS
                                    MAKE-MONOMIAL EVAL-MONOMIAL CHECK-DEGREE
                                    NON-ZERO-RANDOM SPMOD-GCD2 SPMOD-GCD INITY
                                    SPARSEINTERPSTAGEI POLY-SKELETON
                                    SOLVE-VANDERMONDETD SOLVE-VANDERMONDET
                                    SOLVE-VANDERMONDE COMPUTE-VANDERMONDE-Q
                                    MAKE-DEGREE-MATRIX BOUND-DEGREE-TERM-COUNT
                                    EXPT-LIST INTERPOLATE ADD-NEW-VARIABLE
                                    VARIABLE-INDEX INITIALIZE-INSTANCE
                                    PARSE-LINEAR-EQUATION POLY-MGCD
                                    POLY-FIND-COMMON-VARS POLY-SPLIT-ON-VARS
                                    TERMS-TIMES MAKE-POLYNOMIAL-MORPHISM
                                    GET-POLYNOMIAL-RING GTERMS-PRIM*
                                    TERMS-REDUCE ADD-UNDONE REDUCE-ALL
                                    CRITERION1 CHECK-SAME-DOMAIN BINARY=
                                    MAKE-IDEAL GTERMS-EXPT GTERMS-TIMES
                                    GTERM-CONSTANT? GTERM-EQUAL GTERM-DOMINATES
                                    GTERM-DISJOINT GTERM-LCM GTERM-QUOT
                                    GTERM-TIMES GTERMS-MON-TIMES TRANSFORM-TERM
                                    CONVERT-TERM SCAN-POLY-FORM
                                    USE-CHINESE-REMAINDER MULTIPLICATIVE-ORDER
                                    BF-ATAN BF-SIN BF-COS BF-LOG BF-EXP BF-E
                                    BF-PI-AGM BF-SQRT BF-PI-MACHIN READ!LNUM
                                    BFPRIN1 CONVERT-NUMBER->CHARACTERS
                                    ORIENTED-SORT EXPT WITH-TPOWER-SERIES
                                    TPS-SPREAD-COEFFS GROUPED? TRIM-ZEROES
                                    COBOUNDARY BOUNDARY-SET BOUNDARY
                                    MAKE-CHAIN-OR-COCHAIN POINTS-ORDER
                                    PRINT-TERM MAKE-SIMPLICIAL-COMPLEX %DELETE
                                    %INSERT MAKE-SIMPLEX REVERSION TPS-DERIV2
                                    TPS-DERIV1 TAYLOR1 TAYLOR-EXP
                                    MAP-OVER-ELEMENTS MEMBER NOT-AN-ELEMENT
                                    LIST-OF-VARIABLES DEFINE-MATH-PROPERTY
                                    MAKE-PREDICATE %MAP-OVER-PROPERTIES
                                    TEST-PROPERTY ASSERT-PROPERTY
                                    COMPARE-PTERM-LISTS DEFINE-DOMAIN-CREATOR
                                    MAKE-MULTIPOLE-EXPANSION
                                    GET-EMBEDDABLE-DOMAINS MAKE-MORPHISM
                                    GET-MORPHISMS-TO GET-MORPHISMS-FROM FWRITE
                                    READ-SIZE-TABLE READ-REGION-POINTS
                                    READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                    READ-SIMPLICIAL-COMPLEX READ-VERTEX-SET
                                    MAKE-MESH-FROM-FILE %MM-BOUNDARY
                                    REFINE-MESH BUILD-CDT-FROM-BOUNDARIES
                                    %DELETE-TOO-CLOSE INSERT
                                    %SPLIT-CONSTRAINT-ONE-SIDE PLACE
                                    REMOVE-VERTEX FORCE-EDGE SPLIT-EDGE
                                    DIRECTED-LOCATE NEAR-BASE NEIGHBORHOOD
                                    VERTICES-SORTED-BY-ANGLE
                                    TRIANGULATE-TRIPLES POINT-VS-TRIANGLE
                                    SIMPLEX-SIZE SPLIT PROCESSI SMITH*
                                    HERMITE-ARRAY HERMITE* SUBDETERMINANT*
                                    SPARSE-DET FIND-PIVOT HADAMARD-BOUND COERCE
                                    DEGREE-BOUNDS JACOBIAN SUBSTITUTE
                                    SUBTRACT-ROWS FIND-PIVOT-UNORDERED
                                    FIND-PIVOT-ORDERED EXCHANGE-ROWS
                                    INVERT-ARRAY RECIP TRANSPOSE TIMES-ARRAY
                                    DIFFERENCE PLUS ONE-MATRIX REF
                                    WITH-MATRIX-DIMENSIONS MAKE-ELEMENT
                                    WEYL:MAKE-ELEMENT FERMAT-INTEGER-FACTOR
                                    ALL-DIVISORS UNIFORMIZE-FACTOR-LIST
                                    POWER-OF? FIND-SMALLER-PRIME
                                    INTEGER-NTH-ROOT POCHHAMMER
                                    EXPAND-BINOMIAL-FORM EXPAND
                                    DIFFERENT-KERNELS MERGE-NEW-BV DERIV
                                    DEPENDS-ON? DECLARE-DEPENDENCIES
                                    SET-VARIABLE-PROPERTY GET-VARIABLE-PROPERTY
                                    LOOP-OVER-TERMS INITIALIZE-CONTEXTS
                                    CHECK-DOMAIN PRINT-OBJECT
                                    ADD-FUNCTION-TO-DOMAIN SEARCH-FOR-FUNCTION
                                    GE-GREAT MAKE-GE-VARIABLE
                                    POLYNOMIAL-INTERPOLATE SMOOTH2 RESAMPLE
                                    MAKE-SAMPLED-FUNCTION-1 PRINT-TABLE
                                    EQUAL-VECTOR CANONICALIZE-FUNCTIONS APPLY
                                    MAKE-APP-FUNCTION FOURIER GE-FOURIER RECUR
                                    PARSE-OPERATION-LIST 1? 0? GET-DIRECT-SUM
                                    PARTITION PART-INT PICK))
(setf (callers-list 'FUN :readers) '(DERIV INITIALIZE-CONTEXTS CHECK-DOMAIN
                                     MAKE-FUNCTION-INTEGRATE
                                     MAKE-FUNCTION-DERIV APPLY PRINT-OBJECT
                                     CANONICALIZE-CLASS PICK))
(setf (callers-list 'FOR :readers) '(PRINT-FREE-MODULE-ELEMENT LOOP-VECTOR-BIND
                                     PROJECT CLIST-SQFR-DECOMPOSE
                                     CLIST-PRIMITIVE-PART! CLIST-FACTOR
                                     ZIPPER-SUM WEYL:MAKE-UPOLYNOMIAL
                                     DENSE-INTERPOLATE-COEFFICIENTS
                                     MAKE-MONOMIAL INTERPOLATE-FROM-SKEL
                                     EVAL-MONOMIAL CHECK-DEGREE NON-ZERO-RANDOM
                                     SPMOD-GCD2 SPMOD-GCD1 SPMOD-GCD
                                     LIST-COERCE INITY SPARSEINTERPSTAGEI
                                     POLY-SKELETON SOLVE-VANDERMONDETD
                                     SOLVE-VANDERMONDET SOLVE-VANDERMONDE
                                     COMPUTE-VANDERMONDE-Q MAKE-DEGREE-MATRIX
                                     DEGREE-PARTITION BOUND-DEGREE-TERM-COUNT
                                     EXPT-LIST INTERPOLATE ADD-NEW-VARIABLE
                                     VARIABLE-INDEX PARSE-LINEAR-EQUATION
                                     ADD-VARIABLE-DEGREE POLY-MGCD
                                     POLY-FIND-COMMON-VARS POLY-SPLIT-ON-VARS
                                     TERMS-TIMES MAKE-POLYNOMIAL-MORPHISM
                                     GET-POLYNOMIAL-RING GTERMS-PRIM*
                                     TERMS-REDUCE ADD-UNDONE REDUCE-ALL
                                     CRITERION1 GENERATORS-OF CONVERT-LIST
                                     CHECK-SAME-DOMAIN BINARY= TIMES MAKE-IDEAL
                                     GTERMS-EXPT GTERMS-TIMES GTERM-CONSTANT?
                                     GTERM-EQUAL GTERM-DOMINATES GTERM-DISJOINT
                                     GTERM-LCM GTERM-QUOT GTERM-TIMES
                                     GTERMS-MON-TIMES GTERMS-MINUS
                                     TRANSFORM-TERM CONVERT-TERM
                                     MAKE-COMPARISON-FUN GET-COMPARISON-FUN
                                     SCAN-POLY-FORM USE-CHINESE-REMAINDER
                                     MULTIPLICATIVE-ORDER MAKE-GFP-DOMAIN
                                     READ!LNUM BFPRIN1 ORIENTED-SORT EXPT
                                     WITH-TPOWER-SERIES TPS-SPREAD-COEFFS
                                     GROUPED? TRIM-ZEROES COBOUNDARY
                                     BOUNDARY-SET BOUNDARY
                                     FREE-GROUP-SCALAR-TIMES
                                     MAKE-CHAIN-OR-COCHAIN POINTS-ORDER
                                     PRINT-TERM MAKE-SIMPLICIAL-COMPLEX %DELETE
                                     %INSERT COFACETS FACETS MAKE-SIMPLEX
                                     MAKE-POINT REVERSION TPS-DERIV2 TPS-DERIV1
                                     TAYLOR1 TAYLOR-EXP MAP-OVER-ELEMENTS
                                     MEMBER NOT-AN-ELEMENT INITIALIZE-INSTANCE
                                     MAP-WITH-DOMAIN MAP LIST-OF-ELEMENTS
                                     LIST-OF-VARIABLES INTERN-IN-PACKAGE
                                     DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                     %MAP-OVER-PROPERTIES TEST-PROPERTY
                                     ASSERT-PROPERTY COMPARE-PTERM-LISTS
                                     DEFINE-DOMAIN-CREATOR DEFINE-MATH-OPERATOR
                                     EXTERNAL-NAME MAKE-MULTIPOLE-EXPANSION
                                     NEXT-DOMAINS GET-EMBEDDABLE-DOMAINS
                                     MAKE-MORPHISM GET-MORPHISMS-TO
                                     GET-MORPHISMS-FROM FWRITE READ-SIZE-TABLE
                                     READ-REGION-POINTS
                                     READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                     READ-SIMPLICIAL-COMPLEX READ-VERTEX-SET
                                     MAKE-MESH-FROM-FILE %MM-BOUNDARY MAKE-MESH
                                     REFINE-MESH BUILD-CDT-FROM-BOUNDARIES
                                     GRADE %DELETE-TOO-CLOSE INSERT
                                     %SPLIT-CONSTRAINT-ONE-SIDE PLACE
                                     REMOVE-VERTEX FORCE-EDGE SPLIT-EDGE
                                     ADJ-VERTICES DIRECTED-LOCATE NEIGHBORHOOD
                                     VERTICES-SORTED-BY-ANGLE ANGLES
                                     TRIANGULATE-TRIPLES POINT-VS-TRIANGLE
                                     DISTANCE SIMPLEX-SIZE SPLIT
                                     COORDINATE-LIST PROCESSI SMITH*
                                     HERMITE-ARRAY HERMITE* SUBDETERMINANT*
                                     SPARSE-DET FIND-PIVOT HADAMARD-BOUND
                                     DETERMINANT* DEGREE-BOUNDS JACOBIAN
                                     SUBSTITUTE SUBTRACT-ROWS
                                     FIND-PIVOT-UNORDERED FIND-PIVOT-ORDERED
                                     EXCHANGE-ROWS INVERT-ARRAY RECIP TRANSPOSE
                                     FME-MATRIX-TIMES MATRIX-FME-TIMES
                                     TIMES-ARRAY DIFFERENCE PLUS ONE-MATRIX REF
                                     MAKE-ELEMENT WEYL:MAKE-ELEMENT
                                     ASSOCIATE-PREDICATE SEARCH-LIST
                                     FERMAT-INTEGER-FACTOR ALL-DIVISORS
                                     UNIFORMIZE-FACTOR-LIST POWER-OF?
                                     FIND-SMALLER-PRIME INTEGER-NTH-ROOT
                                     POCHHAMMER EXPAND EXPAND-BINOMIAL-FORM
                                     EXPAND-PRODUCT EXPAND-OTHER EXPAND-PLUS
                                     DIFFERENT-KERNELS MERGE-NEW-BV DEPENDS-ON?
                                     DECLARE-DEPENDENCIES SET-VARIABLE-PROPERTY
                                     GET-VARIABLE-PROPERTY LOOP-OVER-TERMS
                                     INITIALIZE-CONTEXTS CHECK-DOMAIN
                                     ADD-FUNCTION-TO-DOMAIN SEARCH-FOR-FUNCTION
                                     GE-GREAT MAKE-GE-VARIABLE
                                     POLYNOMIAL-INTERPOLATE SMOOTH2 RESAMPLE
                                     MAKE-SAMPLED-FUNCTION-1 PRINT-TABLE
                                     EQUAL-VECTOR DERIV CANONICALIZE-FUNCTIONS
                                     APPLY MAKE-APP-FUNCTION FOURIER GE-FOURIER
                                     RECUR PARSE-OPERATION-LIST 1? 0?
                                     PRINT-OBJECT GET-DIRECT-SUM DOMAIN-LIST
                                     DEFINE-DIRECT-SUM DIRECT-SUM-PRINT-OBJECT
                                     COERCE RING-VARIABLES PARTITION PART-INT
                                     PICK))
(setf (callers-list 'V :readers) '(DIMENSION-OF SUBSTITUTE LIST-OF-VARIABLES 0?
                                   DIMENSIONS WEYL:MAKE-ELEMENT
                                   CREATE-UNIT-QUATERNION MAKE-ELEMENT
                                   INTERPOLATE POLY-SPLIT-ON-VARS
                                   MAKE-POLYNOMIAL-MORPHISM GET-POLYNOMIAL-RING
                                   MAKE-COMPARISON-FUN COMPUTE-RESULT
                                   USE-CHINESE-REMAINDER BFPRIN1 MAKE-POINT
                                   MAP-WITH-DOMAIN MAP FWRITE %DELETE-TOO-CLOSE
                                   PLACE REMOVE-VERTEX ANGLES
                                   TRIANGULATE-TRIPLES SPLIT TIMES MERGE-NEW-BV
                                   DECLARE-DEPENDENCIES MAKE-GE-VARIABLE DERIV
                                   APPLY MAKE-APP-FUNCTION PRINT-OBJECT
                                   DIRECT-SUM-PRINT-OBJECT RING-VARIABLES PICK))
(setf (callers-list 'IN :readers) '(LOOP-VECTOR-BIND CLIST-FACTOR
                                    WEYL:MAKE-UPOLYNOMIAL
                                    DENSE-INTERPOLATE-COEFFICIENTS
                                    MAKE-MONOMIAL INTERPOLATE-FROM-SKEL
                                    EVAL-MONOMIAL CHECK-DEGREE SPMOD-GCD1
                                    LIST-COERCE INITY SPARSEINTERPSTAGEI
                                    POLY-SKELETON SOLVE-VANDERMONDETD
                                    SOLVE-VANDERMONDET SOLVE-VANDERMONDE
                                    COMPUTE-VANDERMONDE-Q MAKE-DEGREE-MATRIX
                                    DEGREE-PARTITION EXPT-LIST INTERPOLATE
                                    ADD-NEW-VARIABLE VARIABLE-INDEX
                                    PARSE-LINEAR-EQUATION ADD-VARIABLE-DEGREE
                                    POLY-MGCD POLY-FIND-COMMON-VARS
                                    POLY-SPLIT-ON-VARS TERMS-TIMES
                                    MAKE-POLYNOMIAL-MORPHISM
                                    GET-POLYNOMIAL-RING GTERMS-PRIM*
                                    TERMS-REDUCE ADD-UNDONE REDUCE-ALL
                                    CRITERION1 GENERATORS-OF CONVERT-LIST
                                    CHECK-SAME-DOMAIN BINARY= TIMES MAKE-IDEAL
                                    GTERMS-TIMES GTERMS-MON-TIMES GTERMS-MINUS
                                    TRANSFORM-TERM CONVERT-TERM
                                    MAKE-COMPARISON-FUN USE-CHINESE-REMAINDER
                                    MULTIPLICATIVE-ORDER READ!LNUM BFPRIN1
                                    COERCE WITH-TPOWER-SERIES COBOUNDARY
                                    BOUNDARY-SET BOUNDARY
                                    FREE-GROUP-SCALAR-TIMES POINTS-ORDER
                                    PRINT-TERM MAKE-SIMPLICIAL-COMPLEX %DELETE
                                    %INSERT COFACETS FACETS MAKE-SIMPLEX
                                    MAKE-POINT TAYLOR1 MAP-OVER-ELEMENTS MEMBER
                                    INITIALIZE-INSTANCE MAP-WITH-DOMAIN MAP
                                    SUBSTITUTE LIST-OF-VARIABLES
                                    INTERN-IN-PACKAGE DEFINE-MATH-PROPERTY
                                    MAKE-PREDICATE %MAP-OVER-PROPERTIES
                                    TEST-PROPERTY ASSERT-PROPERTY
                                    COMPARE-PTERM-LISTS DEFINE-DOMAIN-CREATOR
                                    DEFINE-MATH-OPERATOR EXTERNAL-NAME
                                    MAKE-MULTIPOLE-EXPANSION NEXT-DOMAINS
                                    GET-EMBEDDABLE-DOMAINS MAKE-MORPHISM
                                    GET-MORPHISMS-TO GET-MORPHISMS-FROM FWRITE
                                    MAKE-MESH-FROM-FILE MAKE-MESH REFINE-MESH
                                    BUILD-CDT-FROM-BOUNDARIES GRADE
                                    %DELETE-TOO-CLOSE INSERT
                                    %SPLIT-CONSTRAINT-ONE-SIDE PLACE
                                    REMOVE-VERTEX FORCE-EDGE SPLIT-EDGE
                                    ADJ-VERTICES NEIGHBORHOOD ANGLES
                                    POINT-VS-TRIANGLE DISTANCE SIMPLEX-SIZE
                                    SPLIT HERMITE* SUBDETERMINANT* SPARSE-DET
                                    DETERMINANT* DEGREE-BOUNDS JACOBIAN
                                    WEYL:MAKE-ELEMENT MAKE-ELEMENT SEARCH-LIST
                                    ALL-DIVISORS EXPAND EXPAND-BINOMIAL-FORM
                                    EXPAND-PRODUCT EXPAND-OTHER EXPAND-PLUS
                                    DIFFERENT-KERNELS MERGE-NEW-BV DEPENDS-ON?
                                    DECLARE-DEPENDENCIES SET-VARIABLE-PROPERTY
                                    GET-VARIABLE-PROPERTY LOOP-OVER-TERMS
                                    INITIALIZE-CONTEXTS CHECK-DOMAIN
                                    PRINT-OBJECT ADD-FUNCTION-TO-DOMAIN
                                    SEARCH-FOR-FUNCTION GE-GREAT
                                    MAKE-GE-VARIABLE DERIV
                                    CANONICALIZE-FUNCTIONS APPLY
                                    MAKE-APP-FUNCTION GE-FOURIER RECUR
                                    GET-DIRECT-SUM DEFINE-DIRECT-SUM
                                    RING-VARIABLES PICK))
(setf (callers-list 'SEQ :readers) '(MAP-WITH-DOMAIN MAP WEYLI:SUBSTITUTE PICK))
(setf (callers-list 'I :readers) '(IMAGPART REALPART CONJUGATE DERIVATION
                                            MULTIPLY-VECTOR-BY-SCALAR MINUS
                                            LIST-OF-VARIABLES
                                            PRINT-FREE-MODULE-ELEMENT PROJECT
                                            MAKE-ELEMENT CLIST-PRIMITIVE-PART!
                                            ZIPPER-SUM WEYL:MAKE-UPOLYNOMIAL
                                            CHECK-DEGREE SPMOD-GCD2 INITY
                                            SPARSEINTERPSTAGEI POLY-SKELETON
                                            SOLVE-VANDERMONDE
                                            MAKE-DEGREE-MATRIX
                                            BOUND-DEGREE-TERM-COUNT INTERPOLATE
                                            INITIALIZE-INSTANCE
                                            MAKE-POLYNOMIAL-MORPHISM
                                            GTERMS-EXPT GTERM-CONSTANT?
                                            GTERM-EQUAL GTERM-DOMINATES
                                            GTERM-DISJOINT GTERM-LCM GTERM-QUOT
                                            GTERM-TIMES GTERMS-MON-TIMES
                                            TRANSFORM-TERM MAKE-COMPARISON-FUN
                                            GET-COMPARISON-FUN SCAN-POLY-FORM
                                            MAKE-GFP-DOMAIN EXPT
                                            TPS-SPREAD-COEFFS GROUPED?
                                            TRIM-ZEROES MAKE-POINT REVERSION
                                            TPS-DERIV2 TPS-DERIV1 TAYLOR1
                                            TAYLOR-EXP MAP-WITH-DOMAIN MAP
                                            LIST-OF-ELEMENTS
                                            MAKE-MULTIPOLE-EXPANSION FWRITE
                                            READ-VERTEX-SET SMITH*
                                            HERMITE-ARRAY HERMITE*
                                            SUBDETERMINANT* FIND-PIVOT
                                            SPARSE-DET HADAMARD-BOUND
                                            DEGREE-BOUNDS JACOBIAN SUBSTITUTE
                                            EXCHANGE-ROWS INVERT-ARRAY RECIP
                                            TRANSPOSE FME-MATRIX-TIMES
                                            MATRIX-FME-TIMES TIMES-ARRAY
                                            DIFFERENCE PLUS ONE-MATRIX REF
                                            WEYL:MAKE-ELEMENT ALL-DIVISORS
                                            POWER-OF? POCHHAMMER
                                            EXPAND-BINOMIAL-FORM DERIV
                                            MAKE-FUNCTION-INTEGRATE
                                            MAKE-FUNCTION-DERIV
                                            POLYNOMIAL-INTERPOLATE SMOOTH2
                                            RESAMPLE MAKE-SAMPLED-FUNCTION-1
                                            PRINT-TABLE EQUAL-VECTOR
                                            MAKE-APP-FUNCTION 1? 0?
                                            PRINT-OBJECT GET-DIRECT-SUM
                                            DOMAIN-LIST DIRECT-SUM-PRINT-OBJECT
                                            COERCE PART-INT))
(setf (callers-list 'FIXNUM :readers) '(LIST-OF-VARIABLES 0?
                                        CLIST-PRIMITIVE-PART! CLIST-TIMES
                                        ZIPPER-SUM WEYL:MAKE-UPOLYNOMIAL
                                        GTERM-CONSTANT? GTERM-EQUAL
                                        GTERM-DOMINATES GTERM-DISJOINT
                                        GTERM-LCM GTERM-QUOT GTERM-TIMES
                                        GTERMS-MON-TIMES GET-COMPARISON-FUN
                                        SCAN-POLY-FORM TPS-SPREAD-COEFFS
                                        TRIM-ZEROES MAKE-POINT LIST-OF-ELEMENTS
                                        MAKE-MULTIPOLE-EXPANSION
                                        SUBDETERMINANT* FIND-PIVOT JACOBIAN
                                        SUBSTITUTE SUBTRACT-ROWS
                                        FIND-PIVOT-UNORDERED FIND-PIVOT-ORDERED
                                        EXCHANGE-ROWS INVERT-ARRAY TRANSPOSE
                                        FME-MATRIX-TIMES MATRIX-FME-TIMES
                                        TIMES-ARRAY DIFFERENCE PLUS ONE-MATRIX
                                        REF PRINT-OBJECT WEYL:MAKE-ELEMENT
                                        PART-INT))
(setf (callers-list 'UPFROM :readers) '(PRINT-FREE-MODULE-ELEMENT
                                        CLIST-SQFR-DECOMPOSE CHECK-DEGREE INITY
                                        SPARSEINTERPSTAGEI MAKE-DEGREE-MATRIX
                                        BOUND-DEGREE-TERM-COUNT
                                        ADD-NEW-VARIABLE INITIALIZE-INSTANCE
                                        GTERM-CONSTANT? GTERM-EQUAL
                                        GTERM-DOMINATES GTERM-DISJOINT
                                        GTERM-LCM GTERM-QUOT GTERM-TIMES
                                        GTERMS-MON-TIMES MAKE-COMPARISON-FUN
                                        PRINT-OBJECT SCAN-POLY-FORM EXPT
                                        TRIM-ZEROES HERMITE* SUBDETERMINANT*
                                        FIND-PIVOT SUBTRACT-ROWS
                                        FIND-PIVOT-UNORDERED FIND-PIVOT-ORDERED
                                        POWER-OF? POCHHAMMER
                                        POLYNOMIAL-INTERPOLATE
                                        MAKE-APP-FUNCTION PART-INT))
(setf (callers-list 'BELOW :readers) '(LIST-OF-VARIABLES
                                       PRINT-FREE-MODULE-ELEMENT PROJECT
                                       MAKE-ELEMENT CLIST-PRIMITIVE-PART!
                                       WEYL:MAKE-UPOLYNOMIAL CHECK-DEGREE
                                       SPMOD-GCD2 INITY SPARSEINTERPSTAGEI
                                       SOLVE-VANDERMONDE DEGREE-PARTITION
                                       INTERPOLATE POLY-SPLIT-ON-VARS
                                       MAKE-POLYNOMIAL-MORPHISM GTERMS-EXPT
                                       GTERM-CONSTANT? GTERM-EQUAL
                                       GTERM-DOMINATES GTERM-DISJOINT GTERM-LCM
                                       GTERM-QUOT GTERM-TIMES GTERMS-MON-TIMES
                                       TRANSFORM-TERM MAKE-COMPARISON-FUN
                                       GET-COMPARISON-FUN SCAN-POLY-FORM
                                       MAKE-GFP-DOMAIN EXPT TPS-SPREAD-COEFFS
                                       TRIM-ZEROES MAKE-POINT REVERSION
                                       TPS-DERIV2 TPS-DERIV1 MAP-WITH-DOMAIN
                                       MAP LIST-OF-ELEMENTS
                                       MAKE-MULTIPOLE-EXPANSION FWRITE
                                       READ-VERTEX-SET COORDINATE-LIST PROCESSI
                                       SMITH* HERMITE-ARRAY HERMITE*
                                       SUBDETERMINANT* SPARSE-DET FIND-PIVOT
                                       HADAMARD-BOUND DEGREE-BOUNDS JACOBIAN
                                       SUBSTITUTE SUBTRACT-ROWS
                                       FIND-PIVOT-UNORDERED FIND-PIVOT-ORDERED
                                       EXCHANGE-ROWS INVERT-ARRAY RECIP
                                       TRANSPOSE FME-MATRIX-TIMES
                                       MATRIX-FME-TIMES TIMES-ARRAY DIFFERENCE
                                       PLUS ONE-MATRIX REF WEYL:MAKE-ELEMENT
                                       POCHHAMMER EXPAND-BINOMIAL-FORM
                                       POLYNOMIAL-INTERPOLATE SMOOTH2 RESAMPLE
                                       MAKE-SAMPLED-FUNCTION-1 PRINT-TABLE
                                       EQUAL-VECTOR 1? 0? PRINT-OBJECT
                                       GET-DIRECT-SUM DOMAIN-LIST
                                       DIRECT-SUM-PRINT-OBJECT COERCE PART-INT))
(setf (callers-list 'ON :readers) '(DENSE-INTERPOLATE-COEFFICIENTS CHECK-DEGREE
                                    SPMOD-GCD1 POLY-MGCD TERMS-TIMES
                                    GTERMS-TIMES BFPRIN1 ORIENTED-SORT
                                    WITH-TPOWER-SERIES MAKE-CHAIN-OR-COCHAIN
                                    INSERT NOT-AN-ELEMENT ASSOCIATE-PREDICATE
                                    UNIFORMIZE-FACTOR-LIST FOURIER
                                    PARSE-OPERATION-LIST PARTITION))
(setf (callers-list 'BY :readers) '(POLY-MGCD PROCESSI HERMITE-ARRAY FOURIER
                                    PARSE-OPERATION-LIST PARTITION))
(setf (callers-list 'WITH :readers) '(LIST-OF-VARIABLES PROJECT
                                      CLIST-SQFR-DECOMPOSE COERCE
                                      DENSE-INTERPOLATE-COEFFICIENTS EXPT-LIST
                                      INTERPOLATE PARSE-LINEAR-EQUATION
                                      POLY-FIND-COMMON-VARS
                                      MAKE-POLYNOMIAL-MORPHISM BINARY=
                                      MAKE-IDEAL CONVERT-TERM READ!LNUM
                                      CONVERT-NUMBER->CHARACTERS ORIENTED-SORT
                                      EXPT PRINT-TERM GROUPED? TRIM-ZEROES
                                      BOUNDARY-SET APPLY
                                      MAKE-SIMPLICIAL-COMPLEX %DELETE %INSERT
                                      FACETS MAKE-SIMPLEX MAP-WITH-DOMAIN MAP
                                      INTERN-IN-PACKAGE DEFINE-MATH-PROPERTY
                                      MAKE-PREDICATE READ-SIZE-TABLE
                                      READ-REGION-POINTS
                                      READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                      READ-SIMPLICIAL-COMPLEX READ-VERTEX-SET
                                      MAKE-MESH-FROM-FILE REFINE-MESH
                                      BUILD-CDT-FROM-BOUNDARIES
                                      %DELETE-TOO-CLOSE
                                      %SPLIT-CONSTRAINT-ONE-SIDE REMOVE-VERTEX
                                      FORCE-EDGE SPLIT-EDGE NEAR-BASE
                                      NEIGHBORHOOD VERTICES-SORTED-BY-ANGLE
                                      TRIANGULATE-TRIPLES POINT-VS-TRIANGLE
                                      SIMPLEX-SIZE SPLIT SPARSE-DET FIND-PIVOT
                                      FIND-PIVOT-UNORDERED FIND-PIVOT-ORDERED
                                      INVERT-ARRAY WEYL:MAKE-ELEMENT
                                      MAKE-ELEMENT ALL-DIVISORS EXPAND-PLUS
                                      DERIV PRINT-OBJECT
                                      DIRECT-SUM-PRINT-OBJECT PARTITION))
(setf (callers-list 'BAD-KEYWORDS :readers) '(PARTITION))
(setf (callers-list 'KEYWORD :readers) '(PARTITION))
(setf (callers-list 'FINALLY :readers) '(LIST-OF-VARIABLES LOOP-VECTOR-BIND
                                         INITY MAKE-DEGREE-MATRIX EXPT-LIST
                                         INTERPOLATE PARSE-LINEAR-EQUATION
                                         ADD-VARIABLE-DEGREE
                                         POLY-FIND-COMMON-VARS TERMS-REDUCE
                                         ADD-UNDONE CHECK-SAME-DOMAIN BINARY=
                                         MAKE-IDEAL GTERM-CONSTANT? GTERM-EQUAL
                                         GTERM-DOMINATES GTERM-DISJOINT
                                         CONVERT-TERM READ!LNUM BFPRIN1
                                         ORIENTED-SORT EXPT TPS-SPREAD-COEFFS
                                         TRIM-ZEROES BOUNDARY-SET
                                         MAKE-SIMPLICIAL-COMPLEX %INSERT
                                         COFACETS FACETS TAYLOR-EXP MEMBER
                                         NOT-AN-ELEMENT INSERT ASSERT-PROPERTY
                                         COMPARE-PTERM-LISTS
                                         MAKE-MESH-FROM-FILE %MM-BOUNDARY
                                         MAKE-MESH REMOVE-VERTEX FORCE-EDGE
                                         VERTICES-SORTED-BY-ANGLE
                                         TRIANGULATE-TRIPLES POINT-VS-TRIANGLE
                                         DISTANCE SPLIT SPARSE-DET FIND-PIVOT
                                         DETERMINANT* FIND-PIVOT-UNORDERED
                                         FIND-PIVOT-ORDERED FME-MATRIX-TIMES
                                         MATRIX-FME-TIMES TIMES-ARRAY
                                         WEYL:MAKE-ELEMENT MAKE-ELEMENT
                                         ALL-DIVISORS MERGE-NEW-BV DEPENDS-ON?
                                         SET-VARIABLE-PROPERTY
                                         GET-VARIABLE-PROPERTY GE-GREAT
                                         MAKE-GE-VARIABLE EQUAL-VECTOR
                                         MAKE-APP-FUNCTION GE-FOURIER 1? 0?
                                         GET-DIRECT-SUM COERCE PARTITION))
(setf (callers-list 'ROOT :readers) '(MAP-OVER-TREE))
(setf (callers-list 'TREE :readers) '(MAKE-ELEMENT SEARCH-NODE AVL-DELETE
                                      DELETE DELETE-TAIL DELETE-HEAD AVL-INSERT
                                      AVL-PREVIOUS AVL-NEXT SCAN MAP-OVER
                                      AVL-HEIGHT PRINT-OBJECT AVL-SIZE))
(setf (callers-list 'NODE :readers) '(ERASE-NODE DELETE-TAIL DELETE-HEAD
                                      BALANCE-LEFT BALANCE-RIGHT AVL-HEIGHT
                                      UPDATE-NODE PRINT-OBJECT AVL-SIZE))
(setf (callers-list 'STREAM :readers) '(PRINT-FORM BFPRIN1 PRINT-TERM
                                        SHOW-PROPERTIES READ-MESH WRITE-MESH
                                        WRITE-VERTEX-SET FWRITE READ-SIZE-TABLE
                                        READ-REGION-POINTS
                                        READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                        READ-SIMPLICIAL-COMPLEX READ-VERTEX-SET
                                        READ-POINT MAKE-MESH-FROM-FILE
                                        DISPLAY-LIST PRINT-TABLE PRINT-OBJECT))
(setf (callers-list 'BALANCE :readers) '(UPDATE-NODE))
(setf (callers-list 'LEFT :readers) '(TRIANGULATE-TRIPLES UPDATE-NODE))
(setf (callers-list 'RIGHT :readers) '(TRIANGULATE-TRIPLES UPDATE-NODE))
(setf (callers-list 'FUNCTION :readers) '(MAP-OVER-ELEMENTS MAP-OVER))
(setf (callers-list 'HEIGHT-CHANGE :readers) '(BALANCE-LEFT BALANCE-RIGHT))
(setf (callers-list 'ARGS :readers) '(VECTOR-SET-REF WEYL:MAKE-ELEMENT
                                      INITIALIZE-INSTANCE DEFINE-DOMAIN-CREATOR
                                      ANGLE FLAT-TRIANGULATE STAR-TRIANGULATE
                                      SPLIT SET-REF REF WEYLI:SUBSTITUTE
                                      WEYLI:REPLACE WEYLI:MEMBER WEYLI:DELETE
                                      DERIV CHECK-DOMAIN MAKE-GE-FUNCT
                                      MAKE-ELEMENT APPLY AVL-INSERT))
(setf (callers-list 'KEY :readers) '(SET-VARIABLE-PROPERTY
                                     GET-VARIABLE-PROPERTY GET-MEMOIZATION
                                     SET-MEMOIZATION PUTF GETF MAKE-ELEMENT))
(setf (callers-list 'REST :readers) '(WEYL:MAKE-ELEMENT WITH-TPOWER-SERIES
                                                        INTERSECTION UNION
                                                        MAKE-SIMPLEX INSERT
                                                        MAKE-MESH
                                                        WEYLI::INTERSECTION
                                                        WEYLI::UNION
                                                        MAKE-ELEMENT))
(setf (callers-list 'VARS :readers) '(INTERPOLATE DEPENDS-ON?
                                      DECLARE-DEPENDENCIES DERIV FOURIER
                                      RING-VARIABLES))
(setf (callers-list 'WHEN :readers) '(ADD-VARIABLE-DEGREE POLY-SPLIT-ON-VARS
                                      REDUCE-ALL CRITERION1 GTERM-DOMINATES
                                      GTERM-DISJOINT MEMBER NOT-AN-ELEMENT
                                      INSERT ASSOCIATE-PREDICATE SEARCH-LIST
                                      UNIFORMIZE-FACTOR-LIST FIND-SMALLER-PRIME
                                      1? 0? GET-DIRECT-SUM RING-VARIABLES))
(setf (callers-list 'COLLECT :readers) '(WEYL:MAKE-ELEMENT LOOP-VECTOR-BIND
                                                           PROJECT CLIST-FACTOR
                                                           INTERPOLATE-FROM-SKEL
                                                           CHECK-DEGREE
                                                           SPMOD-GCD1
                                                           LIST-COERCE INITY
                                                           SPARSEINTERPSTAGEI
                                                           POLY-SKELETON
                                                           SOLVE-VANDERMONDETD
                                                           SOLVE-VANDERMONDE
                                                           DEGREE-PARTITION
                                                           INTERPOLATE
                                                           ADD-NEW-VARIABLE
                                                           POLY-FIND-COMMON-VARS
                                                           POLY-SPLIT-ON-VARS
                                                           MAKE-POLYNOMIAL-MORPHISM
                                                           REDUCE-ALL
                                                           CRITERION1
                                                           GENERATORS-OF
                                                           CONVERT-LIST TIMES
                                                           MAKE-IDEAL
                                                           GTERMS-MON-TIMES
                                                           GTERMS-MINUS
                                                           TRANSFORM-TERM
                                                           MAKE-COMPARISON-FUN
                                                           GET-COMPARISON-FUN
                                                           MAKE-GFP-DOMAIN
                                                           FREE-GROUP-SCALAR-TIMES
                                                           FACETS MAKE-POINT
                                                           REVERSION
                                                           INITIALIZE-INSTANCE
                                                           MAP-WITH-DOMAIN MAP
                                                           LIST-OF-ELEMENTS
                                                           SUBSTITUTE
                                                           INTERN-IN-PACKAGE
                                                           DEFINE-MATH-PROPERTY
                                                           MAKE-PREDICATE
                                                           DEFINE-MATH-OPERATOR
                                                           NEXT-DOMAINS FWRITE
                                                           READ-SIZE-TABLE
                                                           READ-REGION-POINTS
                                                           READ-SIMPLICIAL-COMPLEX
                                                           READ-POINT
                                                           %MM-BOUNDARY
                                                           MAKE-MESH
                                                           REMOVE-VERTEX
                                                           ADJ-VERTICES
                                                           NEIGHBORHOOD
                                                           VERTICES-SORTED-BY-ANGLE
                                                           ANGLES
                                                           POINT-VS-TRIANGLE
                                                           SPLIT
                                                           COORDINATE-LIST
                                                           FIND-PIVOT
                                                           SPARSE-DET
                                                           DETERMINANT*
                                                           DEGREE-BOUNDS
                                                           FME-MATRIX-TIMES
                                                           MATRIX-FME-TIMES
                                                           ASSOCIATE-PREDICATE
                                                           ALL-DIVISORS
                                                           UNIFORMIZE-FACTOR-LIST
                                                           EXPAND
                                                           EXPAND-PRODUCT
                                                           EXPAND-OTHER
                                                           EXPAND-PLUS
                                                           LOOP-OVER-TERMS
                                                           CHECK-DOMAIN DERIV
                                                           GE-FOURIER
                                                           PRINT-OBJECT
                                                           DOMAIN-LIST
                                                           DEFINE-DIRECT-SUM
                                                           DIRECT-SUM-PRINT-OBJECT
                                                           RING-VARIABLES))
(setf (callers-list 'P :readers) '(CLIST-SQFR-DECOMPOSE CLIST-FACTOR
                                   SPARSEINTERPSTAGEI PSKELETON
                                   MAKE-DEGREE-MATRIX PARSE-LINEAR-EQUATION
                                   VARIABLE-INDEX COEFFICIENT DEGREE POLY-MGCD
                                   POLY-FIND-COMMON-VARS POLY-SPLIT-ON-VARS
                                   TRANSFORM PRINT-TERM CRITERION1 MAKE-IDEAL
                                   TRANSFORM-TERM BINARY= MULTIPLICATIVE-ORDER
                                   PRINT-OBJECT PARTIAL-DERIV SUBSTITUTE
                                   SIMPLEX-SIZE SUBDETERMINANT* DETERMINANT*
                                   PRIME? COERCE))
(setf (callers-list '= :readers) '(LOOP-VECTOR-BIND PROJECT
                                   CLIST-SQFR-DECOMPOSE CHECK-DEGREE
                                   NON-ZERO-RANDOM SPMOD-GCD2 SPMOD-GCD
                                   MAKE-DEGREE-MATRIX EXPT-LIST INTERPOLATE
                                   PARSE-LINEAR-EQUATION POLY-FIND-COMMON-VARS
                                   POLY-SPLIT-ON-VARS TERMS-TIMES
                                   MAKE-POLYNOMIAL-MORPHISM BINARY= MAKE-IDEAL
                                   GTERMS-TIMES TRANSFORM-TERM CONVERT-TERM
                                   MAKE-GFP-DOMAIN READ!LNUM
                                   CONVERT-NUMBER->CHARACTERS ORIENTED-SORT
                                   EXPT GROUPED? TRIM-ZEROES BOUNDARY-SET
                                   FREE-GROUP-SCALAR-TIMES APPLY
                                   MAKE-SIMPLICIAL-COMPLEX FACETS MAKE-SIMPLEX
                                   MAP-WITH-DOMAIN MAP INTERN-IN-PACKAGE
                                   DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                   READ-SIZE-TABLE READ-REGION-POINTS
                                   READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                   READ-SIMPLICIAL-COMPLEX READ-VERTEX-SET
                                   MAKE-MESH-FROM-FILE %MM-BOUNDARY MAKE-MESH
                                   REFINE-MESH BUILD-CDT-FROM-BOUNDARIES GRADE
                                   %DELETE-TOO-CLOSE INSERT
                                   %SPLIT-CONSTRAINT-ONE-SIDE REMOVE-VERTEX
                                   FORCE-EDGE SPLIT-EDGE ADJ-VERTICES
                                   DIRECTED-LOCATE NEAR-BASE NEIGHBORHOOD
                                   VERTICES-SORTED-BY-ANGLE TRIANGULATE-TRIPLES
                                   POINT-VS-TRIANGLE SIMPLEX-SIZE SPLIT
                                   SPARSE-DET FIND-PIVOT-UNORDERED
                                   FIND-PIVOT-ORDERED INVERT-ARRAY
                                   FME-MATRIX-TIMES MATRIX-FME-TIMES
                                   TIMES-ARRAY WEYL:MAKE-ELEMENT MAKE-ELEMENT
                                   FERMAT-INTEGER-FACTOR ALL-DIVISORS POWER-OF?
                                   FIND-SMALLER-PRIME INTEGER-NTH-ROOT
                                   EXPAND-BINOMIAL-FORM EXPAND-PLUS DERIV
                                   POLYNOMIAL-INTERPOLATE SMOOTH2 EQUAL-VECTOR
                                   MAKE-APP-FUNCTION PRINT-OBJECT
                                   DIRECT-SUM-PRINT-OBJECT COERCE))
(setf (callers-list 'THEN :readers) '(CLIST-SQFR-DECOMPOSE SPMOD-GCD
                                      CONVERT-TERM MAKE-GFP-DOMAIN SPARSE-DET
                                      FME-MATRIX-TIMES MATRIX-FME-TIMES
                                      TIMES-ARRAY FERMAT-INTEGER-FACTOR
                                      POWER-OF? FIND-SMALLER-PRIME COERCE))
(setf (callers-list 'DERIVATION :readers) '(SET-VARIABLE-DERIVATION))
(setf (callers-list '*GENERAL* :readers) '(INTERPOLATE EQN>= EQN> EQN= DERIV
                                           CHECK-DOMAIN ADD-SUBSCRIPTS SIMPLIFY
                                           FOURIER RESET-DOMAINS
                                           SET-VARIABLE-DERIVATION))
(setf (callers-list 'C :readers) '(MAKE-UPOLYNOMIAL WEYL:MAKE-UPOLYNOMIAL
                                   SPMOD-GCD2 POLY-SKELETON SOLVE-VANDERMONDETD
                                   SOLVE-VANDERMONDET SOLVE-VANDERMONDE
                                   INTERPOLATE TERMS-LIST-OF-VARS
                                   TERMS-DEGREE-VECTOR TERMS-MAX-COEFFICIENT
                                   TERMS-DERIVATIVE POLY-DERIVATIVE
                                   TERMS-HORNERS-RULE TERMS-SUBST TERMS-COERCE
                                   TERMS-MONICIZE POLY-HEIGHT
                                   TERMS-COEF-REMAINDER TERMS-MINUS PRINT-FORM
                                   TRANSFORM ACCUMULATE-TERMS
                                   MAP-OVER-EACH-TERM PRINT-OBJECT
                                   SCAN-POLY-FORM COBOUNDARY BOUNDARY-SET
                                   BOUNDARY APPLY PRINT-TERM COBOUNDARY-DOMAIN
                                   BOUNDARY-DOMAIN GET-COCHAIN-MODULE
                                   GET-CHAIN-MODULE RATIONAL-TERMS-HORNERS-RULE
                                   MAKE-MULTIPOLE-EXPANSION NEAR-BASE
                                   VERTICES-SORTED-BY-ANGLE FME-MATRIX-TIMES
                                   MATRIX-FME-TIMES TIMES-ARRAY SEARCH-LIST
                                   LOOP-OVER-TERMS POLY-DIFFERENTIATE-COEFS
                                   POLY-DERIVATION))
(setf (callers-list 'E :readers) '(IMAGPART REALPART CONJUGATE SUBSTITUTE DERIV
                                            DERIVATION
                                            MULTIPLY-VECTOR-BY-SCALAR MINUS
                                            MAKE-UPOLYNOMIAL EVAL-MONOMIAL
                                            CHECK-DEGREE SPMOD-GCD2
                                            POLY-SKELETON SOLVE-VANDERMONDETD
                                            SOLVE-VANDERMONDET
                                            SOLVE-VANDERMONDE
                                            MAKE-DEGREE-MATRIX EXPT-LIST
                                            TERMS-DERIVATIVE POLY-DERIVATIVE
                                            TERMS-HORNERS-RULE TERMS-SUBST
                                            TERMS-COERCE TERMS-MONICIZE
                                            TERMS-COEF-REMAINDER TERMS-MINUS
                                            PRINT-FORM TRANSFORM
                                            ACCUMULATE-TERMS MAP-OVER-EACH-TERM
                                            MAKE-IDEAL TRANSFORM-TERM
                                            SCAN-POLY-FORM EXPT
                                            RATIONAL-TERMS-HORNERS-RULE
                                            DIFFERENT-KERNELS
                                            POLY-DIFFERENTIATE-COEFS
                                            POLY-DERIVATION))
(setf (callers-list 'POLY :readers) '(SQUARE-FREE CFACTOR FACTOR COERCE
                                      MAKE-UPOLYNOMIAL
                                      DENSE-INTERPOLATE-COEFFICIENTS
                                      INTERPOLATE PARSE-LINEAR-EQUATION
                                      VARIABLE-SYMBOL CONVERT-LIST CONVERT-TERM
                                      PRINT-OBJECT MAKE-EPOLYNOMIAL DERIV
                                      JACOBIAN DERIVATION))
(setf (callers-list 'RAT :readers) '(DERIVATION))
(setf (callers-list 'D :readers) '(SPARSEINTERPSTAGEI SPARSEINTERPSTAGE
                                   TRANSFORM TRANSFORM-TERM DIMENSIONS
                                   COBOUNDARY BOUNDARY ZERO COERCE NEXT-DOMAINS
                                   FIND-PIVOT REQUIRED-OPERATIONS
                                   CANONICALIZE-CLASS DESCRIBE-OPERATIONS
                                   OPERATION-VALUES OPERATION-ARGUMENTS
                                   LIST-OPERATIONS INITIALIZE-INSTANCE
                                   PARSE-OPERATION-LIST PRINT-OBJECT DERIVATION))
(setf (callers-list 'PRINT-FUNCTION :readers) '(INITIALIZE-INSTANCE))
(setf (callers-list 'NAME :readers) '(FWRITE READ-SIZE-TABLE READ-REGION-POINTS
                                      MAKE-MESH-FROM-FILE DEFUN-BOUNDARY
                                      MAKE-MESH NAME-REGION INSERT-BOUNDARY
                                      BUILD-CDT-FROM-BOUNDARIES PLACE INSERT
                                      %SET-NAME MAKE-FUNCTION GET-FUNCTION
                                      DEFINE-DIRECT-SUM))
(setf (callers-list 'DOM :readers) '(GET-DIRECT-SUM))
(setf (callers-list 'X :readers) '(LIST-COERCE INTERPOLATE DEGREE RESULTANT
                                   SCALAR? SAME-GREATER-FUNCTIONS EXP ATANH
                                   ACOSH ASINH TANH COSH SINH ACOS ASIN TAN COS
                                   SIN QUOTIENT DIFFERENCE PLUS MIN-PAIR
                                   MAX-PAIR BINARY>= BINARY> BINARY= CONTAGION
                                   WITH-CONTAGION SQRT INTEGER? MINUS?
                                   CONVERT-TO-LISP-NUMBER PHASE ABS CONJUGATE
                                   DEF-REALIMAG-PART IMAGPART REALPART
                                   WEYL:MAKE-ELEMENT HEIGHT PLUS? LOG
                                   CONVERT-TO-BIGFLOAT TIMES TAYLOR1
                                   PARTIAL-DERIV LIST-OF-VARIABLES COERCE
                                   ASSOCIATE-PREDICATE FERMAT-INTEGER-FACTOR
                                   EXPAND-PLUS PRINT-OBJECT SIMPLIFY
                                   MAKE-ELEMENT MAKE-QUOTIENT-ELEMENT
                                   MAKE-SAMPLED-FUNCTION NORM EXPT RECIP MINUS
                                   GE-FOURIER GE-GREAT GE-EQUAL 1? 0?))
(setf (callers-list 'A :readers) '(EXTENDED-GCD ODDP? EVEN? ROUND2 ROUND1
                                   CEILING2 CEILING1 FLOOR2 FLOOR1 TRUNCATE2
                                   TRUNCATE1 TIMES DIFFERENCE PLUS
                                   MULTIPLICATIVE-ORDER BINARY-LCM BINARY-GCD
                                   REMAINDER DENOMINATOR NUMERATOR
                                   MAKE-QUOTIENT-ELEMENT QUOTIENT EXPT COERCE
                                   SET-BRANCH-ORDER MODIFY-BRANCH-ORDER
                                   CELL-ORDER FACETS COMPARE-PTERM-LISTS
                                   NEAR-BASE VERTICES-SORTED-BY-ANGLE DISTANCE
                                   ANGLE MAKE-APP-FUNCTION MINUS RECIP))
(setf (callers-list 'OBJ :readers) '(INITIALIZE-INSTANCE PRINT-OBJECT PUTF GETF))
(setf (callers-list 'DEFAULT :readers) '(GETF))
(setf (callers-list 'VALUE :readers) '(SET-VARIABLE-NUMBER-PROPERTY
                                       MAKE-POLYNOMIAL-MORPHISM
                                       MULTIPLICATIVE-ORDER EXPT RECIP MINUS 1?
                                       0? COERCE PRINT-OBJECT %SET-COERCE
                                       MAKE-POINT INITIALIZE-INSTANCE
                                       SUBSTITUTE WEYL:MAKE-ELEMENT
                                       MAKE-ELEMENT SET-VARIABLE-PROPERTY
                                       SET-MEMOIZATION PUTF))
(setf (callers-list 'OPERATIONS :readers) '(DEFINE-OPERATIONS))
(setf (callers-list 'VALUES :readers) '(MAKE-POINT SUBSTITUTE WEYL:MAKE-ELEMENT
                                        MAKE-ELEMENT PARSE-OPERATION-LIST))
(setf (callers-list 'OPERATION-LIST :readers) '(PARSE-OPERATION-LIST))
(setf (callers-list 'OPERATION :readers) '(OPERATION-VALUES OPERATION-ARGUMENTS
                                           PARSE-OPERATION-LIST))
(setf (callers-list 'OPERATION-TABLE :readers) '(CANONICALIZE-CLASS
                                                 OPERATION-VALUES
                                                 OPERATION-ARGUMENTS
                                                 LIST-OPERATIONS
                                                 PARSE-OPERATION-LIST))
(setf (callers-list 'ARGUMENTS :readers) '(PARSE-OPERATION-LIST))
(setf (callers-list 'TYPE :readers) '(DEF-REALIMAG-PART MAKE-MESH RECUR))
(setf (callers-list '*DOMAINS* :readers) '(GET-MORPHISMS-TO ADD-DOMAIN-INTERNAL))
(setf (callers-list 'PLIST :readers) '(MAKE-TPOWER-SERIES INITIALIZE-INSTANCE
                                       WITH-NEW-WEYL-CONTEXT))
(setf (callers-list 'ELEMENT-CLASSES :readers) '(DEFINE-DOMAIN-ELEMENT-CLASSES))
(setf (callers-list 'X-SPEC :readers) '(DEFMETHOD-SD))
(setf (callers-list 'Y-SPEC :readers) '(DEFMETHOD-SD))
(setf (callers-list 'ARGUMENT :readers) '(APPLY-MORPHISM MAKE-GE-IFOURIER
                                          MAKE-GE-FOURIER))
(setf (callers-list 'SVAR :readers) '(MAKE-GE-IFOURIER GE-FOURIER
                                      MAKE-GE-FOURIER))
(setf (callers-list 'FVAR :readers) '(MAKE-GE-IFOURIER GE-FOURIER
                                      MAKE-GE-FOURIER))
(setf (callers-list 'EXPR :readers) '(SUBSTITUTE MERGE-NEW-BV MAKE-UNION
                                                 PRINT-OBJECT))
(setf (callers-list 'Y :readers) '(RESULTANT SAME-GREATER-FUNCTIONS QUOTIENT
                                   DIFFERENCE PLUS MIN-PAIR MAX-PAIR BINARY>=
                                   BINARY> BINARY= CONTAGION WITH-CONTAGION
                                   PRINT-OBJECT TIMES ASSOCIATE-PREDICATE
                                   FERMAT-INTEGER-FACTOR MAKE-QUOTIENT-ELEMENT
                                   MAKE-SAMPLED-FUNCTION EXPT GE-GREAT GE-EQUAL))
(setf (callers-list 'EXP :readers) '(CHECK-SAME-DOMAIN PRINT-OBJECT COERCE
                                     PRINT-TERM QUOTIENT TIMES DIFFERENCE PLUS
                                     TAYLOR1 SUBSTITUTE EXPT EXPAND
                                     DIFFERENT-KERNELS GE-DERIV DEPENDS-ON?
                                     LOOP-OVER-TERMS COERCE-OBJ MAKE-GE-EXPT
                                     DERIV FOURIER GE-FOURIER))
(setf (callers-list 'TERM :readers) '(INTERPOLATE-FROM-SKEL GTERMS-PRIM*
                                      GTERMS-MINUS PRINT-OBJECT READ!LNUM
                                      BOUNDARY %MAP-OVER-PROPERTIES EXPAND
                                      EXPAND-BINOMIAL-FORM DIFFERENT-KERNELS
                                      LOOP-OVER-TERMS GE-FOURIER))
(setf (callers-list 'FV :readers) '(FOURIER))
(setf (callers-list 'SV :readers) '(FOURIER))
(setf (callers-list 'NEW-VAR :readers) '(MAKE-APP-FUNCTION))
(setf (callers-list 'ARG :readers) '(DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                     DEFINE-DOMAIN-CREATOR DEPENDS-ON?
                                     CHECK-DOMAIN DEF-GE-1OPER APPLY))
(setf (callers-list 'X-ARG :readers) '(CANONICALIZE-FUNCTIONS))
(setf (callers-list 'Y-ARG :readers) '(CANONICALIZE-FUNCTIONS))
(setf (callers-list '*CACHED-VECTORS* :readers) '(EQUAL-VECTOR))
(setf (callers-list '*MAXIMUM-NUMBER-OF-CACHED-VECTORS* :readers) '(EQUAL-VECTOR))
(setf (callers-list 'FUNC :readers) '(INTEGRAL DERIV IMAGPART REALPART
                                      CONJUGATE QUOTIENT TIMES MINUS MAP
                                      EVALUATE-AT SMOOTH2 RESAMPLE PRINT-TABLE))
(setf (callers-list 'X-LIST :readers) '(MAKE-SAMPLED-FUNCTION-1))
(setf (callers-list 'NEW-X :readers) '(SMOOTH2))
(setf (callers-list 'XVAL :readers) '(SMOOTH2))
(setf (callers-list 'PT :readers) '(INITY SPARSEINTERPSTAGEI
                                    SOLVE-VANDERMONDETD SOLVE-VANDERMONDET
                                    SOLVE-VANDERMONDE COMPUTE-VANDERMONDE-Q
                                    MAKE-DEGREE-MATRIX INTERPOLATE EVALUATE-AT))
(setf (callers-list 'DIFT :readers) '(POLYNOMIAL-INTERPOLATE))
(setf (callers-list 'M :readers) '(TERMS-PSEUDO-REMAINDER LOCALIZE
                                   SHIFT-MULTIPOLE NEXT-DOMAINS PROCESSI SMITH*
                                   SMITH HERMITE* HERMITE SUBDETERMINANT*
                                   SUBDETERMINANT SPARSE-DET SPARSE-DETERMINANT
                                   HADAMARD-BOUND COERCE DEGREE-BOUNDS
                                   DETERMINANT* DETERMINANT SUBSTITUTE RECIP
                                   TRANSPOSE TIMES DIMENSIONS MATRIX-DIMENSIONS
                                   POWER-OF? POLYNOMIAL-INTERPOLATE))
(setf (callers-list 'NUM :readers) '(WEYL:MAKE-ELEMENT MAKE-ELEMENT TRUNCATE2
                                                       TRUNCATE1
                                                       WITH-NUMERATOR-AND-DENOMINATOR
                                                       SUBSTITUTE RECIP
                                                       QUOTIENT-REDUCE
                                                       CANONICALIZE-NUMBER
                                                       COERCE QUOTIENT TIMES))
(setf (callers-list 'LOWER :readers) '(INTEGRAL))
(setf (callers-list 'UPPER :readers) '(INTEGRAL))
(setf (callers-list 'I2 :readers) '(INTEGRAL))
(setf (callers-list 'MEMOS :readers) '(GET-MEMOIZATION SET-MEMOIZATION))
(setf (callers-list 'SUBSCRIPTS :readers) '(ADD-SUBSCRIPTS))
(setf (callers-list 'W :readers) '(FERMAT-INTEGER-FACTOR GE-GREAT))
(setf (callers-list 'UNLESS :readers) '(PROJECT COERCE ADD-NEW-VARIABLE
                                        PARSE-LINEAR-EQUATION CRITERION1
                                        READ!LNUM DERIV FREE-GROUP-SCALAR-TIMES
                                        SUBSTITUTE GE-GREAT))
(setf (callers-list 'F :readers) '(DERIVATION BOUNDARY COMPOSE
                                   ADD-FUNCTION-TO-DOMAIN SEARCH-FOR-FUNCTION))
(setf (callers-list 'NARGS :readers) '(DEFINE-MATH-OPERATOR DERIV MAKE-FUNCTION
                                       GET-FUNCTION))
(setf (callers-list '*GLOBAL-FUNCTIONS* :readers) '(MAKE-FUNCTION GET-FUNCTION))
(setf (callers-list 'DERIVS :readers) '(MAKE-FUNCTION-DERIV))
(setf (callers-list 'FUNCT :readers) '(MAKE-GE-FUNCT))
(setf (callers-list 'OBJECTS :readers) '(DISPLAY-LIST))
(setf (callers-list '*PRINT-LENGTH* :readers) '(DISPLAY-LIST))
(setf (callers-list '#\( :readers) '(PRINT-GROUPED PRINT-OBJECT))
(setf (callers-list '#\) :readers) '(PRINT-GROUPED PRINT-OBJECT))
(setf (callers-list '*INITIALIZE-CONTEXTS-FUNS* :readers) '(INITIALIZE-CONTEXTS))
(setf (callers-list 'TERMS :readers) '(DENSE-INTERPOLATE-COEFFICIENTS MAKE-POLY
                                       MAKE-EPOLYNOMIAL* MAKE-TPOWER-SERIES
                                       DELETE-DOMAIN MAP-OVER-PROPERTIES
                                       SIMP-TIMES-TERMS SIMP-PLUS-TERMS
                                       MAKE-GE-TIMES MAKE-GE-PLUS))
(setf (callers-list 'TERM-L :readers) '(LOOP-OVER-TERMS))
(setf (callers-list 'SUM :readers) '(CONVERT-TERM DISTANCE PRINT-OBJECT))
(setf (callers-list 'VAR-PROP :readers) '(SET-VARIABLE-PROPERTY
                                          GET-VARIABLE-PROPERTY))
(setf (callers-list 'RHS :readers) '(MAKE-GE-EQN>= MAKE-GE-EQN> MAKE-GE-EQN=))
(setf (callers-list 'LHS :readers) '(MAKE-GE-EQN>= MAKE-GE-EQN> MAKE-GE-EQN=))
(setf (callers-list 'EQN :readers) '(SPARSEINTERPSTAGEI SIMPLIFY PRINT-OBJECT))
(setf (callers-list 'EQ1 :readers) '(RECIP MINUS))
(setf (callers-list 'SET :readers) '(RANDOM MAKE-GENERATOR MAP-OVER-ELEMENTS
                                            MEMBER NOT-AN-ELEMENT INSERT
                                            INITIALIZE-INSTANCE MAKE-ELEMENT
                                            SIMPLIFY MAKE-UNION))
(setf (callers-list 'REST-EXPRS :readers) '(MAKE-UNION))
(setf (callers-list 'KERNELS :readers) '(DIFFERENT-KERNELS))
(setf (callers-list '*FEM-KLUDGE* :readers) '(SUBSTITUTE))
(setf (callers-list 'EXPANDED-TERMS :readers) '(EXPAND-PLUS))
(setf (callers-list 'APPEND :readers) '(LOOP-VECTOR-BIND CLIST-FACTOR
                                        DEGREE-PARTITION TIMES
                                        MAKE-COMPARISON-FUN WITH-TPOWER-SERIES
                                        COFACETS FACETS EXTERNAL-NAME SPLIT
                                        EXPAND-PLUS))
(setf (callers-list 'ET :readers) '(EXPAND-OTHER EXPAND-PLUS))
(setf (callers-list 'LIST :readers) '(LIST-OF-VARIABLES BOUNDING-BOX
                                      WEYLI:REPLACE WEYLI:MEMBER EXPAND-PRODUCT))
(setf (callers-list 'COEF :readers) '(POLY-SPLIT-ON-VARS PRINT-TERM
                                      MAKE-TPOWER-SERIES COBOUNDARY DERIV
                                      BOUNDARY-SET FREE-GROUP-SCALAR-TIMES
                                      APPLY EXPAND-BINOMIAL-FORM))
(setf (callers-list 'K :readers) '(INTERPOLATE INITY SPARSEINTERPSTAGEI
                                   SPARSEINTERPSTAGE READ!LNUM EXPT REVERSION
                                   FIND-PIVOT FME-MATRIX-TIMES MATRIX-FME-TIMES
                                   TIMES-ARRAY POCHHAMMER))
(setf (callers-list 'ROOT^N-1 :readers) '(INTEGER-NTH-ROOT))
(setf (callers-list 'PP :readers) '(CLIST-FACTOR TERMS-CONTENT
                                    FIND-SMALLER-PRIME))
(setf (callers-list 'UNTIL :readers) '(PRINT-TERM SUBSTITUTE
                                       READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                       READ-SIMPLICIAL-COMPLEX
                                       MAKE-MESH-FROM-FILE FORCE-EDGE
                                       FIND-SMALLER-PRIME))
(setf (callers-list '*POINTBOUND* :readers) '(NEWPRIME))
(setf (callers-list '*BIG-PRIMES* :readers) '(NEWPRIME))
(setf (callers-list 'MOST-POSITIVE-FIXNUM :readers) '(CHOICE-PRIMES))
(setf (callers-list 'TEST :readers) '(POWER-OF?))
(setf (callers-list 'PAIRS :readers) '(MAKE-POLYNOMIAL-MORPHISM
                                       VERTICES-SORTED-BY-ANGLE
                                       UNIFORMIZE-FACTOR-LIST))
(setf (callers-list 'ELSE :readers) '(REDUCE-ALL CRITERION1
                                      READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                      READ-SIMPLICIAL-COMPLEX
                                      UNIFORMIZE-FACTOR-LIST))
(setf (callers-list 'DIVISORS :readers) '(ALL-DIVISORS))
(setf (callers-list 'FROM :readers) '(INTERPOLATE TPS-SPREAD-COEFFS PRINT-TERM
                                      GROUPED? REVERSION SUBSTITUTE TAYLOR-EXP
                                      HERMITE-ARRAY EXCHANGE-ROWS ALL-DIVISORS))
(setf (callers-list 'TO :readers) '(INTERPOLATE TPS-SPREAD-COEFFS GROUPED?
                                    TAYLOR-EXP ALL-DIVISORS))
(setf (callers-list 'TIMES :readers) '(ALL-DIVISORS))
(setf (callers-list 'APPENDING :readers) '(ALL-DIVISORS))
(setf (callers-list 'DIVISOR :readers) '(ALL-DIVISORS))
(setf (callers-list 'PRIME :readers) '(ALL-DIVISORS))
(setf (callers-list 'INTO :readers) '(COFACETS FACETS %MM-BOUNDARY MAKE-MESH
                                      REMOVE-VERTEX VERTICES-SORTED-BY-ANGLE
                                      POINT-VS-TRIANGLE DISTANCE DETERMINANT*
                                      ALL-DIVISORS))
(setf (callers-list 'TEMP :readers) '(MAKE-DEGREE-MATRIX ALL-DIVISORS))
(setf (callers-list '*SKIP-CHAIN-FOR-3-AND-5* :readers) '(SIMPLE-INTEGER-FACTOR))
(setf (callers-list 'NUMBER2 :readers) '(ATAN))
(setf (callers-list 'NUMBER1 :readers) '(ATAN))
(setf (callers-list 'RETURN :readers) '(ADD-VARIABLE-DEGREE GRADE NEAR-BASE
                                        SEARCH-LIST))
(setf (callers-list 'SEQUENCE :readers) '(WEYLI::REDUCE WEYLI:DELETE))
(setf (callers-list 'ITEM :readers) '(INITIALIZE-INSTANCE WEYLI:REPLACE))
(setf (callers-list 'ARG1 :readers) '(WEYLI::INTERSECTION WEYLI::UNION))
(setf (callers-list 'ARG2 :readers) '(WEYLI::INTERSECTION WEYLI::UNION))
(setf (callers-list 'J :readers) '(INITY SPARSEINTERPSTAGEI MAKE-DEGREE-MATRIX
                                   INTERPOLATE EXPT TPS-SPREAD-COEFFS REVERSION
                                   SMITH* HERMITE* SUBDETERMINANT* FIND-PIVOT
                                   HADAMARD-BOUND COERCE DEGREE-BOUNDS JACOBIAN
                                   SUBSTITUTE INVERT-ARRAY RECIP TRANSPOSE
                                   TIMES-ARRAY DIFFERENCE PLUS REF PRINT-OBJECT
                                   WEYL:MAKE-ELEMENT))
(setf (callers-list 'ROW :readers) '(HERMITE* SUBDETERMINANT* FIND-PIVOT
                                     FIND-PIVOT-UNORDERED FIND-PIVOT-ORDERED
                                     WEYL:MAKE-ELEMENT MAKE-ELEMENT))
(setf (callers-list 'VAL :readers) '(EVAL-MONOMIAL SOLVE-VANDERMONDE SUBSTITUTE
                                     SHOW-PROPERTIES WEYL:MAKE-ELEMENT))
(setf (callers-list 'DIMENSION1 :readers) '(DIMENSIONS MATRIX-DIMENSIONS))
(setf (callers-list 'DIMENSION2 :readers) '(DIMENSIONS MATRIX-DIMENSIONS))
(setf (callers-list 'DIM1 :readers) '(SMITH HERMITE SUBDETERMINANT* SPARSE-DET
                                      SPARSE-DETERMINANT HADAMARD-BOUND COERCE
                                      DEGREE-BOUNDS DETERMINANT SUBSTITUTE
                                      RECIP TRANSPOSE FME-MATRIX-TIMES
                                      MATRIX-FME-TIMES PRINT-OBJECT
                                      WITH-MATRIX-DIMENSIONS))
(setf (callers-list 'DIM2 :readers) '(SMITH HERMITE* HERMITE SUBDETERMINANT*
                                      SPARSE-DETERMINANT DETERMINANT*
                                      HADAMARD-BOUND COERCE DEGREE-BOUNDS
                                      DETERMINANT SUBSTITUTE RECIP TRANSPOSE
                                      FME-MATRIX-TIMES MATRIX-FME-TIMES
                                      PRINT-OBJECT WITH-MATRIX-DIMENSIONS))
(setf (callers-list 'MATRIX :readers) '(SET-REF REF PRINT-OBJECT
                                        WITH-MATRIX-DIMENSIONS))
(setf (callers-list 'ARRAY :readers) '(HERMITE* SUBDETERMINANT* SPARSE-DET
                                       SPARSE-DETERMINANT HADAMARD-BOUND COERCE
                                       DEGREE-BOUNDS SUBSTITUTE RECIP TRANSPOSE
                                       FME-MATRIX-TIMES MATRIX-FME-TIMES REF
                                       PRINT-OBJECT WITH-MATRIX-DIMENSIONS))
(setf (callers-list 'COLS :readers) '(REF))
(setf (callers-list 'ROWS :readers) '(REF))
(setf (callers-list 'NEW-VALUE :readers) '(VECTOR-SET-REF SET-REF))
(setf (callers-list 'RANK :readers) '(ONE-MATRIX ZERO-MATRIX))
(setf (callers-list 'M1 :readers) '(BINARY-GCD TIMES DIFFERENCE PLUS))
(setf (callers-list 'M2 :readers) '(DIFFERENCE PLUS))
(setf (callers-list '1DIM2 :readers) '(DIFFERENCE PLUS))
(setf (callers-list '1ARRAY :readers) '(DIFFERENCE PLUS))
(setf (callers-list '2DIM2 :readers) '(DIFFERENCE PLUS))
(setf (callers-list '2ARRAY :readers) '(DIFFERENCE PLUS))
(setf (callers-list '1DIM1 :readers) '(DIFFERENCE PLUS))
(setf (callers-list '2DIM1 :readers) '(DIFFERENCE PLUS))
(setf (callers-list 'ZERO :readers) '(DENSE-INTERPOLATE-COEFFICIENTS
                                      SOLVE-VANDERMONDETD SOLVE-VANDERMONDET
                                      SOLVE-VANDERMONDE ZERO INVERT-ARRAY))
(setf (callers-list 'AND :readers) '(CLIST-SQFR-DECOMPOSE WEYL:MAKE-UPOLYNOMIAL
                                     PARSE-LINEAR-EQUATION READ!LNUM
                                     CONVERT-NUMBER->CHARACTERS EXPT FACETS
                                     READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                     READ-SIMPLICIAL-COMPLEX
                                     MAKE-MESH-FROM-FILE FORCE-EDGE
                                     TRIANGULATE-TRIPLES SPARSE-DET FIND-PIVOT
                                     FIND-PIVOT-UNORDERED FIND-PIVOT-ORDERED
                                     INVERT-ARRAY))
(setf (callers-list 'ONE :readers) '(DENSE-INTERPOLATE-COEFFICIENTS ONE
                                     INVERT-ARRAY))
(setf (callers-list 'ELT :readers) '(ADD-UNDONE REDUCE-ALL PRINT-OBJECT
                                     MAP-OVER-ELEMENTS MEMBER INSERT COERCE
                                     APPLY-MORPHISM FIND-PIVOT-UNORDERED
                                     FIND-PIVOT-ORDERED))
(setf (callers-list 'MAX :readers) '(FIND-PIVOT-UNORDERED FIND-PIVOT-ORDERED))
(setf (callers-list 'DOWNFROM :readers) '(ZIPPER-SUM WEYL:MAKE-UPOLYNOMIAL
                                          DENSE-INTERPOLATE-COEFFICIENTS
                                          PROCESSI HERMITE-ARRAY SUBTRACT-ROWS))
(setf (callers-list 'ABOVE :readers) '(PROCESSI SUBTRACT-ROWS))
(setf (callers-list 'FUNCTION-LIST :readers) '(JACOBIAN))
(setf (callers-list 'VAR-LIST :readers) '(JACOBIAN))
(setf (callers-list '*WORK-MATRIX* :readers) '(EVALUATE-MATRIX))
(setf (callers-list 'VALS :readers) '(CHECK-DEGREE INTERPOLATE EVALUATE-MATRIX))
(setf (callers-list 'REMAINDERS :readers) '(USE-CHINESE-REMAINDER DETERMINANT*))
(setf (callers-list 'OLD-ARRAY :readers) '(FIND-PIVOT DETERMINANT*))
(setf (callers-list 'L :readers) '(LIST-COERCE INITY WHAT-IS-THE-LTHTERM2
                                   SHIFT-LOCAL-FIELD HERMITE-ARRAY FIND-PIVOT
                                   EXCHANGE-ROWS))
(setf (callers-list 'DIMENSION :readers) '(MAP-OVER-CELLS %MAP-OVER-CELLS
                                           MAKE-PARAMETER-SPACE FIND-PIVOT
                                           EXCHANGE-ROWS))
(setf (callers-list '*WORK-ARRAY* :readers) '(SUBDETERMINANT* FIND-PIVOT
                                              EXCHANGE-ROWS))
(setf (callers-list 'OF-TYPE :readers) '(SUBDETERMINANT* FIND-PIVOT))
(setf (callers-list 'PIVOT :readers) '(FIND-PIVOT))
(setf (callers-list 'CK :readers) '(FIND-PIVOT))
(setf (callers-list 'COL :readers) '(SUBDETERMINANT* FIND-PIVOT SPARSE-DET))
(setf (callers-list 'POSITIVE-SIGN? :readers) '(SPARSE-DET))
(setf (callers-list 'MINOR :readers) '(SPARSE-DET))
(setf (callers-list 'DET :readers) '(SPARSE-DET))
(setf (callers-list 'IF :readers) '(MAKE-SIMPLEX
                                    READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                    READ-SIMPLICIAL-COMPLEX GRADE
                                    %DELETE-TOO-CLOSE INSERT NEAR-BASE
                                    NEIGHBORHOOD FIND-PIVOT))
(setf (callers-list 'AS :readers) '(INITY SPARSEINTERPSTAGEI HERMITE*
                                    SUBDETERMINANT*))
(setf (callers-list 'DOWNTO :readers) '(HERMITE-ARRAY))
(setf (callers-list 'MESH :readers) '(WRITE-MESH FWRITE REFINE-MESH NAME-REGION
                                      INSERT-BOUNDARY BOUNDARY-COMPLEX-OF
                                      REFINE-MESH-PREP
                                      BUILD-CDT-FROM-BOUNDARIES
                                      DO-BACKGROUND-BOX IMPROVE GRADE
                                      TRIANGLE-CENTER PLACE SPLIT
                                      %SPLIT-CONSTRAINT-ONE-SIDE REMOVE-VERTEX
                                      %DELETE-TOO-CLOSE DIMENSION-OF INSERT
                                      %SET-NAME NAME INITIALIZE-INSTANCE))
(setf (callers-list 'CONSTRAINTS :readers) '(INITIALIZE-INSTANCE))
(setf (callers-list 'SIMPLEX :readers) '(INITIALIZE-INSTANCE APPLY COERCE
                                                             MAP-OVER-ORIENTED-COFACETS
                                                             MAP-OVER-ORIENTED-FACETS
                                                             FACE? OPPOSITE
                                                             FACETS CELL-ID
                                                             PRINT-OBJECT
                                                             FWRITE
                                                             INSERT-BOUNDARY
                                                             TOO-BIG? PLACE
                                                             MEASURE
                                                             BOUNDING-BOX
                                                             SIMPLEX-SIZE SPLIT
                                                             DELETE-MAXIMAL-CELL
                                                             INSERT %SET-NAME
                                                             NAME))
(setf (callers-list 'NSC :readers) '(ALL-NAMES DELETE-MAXIMAL-CELL INSERT
                                     %SET-NAME NAME))
(setf (callers-list 'VECTOR :readers) '(IMAGPART REALPART CONJUGATE DERIV
                                                 DERIVATION QUOTIENT TIMES
                                                 MINUS LOOP-VECTOR-BIND
                                                 COORDINATE-LIST COMPLEXER))
(setf (callers-list 'QUEUE :readers) '(EMPTYQ? GETQ INSERTQ CLEARQ))
(setf (callers-list 'FRONT :readers) '(GETQ INSERTQ))
(setf (callers-list 'BACK :readers) '(INSERTQ))
(setf (callers-list 'DELETE :readers) '(GETQ))
(setf (callers-list 'POINTS :readers) '(FACE? SIMPLEX-SIZE SPLIT
                                        MAKE-MEAN-POINT))
(setf (callers-list 'POINT-SPACE :readers) '(MAKE-MEAN-POINT))
(setf (callers-list 'MEAN-SPACE :readers) '(MAKE-MEAN-POINT))
(setf (callers-list 'B :readers) '(CLIST-GCD EXPT-LIST EXTENDED-GCD ROUND2
                                   CEILING2 FLOOR2 TRUNCATE2 TIMES DIFFERENCE
                                   PLUS BINARY-LCM BINARY-GCD REMAINDER
                                   MAKE-QUOTIENT-ELEMENT QUOTIENT CELL-ORDER
                                   FACETS COMPARE-PTERM-LISTS NEAR-BASE
                                   VERTICES-SORTED-BY-ANGLE DISTANCE ANGLE))
(setf (callers-list 'DEGREES :readers) '(INTERPOLATE ANGLE))
(setf (callers-list '%DEG-OVER-RAD :readers) '(ANGLE))
(setf (callers-list 'PARAMETER-VECTORS :readers) '(MAKE-PARAMETER-SPACE))
(setf (callers-list 'MAP :readers) '(APPLY-MORPHISM MAKE-PARAMETER-SPACE))
(setf (callers-list 'TARGET-SPACE :readers) '(MAKE-PARAMETER-SPACE))
(setf (callers-list 'INVERSE-MAP :readers) '(MAKE-PARAMETER-SPACE))
(setf (callers-list 'TARGET-POINTS :readers) '(MAKE-PARAMETER-SPACE))
(setf (callers-list 'HOME :readers) '(SPLIT))
(setf (callers-list 'FACE :readers) '(COERCE OPPOSITE SPLIT))
(setf (callers-list 'NEW-SET :readers) '(SPLIT))
(setf (callers-list 'SPLITTING-POINT :readers) '(SPLIT))
(setf (callers-list 'SIMPLICES :readers) '(SPLIT))
(setf (callers-list 'INITIALLY :readers) '(READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                           BUILD-CDT-FROM-BOUNDARIES SPLIT))
(setf (callers-list 'WHERE :readers) '(SPLIT))
(setf (callers-list 'S :readers) '(INITY BOUNDARY APPLY COBOUNDARY-DOMAIN
                                   BOUNDARY-DOMAIN DIMENSION-OF SPLIT))
(setf (callers-list 'THING :readers) '(%SET-COERCE COERCE WRITE-VERTEX-SET
                                       SPLIT))
(setf (callers-list 'THINGS :readers) '(SPLIT))
(setf (callers-list 'REPEAT :readers) '(READ-SIZE-TABLE READ-REGION-POINTS
                                        READ-SIMPLICIAL-COMPLEX READ-POINT
                                        REMOVE-VERTEX NEAR-BASE
                                        VERTICES-SORTED-BY-ANGLE SIMPLEX-SIZE))
(setf (callers-list 'MAXIMIZE :readers) '(SIMPLEX-SIZE))
(setf (callers-list 'OTHER :readers) '(MAKE-SIMPLEX SIMPLEX-SIZE))
(setf (callers-list 'SPACE :readers) '(MAP-FUN MAKE-AFFINE-SPACE
                                       READ-REGION-POINTS READ-VERTEX-SET
                                       READ-POINT MAKE-MESH-FROM-FILE MAKE-MESH
                                       CREATE-MESH TOO-BIG? %DELETE-TOO-CLOSE
                                       SPLIT REMOVE-VERTEX FORCE-EDGE DELAUNAY?
                                       DIRECTED-LOCATE NEAR-BASE ANGLES
                                       CIRCUMRADIUS CIRCUMCENTER
                                       FLAT-TRIANGULATE STAR-TRIANGULATE
                                       POINT-VS-TRIANGLE MAKE-CURVED-SEGMENT
                                       ARC MEASURE BOUNDING-BOX EDGES-CROSS?
                                       DISTANCE SIMPLEX-SIZE))
(setf (callers-list 'THREE-POINTS :readers) '(BEND))
(setf (callers-list 'VECTORB :readers) '(DISTANCE))
(setf (callers-list 'VECTORA :readers) '(DISTANCE))
(setf (callers-list 'POINTA :readers) '(DISTANCE))
(setf (callers-list 'POINTB :readers) '(DISTANCE))
(setf (callers-list 'LISTA :readers) '(DISTANCE))
(setf (callers-list 'LISTB :readers) '(DISTANCE))
(setf (callers-list 'SUM-OF-SQUARES :readers) '(DISTANCE))
(setf (callers-list 'EDGE-A :readers) '(EDGES-CROSS?))
(setf (callers-list 'EDGE-B :readers) '(EDGES-CROSS?))
(setf (callers-list 'POINT :readers) '(MAKE-SIMPLEX PRINT-OBJECT
                                       READ-REGION-POINTS MAKE-MESH-FROM-FILE
                                       %MM-BOUNDARY NAME-REGION BOUNDING-BOX))
(setf (callers-list 'SC :readers) '(FWRITE BOUNDING-BOX))
(setf (callers-list 'CELL :readers) '(BOUNDARY PRINT-TERM MAX-DIMENSION-OF
                                      MAKE-SIMPLICIAL-COMPLEX INTERSECTION
                                      UNION MAP-OVER-MAXIMAL-CELLS
                                      MAP-OVER-CELLS DELETE-MAXIMAL-CELL
                                      MAXIMAL-CELL? COFACETS FACETS MEMBER
                                      GET-CELL FWRITE BOUNDING-BOX))
(setf (callers-list 'APOINT :readers) '(ARC))
(setf (callers-list 'BPOINT :readers) '(ARC))
(setf (callers-list 'CENTER :readers) '(ARC))
(setf (callers-list 'THRU :readers) '(ARC))
(setf (callers-list 'RADIUS :readers) '(ARC))
(setf (callers-list 'DIRECTION :readers) '(NEAR-BASE ARC))
(setf (callers-list 'PI :readers) '(ARC))
(setf (callers-list 'A-ENDPOINT :readers) '(MAKE-CURVED-SEGMENT))
(setf (callers-list 'B-ENDPOINT :readers) '(MAKE-CURVED-SEGMENT))
(setf (callers-list 'A-PARAM-VALUE :readers) '(MAKE-CURVED-SEGMENT))
(setf (callers-list 'B-PARAM-VALUE :readers) '(MAKE-CURVED-SEGMENT))
(setf (callers-list 'TRIANGLE :readers) '(REFINE-MESH IMPROVE GRADE
                                          TRIANGLE-CENTER SPLIT
                                          %SPLIT-CONSTRAINT-ONE-SIDE PLACE
                                          REMOVE-VERTEX FORCE-EDGE SPLIT-EDGE
                                          TRIANGLES DIRECTED-LOCATE NEAR-BASE
                                          NEIGHBORHOOD NEIGHBOR INSERT
                                          VERTICES-SORTED-BY-ANGLE ANGLES ANGLE
                                          CIRCUMRADIUS CIRCUMCENTER
                                          TRIANGULATE-TRIPLES CCW-SIDE
                                          POINT-VS-TRIANGLE))
(setf (callers-list 'ON-SIDE :readers) '(POINT-VS-TRIANGLE))
(setf (callers-list 'VERTICES :readers) '(INITIALIZE-INSTANCE FACETS CONSTRAINT
                                                              ADJ-VERTICES
                                                              NEIGHBORS
                                                              POINT-VS-TRIANGLE))
(setf (callers-list 'VA :readers) '(POINT-VS-TRIANGLE))
(setf (callers-list 'VB :readers) '(POINT-VS-TRIANGLE))
(setf (callers-list 'BEND :readers) '(POINT-VS-TRIANGLE))
(setf (callers-list 'VERTEX :readers) '(WRITE-VERTEX-SET %DELETE-TOO-CLOSE
                                        PLACE REMOVE-VERTEX ADJ-VERTICES LOCATE
                                        NEAR-BASE ANGLE CCW-SIDE
                                        POINT-VS-TRIANGLE))
(setf (callers-list 'BENDS :readers) '(POINT-VS-TRIANGLE))
(setf (callers-list 'RELATION :readers) '(ADD-RELATION TRIANGULATE-TRIPLES))
(setf (callers-list 'ON-FLAG :readers) '(TRIANGULATE-TRIPLES))
(setf (callers-list 'TRIANGLE-LIST :readers) '(TRIANGULATE-TRIPLES))
(setf (callers-list 'TRIANGLES-TO-DO :readers) '(TRIANGULATE-TRIPLES))
(setf (callers-list 'TRIPLE :readers) '(TRIANGULATE-TRIPLES))
(setf (callers-list 'STAR-SHAPE :readers) '(STAR-TRIANGULATE))
(setf (callers-list 'STAR-SOURCE :readers) '(STAR-TRIANGULATE))
(setf (callers-list 'TRIANGLE-CLASS :readers) '(FLAT-TRIANGULATE
                                                STAR-TRIANGULATE))
(setf (callers-list 'FLAT-POLYGON :readers) '(FLAT-TRIANGULATE))
(setf (callers-list 'DIFF :readers) '(VERTICES-SORTED-BY-ANGLE))
(setf (callers-list 'SIZE :readers) '(READ-SIZE-TABLE VERTICES-SORTED-BY-ANGLE))
(setf (callers-list 'TRIANGULATION :readers) '(PLACE REMOVE-VERTEX FORCE-EDGE
                                               SPLIT-EDGE FLIP DELAUNAY?
                                               FLIP-OK? ADJ-VERTICES TRIANGLES
                                               LOCATE DIRECTED-LOCATE
                                               NEIGHBORHOOD NEIGHBOR NEIGHBORS
                                               INSERT))
(setf (callers-list 'SIDE :readers) '(INSERT FORCE-EDGE FLIP DIRECTED-LOCATE
                                      NEIGHBORHOOD NEIGHBOR))
(setf (callers-list 'START :readers) '(FORCE-EDGE NEIGHBORHOOD))
(setf (callers-list 'STACK :readers) '(NEIGHBORHOOD))
(setf (callers-list 'MARK-LIST :readers) '(NEIGHBORHOOD))
(setf (callers-list 'NEIGHBOR :readers) '(NEIGHBORHOOD))
(setf (callers-list 'DESTINATION :readers) '(DIRECTED-LOCATE))
(setf (callers-list 'EDGE :readers) '(GRADE INSERT %SPLIT-CONSTRAINT-ONE-SIDE
                                      FLIP REMOVE-VERTEX FORCE-EDGE SPLIT-EDGE
                                      DELAUNAY? FLIP-OK? ADJ-VERTICES))
(setf (callers-list 'TRIANGLES :readers) '(FORCE-EDGE SPLIT-EDGE))
(setf (callers-list 'SPLITTING-VERTEX :readers) '(SPLIT-EDGE))
(setf (callers-list 'DEST :readers) '(FORCE-EDGE))
(setf (callers-list 'OPPOSITE :readers) '(FORCE-EDGE))
(setf (callers-list 'TRI :readers) '(REFINE-MESH REFINE-MESH-PREP
                                     %SPLIT-CONSTRAINT-ONE-SIDE REMOVE-VERTEX
                                     FORCE-EDGE))
(setf (callers-list 'VL :readers) '(FORCE-EDGE))
(setf (callers-list 'LEFT-CHAIN :readers) '(FORCE-EDGE))
(setf (callers-list 'RIGHT-CHAIN :readers) '(FORCE-EDGE))
(setf (callers-list 'VR :readers) '(FORCE-EDGE))
(setf (callers-list 'NEXT-TRIANGLE :readers) '(FORCE-EDGE))
(setf (callers-list 'NEIGHBORS :readers) '(REMOVE-VERTEX))
(setf (callers-list 'CLASS :readers) '(REMOVE-VERTEX))
(setf (callers-list 'SURROUNDING :readers) '(REMOVE-VERTEX))
(setf (callers-list 'C-TRIANGULATION :readers) '(SPLIT
                                                 %SPLIT-CONSTRAINT-ONE-SIDE
                                                 PLACE REMOVE-VERTEX SPLIT-EDGE
                                                 FLIP FLIP-OK? NEIGHBOR
                                                 CONSTRAINT))
(setf (callers-list '*CROSS-EDGES* :readers) '(REFINE-MESH-PREP NEIGHBOR))
(setf (callers-list 'CONCAVE :readers) '(SPLIT %SPLIT-CONSTRAINT-ONE-SIDE))
(setf (callers-list 'NEW-VERTEX :readers) '(%SPLIT-CONSTRAINT-ONE-SIDE))
(setf (callers-list 'NEW :readers) '(DERIV %SPLIT-CONSTRAINT-ONE-SIDE))
(setf (callers-list 'NEW-SEGMENTS :readers) '(SPLIT))
(setf (callers-list 'NEW-VERT :readers) '(SPLIT))
(setf (callers-list 'APEX :readers) '(SPLIT))
(setf (callers-list 'VERTS :readers) '(SPLIT))
(setf (callers-list 'CDT :readers) '(INSERT DELAUNAY?))
(setf (callers-list '*DELAUNAY* :readers) '(REFINE-MESH-PREP INSERT))
(setf (callers-list 'TOO-CLOSE :readers) '(%DELETE-TOO-CLOSE))
(setf (callers-list '*TOO-CLOSE-FACTOR* :readers) '(SPLIT))
(setf (callers-list 'THE-BOUND :readers) '(TOO-BIG?))
(setf (callers-list 'ANGLE-BOUNDS :readers) '(MAKE-MESH-FROM-FILE DEFMESH
                                              REFINE-MESH GRADE))
(setf (callers-list 'SIZE-LIST :readers) '(MAKE-MESH-FROM-FILE DEFMESH
                                           REFINE-MESH GRADE))
(setf (callers-list 'SEGMENT :readers) '(GRADE))
(setf (callers-list 'BORDER :readers) '(DO-BACKGROUND-BOX))
(setf (callers-list 'BOX :readers) '(BUILD-CDT-FROM-BOUNDARIES
                                     DO-BACKGROUND-BOX))
(setf (callers-list 'BOUNDARIES :readers) '(BUILD-CDT-FROM-BOUNDARIES))
(setf (callers-list 'BOUNDARY :readers) '(MAKE-MESH-FROM-FILE
                                          BUILD-CDT-FROM-BOUNDARIES))
(setf (callers-list '*MESH* :readers) '(CREATE-MESH REFINE-MESH-PREP))
(setf (callers-list '*SPACE* :readers) '(READ-MESH
                                         READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                         MAKE-MESH-FROM-FILE REFINE-MESH-PREP))
(setf (callers-list 'IMPROVEMENT-QUEUE :readers) '(REFINE-MESH))
(setf (callers-list 'CLAUSE :readers) '(MAKE-MESH))
(setf (callers-list 'NEW-BODY :readers) '(MAKE-MESH))
(setf (callers-list 'KEYARGS :readers) '(MAKE-MESH))
(setf (callers-list 'DESC :readers) '(%MM-BOUNDARY))
(setf (callers-list 'ARC-ARGS :readers) '(%MM-BOUNDARY))
(setf (callers-list 'NEW-DESC :readers) '(%MM-BOUNDARY))
(setf (callers-list 'POINT-LIST :readers) '(DEFUN-BOUNDARY))
(setf (callers-list 'BOUNDARY-COMPLEX :readers) '(MAKE-MESH-FROM-FILE))
(setf (callers-list 'REGION-POINTS :readers) '(MAKE-MESH-FROM-FILE))
(setf (callers-list 'FILE-ANGLE-BOUNDS :readers) '(MAKE-MESH-FROM-FILE))
(setf (callers-list 'FILE-SIZE-LIST :readers) '(MAKE-MESH-FROM-FILE))
(setf (callers-list 'VERTEX-TABLE :readers) '(FWRITE
                                              READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                              READ-SIMPLICIAL-COMPLEX
                                              READ-VERTEX-SET
                                              MAKE-MESH-FROM-FILE))
(setf (callers-list 'TOKEN :readers) '(MAKE-MESH-FROM-FILE))
(setf (callers-list 'NUMVERTICES :readers) '(READ-VERTEX-SET))
(setf (callers-list 'SIMP-DIMENSION :readers) '(READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                                READ-SIMPLICIAL-COMPLEX))
(setf (callers-list 'NUMSIMPS :readers) '(READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                          READ-SIMPLICIAL-COMPLEX))
(setf (callers-list 'CURRENT-NAME :readers) '(READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                              READ-SIMPLICIAL-COMPLEX))
(setf (callers-list 'COUNT :readers) '(READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                       READ-SIMPLICIAL-COMPLEX))
(setf (callers-list 'NEXT :readers) '(READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                      READ-SIMPLICIAL-COMPLEX))
(setf (callers-list 'COMPLEX :readers) '(MAKE-SIMPLICIAL-COMPLEX
                                         MAP-OVER-MAXIMAL-CELLS %MAP-OVER-CELLS
                                         DELETE-MAXIMAL-CELL INSERT
                                         MAXIMAL-CELL? COFACETS FACETS MEMBER
                                         GET-CELL MAP-OVER-ORIENTED-COFACETS
                                         MAP-OVER-ORIENTED-FACETS
                                         READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                         READ-SIMPLICIAL-COMPLEX))
(setf (callers-list 'NUMPOINTS :readers) '(READ-REGION-POINTS))
(setf (callers-list 'NUMENTRIES :readers) '(READ-SIZE-TABLE))
(setf (callers-list 'TUPLE :readers) '(LIST-OF-ELEMENTS SET-REF PRINT-OBJECT
                                       FWRITE))
(setf (callers-list '*STANDARD-OUTPUT* :readers) '(WRITE-MESH))
(setf (callers-list 'HOMO :readers) '(GET-EMBEDDABLE-DOMAINS PRINT-OBJECT))
(setf (callers-list '*MORPHISM-COMPOSITION-TABLE* :readers) '(COMPOSE))
(setf (callers-list 'G :readers) '(CHECK-DEGREE TERMS-REDUCE CRITERION1
                                   GENERATORS-OF MAKE-IDEAL COMPOSE))
(setf (callers-list 'MORPH :readers) '(DELETE-MORPHISM MAKE-MORPHISM
                                       GET-MORPHISMS-TO GET-MORPHISMS-FROM))
(setf (callers-list 'H :readers) '(INITIALIZE-INSTANCE APPLY-MORPHISM))
(setf (callers-list 'NEXT-DOMAINS :readers) '(NEXT-DOMAINS))
(setf (callers-list '*COERCIBILITY-CHECKING* :readers) '(COERCE))
(setf (callers-list 'POSITION :readers) '(IN-BOUND? MAKE-MULTIPOLE-EXPANSION))
(setf (callers-list '*NUMBER-OF-TERMS* :readers) '(LTH-LOCAL-TERM REST-OF-LOCAL
                                                   LOCALIZE-FORM*
                                                   WHAT-IS-THE-LTHTERM2
                                                   SHIFT-L-FORM* SHIFT-M-FORM*
                                                   MAKE-MULTIPOLE-EXPANSION))
(setf (callers-list 'COEFS :readers) '(PARSE-LINEAR-EQUATION
                                       MAKE-MULTIPOLE-EXPANSION))
(setf (callers-list 'XY :readers) '(SHIFT-MULTIPOLE))
(setf (callers-list 'POSN :readers) '(LOCALIZE SHIFT-LOCAL-FIELD))
(setf (callers-list 'L1 :readers) '(ORIENTED-SORT PLUS))
(setf (callers-list 'L2 :readers) '(ORIENTED-SORT PLUS))
(setf (callers-list 'OP :readers) '(POLY-MGCD DEFINE-MATH-OPERATOR PRINT-OBJECT))
(setf (callers-list '*MATH-OPERATOR-PROPERTIES* :readers) '(DEFINE-MATH-OPERATOR
                                                            EXTERNAL-NAME))
(setf (callers-list 'PROPERTIES :readers) '(DEFINE-MATH-OPERATOR))
(setf (callers-list '*DOMAIN-PROPERTY-TABLE* :readers) '(%MAP-OVER-PROPERTIES
                                                         DELETE-PROPERTY
                                                         TEST-PROPERTY
                                                         ASSERT-PROPERTY))
(setf (callers-list 'PROP :readers) '(DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                      SHOW-PROPERTIES TEST-PROPERTY
                                      ASSERT-PROPERTY))
(setf (callers-list 'PROPERTY :readers) '(SET-VARIABLE-PROPERTY
                                          GET-VARIABLE-PROPERTY
                                          SET-VARIABLE-NUMBER-PROPERTY
                                          GET-VARIABLE-NUMBER-PROPERTY
                                          DEFINE-MATH-PROPERTY DELETE-DOMAIN
                                          MAP-OVER-PROPERTIES))
(setf (callers-list '*MATH-PROPERTIES* :readers) '(PREDICATE-FUNCTION-NAME
                                                   ASSERT-FUNCTION-NAME
                                                   DEFINE-PRIMITIVE-PROPERTY))
(setf (callers-list 'REQ :readers) '(DEFINE-MATH-PROPERTY MAKE-PREDICATE))
(setf (callers-list '*PRIMITIVE-PROPERTIES* :readers) '(DEFINE-MATH-PROPERTY
                                                        PREDICATE-FUNCTION-NAME
                                                        ASSERT-FUNCTION-NAME))
(setf (callers-list 'SYM :readers) '(INTERN-IN-PACKAGE))
(setf (callers-list 'PACKAGE :readers) '(INTERN-IN-PACKAGE))
(setf (callers-list 'NUMERATOR :readers) '(MINUS 1? 0? PRINT-OBJECT
                                           MAKE-QUOTIENT-ELEMENT))
(setf (callers-list 'DENOMINATOR :readers) '(MINUS 1? PRINT-OBJECT
                                             MAKE-QUOTIENT-ELEMENT))
(setf (callers-list 'RING :readers) '(ADD-NEW-VARIABLE GENERATORS-OF
                                      CONVERT-LIST INITIALIZE-INSTANCE
                                      MAKE-IDEAL GET-FACTOR-RING
                                      GET-COCHAIN-MODULE GET-CHAIN-MODULE
                                      QUOTIENT-REDUCE QUOTIENT-REDUCE*
                                      QUOTIENT-FIELD-PRINT-OBJECT))
(setf (callers-list 'QE :readers) '(COERCE))
(setf (callers-list 'RATFUN :readers) '(PRINT-OBJECT))
(setf (callers-list 'R :readers) '(MAKE-EPOLYNOMIAL MINUS? MINUS HEIGHT 1? 0?
                                   DENOMINATOR NUMERATOR))
(setf (callers-list 'QF :readers) '(MAKE-QUOTIENT-ELEMENT WEYL:MAKE-ELEMENT
                                    MAKE-ELEMENT RING-VARIABLES
                                    INITIALIZE-INSTANCE QUOTIENT-REDUCE ONE
                                    ZERO))
(setf (callers-list 'DEN :readers) '(SUBSTITUTE RECIP QUOTIENT-REDUCE))
(setf (callers-list 'D1 :readers) '(TIMES DIFFERENCE PLUS COERCE BINARY-LCM
                                    BINARY-GCD QUOTIENT EXPT EXPT-QUOTIENT
                                    RECIP))
(setf (callers-list 'R1 :readers) '(EXPT RECIP))
(setf (callers-list 'N1 :readers) '(EXPT EXPT-QUOTIENT RECIP))
(setf (callers-list 'DEN-X :readers) '(PARTIAL-DERIV LIST-OF-VARIABLES))
(setf (callers-list 'ORDER-NUMBER :readers) '(SET-VARIABLE-NUMBER-PROPERTY
                                              GET-VARIABLE-NUMBER-PROPERTY
                                              VARIABLE-SYMBOL LIST-OF-VARIABLES))
(setf (callers-list 'NUM-X :readers) '(PARTIAL-DERIV LIST-OF-VARIABLES))
(setf (callers-list 'LIST-OF-VARIABLES :readers) '(LIST-OF-VARIABLES))
(setf (callers-list 'DEN-P :readers) '(PARTIAL-DERIV))
(setf (callers-list 'NUM-P :readers) '(PARTIAL-DERIV))
(setf (callers-list 'KERNEL :readers) '(DERIV))
(setf (callers-list 'OBJECT :readers) '(INITIALIZE-INSTANCE))
(setf (callers-list 'SEQUENCES :readers) '(MAP-WITH-DOMAIN MAP))
(setf (callers-list 'ELEMENT :readers) '(COERCE PRINT-OBJECT))
(setf (callers-list 'E1 :readers) '(TERMS-DIFFERENCE TERMS-PLUS PAIR-UP-TERMS
                                    TIMES BF-BINARY> BF-BINARY>= BF-BINARY=
                                    BINARY> BINARY=))
(setf (callers-list 'E2 :readers) '(TERMS-DIFFERENCE TERMS-PLUS PAIR-UP-TERMS
                                    TIMES BF-BINARY> BF-BINARY>= BF-BINARY=
                                    BINARY> BINARY=))
(setf (callers-list 'ELTS :readers) '(INSERT NOT-AN-ELEMENT))
(setf (callers-list 'ORDER :readers) '(MULTIPLICATIVE-ORDER MAKE-TPOWER-SERIES
                                       TAYLOR1 TAYLOR
                                       DEFINE-TAYLOR-EXPANSION-FUN))
(setf (callers-list 'TP :readers) '(MINUS TRUNCATE-ORDER LARGEST-STORED-COEFF
                                    REVERSION DERIV QUOTIENT TIMES DIFFERENCE
                                    PLUS SUBSTITUTE))
(setf (callers-list 'TP-VAL :readers) '(SUBSTITUTE))
(setf (callers-list 'TP-COEFFS :readers) '(SUBSTITUTE))
(setf (callers-list 'TP-VAR :readers) '(DERIV))
(setf (callers-list 'A-ORDER :readers) '(EXPT TPS-DERIV2 TPS-DERIV1))
(setf (callers-list 'A-VAL :readers) '(EXPT TPS-DERIV2 TPS-DERIV1))
(setf (callers-list 'A-COEFFS :readers) '(EXPT TPS-DERIV2 TPS-DERIV1))
(setf (callers-list 'A-BO :readers) '(EXPT TPS-DERIV2 TPS-DERIV1))
(setf (callers-list 'VALUE-LIST :readers) '(SOLVE-FOR-COEFFS))
(setf (callers-list 'COEF-LIST :readers) '(MAKE-UPOLYNOMIAL
                                           WEYL:MAKE-UPOLYNOMIAL
                                           SOLVE-FOR-COEFFS))
(setf (callers-list 'CELL1 :readers) '(BINARY=))
(setf (callers-list 'CELL2 :readers) '(BINARY=))
(setf (callers-list 'FACET :readers) '(BOUNDARY %DELETE %INSERT
                                       MAP-OVER-ORIENTED-FACETS FACETS))
(setf (callers-list 'SIMPLEX1 :readers) '(FACE?))
(setf (callers-list 'SIMPLEX2 :readers) '(FACE?))
(setf (callers-list 'ORIENTATION :readers) '(COBOUNDARY BOUNDARY
                                             MAP-OVER-ORIENTED-COFACETS
                                             MAP-OVER-ORIENTED-FACETS))
(setf (callers-list 'COFACET :readers) '(COBOUNDARY MAP-OVER-ORIENTED-COFACETS))
(setf (callers-list 'POLYGON :readers) '(FACETS CELL-ID))
(setf (callers-list 'VERTEX-LIST :readers) '(GET-CELL))
(setf (callers-list 'CELLS :readers) '(COFACETS FACETS))
(setf (callers-list 'FACET-LIST :readers) '(FACETS))
(setf (callers-list 'COFACET-LIST :readers) '(COFACETS))
(setf (callers-list 'FACETS-LIST :readers) '(%INSERT))
(setf (callers-list 'COFACET-TABLE :readers) '(%DELETE %INSERT))
(setf (callers-list 'CELL-TABLE :readers) '(%DELETE %INSERT))
(setf (callers-list 'FACET-TABLE :readers) '(%DELETE %INSERT))
(setf (callers-list 'COFACETS :readers) '(%DELETE))
(setf (callers-list 'STRUCTURE :readers) '(MAP-OVER-CELLS))
(setf (callers-list 'COMPLEX1 :readers) '(INTERSECTION UNION))
(setf (callers-list 'COMPLEX2 :readers) '(INTERSECTION UNION))
(setf (callers-list 'CELL-COMPLEX :readers) '(VERTEX-SET))
(setf (callers-list 'V-CELL :readers) '(VERTEX-SET))
(setf (callers-list 'CM :readers) '(COERCE MAX-DIMENSION-OF))
(setf (callers-list 'COERCION-CACHE :readers) '(%SET-COERCE))
(setf (callers-list 'CHAIN :readers) '(COERCE DIMENSION-OF COMPLEX-OF))
(setf (callers-list 'CC :readers) '(BOUNDARY BOUNDARY-DOMAIN))
(setf (callers-list 'AV :readers) '(POINTS-ORDER))
(setf (callers-list 'BV :readers) '(POINTS-ORDER))
(setf (callers-list 'SIMP :readers) '(COBOUNDARY DERIV BOUNDARY-SET
                                      FREE-GROUP-SCALAR-TIMES
                                      MAKE-CHAIN-OR-COCHAIN))
(setf (callers-list 'C1 :readers) '(TERMS-DIFFERENCE TERMS-PLUS PAIR-UP-TERMS
                                    DERIV CHAIN-TERMS-TIMES
                                    FREE-GROUP-SCALAR-TIMES
                                    FREE-GROUP-DIFFERENCE FREE-GROUP-PLUS))
(setf (callers-list 'C2 :readers) '(TERMS-DIFFERENCE TERMS-PLUS PAIR-UP-TERMS
                                    CHAIN-TERMS-TIMES FREE-GROUP-DIFFERENCE
                                    FREE-GROUP-PLUS))
(setf (callers-list 'CELL-ORDER :readers) '(CHAIN-TERMS-TIMES
                                            FREE-GROUP-DIFFERENCE
                                            FREE-GROUP-PLUS))
(setf (callers-list 'SIMP1 :readers) '(CHAIN-TERMS-TIMES FREE-GROUP-DIFFERENCE
                                       FREE-GROUP-PLUS))
(setf (callers-list 'SIMP2 :readers) '(CHAIN-TERMS-TIMES FREE-GROUP-DIFFERENCE
                                       FREE-GROUP-PLUS))
(setf (callers-list 'O :readers) '(BOUNDARY))
(setf (callers-list 'SIMPS :readers) '(BOUNDARY-SET))
(setf (callers-list 'CH :readers) '(DERIV))
(setf (callers-list 'COCM :readers) '(COERCE))
(setf (callers-list 'COCHAIN :readers) '(COERCE))
(setf (callers-list 'COEFFICIENT-DOMAIN :readers) '(POLY-PSEUDO-REMAINDER
                                                    GET-POLYNOMIAL-RING
                                                    INITIALIZE-INSTANCE
                                                    TP-RING-PRINT-OBJECT
                                                    TP-FIELD-PRINT-OBJECT))
(setf (callers-list 'VALENCE :readers) '(MAKE-TPOWER-SERIES))
(setf (callers-list 'BRANCH-ORDER :readers) '(MAKE-TPOWER-SERIES))
(setf (callers-list 'COEFFS :readers) '(MAKE-TPOWER-SERIES))
(setf (callers-list 'VECT :readers) '(TILDE LOOP-VECTOR-BIND VECTOR-SET-REF REF
                                      MAKE-POLYNOMIAL-MORPHISM TRIM-ZEROES))
(setf (callers-list '#\[ :readers) '(PRINT-GROUPED))
(setf (callers-list '#\] :readers) '(PRINT-GROUPED))
(setf (callers-list '#\{ :readers) '(PRINT-GROUPED))
(setf (callers-list '#\} :readers) '(PRINT-GROUPED))
(setf (callers-list 'DEPTH :readers) '(GROUPED?))
(setf (callers-list 'NEVER :readers) '(GROUPED?))
(setf (callers-list '*POSITIVE-INFINITY* :readers) '(MIN-PAIR MAX-PAIR
                                                     MULTIPLICATIVE-ORDER
                                                     PRINT-TERM))
(setf (callers-list 'TPS :readers) '(WITH-TPOWER-SERIES))
(setf (callers-list 'FACTOR :readers) '(CLIST-SQFR-DECOMPOSE
                                        MODIFY-BRANCH-ORDER))
(setf (callers-list 'BO :readers) '(SET-BRANCH-ORDER))
(setf (callers-list 'TORDER :readers) '(TRUNCATE-ORDER))
(setf (callers-list 'N-TERMS :readers) '(EXPT))
(setf (callers-list 'A-LIM :readers) '(EXPT))
(setf (callers-list 'QUOTIENT-ELEMENT :readers) '(WITH-NUMERATOR-AND-DENOMINATOR))
(setf (callers-list 'DENOM :readers) '(PROJECT MAKE-ELEMENT TERMS-INTERPOLATE
                                       WITH-NUMERATOR-AND-DENOMINATOR))
(setf (callers-list 'ID-NUMBER :readers) '(INITIALIZE-INSTANCE))
(setf (callers-list 'ORIENT :readers) '(INITIALIZE-INSTANCE ORIENTED-SORT))
(setf (callers-list 'MANTISSA :readers) '(BF-INTEGER-PART BF-QUOTIENT BFPRIN1
                                          PRINT-OBJECT INCPREC! DECPREC!))
(setf (callers-list 'EXPONENT :readers) '(COEFFICIENT BF-INTEGER-PART
                                          BF-QUOTIENT INCPREC! DECPREC!))
(setf (callers-list '#\0 :readers) '(BFPRIN1 CONVERT-NUMBER->CHARACTERS))
(setf (callers-list 'DIGIT :readers) '(CONVERT-NUMBER->CHARACTERS))
(setf (callers-list '*REAL-PRECISION* :readers) '(EXPT SQRT ACOS ASIN ATAN TAN
                                                       COS SIN LOG EXP E-VALUE
                                                       PI-VALUE PRINT-OBJECT))
(setf (callers-list 'NUMBER :readers) '(EXPT SQRT MINUS 1? 0? HEIGHT PHASE ABS
                                             ACOS ASIN ATAN TAN COS SIN EXP
                                             ROUND2 ROUND1 CEILING2 CEILING1
                                             FLOOR2 FLOOR1 BFPRIN1 PRINT-OBJECT))
(setf (callers-list '#\- :readers) '(BFPRIN1))
(setf (callers-list '#\. :readers) '(READ!NUM BFPRIN1))
(setf (callers-list 'CHAR :readers) '(BFPRIN1))
(setf (callers-list '#\+ :readers) '(BFPRIN1))
(setf (callers-list 'Q :readers) '(COERCE CONJUGATE BINARY= READ!LNUM))
(setf (callers-list 'MT :readers) '(READ!LNUM))
(setf (callers-list 'EP :readers) '(POLY-MGCD READ!LNUM))
(setf (callers-list 'MODULUS :readers) '(COMPUTE-RESULT MULTIPLICATIVE-ORDER
                                         EXPT RECIP MINUS PRINT-OBJECT
                                         TRUNCATE2 ROUND2 CEILING2 FLOOR2))
(setf (callers-list 'DEGREE :readers) '(CLIST-FACTOR MAKE-GFP-DOMAIN))
(setf (callers-list 'CHARACTERISTIC :readers) '(QUOTIENT RECIP MINUS
                                                MAKE-QUOTIENT-ELEMENT
                                                MAKE-GFP-DOMAIN))
(setf (callers-list '*PRINT-MODULUS* :readers) '(PRINT-OBJECT))
(setf (callers-list 'V1 :readers) '(CROSS-PRODUCT TIMES DIFFERENCE PLUS COERCE
                                    QUOTIENT MAKE-QUOTIENT-ELEMENT))
(setf (callers-list 'V2 :readers) '(CROSS-PRODUCT QUOTIENT
                                    MAKE-QUOTIENT-ELEMENT))
(setf (callers-list 'D2 :readers) '(BINARY-LCM BINARY-GCD QUOTIENT))
(setf (callers-list '*GF2-IRREDUCIBLE-POLYNOMIALS* :readers) '(MAKE-GFP-DOMAIN))
(setf (callers-list 'X^N :readers) '(MAKE-GFP-DOMAIN))
(setf (callers-list 'IDEAL :readers) '(GET-FACTOR-RING))
(setf (callers-list 'K2 :readers) '(USE-CHINESE-REMAINDER))
(setf (callers-list 'RESULT :readers) '(COMPUTE-RESULT))
(setf (callers-list 'Z :readers) '(RECIP HEIGHT PHASE ABS PRINT-OBJECT))
(setf (callers-list 'REAL-BODY :readers) '(DEF-REALIMAG-PART))
(setf (callers-list 'IMAG-BODY :readers) '(DEF-REALIMAG-PART))
(setf (callers-list 'HEIGHT :readers) '(RANDOM RANDOM-CONSTANT))
(setf (callers-list '*NEGATIVE-INFINITY* :readers) '(MIN-PAIR MAX-PAIR))
(setf (callers-list 'GREATER-FUNCTION :readers) '(REDUCE-ALL CRITERION1
                                                  GENERATORS-OF
                                                  (SETF GREATER-FUNCTION)
                                                  SCAN-POLY-FORM
                                                  MAKE-EPOLYNOMIAL
                                                  MAKE-EPOLYNOMIAL*))
(setf (callers-list 'EPOL :readers) '(MAKE-POLYNOMIAL))
(setf (callers-list 'ANS :readers) '(EXPT-LIST POLY-FIND-COMMON-VARS
                                     TERMS-TIMES GTERMS-TIMES CONVERT-TERM))
(setf (callers-list 'PTERM :readers) '(GTERMS-MON-TIMES))
(setf (callers-list 'Y-TERM :readers) '(GTERMS-TIMES))
(setf (callers-list 'X-TERM :readers) '(GTERMS-TIMES))
(setf (callers-list 'RED-ANS :readers) '(GTERMS-TIMES))
(setf (callers-list 'ID :readers) '(REDUCE-BASIS INITIALIZE-INSTANCE))
(setf (callers-list 'GENERATORS :readers) '(ADD-UNDONE REDUCE-ALL CRITERION1
                                            GENERATORS-OF MAKE-IDEAL))
(setf (callers-list 'ID1 :readers) '(BINARY= TIMES PLUS))
(setf (callers-list 'ID2 :readers) '(BINARY= TIMES PLUS))
(setf (callers-list 'ID2-GEN :readers) '(BINARY=))
(setf (callers-list 'GB :readers) '(INITIALIZE-INSTANCE))
(setf (callers-list 'POLYS :readers) '(MAKE-IDEAL))
(setf (callers-list 'GROB :readers) '(CONVERT-LIST (SETF GREATER-FUNCTION)))
(setf (callers-list 'GROB-STRUCT :readers) '(NEW-BASIS REDUCE-ALL CRITERION1
                                             REDUCE-BASIS RESET-GROBNER-BASIS
                                             GENERATORS-OF ADD-RELATION))
(setf (callers-list 'REDUCIBLES :readers) '(REDUCE-ALL CRITERION1 GENERATORS-OF))
(setf (callers-list 'DIM :readers) '(ADD-UNDONE REDUCE-ALL CRITERION1))
(setf (callers-list 'UNDONES :readers) '(ADD-UNDONE CRITERION1))
(setf (callers-list 'UNDONE :readers) '(CRITERION1))
(setf (callers-list 'POSSIBLES :readers) '(ADD-UNDONE REDUCE-ALL))
(setf (callers-list 'F1 :readers) '(CLIST-SQFR-DECOMPOSE REDUCE-ALL))
(setf (callers-list 'F2 :readers) '(CLIST-SQFR-DECOMPOSE REDUCE-ALL))
(setf (callers-list 'FF :readers) '(ADD-UNDONE))
(setf (callers-list 'GG :readers) '(ADD-UNDONE))
(setf (callers-list 'ORDER-PREDICATE :readers) '(PAIR-UP-TERMS))
(setf (callers-list 'TERMS2 :readers) '(PAIR-UP-TERMS))
(setf (callers-list 'ACCUMULATOR :readers) '(ACCUMULATE-TERMS))
(setf (callers-list 'ELEMENT-FORMS :readers) '(ACCUMULATE-TERMS))
(setf (callers-list 'IDENTITY :readers) '(ACCUMULATE-TERMS))
(setf (callers-list '*EMPTY-ACCUMULATION-SLOT* :readers) '(ACCUMULATE-ACCUMULATION-LIST
                                                           INSERT-INTO-ACCUMULATION-LIST))
(setf (callers-list 'RANGE :readers) '(TRANSFORM MAKE-POLYNOMIAL-MORPHISM))
(setf (callers-list 'E> :readers) '(TERMS-DIFFERENCE TERMS-PLUS))
(setf (callers-list 'TC :readers) '(TERMS-CQUOTIENT TERMS-MON-TIMES))
(setf (callers-list 'TE :readers) '(TERMS-CQUOTIENT TERMS-MON-TIMES))
(setf (callers-list 'C-X :readers) '(TERMS-TIMES))
(setf (callers-list 'C-Y :readers) '(TERMS-TIMES))
(setf (callers-list 'E-X :readers) '(TERMS-TIMES))
(setf (callers-list 'E-Y :readers) '(TERMS-TIMES))
(setf (callers-list 'POLY-GCD-ALGORITHM :readers) '(POLY-GCD))
(setf (callers-list 'BAD-V :readers) '(POLY-SPLIT-ON-VARS))
(setf (callers-list 'NEW-POLYS :readers) '(POLY-SPLIT-ON-VARS))
(setf (callers-list 'DEG :readers) '(DENSE-INTERPOLATE-COEFFICIENTS
                                     POLY-SPLIT-ON-VARS))
(setf (callers-list 'SAME-VARS :readers) '(POLY-FIND-COMMON-VARS))
(setf (callers-list 'VS :readers) '(POLY-FIND-COMMON-VARS))
(setf (callers-list 'BETA :readers) '(TERMS-REDUCED-GCD))
(setf (callers-list 'VAR-INFO :readers) '(ADD-VARIABLE-DEGREE))
(setf (callers-list 'VARIABLE-TABLE :readers) '(ADD-NEW-VARIABLE
                                                INITIALIZE-INSTANCE))
(setf (callers-list 'INDEX :readers) '(VARIABLE-INDEX))
(setf (callers-list 'CNT :readers) '(ADD-NEW-VARIABLE))
(setf (callers-list 'QK :readers) '(TERMS-INTERPOLATE))
(setf (callers-list 'UK :readers) '(TERMS-INTERPOLATE))
(setf (callers-list 'XK :readers) '(TERMS-INTERPOLATE))
(setf (callers-list 'PTS :readers) '(INTERPOLATE))
(setf (callers-list 'PART :readers) '(DEGREE-PARTITION))
(setf (callers-list 'U :readers) '(DEGREE-PARTITION))
(setf (callers-list 'EXPT-VECT :readers) '(MAKE-DEGREE-MATRIX))
(setf (callers-list 'SOL :readers) '(SOLVE-VANDERMONDETD))
(setf (callers-list 'SKEL :readers) '(CHECK-DEGREE POLY-SKELETON))
(setf (callers-list 'PKMINUS1 :readers) '(SPARSEINTERPSTAGEI SPARSEINTERPSTAGE))
(setf (callers-list 'BP :readers) '(INTERPOLATE SPARSEINTERPSTAGEI
                                    SPARSEINTERPSTAGE))
(setf (callers-list 'COEF-BOUND :readers) '(SPARSEINTERPSTAGEI))
(setf (callers-list 'IP :readers) '(SPARSEINTERPSTAGEI))
(setf (callers-list 'COEF-DOMAIN :readers) '(SPARSEINTERPSTAGEI INITY))
(setf (callers-list 'UPTO :readers) '(INTERPOLATE))
(setf (callers-list 'DEGREE-BOUNDS :readers) '(INTERPOLATE))
(setf (callers-list 'PROD :readers) '(SPMOD-GCD))
(setf (callers-list 'RAND :readers) '(NON-ZERO-RANDOM SPMOD-GCD2))
(setf (callers-list 'VAR-NUM :readers) '(CHECK-DEGREE))
(setf (callers-list 'XI :readers) '(CHECK-DEGREE))
(setf (callers-list 'EXPS :readers) '(MAKE-MONOMIAL))
(setf (callers-list 'SUB-POLYS :readers) '(DENSE-INTERPOLATE-COEFFICIENTS))
(setf (callers-list 'PROD1 :readers) '(CLIST-SQFR-DECOMPOSE))
(setf (callers-list 'PROD2 :readers) '(CLIST-SQFR-DECOMPOSE))
(setf (callers-list 'FACTORS :readers) '(CLIST-SQFR-DECOMPOSE))
(setf (callers-list 'DERIV :readers) '(CLIST-SQFR-DECOMPOSE))
(setf (callers-list 'NEWREDUCIBLES :readers) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES))
(setf (callers-list 'ANGLE :readers) '(CREATE-UNIT-QUATERNION))
(setf (callers-list '#\< :readers) '(PRINT-FREE-MODULE-ELEMENT))
(setf (callers-list '#\> :readers) '(PRINT-FREE-MODULE-ELEMENT))
(setf (callers-list '*COERCE-WHERE-POSSIBLE* :readers) '(QUOTIENT TIMES))
(setf (callers-list 'SCALAR :readers) '(QUOTIENT TIMES))
(setf (callers-list 'DOMAIN :setters) '(CROSS-PRODUCT PRINT-FREE-MODULE-ELEMENT
                                        MAKE-ELEMENT-FREE-MODULE-VECTOR
                                        FREE-MODULE-PRINT-OBJECT
                                        UNIT-QUATERNION-DOMAIN-PRINT-OBJECT
                                        QUATERNION-DOMAIN-PRINT-OBJECT
                                        MAKE-PROJECTIVE-SPACE-ELEMENT
                                        PROJECTIVE-SPACE-PRINT-OBJECT
                                        EXTENDED-GCD MAKE-UPOLYNOMIAL
                                        WEYL:MAKE-UPOLYNOMIAL NON-ZERO-RANDOM
                                        LIST-COERCE SPARSEINTERPSTAGEI
                                        MAKE-DEGREE-MATRIX INTERPOLATE
                                        SET-VARIABLE-NUMBER-PROPERTY
                                        GET-VARIABLE-NUMBER-PROPERTY
                                        VARIABLE-SYMBOL VARIABLE-INDEX
                                        PARSE-LINEAR-EQUATION GET-VARIABLE-NAME
                                        COEFFICIENT DEGREE TERMS-COERCE
                                        POLY-COERCE RESULTANT
                                        PRINT-MPOLYNOMIAL-FORM
                                        MAKE-POLYNOMIAL-MORPHISM MAKE-POLY
                                        MAKE-POLYNOMIAL GET-POLYNOMIAL-RING
                                        CHECK-SAME-DOMAIN MAKE-EPOLYNOMIAL
                                        MAKE-EPOLYNOMIAL* SQRT RANDOM-CONSTANT
                                        IMAGPART REALPART MAKE-GFM-DOMAIN
                                        GF2^N-PRINT-OBJECT MAKE-GFP-DOMAIN
                                        NUMBER-OF-ELEMENTS E-VALUE PI-VALUE
                                        ROUND2 ROUND1 CEILING2 CEILING1 FLOOR2
                                        FLOOR1 CONVERT-TO-BIGFLOAT DIMENSIONS
                                        FACTOR-DOMAIN-PRINT-OBJECT
                                        CHARACTERISTIC ZERO MAKE-ELEMENT
                                        MAKE-TPOWER-SERIES BOUNDARY CANONICAL
                                        MAKE-POINT EUCLIDEAN-SPACE-PRINT-OBJECT
                                        SOLVE-FOR-COEFFS REVERSION TPS-DERIV2
                                        TPS-DERIV1 TAYLOR1 TAYLOR TAYLOR-EXP
                                        MAP-WITH-DOMAIN DERIV PARTIAL-DERIV
                                        SUBSTITUTE LIST-OF-VARIABLES
                                        DENOMINATOR NUMERATOR
                                        MAKE-RATIONAL-FUNCTION* EXPT-QUOTIENT
                                        MAKE-QUOTIENT-ELEMENT
                                        MAP-OVER-PROPERTIES SHIFT-MULTIPOLE
                                        REACHABLE-DOMAINS GET-AUTOMORPHISMS
                                        MAKE-AUTOMORPHISM
                                        GET-EMBEDDABLE-DOMAINS
                                        GET-HOMOMORPHISMS MAKE-HOMOMORPHISM
                                        DELETE-MORPHISM MAKE-MORPHISM
                                        GET-MORPHISMS SMITH* HERMITE*
                                        SUBDETERMINANT* SPARSE-DETERMINANT
                                        EVALUATE-MATRIX DETERMINANT*
                                        SO-N-PRINT-OBJECT O-N-PRINT-OBJECT
                                        SL-N-PRINT-OBJECT PSL-N-PRINT-OBJECT
                                        GL-N-PRINT-OBJECT INVERT-ARRAY
                                        TRANSPOSE DIFFERENCE PLUS ONE-MATRIX
                                        MATRIX-SPACE-PRINT-OBJECT MAKE-UNION
                                        MAKE-UNIVERSAL-QUANTIFIED-SET RECIP
                                        MINUS MAKE-GE-EQN>= MAKE-GE-EQN>
                                        MAKE-GE-EQN= DECLARE-DEPENDENCIES
                                        SET-VARIABLE-PROPERTY
                                        GET-VARIABLE-PROPERTY SIMP-TIMES-TERMS
                                        SIMP-PLUS-TERMS MAKE-GE-EXPT
                                        MAKE-GE-TIMES MAKE-GE-PLUS
                                        MAKE-GE-FUNCT ADD-FUNCTION-TO-DOMAIN
                                        MAKE-FUNCTION GET-FUNCTION
                                        MAKE-GE-VARIABLE %MEMOIZE
                                        GET-MEMOIZATION SET-MEMOIZATION
                                        MAKE-SAMPLED-FUNCTION-1
                                        MAKE-SAMPLED-FUNCTION APPLY
                                        MAKE-APP-FUNCTION MAKE-GE-IFOURIER
                                        GE-FOURIER MAKE-GE-FOURIER
                                        BIND-DOMAIN-CONTEXT
                                        %BIND-DYNAMIC-DOMAIN-CONTEXT COERCIBLE?
                                        COERCE DOMAIN-ELEMENT-CLASSES
                                        DEFINE-DOMAIN-ELEMENT-CLASSES
                                        ADD-DOMAIN-INTERNAL CHECK-DOMAIN
                                        REQUIRED-OPERATIONS DESCRIBE-OPERATIONS
                                        OPERATION-VALUES OPERATION-ARGUMENTS
                                        LIST-OPERATIONS PARSE-OPERATIONS
                                        PARSE-OPERATION-LIST DEFINE-OPERATIONS
                                        ITERATE DIRECT-SUM-PRINT-OBJECT
                                        DERIVATION SET-VARIABLE-DERIVATION
                                        VARIABLE-DERIVATIVE-ORDER
                                        VARIABLE-DERIVATION EXPT
                                        MINIMAL-POLYNOMIAL
                                        VARIABLE-MINIMAL-POLYNOMIAL))
(setf (callers-list 'VAR :setters) '(PRINT-UPOLYNOMIAL MAKE-UPOLYNOMIAL
                                     DENSE-INTERPOLATE-COEFFICIENTS INTERPOLATE
                                     POLY-INTERPOLATE PARSE-LINEAR-EQUATION
                                     POLY-C-COEFFICIENT POLY-COEFFICIENT
                                     ADD-VARIABLE-DEGREE POLY-DEGREE
                                     POLY-DERIVATIVE COERCE PRINT-TPOWER-SERIES
                                     TPS-DERIV2 DERIV SUBSTITUTE MERGE-NEW-BV
                                     MAKE-UNION ADD-SUBSCRIPTS MAKE-GE-VARIABLE
                                     VARIABLE-DERIVATIVE-ORDER
                                     VARIABLE-DERIVATION
                                     VARIABLE-MINIMAL-POLYNOMIAL))
(setf (callers-list 'VARIABLE :setters) '(VARIABLE-INDEX DEGREE PARTIAL-DERIV
                                          SUBSTITUTE RESULTANT POLY-SIMP
                                          TRANSFORM PRINT-FORM MAKE-POLY
                                          GET-TPOWER-SERIES-DOMAIN MAKE-UNION
                                          GE-DERIV DECLARE-DEPENDENCIES
                                          SET-VARIABLE-PROPERTY
                                          GET-VARIABLE-PROPERTY ADD-SUBSCRIPTS
                                          MAKE-GE-VARIABLE REPARSE-PRINT-STRING
                                          ADD-NEW-VARIABLE
                                          SET-VARIABLE-DERIVATION
                                          SET-MINIMAL-POLYNOMIAL
                                          MINIMAL-POLYNOMIAL))
(setf (callers-list 'POLY-FORM :setters) '(MAKE-EPOLYNOMIAL
                                           SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'VAR-INDEX :setters) '(SCAN-POLY-FORM
                                           SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'STRING :setters) '(REPARSE-PRINT-STRING
                                        SET-MINIMAL-POLYNOMIAL))
(setf (callers-list 'X :setters) '(CLIST-EXPT-MOD-POLY CLIST-FACTOR-SQUAREFREE
                                   CLIST-EXTENDED-GCD CLIST-LCM CLIST-GCD
                                   CLIST-DIVIDE CLIST-REMAINDER CLIST-QUOTIENT
                                   CLIST-TIMES CLIST-DIFFERENCE CLIST-MINUS?
                                   CLIST-MINUS CLIST-PLUS SPARSEINTERPSTAGEI
                                   PSKELETON SOLVE-VANDERMONDETD
                                   SOLVE-VANDERMONDET POLY-DEGREE-VECTOR
                                   TERMS-DERIVATIVE POLY-HEIGHT
                                   POLY-TEST-QUOTIENT POLY-QUOTIENT
                                   POLY-QUOTIENT* POLY-TIMES TERMS-TIMES
                                   POLY-DIFFERENCE TERMS-DIFFERENCE TERMS-MINUS
                                   POLY-PLUS TERMS-PLUS POLY-SIMP EMAX EMINUS
                                   EODDP EMINUS? E/ E* E- E1- E1+ E+ E1? E0? E<
                                   E> E= TERMS0? MORE-MAIN-ORDER-NUMBER?
                                   POLY-COEF? CRITERION1 TERMS-S-POLY
                                   GTERMS-TIMES GTERMS-DIFFERENCE GTERMS-MINUS
                                   COLLECT-OLD-TERM GTERMS-PLUS EXTENDED-GCD
                                   EXTENDED-GCD* WITH-CONTAGION SQRT HEIGHT
                                   PHASE ABS USE-CHINESE-REMAINDER
                                   MAKE-GFM-DOMAIN MAKE-GFP-DOMAIN BF-ACOS
                                   BF-ASIN BF-ATAN BF-TAN BF-SIN BF-COS BF-LOG
                                   BF-EXP BF-PI-AGM BF-SQRT BF-PI-MACHIN
                                   BF-INTEGERP BIGFLOATP BINARY-LCM BINARY-GCD
                                   DIFFERENCE MINUS 0? PLUS RECIP 1? ONE EXPT
                                   BINARY>= BINARY> BINARY= COBOUNDARY BOUNDARY
                                   MAKE-CHAIN-OR-COCHAIN
                                   GET-DEFAULT-TAYLOR-EXPANSION COERCE
                                   NEXT-DOMAINS COMPOSE %MM-BOUNDARY REF
                                   STRUCTURE-OF TOTIENT INTEGER-NTH-ROOT
                                   MAKE-UNION GE-MINUS? GE-LGREAT GE-LEQUAL
                                   COERCE-OBJ ZEROP PLUSP MINUSP GE-GREAT
                                   GE-EQUAL INDEF-INTEGRAL SIMPSON INTEGRAL
                                   TRAPEZOIDAL DERIV-2POINT QUOTIENT TIMES
                                   POLYNOMIAL-INTERPOLATE SMOOTH2 RESAMPLE
                                   MAKE-SAMPLED-FUNCTION CANONICALIZE-FUNCTIONS
                                   MAKE-APP-FUNCTION DEFMETHOD-SD ITERATE
                                   ALG-POLY-TIMES))
(setf (callers-list 'Y :setters) '(CLIST-EXTENDED-GCD CLIST-LCM CLIST-GCD
                                   CLIST-DIVIDE CLIST-REMAINDER CLIST-QUOTIENT
                                   CLIST-TIMES CLIST-DIFFERENCE CLIST-PLUS
                                   INITY SPARSEINTERPSTAGEI POLY-DEGREE-VECTOR
                                   POLY-TEST-QUOTIENT POLY-QUOTIENT
                                   POLY-QUOTIENT* POLY-TIMES TERMS-TIMES
                                   POLY-DIFFERENCE TERMS-DIFFERENCE POLY-PLUS
                                   TERMS-PLUS EMAX E/ E* E- E+ E< E> E=
                                   MORE-MAIN-ORDER-NUMBER? TERMS-S-POLY
                                   GTERMS-TIMES GTERMS-DIFFERENCE
                                   COLLECT-OLD-TERM GTERMS-PLUS EXTENDED-GCD
                                   EXTENDED-GCD* WITH-CONTAGION SQRT RECIP
                                   HEIGHT PHASE ABS BF-ACOS BF-ATAN BF-SIN
                                   BF-COS BF-LOG BF-EXP BF-PI-AGM BF-SQRT
                                   BINARY-LCM BINARY-GCD DIFFERENCE PLUS EXPT
                                   TIMES BINARY>= BINARY> BINARY= COBOUNDARY
                                   BOUNDARY MAKE-CHAIN-OR-COCHAIN REF GE-LGREAT
                                   GE-LEQUAL INDEF-INTEGRAL SIMPSON INTEGRAL
                                   TRAPEZOIDAL DERIV-2POINT MAP SMOOTH2
                                   MAKE-SAMPLED-FUNCTION CANONICALIZE-FUNCTIONS
                                   DEFMETHOD-SD ALG-POLY-TIMES))
(setf (callers-list 'MIN-POLY :setters) '(MAKE-GFP-DOMAIN ALG-POLY-TIMES))
(setf (callers-list 'SEQ :setters) '(PERMUTE CHOOSE))
(setf (callers-list 'VARIABLES :setters) '(ADD-NEW-VARIABLE COEFFICIENT
                                           LIST-OF-VARIABLES
                                           GET-POLYNOMIAL-RING PRINT-OBJECT
                                           DERIV DEPENDS-ON?
                                           DECLARE-DEPENDENCIES FOURIER
                                           %CHOOSE-REPEATS %CHOOSE))
(setf (callers-list 'NUMBER :setters) '(ODDP? EVEN? SQRT INTEGER? PLUS?
                                        CONVERT-TO-LISP-NUMBER PHASE CONJUGATE
                                        MAKE-GFP-DOMAIN TRUNCATE1 ROUND1
                                        CEILING1 FLOOR1 BF-EXPT
                                        CONVERT-TO-BIGFLOAT PRINT-OBJECT
                                        CONVERT-NUMBER->CHARACTERS CONV!MT
                                        INCPREC! DECPREC! SIGNUM LOG LOG2 EXP
                                        ATANH ACOSH ASINH TANH COSH SINH ACOS
                                        ASIN TAN COS SIN FACTOR POWER-OF?
                                        PRIME? FACTORIAL DENOMINATOR NUMERATOR
                                        %CHOOSE-REPEATS %CHOOSE))
(setf (callers-list 'FUNCTION :setters) '(%MAP-OVER-CELLS MAP-OVER-ELEMENTS
                                          MAP-WITH-DOMAIN MAP WEYLI::DEFSUBST
                                          WEYLI::REDUCE WEYLI:MAP
                                          WEYLI::FUNCALL WEYLI::%FUNCALL
                                          WEYLI::APPLY WEYLI::%APPLY FUNCT
                                          MAKE-GE-FUNCT MAKE-FUNCTION-INTEGRATE
                                          MAKE-FUNCTION-DERIV INTEGRAL SMOOTH2
                                          MAKE-SAMPLED-FUNCTION-1
                                          %BIND-DYNAMIC-DOMAIN-CONTEXT
                                          MAP-OVER-EACH-NODE PERMUTE%
                                          %CHOOSE-REPEATS %CHOOSE))
(setf (callers-list 'VARS :setters) '(MAKE-MONOMIAL INTERPOLATE-FROM-SKEL
                                      SPMOD-GCD3 SPMOD-GCD2 SPMOD-GCD1
                                      SPARSEINTERPSTAGEI PSKELETON
                                      POLY-SKELETON INTERPOLATE
                                      ADD-NEW-VARIABLE POLY-FIND-COMMON-VARS
                                      POLY-SPLIT-ON-VARS COERCE DEGREE-BOUNDS
                                      PICK-NULL PICK))
(setf (callers-list 'N :setters) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                   CLIST-EXPT-MOD-POLY CLIST-FACTOR-SQUAREFREE
                                   CLIST-EXPTSQ POLY-EXPT POLY-EXPTSQ
                                   TERMS-TERM COERCE SQRT BF-ATAN BF-SIN BF-COS
                                   BF-LOG BF-EXP BF-E BF-PI-AGM BF-PI-MACHIN
                                   READ!NUM ROUND!LAST
                                   CONVERT-NUMBER->CHARACTERS PRINT-GROUPED
                                   SMITH-ARRAY HERMITE-ARRAY SO-N-PRINT-OBJECT
                                   O-N-PRINT-OBJECT SL-N-PRINT-OBJECT
                                   PSL-N-PRINT-OBJECT GL-N-PRINT-OBJECT
                                   FERMAT-INTEGER-FACTOR
                                   SIMPLE-INTEGER-FACTOR-INTERNAL
                                   SIMPLE-INTEGER-FACTOR ALL-DIVISORS FACTOR
                                   COUNT-MULTIPLE-INTEGER-FACTORS
                                   INTEGER-NTH-ROOT FASTER-ISQRT FACT
                                   EXPAND-BINOMIAL-FORM POLYNOMIAL-INTERPOLATE
                                   %PARTITION2 PART-INT %PARTITION1 PICK))
(setf (callers-list 'SO-FAR :setters) '(PICK-NULL PICK))
(setf (callers-list 'NEW-SO-FAR :setters) '(PICK-NULL))
(setf (callers-list 'LEN :setters) '(WEYL:MAKE-UPOLYNOMIAL PRECI!
                                                           TPS-SPREAD-COEFFS
                                                           CHECK-CACHED-VECTOR
                                                           PICK PICK-NULL))
(setf (callers-list 'SEQUENCE :setters) '(MAP-WITH-DOMAIN WEYLI::REDUCE
                                          WEYLI:MAP WEYLI:SUBSTITUTE PERMUTE%))
(setf (callers-list 'FUN :setters) '(MAKE-FUNCTION
                                     MAP-OVER-ARGLIST-COMBINATIONS
                                     CANONICALIZE-CLASS REQUIRED-OPERATIONS
                                     %PARTITION2 %PARTITION1))
(setf (callers-list 'MIN :setters) '(PART-INT))
(setf (callers-list 'LIST :setters) '(LIST-OF-VARIABLES LIST-COERCE
                                      CONVERT-LIST ORIENTED-SORT BOUNDARY
                                      COERCE MAKE-GENERATOR INSERT
                                      MEMBER-ROTATE ROTATE-LIST WEYLI:REPLACE
                                      WEYLI:MEMBER SEARCH-LIST
                                      SEARCH-FOR-FUNCTION REQUIRED-OPERATIONS
                                      PART-INT))
(setf (callers-list 'NUM-PARTS :setters) '(PARTITION %PARTITION2))
(setf (callers-list 'MINIMUM-PART :setters) '(PARTITION %PARTITION2))
(setf (callers-list 'MAXIMUM-PART :setters) '(PARTITION %PARTITION2))
(setf (callers-list 'DISTINCT? :setters) '(%PARTITION2))
(setf (callers-list 'PARTS :setters) '(PART-INT))
(setf (callers-list 'NODE :setters) '(SEARCH-NODE AVL-DELETE DELETE-RIGHT
                                      DELETE-LEFT ERASE-NODE DELETE-TAIL
                                      DELETE-HEAD AVL-INSERT BALANCE-LEFT
                                      BALANCE-RIGHT NEXT-LOOP FIND-RIGHT-MOST
                                      RIGHT-MOST NEW-NODE MAP-OVER
                                      FIND-LEFT-MOST LEFT-MOST UPDATE-NODE
                                      MAP-OVER-TREE))
(setf (callers-list 'COLLECTION-FUN :setters) '(MAP-OVER-TREE))
(setf (callers-list 'BREADTH-FIRST? :setters) '(MAP-OVER-TREE))
(setf (callers-list 'DEPTH-FIRST? :setters) '(MAP-OVER-TREE))
(setf (callers-list 'TREE :setters) '(DELETE-TAIL DELETE-HEAD INSERT
                                      AVL-MINIMUM MAKE-GENERATOR
                                      MAP-OVER-EACH-NODE AVL-MAXIMUM AVL-HEIGHT
                                      EMPTY? AVL-SIZE))
(setf (callers-list 'ROOT :setters) '(CLIST-PTH-ROOT EXPT SQRT INTEGER-NTH-ROOT
                                      DELETE MAP-OVER AVL-HEIGHT AVL-SIZE))
(setf (callers-list 'LEFT :setters) '(TRIANGULATE-TRIPLES UPDATE-NODE AVL-SIZE))
(setf (callers-list 'RIGHT :setters) '(TRIANGULATE-TRIPLES UPDATE-NODE AVL-SIZE))
(setf (callers-list 'BALANCE :setters) '(UPDATE-NODE))
(setf (callers-list 'ARGS :setters) '(MAKE-CLIST SET-REF REF
                                      DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                      DEFINE-PRIMITIVE-PROPERTY
                                      FLAT-TRIANGULATE STAR-TRIANGULATE
                                      TRIANGULATE-TRIPLES SPLIT ANGLE
                                      WEYLI::FUNCALL WEYLI::%FUNCALL
                                      WEYLI::APPLY WEYLI::ACCUM-APPLY-ARGS
                                      WEYLI::%APPLY SIMPLIFY FUNCT CHECK-DOMAIN
                                      MAKE-GE-FUNCT GET-FUNCTION
                                      DEFSIMPLIFY-FUNCT APPLY MAKE-APP-FUNCTION
                                      PARSE-ARGS DEFINE-DOMAIN-CREATOR TRUE
                                      FALSE INSERT UPDATE-NODE))
(setf (callers-list 'HL :setters) '(DO-BACKGROUND-BOX AVL-HEIGHT))
(setf (callers-list 'HR :setters) '(AVL-HEIGHT))
(setf (callers-list 'STACK :setters) '(MAKE-GENERATOR))
(setf (callers-list 'STATE :setters) '(SET-CURRENT-STATE))
(setf (callers-list 'KEY :setters) '(MEMBER INSERT %MAP-OVER-PROPERTIES
                                            MEMBER-ROTATE SET-VARIABLE-PROPERTY
                                            GET-VARIABLE-PROPERTY
                                            GET-MEMOIZATION SET-MEMOIZATION
                                            CANONICALIZE-CLASS LIST-OPERATIONS
                                            AVL-PREVIOUS AVL-NEXT))
(setf (callers-list 'TREE-OR-NODE :setters) '(AVL-PREVIOUS AVL-NEXT))
(setf (callers-list 'HEIGHT-CHANGE :setters) '(AVL-DELETE DELETE-RIGHT
                                               DELETE-LEFT ERASE-NODE
                                               DELETE-TAIL DELETE-HEAD
                                               AVL-INSERT BALANCE-LEFT
                                               BALANCE-RIGHT))
(setf (callers-list 'R :setters) '(CLIST-EXTENDED-GCD CLIST-REMAINDER
                                   CLIST-QUOTIENT POLY-QUOTIENT* ROUND2 ROUND1
                                   CEILING2 CEILING1 FLOOR2 FLOOR1 TRUNCATE2
                                   TRUNCATE1 BF-TAN BF-SIN BF-COS BF-EXP
                                   SMITH-ARRAY SMITH* HERMITE-ARRAY HERMITE*
                                   FASTER-ISQRT BALANCE-RIGHT))
(setf (callers-list 'LR :setters) '(BALANCE-RIGHT))
(setf (callers-list 'L :setters) '(INITY SPARSEINTERPSTAGEI POLY-C-COEFFICIENT
                                   POLY-COEFFICIENT POLY-DEGREE
                                   ACCUMULATE-ACCUMULATION-LIST
                                   INSERT-INTO-ACCUMULATION-LIST BF-LOG
                                   READ!LNUM RANDOM LTH-LOCAL-TERM
                                   REST-OF-LOCAL SHIFT-L-FORM*
                                   WHAT-IS-THE-LTHTERM SHIFT-M-FORM*
                                   SMITH-ARRAY BALANCE-LEFT))
(setf (callers-list 'RL :setters) '(BALANCE-LEFT))
(setf (callers-list 'ITEM :setters) '(GETQ INSERTQ SQR MEMBER-ROTATE
                                      WEYLI:REPLACE WEYLI:MEMBER WEYLI:DELETE
                                      MEMBER DELETE INSERT))
(setf (callers-list 'SUBTREE :setters) '(AVL-DELETE ERASE-NODE AVL-INSERT))
(setf (callers-list 'TAIL :setters) '(DELETE-TAIL DELETE-HEAD))
(setf (callers-list 'NEW-ROOT :setters) '(INTEGER-NTH-ROOT DELETE-TAIL
                                          DELETE-HEAD))
(setf (callers-list 'HEAD-VALUE :setters) '(DELETE-HEAD))
(setf (callers-list 'SUBNODE :setters) '(DELETE-TAIL DELETE-HEAD))
(setf (callers-list 'TAIL-VALUE :setters) '(DELETE-TAIL))
(setf (callers-list 'HEAD-NODE :setters) '(ERASE-NODE))
(setf (callers-list 'TAIL-NODE :setters) '(ERASE-NODE))
(setf (callers-list 'PARENT :setters) '(DELETE-RIGHT DELETE-LEFT))
(setf (callers-list 'NEW-LEFT :setters) '(DELETE-LEFT))
(setf (callers-list 'NEW-RIGHT :setters) '(DELETE-RIGHT))
(setf (callers-list 'D :setters) '(CLIST-EXTENDED-GCD SPARSEINTERPSTAGEI
                                   SPARSEINTERPSTAGE DEGREE-PARTITION POLY-MGCD
                                   GET-POLYNOMIAL-RING
                                   POLYNOMIAL-RING-PRINT-OBJECT EXTENDED-GCD
                                   EXTENDED-GCD* SQRT
                                   COMPLEX-NUMBERS-PRINT-OBJECT
                                   REAL-NUMBERS-PRINT-OBJECT
                                   RATIONAL-NUMBERS-PRINT-OBJECT
                                   RATIONAL-INTEGERS-PRINT-OBJECT
                                   GET-FINITE-FIELD GFP-PRINT-OBJECT
                                   GET-TPOWER-SERIES-DOMAIN
                                   TP-RING-PRINT-OBJECT TP-FIELD-PRINT-OBJECT
                                   MAKE-COCHAIN MAKE-CHAIN
                                   MAKE-CHAIN-OR-COCHAIN GET-MORPHISMS-TO
                                   GET-MORPHISMS-FROM ARC PROCESSI SMITH-ARRAY
                                   HERMITE-ARRAY FIND-PIVOT HADAMARD-BOUND
                                   DEGREE-BOUNDS DOMAIN-PRINT-OBJECT
                                   GET-DIRECT-SUM ITERATE
                                   DIFFERENTIAL-RING-PRINT-OBJECT))
(setf (callers-list 'STREAM :setters) '(PRINT-FREE-MODULE-ELEMENT
                                        FREE-MODULE-PRINT-OBJECT
                                        UNIT-QUATERNION-DOMAIN-PRINT-OBJECT
                                        QUATERNION-DOMAIN-PRINT-OBJECT
                                        PROJECTIVE-SPACE-PRINT-OBJECT
                                        PRINT-UPOLYNOMIAL
                                        PRINT-MPOLYNOMIAL-FORM
                                        POLYNOMIAL-RING-PRINT-OBJECT
                                        IDEAL-PRINT-OBJECT
                                        COMPLEX-NUMBERS-PRINT-OBJECT
                                        REAL-NUMBERS-PRINT-OBJECT
                                        RATIONAL-NUMBERS-PRINT-OBJECT
                                        RATIONAL-INTEGERS-PRINT-OBJECT
                                        GF2^N-PRINT-OBJECT GFP-PRINT-OBJECT
                                        HILBERT-SPACE-PRINT-OBJECT
                                        FUNCTION-SPACE-PRINT-OBJECT
                                        FACTOR-DOMAIN-PRINT-OBJECT
                                        PRINT-TPOWER-SERIES PRINT-EXPONENT
                                        PRINT-GROUPED TP-RING-PRINT-OBJECT
                                        TP-FIELD-PRINT-OBJECT
                                        COCHAIN-MODULE-PRINT-OBJECT
                                        CHAIN-MODULE-PRINT-OBJECT
                                        EUCLIDEAN-SPACE-PRINT-OBJECT
                                        SET-WITH-ELEMENT-LIST-PRINT-OBJECT
                                        RATFUN-FIELD-PRINT-OBJECT
                                        QUOTIENT-FIELD-PRINT-OBJECT READ-MESH
                                        WRITE-MESH WRITE-VERTEX-SET FWRITE
                                        READ-SIZE-TABLE READ-REGION-POINTS
                                        READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                        READ-SIMPLICIAL-COMPLEX READ-VERTEX-SET
                                        READ-POINT MAKE-MESH-FROM-FILE
                                        SO-N-PRINT-OBJECT O-N-PRINT-OBJECT
                                        SL-N-PRINT-OBJECT PSL-N-PRINT-OBJECT
                                        GL-N-PRINT-OBJECT
                                        MATRIX-SPACE-PRINT-OBJECT
                                        UQ-SET-PRINT-OBJECT SAFE-DISPLAY
                                        PARENTHESIZED-DISPLAY DISPLAY-LIST
                                        DISPLAY DOMAIN-PRINT-OBJECT
                                        DIRECT-SUM-PRINT-OBJECT
                                        DIFFERENTIAL-RING-PRINT-OBJECT))
(setf (callers-list 'DERIVATION :setters) '(POLY-DIFFERENTIATE-COEFS
                                            POLY-DERIVATION
                                            SET-VARIABLE-DERIVATION))
(setf (callers-list 'P :setters) '(CLIST-FACTOR-SQUAREFREE CLIST-PTH-ROOT
                                   CLIST-FACTOR POLY-GCDU SPMOD-GCD3 SPMOD-GCD2
                                   SPMOD-GCD1 SPMOD-GCD INTERPOLATE
                                   P-LIST-OF-VARS POLY-LIST-OF-VARIABLES
                                   POLY-DEGREE-VECTOR POLY-DEGREE
                                   POLY-MAX-COEFFICIENT POLY-DERIVATIVE
                                   POLY-VARIABLE-LIST POLY-RESULTANT
                                   POLY-SUBRESULTANT-GCD POLY-REDUCED-GCD
                                   POLY-PRIMITIVE-GCD POLY-EUCLIDEAN-GCD
                                   POLY-MONICIZE POLY-PRIM-PART TERMS-PRIM-PART
                                   POLY-CONTENT-AND-PRIM-PART POLY-LCM POLY-GCD
                                   POLY-CONTENT TERMS-CONTENT
                                   POLY-FACTOR-CBOUND POLY-PSEUDO-REMAINDER
                                   POLY-EXPT POLY-EXPTSQ POLY-MINUS? POLY-MINUS
                                   PRINT-MPOLYNOMIAL-FORM MAKE-MEAN-POINT
                                   WITH-OPEN-MODULAR-ARITH CHOICE-PRIMES
                                   NEWPRIME FIND-SMALLER-PRIME PRIME?
                                   POLYNOMIAL-INTERPOLATE
                                   POLY-DIFFERENTIATE-COEFS POLY-DERIVATION
                                   STANDARD-DERIVATION))
(setf (callers-list 'DERIV :setters) '(CLIST-DERIV CLIST-SQFR-DECOMPOSE DERIV
                                       ADD-FUNCTION-TO-DOMAIN POLY-DERIVATION
                                       STANDARD-DERIVATION))
(setf (callers-list 'OLD-VAR :setters) '(STANDARD-DERIVATION))
(setf (callers-list 'NEW-ORDER :setters) '(TAYLOR1 STANDARD-DERIVATION))
(setf (callers-list 'NEW-VAR :setters) '(STANDARD-DERIVATION))
(setf (callers-list 'NEW-VAR-NUM :setters) '(STANDARD-DERIVATION))
(setf (callers-list 'TEMP :setters) '(MAKE-DEGREE-MATRIX TERMS-SUBST POLY-SUBST
                                      CRITERION1 TERMS-S-POLY TIMES TAYLOR1
                                      RATIONAL-POLY-SUBST COERCE EXPAND-OTHER
                                      REPARSE-PRINT-STRING POLY-DERIVATION))
(setf (callers-list 'DC :setters) '(POLY-DERIVATIVE POLY-DIFFERENTIATE-COEFS))
(setf (callers-list 'ONE :setters) '(INTERPOLATE-FROM-SKEL RESULTANT BF-ASIN
                                     BF-ATAN BF-TAN BF-LOG BF-EXP
                                     INITIALIZE-INSTANCE BOUNDARY COERCE
                                     SUBSTITUTE SPARSE-DETERMINANT ONE-MATRIX
                                     REPEATED-SQUARING POLY-DIFFERENTIATE-COEFS))
(setf (callers-list 'TERMS :setters) '(TERMS-LIST-OF-VARS TERMS-DEGREE-VECTOR
                                       DEGREE TERMS-MAX-COEFFICIENT
                                       POLY-VARIABLE-LIST TERMS-HORNERS-RULE
                                       TERMS-SUBST TERMS-COERCE TERMS-MONICIZE
                                       TERMS-CQUOTIENT TERMS-MINUS? TERMS-TERM
                                       PRINT-FORM TRANSFORM ACCUMULATE-TERMS
                                       MAP-OVER-EACH-TERM MAKE-POLY MAKE-TERMS
                                       RED LT LC LE MAKE-POLY-FORM TERMS-REDUCE
                                       TERMS-S-POLY GTERMS-EXPT
                                       GTERMS-DIFFERENCE COLLECT-OLD-TERM
                                       GTERMS-PLUS MAKE-POLYNOMIAL
                                       MAKE-EPOLYNOMIAL*
                                       FREE-GROUP-SCALAR-TIMES PRINT-TERM
                                       PARTIAL-DERIV
                                       RATIONAL-TERMS-HORNERS-RULE
                                       DELETE-PROPERTY TEST-PROPERTY
                                       ASSERT-PROPERTY EXPAND-BINOMIAL-FORM
                                       EXPAND EXPAND-PRODUCT1 PRINT-OBJECT
                                       LOOP-OVER-TERMS MERGE-TERMS-IN-SUM
                                       MAKE-GE-TIMES MAKE-GE-PLUS GE-FOURIER
                                       POLY-DIFFERENTIATE-COEFS))
(setf (callers-list 'SUM :setters) '(TRANSFORM ACCUMULATE-ACCUMULATION-LIST
                                     TERMS-S-POLY GTERMS-DIFFERENCE
                                     COLLECT-OLD-TERM GTERMS-PLUS COERCE
                                     TAYLOR1 EXPAND-BINOMIAL-FORM
                                     INDEF-INTEGRAL INTEGRAL
                                     POLY-DIFFERENTIATE-COEFS))
(setf (callers-list 'DOMAIN1 :setters) '(GET-DIRECT-SUM MAKE-DIRECT-SUM
                                         MAKE-DIRECT-SUM* %MAKE-DIRECT-SUM))
(setf (callers-list 'DOMAIN2 :setters) '(%MAKE-DIRECT-SUM))
(setf (callers-list 'DOMAIN-NAME :setters) '(DEFINE-DIRECT-SUM))
(setf (callers-list 'CLASSES :setters) '(DEFINE-DIRECT-SUM))
(setf (callers-list 'OTHER-DOMAIN-CLASSES :setters) '(DEFINE-DIRECT-SUM))
(setf (callers-list 'OTHER-ELT-CLASSES :setters) '(DEFINE-DIRECT-SUM))
(setf (callers-list 'DS-DOMAIN :setters) '(DEFINE-DIRECT-SUM))
(setf (callers-list 'DS-DOMAIN-ELT :setters) '(DEFINE-DIRECT-SUM))
(setf (callers-list 'DOMAINS :setters) '(NEXT-DOMAINS GET-EMBEDDABLE-DOMAINS
                                         GET-DIRECT-SUM MAKE-DIRECT-SUM
                                         MAKE-DIRECT-SUM*))
(setf (callers-list 'VALUES :setters) '(MAKE-POINT MAP WEYL:MAKE-ELEMENT
                                        MAKE-ELEMENT WEYLI::%LCM WEYLI::LCM
                                        WEYLI::%GCD WEYLI:GCD WEYLI:%QUOTIENT
                                        WEYLI:/ WEYLI:%TIMES WEYLI:*
                                        WEYLI:%DIFFERENCE WEYLI:- WEYLI:%PLUS
                                        WEYLI:+ WEYLI:%MIN WEYLI:MIN WEYLI:%MAX
                                        WEYLI:MAX ASSOCIATE-OPERATION WEYLI:>=
                                        WEYLI:<= WEYLI:> WEYLI:= WEYLI:<
                                        ASSOCIATE-PREDICATE ITERATE))
(setf (callers-list 'Z :setters) '(MAKE-GFM-DOMAIN MAKE-GFP-DOMAIN BF-ATAN
                                   BF-LOG ITERATE))
(setf (callers-list 'TYPE :setters) '(BOUND-DEGREE-TERM-COUNT MAP-WITH-DOMAIN
                                      MAP GET-MORPHISMS %MM-BOUNDARY
                                      MERGE-BOUND-VARS
                                      %MAKE-DIRECT-SUM-INTERNAL))
(setf (callers-list 'A :setters) '(CROSS-PRODUCT CLIST-EXPT-MOD-POLY
                                   CLIST-EXTENDED-GCD CLIST-GCD ADD-UNDONE
                                   EXTENDED-GCD* BF-EXPT COERCE GROUPED?
                                   POINTS-ORDER TPS-DERIV2 TPS-DERIV1
                                   SUBSTITUTE ARC MEASURE BOUNDING-BOX BEND
                                   CIRCLE-CENTER COMPLEX-CIRCUMCENTER
                                   SMITH-ARRAY SMITH* HERMITE-ARRAY HERMITE*
                                   WEYLI::TRUNCATE WEYLI::ROUND WEYLI::CEILING
                                   WEYLI::FLOOR UNIFORMIZE-FACTOR-LIST SYM-MOD
                                   EXPT-MODULO-INTEGER EXPAND-BINOMIAL-FORM
                                   ADD-SUBSCRIPTS SIMPSON ADD-DOMAIN-INTERNAL
                                   DOMAIN-LIST %MAKE-DIRECT-SUM-INTERNAL))
(setf (callers-list 'B :setters) '(CROSS-PRODUCT CLIST-EXPT-MOD-POLY
                                   CLIST-EXTENDED-GCD CLIST-GCD SPMOD-GCD
                                   SPARSEINTERPSTAGEI POLY-EXPT ADD-UNDONE
                                   EXTENDED-GCD* BF-EXPT COERCE
                                   TPS-SPREAD-COEFFS GROUPED? POINTS-ORDER
                                   SUBSTITUTE ARC MEASURE BOUNDING-BOX BEND
                                   CIRCLE-CENTER COMPLEX-CIRCUMCENTER
                                   SMITH-ARRAY HERMITE-ARRAY WEYLI::TRUNCATE
                                   WEYLI::ROUND WEYLI::CEILING WEYLI::FLOOR
                                   UNIFORMIZE-FACTOR-LIST SYM-MOD
                                   EXPT-MODULO-INTEGER EXPAND-BINOMIAL-FORM
                                   ADD-SUBSCRIPTS SIMPSON ADD-DOMAIN-INTERNAL
                                   %MAKE-DIRECT-SUM-INTERNAL))
(setf (callers-list 'V :setters) '(DEGREE-PARTITION TERMS-SUBRESULTANT-GCD
                                   TERMS-REDUCED-GCD TERMS-PRIMITIVE-GCD
                                   TERMS-EUCLIDEAN-GCD POLY-TRUNCATE2
                                   TERMS-PSEUDO-REMAINDER TERMS-QUOTIENT
                                   PRINT-TERM BF-PI-AGM INITIALIZE-INSTANCE
                                   TPS-VAR-COEFFS TPS-VAR-ORDER TPS-VAR-BO
                                   TPS-VAR-VAL VERTICES-SORTED-BY-ANGLE ANGLE
                                   CIRCUMCENTER FLAT-TRIANGULATE
                                   STAR-TRIANGULATE MAKE-CURVED-SEGMENT ARC
                                   PROCESSI SMITH-ARRAY HERMITE-ARRAY
                                   FME-MATRIX-TIMES MATRIX-FME-TIMES
                                   FERMAT-INTEGER-FACTOR DECLARE-DEPENDENCIES
                                   1? 0?))
(setf (callers-list 'OPERATION-LIST :setters) '(PARSE-OPERATION-LIST))
(setf (callers-list 'OPS :setters) '(LIST-OPERATIONS))
(setf (callers-list 'VALUE :setters) '(MAKE-ELEMENT-FREE-MODULE-VECTOR
                                       CONJUGATE MAKE-PROJECTIVE-SPACE-ELEMENT
                                       SET-VARIABLE-NUMBER-PROPERTY
                                       TERMS-HORNERS-RULE TRANSFORM
                                       COMPUTE-INVERSE COERCE MAKE-POINT
                                       TAYLOR1 INITIALIZE-INSTANCE
                                       RATIONAL-TERMS-HORNERS-RULE
                                       %MAP-OVER-PROPERTIES WEYLI::PUTF
                                       REDUCE-MODULO-INTEGER SUBSTITUTE
                                       SET-VARIABLE-PROPERTY SET-MEMOIZATION
                                       CANONICALIZE-CLASS LIST-OPERATIONS))
(setf (callers-list 'OPERATION :setters) '(ASSOCIATE-OPERATION OPERATION-VALUES
                                                               OPERATION-ARGUMENTS))
(setf (callers-list 'NO-COMPLAINTS :setters) '(DESCRIBE-OPERATIONS))
(setf (callers-list 'CLASS-NAME :setters) '(REQUIRED-OPERATIONS
                                            DESCRIBE-OPERATIONS))
(setf (callers-list 'ELEMENT-CLASSES :setters) '(REQUIRED-OPERATIONS
                                                 DESCRIBE-OPERATIONS))
(setf (callers-list 'DOMAIN-ELEMENT :setters) '(REQUIRED-OPERATIONS
                                                DESCRIBE-OPERATIONS))
(setf (callers-list 'NAME :setters) '(MAKE-COMPARISON-FUN GET-COMPARISON-FUN
                                      DEFINE-BFLOAT-CONSTANT
                                      DEFINE-TAYLOR-EXPANSION-FUN
                                      PREDICATE-FUNCTION-NAME
                                      ASSERT-FUNCTION-NAME DEFINE-MATH-OPERATOR
                                      MATH-OPERATOR DEFMESH %MM-BOUNDARY
                                      NAME-REGION INSERT-BOUNDARY ALL-NAMES
                                      INSERT %SET-NAME SUBSTITUTE
                                      ADD-FUNCTION-TO-DOMAIN MAKE-FUNCTION
                                      GET-FUNCTION SEARCH-FOR-FUNCTION
                                      DEFDERIV-FUNCT DEFSIMPLIFY-FUNCT
                                      DEF-GE-1OPER DEFINE-DOMAIN-CREATOR
                                      CANONICALIZE-CLASS))
(setf (callers-list 'FORM :setters) '(COERCE MAKE-UPOLYNOMIAL PRINT-FORM
                                             TRANSFORM MAKE-POLYNOMIAL 1?
                                             SCAN-POLY-FORM LTH-LOCAL-TERM
                                             REST-OF-LOCAL LOCALIZE-FORM*
                                             LOCALIZE-FORM WHAT-IS-THE-LTHTERM2
                                             SHIFT-L-FORM* SHIFT-L-FORM
                                             WHAT-IS-THE-LTHTERM SHIFT-M-FORM*
                                             SHIFT-M-FORM KTHTERM THE-KTHTERM
                                             CANONICALIZE-CLASS))
(setf (callers-list 'SELF :setters) '(MAP-OVER-ARGLIST-COMBINATIONS))
(setf (callers-list 'ARGLIST :setters) '(RECUR MAP-OVER-ARGLIST-COMBINATIONS))
(setf (callers-list 'TYPES :setters) '(RECUR))
(setf (callers-list '*DOMAINS* :setters) '(RESET-DOMAINS))
(setf (callers-list 'PREDICATE :setters) '(ASSOCIATE-PREDICATE
                                           DEFINE-DOMAIN-CREATOR
                                           ADD-DOMAIN-INTERNAL ADD-DOMAIN))
(setf (callers-list 'BODY :setters) '(WITH-TPOWER-SERIES MAKE-PREDICATE APPLY
                                      MAKE-APP-FUNCTION DEFINE-DOMAIN-CREATOR
                                      ADD-DOMAIN-INTERNAL))
(setf (callers-list 'CREATOR :setters) '(DEFINE-DOMAIN-CREATOR))
(setf (callers-list 'INTERNAL-FUN :setters) '(PARSE-ARGS))
(setf (callers-list 'TRUE-ARGS :setters) '(PARSE-ARGS))
(setf (callers-list 'ELT :setters) '(PRINT-FREE-MODULE-ELEMENT
                                     CANONICALIZE-NUMBER COERCIBLE? COERCE))
(setf (callers-list 'OP :setters) '(EXTERNAL-NAME INTERNAL-NAME
                                    DEF-BINARY-COERCION
                                    DEFINE-GE2-STANDARD-METHODS DEFMETHOD-SD))
(setf (callers-list 'ARGUMENT :setters) '(APPLY-MORPHISM MAKE-GE-IFOURIER
                                          MAKE-GE-FOURIER))
(setf (callers-list 'SVAR :setters) '(MAKE-GE-IFOURIER GE-FOURIER
                                      MAKE-GE-FOURIER))
(setf (callers-list 'FVAR :setters) '(MAKE-GE-IFOURIER GE-FOURIER
                                      MAKE-GE-FOURIER))
(setf (callers-list 'EXP :setters) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                     CLIST-DERIV CLIST-DIFFERENCE CLIST-MINUS
                                     ZIPPER-SUM CLIST-PLUS COERCE PRINT-TERM
                                     CLIST-GET MAKE-MONOMIAL POLY-C-COEFFICIENT
                                     POLY-COEFFICIENT TERMS-QUOTIENT
                                     GTERMS-EXPT MAKE-ETERM SCAN-POLY-FORM
                                     TAYLOR1 TAYLOR EXPT-QUOTIENT
                                     REPEATED-SQUARING EXPAND-PRODUCT
                                     DIFFERENT-KERNELS DERIV SIMPLIFY
                                     LOOP-OVER-TERMS MAKE-GE-EXPT FOURIER
                                     GE-FOURIER))
(setf (callers-list 'DEPEND-TERM :setters) '(GE-FOURIER))
(setf (callers-list 'FREE-TERMS :setters) '(GE-FOURIER))
(setf (callers-list 'EXPRESSION :setters) '(EXPAND DIFFERENT-KERNELS MAKE-UNION
                                            DERIV GE-DERIV DEPENDS-ON? SIMPLIFY
                                            DISPLAY MEMOIZE %MEMOIZE FOURIER))
(setf (callers-list 'OLD-VARS :setters) '(MAKE-APP-FUNCTION))
(setf (callers-list 'NEW-VARS :setters) '(MAKE-APP-FUNCTION))
(setf (callers-list 'X-BODY :setters) '(CANONICALIZE-FUNCTIONS))
(setf (callers-list 'Y-BODY :setters) '(CANONICALIZE-FUNCTIONS))
(setf (callers-list 'OPERATOR :setters) '(DEFINE-APPLICABLE-FUNCTION-BINARY))
(setf (callers-list 'MAKER-NAME :setters) '(DEFINE-TAYLOR-EXPANSION-FUN
                                            DEF-GE-1OPER))
(setf (callers-list 'PREDICATE-NAME :setters) '(DEFINE-MATH-PROPERTY
                                                DEF-GE-1OPER))
(setf (callers-list 'SIMP-NAME :setters) '(DEFSIMPLIFY-FUNCT))
(setf (callers-list 'FUN-NAME :setters) '(DEFDERIV-FUNCT))
(setf (callers-list 'VECTOR :setters) '(MULTIPLY-VECTOR-BY-SCALAR
                                        WEYL:MAKE-ELEMENT MAP-FUN PROJECT
                                        MAKE-POLYNOMIAL-MORPHISM
                                        MAKE-PARAMETER-SPACE COORDINATE-LIST
                                        COMPLEXER CHECK-CACHED-VECTOR))
(setf (callers-list 'VECT :setters) '(TILDE EQUAL-VECTOR))
(setf (callers-list '*CACHED-VECTORS* :setters) '(EQUAL-VECTOR))
(setf (callers-list 'X-COORDS :setters) '(PRINT-OBJECT))
(setf (callers-list 'NPTS :setters) '(PRINT-OBJECT))
(setf (callers-list 'X-ARRAY :setters) '(DERIV MAKE-SAMPLED-FUNCTION-1
                                         PRINT-TABLE))
(setf (callers-list 'Y-ARRAY :setters) '(DERIV MAKE-SAMPLED-FUNCTION-1
                                         PRINT-TABLE))
(setf (callers-list 'X-LIST :setters) '(MAKE-SAMPLED-FUNCTION-1))
(setf (callers-list 'NUM-PTS :setters) '(INDEF-INTEGRAL INTEGRAL DERIV
                                         MAKE-SAMPLED-FUNCTION-1))
(setf (callers-list 'RANGE :setters) '(MAKE-POLYNOMIAL-MORPHISM
                                       MAKE-AUTOMORPHISM GET-HOMOMORPHISMS
                                       MAKE-HOMOMORPHISM DELETE-MORPHISM
                                       MAKE-MORPHISM GET-MORPHISMS SIMPSON
                                       MAKE-SAMPLED-FUNCTION-1))
(setf (callers-list 'F-X :setters) '(RESAMPLE))
(setf (callers-list 'X0 :setters) '(RESAMPLE))
(setf (callers-list 'STEP :setters) '(RESAMPLE))
(setf (callers-list 'NEW-Y :setters) '(MAP SMOOTH2))
(setf (callers-list 'X-VECTOR :setters) '(POLYNOMIAL-INTERPOLATE))
(setf (callers-list 'Y-VECTOR :setters) '(POLYNOMIAL-INTERPOLATE))
(setf (callers-list 'DIF :setters) '(POLYNOMIAL-INTERPOLATE))
(setf (callers-list 'NS :setters) '(POLYNOMIAL-INTERPOLATE))
(setf (callers-list 'VECTOR-LENGTH :setters) '(POLYNOMIAL-INTERPOLATE))
(setf (callers-list 'OFFSET :setters) '(POLYNOMIAL-INTERPOLATE))
(setf (callers-list 'I :setters) '(MAKE-ETERM CONVERT-TERM MULTIPLICATIVE-ORDER
                                   READ!NUM PROCESSI FIND-PIVOT EXCHANGE-ROWS
                                   FIND-PIVOT-UNORDERED FIND-PIVOT-ORDERED
                                   DERIV MAP))
(setf (callers-list 'INDEX1 :setters) '(DERIV-2POINT))
(setf (callers-list 'INDEX2 :setters) '(DERIV-2POINT))
(setf (callers-list 'Y-PRIME :setters) '(DERIV))
(setf (callers-list 'I1 :setters) '(INDEF-INTEGRAL SIMPSON INTEGRAL TRAPEZOIDAL))
(setf (callers-list 'I2 :setters) '(INDEF-INTEGRAL SIMPSON INTEGRAL TRAPEZOIDAL))
(setf (callers-list 'LOWER :setters) '(INTEGRAL))
(setf (callers-list 'UPPER :setters) '(INTEGRAL))
(setf (callers-list 'I3 :setters) '(INDEF-INTEGRAL SIMPSON))
(setf (callers-list 'X1 :setters) '(SIMPSON))
(setf (callers-list 'X2 :setters) '(SIMPSON))
(setf (callers-list 'X3 :setters) '(SIMPSON))
(setf (callers-list 'H :setters) '(TERMS-SUBRESULTANT-GCD POLY-HEIGHT
                                   REDUCE-ALL CRITERION1
                                   HILBERT-SPACE-PRINT-OBJECT
                                   FUNCTION-SPACE-PRINT-OBJECT
                                   MAKE-HOMOMORPHISM MAKE-MORPHISM SIMPSON))
(setf (callers-list 'K :setters) '(INITY SPARSEINTERPSTAGEI SPARSEINTERPSTAGE
                                   SOLVE-VANDERMONDETD SOLVE-VANDERMONDET
                                   TERMS-PSEUDO-REMAINDER BF-ACOS BF-ASIN
                                   BF-ATAN BF-TAN BF-SIN BF-COS BF-LOG BF-EXP
                                   BF-PI-AGM BF-SQRT BF-PI-MACHIN GET!CONST
                                   BF-EXPT BF-QUOTIENT BFPRIN1 PRINT-OBJECT
                                   ROUND!EP ROUND!MT CUT!EP CUT!MT CONV!EP
                                   CONV!MT INCPREC! DECPREC! EXPT
                                   LTH-LOCAL-TERM LOCALIZE-FORM*
                                   WHAT-IS-THE-LTHTERM2 WHAT-IS-THE-LTHTERM
                                   KTHTERM THE-KTHTERM SMITH-ARRAY
                                   HERMITE-ARRAY EXCHANGE-ROWS SIMPSON))
(setf (callers-list 'DENOM :setters) '(TERMS-INTERPOLATE RECIP SIMPSON))
(setf (callers-list 'KSQ :setters) '(SIMPSON))
(setf (callers-list 'HSQ :setters) '(SIMPSON))
(setf (callers-list 'Y1 :setters) '(COMPUTE-INVERSE SIMPSON))
(setf (callers-list 'Y2 :setters) '(COMPUTE-INVERSE SIMPSON))
(setf (callers-list 'Y3 :setters) '(SIMPSON))
(setf (callers-list 'C :setters) '(CLIST-DIVIDE CLIST-EXPTSQ CLIST-SIMPLIFY
                                   CLIST-LENGTH CLIST-ZERO-DEG? CLIST-DEGREE
                                   COPY-CLIST MAKE-MONOMIAL INTERPOLATE
                                   PARSE-LINEAR-EQUATION TERMS-CQUOTIENT
                                   POLY-EXPT TERMS-TIMES TERMS-MON-TIMES
                                   PRINT-FORM MAKE-TERMS GTERMS-TIMES
                                   GTERMS-MON-TIMES PRINT-OBJECT
                                   MAKE-EPOLYNOMIAL PRINT-TERM
                                   FREE-GROUP-SCALAR-TIMES DO-BACKGROUND-BOX
                                   ARC MEASURE BOUNDING-BOX BEND
                                   COMPLEX-CIRCUMCENTER PROCESSI SYM-MOD
                                   SIMPSON))
(setf (callers-list 'FUNC :setters) '(INDEF-INTEGRAL))
(setf (callers-list 'INT-Y :setters) '(INDEF-INTEGRAL))
(setf (callers-list 'W1 :setters) '(INDEF-INTEGRAL))
(setf (callers-list 'W2 :setters) '(INDEF-INTEGRAL))
(setf (callers-list 'IGNORE :setters) '(FWRITE DISTANCE ALL-NAMES SUBSTITUTE
                                        DISPLAY))
(setf (callers-list 'EXPRESSION1 :setters) '(GE-GREAT GE-EQUAL))
(setf (callers-list 'EXPRESSION2 :setters) '(GE-GREAT GE-EQUAL))
(setf (callers-list 'SYM :setters) '(PRINT-OBJECT))
(setf (callers-list 'SUBSCRIPTS :setters) '(ADD-SUBSCRIPTS))
(setf (callers-list 'SYMBOL :setters) '(ADD-SUBSCRIPTS))
(setf (callers-list 'CANONICAL-VAR :setters) '(ADD-SUBSCRIPTS))
(setf (callers-list 'NARGS :setters) '(ADD-FUNCTION-TO-DOMAIN MAKE-FUNCTION
                                       SEARCH-FOR-FUNCTION))
(setf (callers-list 'DERIVS :setters) '(MAKE-FUNCTION-INTEGRATE
                                        ADD-FUNCTION-TO-DOMAIN))
(setf (callers-list 'FUNCTION-CLASS :setters) '(ADD-FUNCTION-TO-DOMAIN))
(setf (callers-list 'DERIVATIVE :setters) '(MAKE-FUNCTION-DERIV))
(setf (callers-list 'INTEGRAND :setters) '(MAKE-FUNCTION-INTEGRATE))
(setf (callers-list 'DOM :setters) '(CHECK-DOMAIN))
(setf (callers-list 'Q :setters) '(CLIST-EXTENDED-GCD CLIST-REMAINDER
                                   CLIST-QUOTIENT POLY-GCDU SPMOD-GCD3
                                   SPMOD-GCD2 SPMOD-GCD1 SPMOD-GCD
                                   SOLVE-VANDERMONDETD SOLVE-VANDERMONDET
                                   SOLVE-VANDERMONDE POLY-RESULTANT
                                   POLY-SUBRESULTANT-GCD POLY-REDUCED-GCD
                                   POLY-PRIMITIVE-GCD POLY-EUCLIDEAN-GCD
                                   POLY-LCM POLY-GCD TERMS-COEF-REMAINDER
                                   POLY-PSEUDO-REMAINDER POLY-QUOTIENT* ROUND2
                                   ROUND1 CEILING2 CEILING1 FLOOR2 FLOOR1
                                   TRUNCATE2 TRUNCATE1 COMPUTE-INVERSE BF-TAN
                                   BF-SIN BF-COS BF-EXP HERMITE-ARRAY
                                   FASTER-ISQRT SUBSTITUTE FUNCT))
(setf (callers-list 'OBJECTS :setters) '(DISPLAY-LIST))
(setf (callers-list 'CNT :setters) '(LOOP-VECTOR-BIND DISPLAY-LIST))
(setf (callers-list 'SIMPLIFIER :setters) '(SIMPLIFY))
(setf (callers-list 'NEW-X :setters) '(SIMPLIFY))
(setf (callers-list '*GENERAL* :setters) '(INITIALIZE-CONTEXTS))
(setf (callers-list 'BASE :setters) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                      EXPT-LIST LOG2 REPEATED-SQUARING
                                      EXPT-MODULO-INTEGER EXPAND SIMPLIFY
                                      LOOP-OVER-TERMS MAKE-GE-EXPT))
(setf (callers-list 'EXPR :setters) '(SUBSTITUTE MERGE-NEW-BV SAFE-DISPLAY
                                                 PARENTHESIZED-DISPLAY))
(setf (callers-list 'OBJECT :setters) '(SCALAR? MINUS? HEIGHT REAL?))
(setf (callers-list 'LEAD-TERM :setters) '(GE-MINUS?))
(setf (callers-list 'OLD-TERMS :setters) '(SIMP-TIMES-TERMS SIMP-PLUS-TERMS))
(setf (callers-list 'CONST :setters) '(SIMP-TIMES-TERMS LOOP-OVER-TERMS
                                       SIMP-PLUS-TERMS))
(setf (callers-list 'TERM :setters) '(GTERM-CONSTANT? GTERMS-MON-TIMES
                                      COLLECT-OLD-TERM MAKE-ETERM
                                      TRANSFORM-TERM CONVERT-TERM
                                      MAKE-EPOLYNOMIAL EXPAND EXPAND-OTHER
                                      EXPAND-PLUS LOOP-OVER-TERMS))
(setf (callers-list 'DEPENDS :setters) '(DECLARE-DEPENDENCIES))
(setf (callers-list 'LHS :setters) '(EQN>= MAKE-GE-EQN>= EQN> MAKE-GE-EQN> EQN=
                                     MAKE-GE-EQN=))
(setf (callers-list 'RHS :setters) '(EQN>= MAKE-GE-EQN>= EQN> MAKE-GE-EQN> EQN=
                                     MAKE-GE-EQN=))
(setf (callers-list 'SET :setters) '(RANDOM SIZE MAP-OVER-ELEMENTS
                                            SET-WITH-ELEMENT-LIST-PRINT-OBJECT
                                            SET-ELEMENTS WEYLI:DELETE
                                            MERGE-NEW-BV UQ-SET-PRINT-OBJECT
                                            MAKE-UNION))
(setf (callers-list 'EXPRESSIONS :setters) '(MAKE-UNIVERSAL-QUANTIFIED-SET
                                             MAKE-UNION))
(setf (callers-list 'BOUND-VARS :setters) '(MERGE-BOUND-VARS
                                            UQ-SET-PRINT-OBJECT
                                            MAKE-UNIVERSAL-QUANTIFIED-SET))
(setf (callers-list 'EXPRS :setters) '(CHECK-SAME-DOMAIN SIMPLIFY
                                       MERGE-BOUND-VARS))
(setf (callers-list 'NEW-EXPRS :setters) '(MERGE-NEW-BV MERGE-BOUND-VARS))
(setf (callers-list 'BV :setters) '(SIMPLIFY))
(setf (callers-list 'KERNELS :setters) '(GET-POLYNOMIAL-RING DIFFERENT-KERNELS))
(setf (callers-list 'FUNCT :setters) '(SUBSTITUTE))
(setf (callers-list 'REST :setters) '(DEGREE MAKE-ELEMENT MAKE-SIMPLEX
                                      WEYLI::INTERSECTION WEYLI::UNION
                                      EXPAND-OTHER EXPAND-PLUS))
(setf (callers-list 'FORMS :setters) '(ASSOCIATE-PREDICATE EXPAND))
(setf (callers-list 'EXPANDED-TERMS :setters) '(EXPAND))
(setf (callers-list 'EXPONENT :setters) '(COEFFICIENT READ!NUM TAYLOR1 EXPAND))
(setf (callers-list 'NUMBER1 :setters) '(CONTAGION ATAN COMBINATIONS POCHHAMMER))
(setf (callers-list 'NUMBER2 :setters) '(CONTAGION ATAN COMBINATIONS POCHHAMMER))
(setf (callers-list 'ANS :setters) '(IMAGPART REALPART CONJUGATE SUBSTITUTE
                                              DERIV DERIVATION
                                              MULTIPLY-VECTOR-BY-SCALAR MINUS
                                              DENSE-INTERPOLATE-COEFFICIENTS
                                              MAKE-MONOMIAL
                                              INTERPOLATE-FROM-SKEL
                                              EVAL-MONOMIAL CHECK-DEGREE
                                              SPMOD-GCD2 COMPUTE-VANDERMONDE-Q
                                              EXPT-LIST TERMS-HORNERS-RULE
                                              POLY-FIND-COMMON-VARS
                                              POLY-TEST-QUOTIENT POLY-QUOTIENT
                                              TERMS-TIMES TRANSFORM GTERMS-EXPT
                                              GTERMS-TIMES CONVERT-TERM BF-E
                                              RATIONAL-TERMS-HORNERS-RULE
                                              SIMPLE-INTEGER-FACTOR FACTOR
                                              UNIFORMIZE-FACTOR-LIST POCHHAMMER))
(setf (callers-list 'N-LEN-QUARTER :setters) '(FASTER-ISQRT))
(setf (callers-list 'N-HALF :setters) '(FASTER-ISQRT))
(setf (callers-list 'N-HALF-ISQRT :setters) '(FASTER-ISQRT))
(setf (callers-list 'INIT-VALUE :setters) '(FASTER-ISQRT))
(setf (callers-list 'ITERATED-VALUE :setters) '(FASTER-ISQRT))
(setf (callers-list 'M :setters) '(INITY SPARSEINTERPSTAGEI
                                   TERMS-PSEUDO-REMAINDER POLY-EXPT
                                   TERMS-S-POLY BF-ATAN BF-TAN BF-SIN BF-COS
                                   BF-LOG BF-EXP BF-E BF-PI-MACHIN SMITH
                                   HERMITE-ARRAY HERMITE HADAMARD-BOUND
                                   FME-MATRIX-TIMES MATRIX-FME-TIMES
                                   FASTER-ISQRT))
(setf (callers-list 'N-1 :setters) '(INTEGER-NTH-ROOT))
(setf (callers-list 'MODULUS :setters) '(COMPUTE-INVERSE MAKE-ELEMENT ROUND2
                                         CEILING2 FLOOR2 DETERMINANT*
                                         EXPT-MODULO-INTEGER
                                         REDUCE-MODULO-INTEGER))
(setf (callers-list 'EXPT :setters) '(EXPT-LIST CONVERT-TO-BIGFLOAT
                                      EXPT-MODULO-INTEGER))
(setf (callers-list 'PL :setters) '(NEWPRIME))
(setf (callers-list '*BIG-PRIMES* :setters) '(NEWPRIME))
(setf (callers-list 'LIMIT :setters) '(LOOP-VECTOR-BIND
                                       SIMPLE-INTEGER-FACTOR-INTERNAL
                                       CHOICE-PRIMES))
(setf (callers-list 'PRIME-LIST :setters) '(CHOICE-PRIMES))
(setf (callers-list 'MULT :setters) '(SUBTRACT-ROWS REPEATED-SQUARING))
(setf (callers-list 'PROD :setters) '(CFACTOR CRITERION1 COERCE TAYLOR1
                                      REPEATED-SQUARING))
(setf (callers-list 'OPT-NUMBER :setters) '(POWER-OF?))
(setf (callers-list 'DIVISOR :setters) '(SIMPLE-INTEGER-FACTOR-INTERNAL
                                         SIMPLE-INTEGER-FACTOR
                                         COUNT-MULTIPLE-INTEGER-FACTORS))
(setf (callers-list '*FACTOR-METHOD* :setters) '(SIMPLE-INTEGER-FACTOR-INTERNAL
                                                 FACTOR))
(setf (callers-list 'FACTORS :setters) '(TRANSFORM-TERM MULTIPLICATIVE-ORDER
                                         TOTIENT ALL-DIVISORS FACTOR))
(setf (callers-list 'DIVISORS :setters) '(ALL-DIVISORS))
(setf (callers-list 'INCREMENTS :setters) '(SIMPLE-INTEGER-FACTOR))
(setf (callers-list 'U :setters) '(TERMS-INTERPOLATE TERMS-SUBRESULTANT-GCD
                                   TERMS-REDUCED-GCD TERMS-PRIMITIVE-GCD
                                   TERMS-EUCLIDEAN-GCD POLY-TRUNCATE2
                                   TERMS-COEF-REMAINDER TERMS-PSEUDO-REMAINDER
                                   TERMS-QUOTIENT POLY-EXPT BF-E BF-PI-AGM
                                   BF-SQRT BF-PI-MACHIN GET!CONST BFPRIN1
                                   PRINT-OBJECT PROCESSI SMITH-ARRAY
                                   HERMITE-ARRAY FERMAT-INTEGER-FACTOR))
(setf (callers-list 'TOTIENT :setters) '(TOTIENT))
(setf (callers-list 'CLASS :setters) '(WEYLI::SUBCLASS-OF?))
(setf (callers-list 'SUPER-CLASS :setters) '(WEYLI::SUBCLASS-OF?))
(setf (callers-list 'PLACE :setters) '(WEYLI::PUTF WEYLI::GETF WEYLI::%GETF))
(setf (callers-list 'INDICATOR :setters) '(WEYLI::PUTF WEYLI::GETF WEYLI::%GETF))
(setf (callers-list 'DEFAULT :setters) '(WEYLI::GETF WEYLI::%GETF))
(setf (callers-list 'NEWITEM :setters) '(WEYLI:SUBSTITUTE))
(setf (callers-list 'OLDITEM :setters) '(WEYLI:SUBSTITUTE))
(setf (callers-list 'RESULT-TYPE :setters) '(WEYLI:MAP))
(setf (callers-list 'SEQUENCES :setters) '(MAP-WITH-DOMAIN WEYLI:MAP))
(setf (callers-list 'OPTIONS :setters) '(%MM-BOUNDARY WEYLI::REDUCE))
(setf (callers-list 'ARG1 :setters) '(WEYLI::INTERSECTION WEYLI::UNION))
(setf (callers-list 'ARG2 :setters) '(WEYLI::INTERSECTION WEYLI::UNION))
(setf (callers-list 'LAMBDA-LIST :setters) '(WEYLI::DEFSUBST))
(setf (callers-list 'FROM-ARRAY :setters) '(WEYLI::COPY-ARRAY-CONTENTS
                                            WEYLI::%COPY-ARRAY-CONTENTS*))
(setf (callers-list 'TO-ARRAY :setters) '(WEYLI::COPY-ARRAY-CONTENTS
                                          WEYLI::%COPY-ARRAY-CONTENTS*))
(setf (callers-list 'FROM-FLAT :setters) '(WEYLI::%COPY-ARRAY-CONTENTS*))
(setf (callers-list 'TO-FLAT :setters) '(WEYLI::%COPY-ARRAY-CONTENTS*))
(setf (callers-list 'INDEX :setters) '(LOOP-VECTOR-BIND
                                       WEYLI::%COPY-ARRAY-CONTENTS*))
(setf (callers-list 'ARGUMENTS :setters) '(DEFINE-DOMAIN-CREATOR
                                           WEYLI::CIRCULAR-LIST))
(setf (callers-list 'RESULT :setters) '(POLY-RESULTANT POLY-SUBRESULTANT-GCD
                                        COMPUTE-RESULT SUBSTITUTE
                                        LTH-LOCAL-TERM REST-OF-LOCAL
                                        LOCALIZE-FORM* WHAT-IS-THE-LTHTERM2
                                        SHIFT-L-FORM* WHAT-IS-THE-LTHTERM
                                        SHIFT-M-FORM* KTHTERM ITERATE))
(setf (callers-list 'VALS :setters) '(DENSE-INTERPOLATE-COEFFICIENTS
                                      INTERPOLATE-FROM-SKEL EVAL-MONOMIAL
                                      SPARSEINTERPSTAGEI SOLVE-VANDERMONDETD
                                      SOLVE-VANDERMONDET SOLVE-VANDERMONDE
                                      INTERPOLATE POLY-INTERPOLATE
                                      TERMS-INTERPOLATE NEXT-LOOP))
(setf (callers-list 'ARRAY-DIMS :setters) '(WEYL:MAKE-ELEMENT))
(setf (callers-list 'X-DIM :setters) '(WEYL:MAKE-ELEMENT))
(setf (callers-list 'Y-DIM :setters) '(WEYL:MAKE-ELEMENT))
(setf (callers-list 'COEF-DOMAIN :setters) '(DERIVATION WEYL:MAKE-UPOLYNOMIAL
                                             INTERPOLATE INITY
                                             SPARSEINTERPSTAGEI
                                             PRINT-MPOLYNOMIAL-FORM
                                             MAKE-TPOWER-SERIES MAKE-POINT
                                             MAKE-RATIONAL-FUNCTION*
                                             MAKE-MULTIPOLE-EXPANSION
                                             EVALUATE-MATRIX WEYL:MAKE-ELEMENT))
(setf (callers-list 'ARRAY :setters) '(MAKE-ELEMENT CLIST-DIFFERENCE ZIPPER-SUM
                                       CLIST-PLUS WEYL:MAKE-UPOLYNOMIAL
                                       MAKE-DEGREE-MATRIX INTERPOLATE
                                       ADD-NEW-VARIABLE
                                       MAKE-POLYNOMIAL-MORPHISM REVERSION
                                       LIST-OF-ELEMENTS
                                       MAKE-MULTIPOLE-EXPANSION SMITH*
                                       INDEPENDENT-COLS INDEPENDENT-ROWS
                                       JACOBIAN INVERT-ARRAY TIMES-ARRAY
                                       DIFFERENCE PLUS ONE-MATRIX
                                       WEYL:MAKE-ELEMENT))
(setf (callers-list 'MATRIX :setters) '(SMITH* SMITH HERMITE* SUBDETERMINANT*
                                        SUBDETERMINANT HADAMARD-BOUND
                                        DEGREE-BOUNDS DETERMINANT* DETERMINANT
                                        TRANSPOSE MATRIX-DIMENSIONS))
(setf (callers-list 'DECLS :setters) '(WITH-TPOWER-SERIES
                                       WITH-MATRIX-DIMENSIONS))
(setf (callers-list 'NEW-ARRAY :setters) '(HERMITE* SUBDETERMINANT* COERCE
                                           SUBSTITUTE RECIP REF))
(setf (callers-list 'RANK :setters) '(REVERSION ONE-MATRIX))
(setf (callers-list 'ZERO :setters) '(TILDE ZERO EXPT INITIALIZE-INSTANCE
                                      COBOUNDARY BOUNDARY REVERSION TPS-DERIV2
                                      TPS-DERIV1 SPARSE-DETERMINANT ONE-MATRIX))
(setf (callers-list 'ARRAY1 :setters) '(ARRAY-TIMES))
(setf (callers-list 'ARRAY2 :setters) '(ARRAY-TIMES))
(setf (callers-list 'DIMS1 :setters) '(ARRAY-TIMES))
(setf (callers-list 'DIMS2 :setters) '(ARRAY-TIMES))
(setf (callers-list '1ARRAY :setters) '(TIMES-ARRAY))
(setf (callers-list '1DIM1 :setters) '(TIMES-ARRAY))
(setf (callers-list '1DIM2 :setters) '(TIMES-ARRAY))
(setf (callers-list '2ARRAY :setters) '(TIMES-ARRAY))
(setf (callers-list '2DIM2 :setters) '(TIMES-ARRAY))
(setf (callers-list 'ELT-DOMAIN :setters) '(FME-MATRIX-TIMES MATRIX-FME-TIMES))
(setf (callers-list 'VECTOR-SPACE :setters) '(IMAGPART REALPART CONJUGATE DERIV
                                                       DERIVATION
                                                       MULTIPLY-VECTOR-BY-SCALAR
                                                       MINUS FME-MATRIX-TIMES
                                                       MATRIX-FME-TIMES))
(setf (callers-list 'TRANSPOSE :setters) '(TRANSPOSE))
(setf (callers-list 'DIMS :setters) '(RECIP))
(setf (callers-list 'INTO-ARRAY :setters) '(INVERT-ARRAY))
(setf (callers-list 'DIMENSION :setters) '(MAKE-MPOLYNOMIAL MAKE-EPOLYNOMIAL
                                           %MAP-OVER-CELLS MAKE-PARAMETER-SPACE
                                           INVERT-ARRAY))
(setf (callers-list 'J :setters) '(BF-SIN BF-COS BF-EXP READ!NUM PROCESSI
                                   HERMITE-ARRAY FIND-PIVOT EXCHANGE-ROWS))
(setf (callers-list 'MAX :setters) '(TERMS-MAX-COEFFICIENT MAX-DIMENSION-OF
                                     FIND-PIVOT-UNORDERED FIND-PIVOT-ORDERED))
(setf (callers-list 'ROW :setters) '(SPARSE-DET FIND-PIVOT SUBTRACT-ROWS
                                     FIND-PIVOT-UNORDERED FIND-PIVOT-ORDERED))
(setf (callers-list 'ROW1 :setters) '(SUBTRACT-ROWS))
(setf (callers-list 'ROW2 :setters) '(SUBTRACT-ROWS))
(setf (callers-list 'PIVOT :setters) '(FIND-PIVOT SUBTRACT-ROWS))
(setf (callers-list 'RING :setters) '(INTERPOLATE ADD-NEW-VARIABLE ADD-RELATION
                                      MAKE-IDEAL INITIALIZE-INSTANCE
                                      GET-FACTOR-RING GET-COCHAIN-MODULE
                                      GET-CHAIN-MODULE SUBSTITUTE JACOBIAN))
(setf (callers-list 'DIM-COL :setters) '(JACOBIAN))
(setf (callers-list 'DIM-ROW :setters) '(JACOBIAN))
(setf (callers-list 'DIM :setters) '(IMAGPART REALPART CONJUGATE SUBSTITUTE
                                              DERIV DERIVATION
                                              MULTIPLY-VECTOR-BY-SCALAR MINUS
                                              ZERO PRINT-FREE-MODULE-ELEMENT
                                              WEYL:MAKE-ELEMENT
                                              MAKE-ELEMENT-FREE-MODULE-VECTOR
                                              MAKE-AFFINE-SPACE MAKE-ELEMENT
                                              TERMS-REDUCE TERMS-S-POLY
                                              GTERMS-TIMES GTERM-CONSTANT?
                                              GTERM-EQUAL GTERM-DOMINATES
                                              GTERM-DISJOINT GTERM-LCM
                                              GTERM-QUOT GTERM-TIMES
                                              GTERMS-MON-TIMES MAKE-ETERM
                                              MAKE-POLYNOMIAL PRINT-OBJECT
                                              COERCE MATRIX-DIMENSIONS))
(setf (callers-list 'COMPUTED-RANK :setters) '(ONE-MATRIX))
(setf (callers-list '*WORK-ARRAY* :setters) '(SUBDETERMINANT* DETERMINANT))
(setf (callers-list '*WORK-MATRIX* :setters) '(DETERMINANT*))
(setf (callers-list 'RING-VAR :setters) '(DEGREE-BOUNDS))
(setf (callers-list 'POLY-RING :setters) '(EVALUATE-MATRIX))
(setf (callers-list 'DETERMINANT :setters) '(FIND-PIVOT DETERMINANT*))
(setf (callers-list 'SIGN :setters) '(BF-TAN BF-SIN BF-COS BF-LOG
                                      CONVERT-TO-BIGFLOAT CANONICAL
                                      EXCHANGE-ROWS DETERMINANT*))
(setf (callers-list 'CK :setters) '(FIND-PIVOT))
(setf (callers-list 'COEFFICIENT-DOMAIN :setters) '(CLIST-X COEF-LIST1
                                                    COEF-LIST0
                                                    SPARSE-DETERMINANT))
(setf (callers-list 'COLS :setters) '(SUBDETERMINANT* SPARSE-DET))
(setf (callers-list 'MINOR :setters) '(SPARSE-DET))
(setf (callers-list 'DET :setters) '(BEND SPARSE-DET))
(setf (callers-list 'DIM1 :setters) '(INDEPENDENT-COLS INDEPENDENT-ROWS))
(setf (callers-list 'DIM2 :setters) '(INDEPENDENT-COLS INDEPENDENT-ROWS))
(setf (callers-list 'COL :setters) '(FIND-PIVOT))
(setf (callers-list 'ROWS :setters) '(HERMITE* SUBDETERMINANT*))
(setf (callers-list 'PRIMES :setters) '(SPMOD-GCD SPARSEINTERPSTAGEI
                                        SUBDETERMINANT*))
(setf (callers-list 'GFP :setters) '(SPARSEINTERPSTAGEI SUBDETERMINANT*))
(setf (callers-list 'TEMP-ROWS :setters) '(SUBDETERMINANT*))
(setf (callers-list 'PRIME-OF-MAXRANK :setters) '(SUBDETERMINANT*))
(setf (callers-list 'W :setters) '(COMPLEX-CIRCUMCENTER HERMITE-ARRAY))
(setf (callers-list 'DIAGONAL :setters) '(SMITH-ARRAY))
(setf (callers-list 'FOUNDB :setters) '(SMITH-ARRAY))
(setf (callers-list 'FAILED :setters) '(SMITH-ARRAY))
(setf (callers-list 'B1 :setters) '(CRITERION1 SMITH-ARRAY))
(setf (callers-list 'SIMPLEX :setters) '(BOUNDARY FACE? CELL-ID INSERT-BOUNDARY
                                         TOO-BIG? MEASURE SIMPLEX-SIZE SPLIT
                                         DELETE-MAXIMAL-CELL INSERT %SET-NAME
                                         NAME HOME-OF))
(setf (callers-list 'MESH :setters) '(READ-MESH WRITE-MESH MAKE-MESH-FROM-FILE
                                      REFINE-MESH NAME-REGION INSERT-BOUNDARY
                                      BOUNDARY-COMPLEX-OF REFINE-MESH-PREP
                                      BUILD-CDT-FROM-BOUNDARIES
                                      DO-BACKGROUND-BOX IMPROVE GRADE
                                      TRIANGLE-CENTER %DELETE-TOO-CLOSE
                                      DIMENSION-OF %SET-NAME NAME))
(setf (callers-list 'NSC :setters) '(ALL-NAMES DELETE-MAXIMAL-CELL INSERT))
(setf (callers-list 'NAMES :setters) '(FWRITE ALL-NAMES))
(setf (callers-list 'POSITION :setters) '(ROTATE-LIST))
(setf (callers-list 'TEST :setters) '(MEMBER-ROTATE))
(setf (callers-list 'INITIAL-CONTENTS :setters) '(MAKE-QUEUE))
(setf (callers-list 'QUEUE :setters) '(EMPTYQ? GETQ INSERTQ CLEARQ))
(setf (callers-list 'DELETE :setters) '(GETQ))
(setf (callers-list 'BB :setters) '(MEASURE CIRCLE-CENTER COMPLEX-CIRCUMCENTER))
(setf (callers-list 'CC :setters) '(MEASURE COMPLEX-CIRCUMCENTER))
(setf (callers-list 'CX :setters) '(COMPLEX-CIRCUMCENTER))
(setf (callers-list 'CY :setters) '(CIRCLE-CENTER COMPLEX-CIRCUMCENTER))
(setf (callers-list 'RADIUS :setters) '(ARC CIRCLE-CENTER))
(setf (callers-list 'RAD :setters) '(CIRCLE-CENTER))
(setf (callers-list 'C1 :setters) '(CIRCLE-CENTER))
(setf (callers-list 'C2 :setters) '(CIRCLE-CENTER))
(setf (callers-list 'POINTS :setters) '(FACE? SPLIT BEND MAKE-MEAN-POINT))
(setf (callers-list 'MEAN-SPACE :setters) '(MAKE-MEAN-POINT))
(setf (callers-list 'POINT-SPACE :setters) '(MAKE-MEAN-POINT))
(setf (callers-list 'VECTORS :setters) '(LOOP-VECTOR-BIND MAKE-MEAN-POINT))
(setf (callers-list 'MEAN :setters) '(MAKE-MEAN-POINT))
(setf (callers-list 'POINT :setters) '(MAKE-SIMPLEX NAME-REGION BOUNDING-BOX
                                       MAKE-PARAMETER-SPACE MAKE-MEAN-POINT))
(setf (callers-list 'VERTEX :setters) '(IMPROVE %DELETE-TOO-CLOSE PLACE
                                        REMOVE-VERTEX ADJ-VERTICES LOCATE
                                        NEAR-BASE CCW-SIDE POINT-VS-TRIANGLE
                                        ANGLE))
(setf (callers-list 'TRIANGLE :setters) '(IMPROVE GRADE TRIANGLE-CENTER
                                          %SPLIT-CONSTRAINT-ONE-SIDE PLACE
                                          DIRECTED-LOCATE NEAR-BASE NEIGHBOR
                                          VERTICES-SORTED-BY-ANGLE ANGLES
                                          CIRCUMRADIUS CIRCUMCENTER CCW-SIDE
                                          POINT-VS-TRIANGLE ANGLE))
(setf (callers-list 'SPACE :setters) '(READ-MESH WRITE-VERTEX-SET
                                       READ-REGION-POINTS READ-VERTEX-SET
                                       READ-POINT CREATE-MESH DO-BACKGROUND-BOX
                                       IMPROVE GRADE TOO-BIG? SPLIT DELAUNAY?
                                       FLIP-OK? DIRECTED-LOCATE NEAR-BASE
                                       VERTICES-SORTED-BY-ANGLE ANGLES
                                       CIRCUMRADIUS CIRCUMCENTER
                                       FLAT-TRIANGULATE STAR-TRIANGULATE
                                       TRIANGULATE-TRIPLES POINT-VS-TRIANGLE
                                       MAKE-CURVED-SEGMENT ARC MEASURE
                                       BOUNDING-BOX EDGES-CROSS? BEND
                                       SIMPLEX-SIZE ANGLE))
(setf (callers-list 'ANGLE :setters) '(ANGLE))
(setf (callers-list 'MAP-FUNCTION :setters) '(MAKE-PARAMETER-SPACE))
(setf (callers-list 'TARGET-SPACE :setters) '(MAKE-PARAMETER-SPACE))
(setf (callers-list 'PARAMETER-VECTORS :setters) '(MAKE-PARAMETER-SPACE))
(setf (callers-list 'TARGET-POINTS :setters) '(MAKE-PARAMETER-SPACE))
(setf (callers-list 'INVERSE-MAP :setters) '(MAKE-PARAMETER-SPACE))
(setf (callers-list 'PARAMETER-SPACE :setters) '(MAKE-PARAMETER-SPACE))
(setf (callers-list 'E :setters) '(POLY-DEGREE TERMS-TIMES TERMS-MON-TIMES
                                   MAKE-TERMS GTERMS-TIMES GTERM-LCM GTERM-QUOT
                                   GTERM-TIMES PRINT-TERM PRINT-EXPONENT
                                   MAKE-TPOWER-SERIES MAKE-PARAMETER-SPACE))
(setf (callers-list 'WHERE :setters) '(SPLIT))
(setf (callers-list 'ORDERED :setters) '(BEND))
(setf (callers-list 'VECTOR1 :setters) '(DISTANCE))
(setf (callers-list 'VECTOR2 :setters) '(DISTANCE))
(setf (callers-list 'DIFF :setters) '(DERIV DISTANCE))
(setf (callers-list 'EDGE1 :setters) '(EDGES-CROSS?))
(setf (callers-list 'EDGE2 :setters) '(EDGES-CROSS?))
(setf (callers-list 'OLD :setters) '(BOUNDING-BOX))
(setf (callers-list 'NEW :setters) '(INTERSECTION UNION BOUNDING-BOX))
(setf (callers-list 'VERTICES :setters) '(GRADE CONSTRAINT NEIGHBORS MEASURE))
(setf (callers-list 'POINT1 :setters) '(ARC))
(setf (callers-list 'POINT2 :setters) '(ARC))
(setf (callers-list 'THRU :setters) '(ARC))
(setf (callers-list 'CENTER :setters) '(CIRCUMCENTER ARC))
(setf (callers-list 'CLOCKWISE :setters) '(ARC))
(setf (callers-list 'CW :setters) '(ARC))
(setf (callers-list 'COUNTERCLOCKWISE :setters) '(ARC))
(setf (callers-list 'CCW :setters) '(ARC))
(setf (callers-list 'DIRECTION :setters) '(ARC))
(setf (callers-list 'THETA-A :setters) '(ARC))
(setf (callers-list 'THETA-B :setters) '(ARC))
(setf (callers-list 'GENERATOR :setters) '(MAKE-CURVED-SEGMENT ARC))
(setf (callers-list 'THETA :setters) '(ARC))
(setf (callers-list 'LTHETA :setters) '(ARC))
(setf (callers-list 'TRANSFORMED :setters) '(ARC))
(setf (callers-list 'PARAM1 :setters) '(MAKE-CURVED-SEGMENT))
(setf (callers-list 'ENDPOINT1 :setters) '(MAKE-CURVED-SEGMENT))
(setf (callers-list 'PARAM2 :setters) '(MAKE-CURVED-SEGMENT))
(setf (callers-list 'ENDPOINT2 :setters) '(MAKE-CURVED-SEGMENT))
(setf (callers-list 'SEGMENT-A :setters) '(COMMON-ENDPOINT))
(setf (callers-list 'SEGMENT-B :setters) '(COMMON-ENDPOINT))
(setf (callers-list 'SIDE :setters) '(IMPROVE INSERT FLIP NEIGHBOR CCW-SIDE))
(setf (callers-list 'TRIPLES :setters) '(FLAT-TRIANGULATE STAR-TRIANGULATE
                                         TRIANGULATE-TRIPLES))
(setf (callers-list 'POISON-VERTEX :setters) '(TRIANGULATE-TRIPLES))
(setf (callers-list 'TRIANGLE-CLASS :setters) '(FLAT-TRIANGULATE
                                                STAR-TRIANGULATE
                                                TRIANGULATE-TRIPLES))
(setf (callers-list 'ON-FLAG :setters) '(TRIANGULATE-TRIPLES))
(setf (callers-list 'STAR-SHAPE :setters) '(STAR-TRIANGULATE))
(setf (callers-list 'STAR-SOURCE :setters) '(STAR-TRIANGULATE))
(setf (callers-list 'PRED :setters) '(FLAT-TRIANGULATE STAR-TRIANGULATE))
(setf (callers-list 'CURRENT :setters) '(FLAT-TRIANGULATE STAR-TRIANGULATE))
(setf (callers-list 'SUCC :setters) '(FLAT-TRIANGULATE STAR-TRIANGULATE))
(setf (callers-list 'FLAT-POLYGON :setters) '(FLAT-TRIANGULATE))
(setf (callers-list 'OTHERS :setters) '(ANGLE))
(setf (callers-list 'TRIANGULATION :setters) '(%SPLIT-CONSTRAINT-ONE-SIDE
                                               CONSTRAINT PLACE REMOVE-VERTEX
                                               FORCE-EDGE SPLIT-EDGE FLIP
                                               DELAUNAY? FLIP-OK? ADJ-VERTICES
                                               TRIANGLES LOCATE DIRECTED-LOCATE
                                               NEIGHBORHOOD NEIGHBOR NEIGHBORS))
(setf (callers-list 'START :setters) '(LOCATE NEIGHBORHOOD))
(setf (callers-list 'DESTINATION :setters) '(DIRECTED-LOCATE))
(setf (callers-list 'TRIANGLES :setters) '(REFINE-MESH-PREP FLIP DELAUNAY?
                                           FLIP-OK? TRIANGLES))
(setf (callers-list 'EDGE :setters) '(%SPLIT-CONSTRAINT-ONE-SIDE FORCE-EDGE
                                      SPLIT-EDGE DELAUNAY? FLIP-OK?))
(setf (callers-list 'APEXES :setters) '(FLIP-OK?))
(setf (callers-list 'TRI :setters) '(NAME-REGION FLIP-OK?))
(setf (callers-list 'T1 :setters) '(DELAUNAY?))
(setf (callers-list 'T2 :setters) '(DELAUNAY?))
(setf (callers-list 'VERT :setters) '(FLIP))
(setf (callers-list 'SPLITTING-VERTEX :setters) '(SPLIT-EDGE))
(setf (callers-list 'RELATION :setters) '(PLACE))
(setf (callers-list 'HIT :setters) '(PLACE))
(setf (callers-list '*CROSS-EDGES* :setters) '(FORCE-EDGE))
(setf (callers-list 'NEW-VERTEX :setters) '(%SPLIT-CONSTRAINT-ONE-SIDE))
(setf (callers-list 'CONCAVE :setters) '(%SPLIT-CONSTRAINT-ONE-SIDE))
(setf (callers-list 'OLD-NEIGHBORS :setters) '(%SPLIT-CONSTRAINT-ONE-SIDE))
(setf (callers-list 'HIT-TRI :setters) '(%SPLIT-CONSTRAINT-ONE-SIDE))
(setf (callers-list '*DELAUNAY* :setters) '(SPLIT-EDGE PLACE))
(setf (callers-list 'TOO-CLOSE :setters) '(SPLIT %DELETE-TOO-CLOSE))
(setf (callers-list 'NEW-SEGMENTS :setters) '(SPLIT))
(setf (callers-list 'NEW-VERT :setters) '(SPLIT))
(setf (callers-list 'THE-BOUND :setters) '(TOO-BIG?))
(setf (callers-list 'BOUND :setters) '(BOUNDARY TOO-BIG?))
(setf (callers-list 'ANGLE-BOUNDS :setters) '(MAKE-MESH-FROM-FILE REFINE-MESH
                                              GRADE))
(setf (callers-list 'SIZE-LIST :setters) '(MAKE-MESH-FROM-FILE REFINE-MESH
                                           GRADE))
(setf (callers-list 'MAX-ANGLE :setters) '(IMPROVE))
(setf (callers-list 'CONSTRAINT :setters) '(IMPROVE))
(setf (callers-list 'BOX :setters) '(DO-BACKGROUND-BOX))
(setf (callers-list 'BORDER :setters) '(CELL-ORDER DO-BACKGROUND-BOX))
(setf (callers-list 'LOW :setters) '(DO-BACKGROUND-BOX))
(setf (callers-list 'HIGH :setters) '(DO-BACKGROUND-BOX))
(setf (callers-list 'LL :setters) '(DO-BACKGROUND-BOX))
(setf (callers-list 'HH :setters) '(DO-BACKGROUND-BOX))
(setf (callers-list 'LH :setters) '(DO-BACKGROUND-BOX))
(setf (callers-list 'DESC :setters) '(%MM-GET-POINT))
(setf (callers-list 'PART :setters) '(%MM-BOUNDARY))
(setf (callers-list 'FUNCTION-NAME :setters) '(DEFUN-BOUNDARY))
(setf (callers-list 'VERTEX-TABLE :setters) '(READ-MESH FWRITE WRITE-VERTEX-SET
                                              READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                              READ-SIMPLICIAL-COMPLEX
                                              READ-VERTEX-SET))
(setf (callers-list 'COMPLEX :setters) '(COBOUNDARY BOUNDARY %MAP-OVER-CELLS
                                         %DELETE %INSERT MAXIMAL-CELL? COFACETS
                                         FACETS GET-CELL
                                         READ-BOUNDARY-SIMPLICIAL-COMPLEX
                                         READ-SIMPLICIAL-COMPLEX))
(setf (callers-list 'ARC-ARGS :setters) '(READ-BOUNDARY-SIMPLICIAL-COMPLEX))
(setf (callers-list 'OTHER :setters) '(READ-BOUNDARY-SIMPLICIAL-COMPLEX))
(setf (callers-list 'CODE :setters) '(READ-BOUNDARY-SIMPLICIAL-COMPLEX))
(setf (callers-list 'TUPLE :setters) '(LIST-OF-ELEMENTS SET-REF REF TUPLE-VALUE
                                       FWRITE))
(setf (callers-list 'THING :setters) '(INSERT TETRAHEDRON? TRIANGLE? SEGMENT?
                                       WRITE-VERTEX-SET))
(setf (callers-list 'COUNT :setters) '(ADD-NEW-VARIABLE FWRITE WRITE-VERTEX-SET))
(setf (callers-list 'MAX-DIMENSION :setters) '(FWRITE))
(setf (callers-list 'TOKEN :setters) '(READ-MESH))
(setf (callers-list 'MORPHISM1 :setters) '(COMPOSE))
(setf (callers-list 'MORPHISM2 :setters) '(COMPOSE))
(setf (callers-list 'CACHE :setters) '(COMPOSE))
(setf (callers-list 'COMP :setters) '(COMPOSE))
(setf (callers-list 'DIRECT? :setters) '(GET-MORPHISMS))
(setf (callers-list 'MORPHISMS :setters) '(GET-MORPHISMS))
(setf (callers-list 'PREDECESSOR :setters) '(GET-MORPHISMS-FROM))
(setf (callers-list 'MORPH :setters) '(GET-MORPHISMS-TO GET-MORPHISMS-FROM))
(setf (callers-list 'SUCCESSOR :setters) '(GET-MORPHISMS-TO))
(setf (callers-list 'MAP :setters) '(MAKE-AUTOMORPHISM MAKE-HOMOMORPHISM
                                     MAKE-MORPHISM))
(setf (callers-list 'REPLACE? :setters) '(MAKE-MORPHISM))
(setf (callers-list 'OLD-H :setters) '(MAKE-MORPHISM))
(setf (callers-list 'MORPHISM :setters) '(MAKE-POLYNOMIAL-MORPHISM
                                          APPLY-MORPHISM DELETE-MORPHISM))
(setf (callers-list 'D1 :setters) '(RECIP FIND-COMMON-DOMAINS))
(setf (callers-list 'D2 :setters) '(FIND-COMMON-DOMAINS))
(setf (callers-list 'D1-DOMAINS :setters) '(NEXT-DOMAINS))
(setf (callers-list 'HOMOS :setters) '(COERCE))
(setf (callers-list '*COERCIBILITY-CHECKING* :setters) '(COERCIBLE?))
(setf (callers-list 'ILLEGAL-MESS :setters) '(DEF-BINARY-COERCION))
(setf (callers-list 'AMBIG-MESS :setters) '(DEF-BINARY-COERCION))
(setf (callers-list 'NUMERIC-NUMERIC? :setters) '(DEFINE-BINARY-CONTAGIONS
                                                  DEF-BINARY-COERCION))
(setf (callers-list 'DOMAIN-ELEMENT-DOMAIN-ELEMENT? :setters) '(DEF-BINARY-COERCION))
(setf (callers-list 'Z1 :setters) '(LOCALIZE-FORM SHIFT-L-FORM SHIFT-M-FORM))
(setf (callers-list 'Z2 :setters) '(LOCALIZE-FORM SHIFT-L-FORM SHIFT-M-FORM))
(setf (callers-list 'Z0 :setters) '(LTH-LOCAL-TERM REST-OF-LOCAL LOCALIZE-FORM*
                                    WHAT-IS-THE-LTHTERM2 SHIFT-L-FORM*
                                    WHAT-IS-THE-LTHTERM SHIFT-M-FORM*))
(setf (callers-list 'CN1 :setters) '(DIST))
(setf (callers-list 'CN2 :setters) '(DIST))
(setf (callers-list 'F1 :setters) '(CRITERION1 MPEF-PAIRWISE-M-SUM))
(setf (callers-list 'F2 :setters) '(CLIST-SQFR-DECOMPOSE CRITERION1
                                    MPEF-PAIRWISE-M-SUM))
(setf (callers-list 'CREATE-FUNCTION :setters) '(DEFINE-DOMAIN-CREATOR))
(setf (callers-list 'TERM1 :setters) '(COMPARE-PTERM-LISTS))
(setf (callers-list 'TERM2 :setters) '(COMPARE-PTERM-LISTS))
(setf (callers-list 'PROPERTY :setters) '(SET-VARIABLE-NUMBER-PROPERTY
                                          GET-VARIABLE-NUMBER-PROPERTY
                                          DELETE-PROPERTY TEST-PROPERTY
                                          ASSERT-PROPERTY))
(setf (callers-list 'TABLE :setters) '(TEST-PROPERTY ASSERT-PROPERTY))
(setf (callers-list 'PROPERTY-NAME :setters) '(DEFINE-MATH-PROPERTY
                                               DEFINE-PRIMITIVE-PROPERTY))
(setf (callers-list 'ASSERT-FUNCTION-NAME :setters) '(DEFINE-PRIMITIVE-PROPERTY))
(setf (callers-list 'PREDICATE-FUNCTION-NAME :setters) '(DEFINE-PRIMITIVE-PROPERTY))
(setf (callers-list 'REQ-ARGS :setters) '(DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                          DEFINE-PRIMITIVE-PROPERTY))
(setf (callers-list 'OPT-ARGS :setters) '(DEFINE-MATH-PROPERTY MAKE-PREDICATE
                                          DEFINE-PRIMITIVE-PROPERTY))
(setf (callers-list 'REQ :setters) '(DEFINE-MATH-PROPERTY MAKE-PREDICATE))
(setf (callers-list 'ASSERT-NAME :setters) '(DEFINE-MATH-PROPERTY))
(setf (callers-list 'PACKAGE :setters) '(USE-WEYL-PACKAGE USE-WEYLI-PACKAGE))
(setf (callers-list 'PACKAGE-NAME :setters) '(INTERN-IN-PACKAGE))
(setf (callers-list 'SYMBOLS :setters) '(INTERN-IN-PACKAGE))
(setf (callers-list 'FIELD :setters) '(MAKE-GFP-DOMAIN QUOTIENT-REDUCE
                                       GET-QUOTIENT-FIELD MAKE-QUOTIENT-FIELD))
(setf (callers-list 'NUMERATOR :setters) '(EXTENDED-GCD QUOTIENT-REDUCE
                                           MAKE-QUOTIENT-ELEMENT))
(setf (callers-list 'DENOMINATOR :setters) '(EXTENDED-GCD QUOTIENT-REDUCE
                                             MAKE-QUOTIENT-ELEMENT))
(setf (callers-list 'QF :setters) '(RATFUN-REDUCE RATFUN-FIELD-PRINT-OBJECT
                                    QUOTIENT-REDUCE*
                                    QUOTIENT-FIELD-PRINT-OBJECT))
(setf (callers-list 'NUM :setters) '(EXPT PARSE-NUMERIC-OBJ
                                          RANDOM-FLOATING-NUMBER
                                          BF-INTEGER-PART RATFUN-REDUCE
                                          MAKE-RATIONAL-FUNCTION*
                                          QUOTIENT-REDUCE* COERCE))
(setf (callers-list 'DEN :setters) '(EXPT RATFUN-REDUCE MAKE-RATIONAL-FUNCTION*
                                          QUOTIENT-REDUCE* COERCE))
(setf (callers-list 'COMMON-GCD :setters) '(RATFUN-REDUCE QUOTIENT-REDUCE*))
(setf (callers-list 'N1 :setters) '(BF-BINARY> BF-BINARY>= BF-BINARY= BF-FLOOR
                                    BF-QUOTIENT BF-TIMES BF-DIFFERENCE BF-PLUS
                                    RECIP))
(setf (callers-list 'QUO :setters) '(ROUND2 ROUND1 CEILING2 CEILING1 FLOOR2
                                     FLOOR1 EXPT-QUOTIENT))
(setf (callers-list 'POLY-DOMAIN :setters) '(MAKE-RATIONAL-FUNCTION*))
(setf (callers-list 'RING-DOMAIN :setters) '(LIST-OF-VARIABLES))
(setf (callers-list 'POLY :setters) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                      CLIST-EXPT-MOD-POLY
                                      CLIST-FACTOR-SQUAREFREE CLIST-PTH-ROOT
                                      CLIST-SQFR-DECOMPOSE
                                      CLIST-PRIMITIVE-PART! CLIST-FACTOR
                                      SPARSEINTERPSTAGEI SPARSEINTERPSTAGE
                                      PSKELETON POLY-SKELETON INTERPOLATE
                                      PARSE-LINEAR-EQUATION
                                      POLY-LEADING-COEFFICIENT
                                      POLY-C-COEFFICIENT POLY-COEFFICIENT
                                      POLY-SUBST POLY-COERCE POLY-SPLIT-ON-VARS
                                      POLY-MONOMIAL? MAKE-POLYNOMIAL-MORPHISM
                                      MAKE-POLY-FORM POLY-TERMS
                                      POLY-ORDER-NUMBER GTERMS-PRIM*
                                      ADD-RELATION MAKE-EPOLYNOMIAL DERIV
                                      RATIONAL-POLY-SUBST))
(setf (callers-list 'VAR-VALUE :setters) '(TERMS-HORNERS-RULE POLY-SUBST
                                           RATIONAL-TERMS-HORNERS-RULE
                                           RATIONAL-POLY-SUBST))
(setf (callers-list 'OLD-E :setters) '(TERMS-HORNERS-RULE TRANSFORM
                                       RATIONAL-TERMS-HORNERS-RULE))
(setf (callers-list 'NEW-DOMAIN :setters) '(SUBSTITUTE))
(setf (callers-list 'SUBST-LIST :setters) '(SUBSTITUTE))
(setf (callers-list 'NEW-VALUE :setters) '(SET-REF))
(setf (callers-list 'E1 :setters) '(BF-FLOOR BF-DIFFERENCE BF-PLUS BINARY>
                                    BINARY=))
(setf (callers-list 'ELTS :setters) '(SET-WITH-ELEMENT-LIST-PRINT-OBJECT))
(setf (callers-list 'INITIAL-ELEMENTS :setters) '(INITIALIZE-INSTANCE))
(setf (callers-list 'HEIGHT :setters) '(RANDOM-FLOATING-NUMBER RANDOM-CONSTANT
                                        RANDOM))
(setf (callers-list 'ORDER :setters) '(SET-VARIABLE-NUMBER-PROPERTY
                                       GET-VARIABLE-NUMBER-PROPERTY
                                       VARIABLE-SYMBOL MULTIPLICATIVE-ORDER
                                       EXPT TAYLOR1 TAYLOR TAYLOR-EXP))
(setf (callers-list 'COEFFS :setters) '(EXPT TPS-SPREAD-COEFFS TRIM-ZEROES
                                             TPS-DERIV2 TPS-DERIV1 TAYLOR-EXP))
(setf (callers-list 'NEW-VALENCE :setters) '(TAYLOR1))
(setf (callers-list 'MAX-VALENCE :setters) '(TAYLOR1))
(setf (callers-list 'NEW-BR :setters) '(TAYLOR1))
(setf (callers-list 'FACTOR-OLD :setters) '(TAYLOR1))
(setf (callers-list 'FACTOR-NEW :setters) '(TAYLOR1))
(setf (callers-list 'ARG :setters) '(TAYLOR1))
(setf (callers-list 'TP :setters) '(MAP-TPOWER-SERIES PRINT-TPOWER-SERIES DERIV
                                    TAYLOR1))
(setf (callers-list 'POWER-SERIES-DOMAIN :setters) '(GET-DEFAULT-TAYLOR-EXPANSION))
(setf (callers-list 'TEMP-RING :setters) '(GET-DEFAULT-TAYLOR-EXPANSION))
(setf (callers-list 'COEF-RING :setters) '(GET-DEFAULT-TAYLOR-EXPANSION))
(setf (callers-list 'RING-VARS :setters) '(GET-DEFAULT-TAYLOR-EXPANSION))
(setf (callers-list 'N-TERMS :setters) '(TPS-DERIV2 TPS-DERIV1))
(setf (callers-list 'NCOEFFS :setters) '(MAKE-TPOWER-SERIES TPS-DERIV2
                                         TPS-DERIV1))
(setf (callers-list 'SHIFT :setters) '(MAKE-TPOWER-SERIES TPS-DERIV2 TPS-DERIV1))
(setf (callers-list 'TEMP-TP :setters) '(REVERSION))
(setf (callers-list 'COEF-POLY :setters) '(SOLVE-FOR-COEFFS))
(setf (callers-list 'CUR-VAR :setters) '(SOLVE-FOR-COEFFS))
(setf (callers-list 'COEF-LIST :setters) '(MAKE-UPOLYNOMIAL
                                           WEYL:MAKE-UPOLYNOMIAL
                                           SOLVE-FOR-COEFFS))
(setf (callers-list 'VALUE-LIST :setters) '(SOLVE-FOR-COEFFS))
(setf (callers-list 'F-LIST :setters) '(FACETS))
(setf (callers-list 'LISTA :setters) '(SIGN-OF-PERMUTATION))
(setf (callers-list 'LISTB :setters) '(SIGN-OF-PERMUTATION))
(setf (callers-list 'FACET :setters) '(MAP-OVER-ORIENTED-COFACETS))
(setf (callers-list 'ID-LIST :setters) '(CELL-ID))
(setf (callers-list 'CELL :setters) '(GET-COCHAIN-MODULE GET-CHAIN-MODULE
                                      MAX-DIMENSION-OF %MAP-OVER-CELLS %DELETE
                                      %INSERT MAXIMAL-CELL? COFACETS FACETS
                                      GET-CELL))
(setf (callers-list 'CELL-ID :setters) '(%MAP-OVER-CELLS))
(setf (callers-list 'VERT-LIST :setters) '(VERTEX-SET))
(setf (callers-list 'CELLS :setters) '(MAKE-SIMPLICIAL-COMPLEX))
(setf (callers-list 'CM :setters) '(COCHAIN-MODULE-PRINT-OBJECT
                                    CHAIN-MODULE-PRINT-OBJECT))
(setf (callers-list 'INTEGER :setters) '(READ!NUM GET-COCHAIN-MODULE
                                         GET-CHAIN-MODULE))
(setf (callers-list 'CHAIN :setters) '(BOUNDARY-DOMAIN))
(setf (callers-list 'COCHAIN :setters) '(COBOUNDARY-DOMAIN))
(setf (callers-list 'S :setters) '(INITY SPARSEINTERPSTAGEI MAKE-FINITE-FIELD*
                                   BF-PI-MACHIN PRINT-TERM))
(setf (callers-list 'COEF :setters) '(CHECK-DEGREE POLY-C-COEFFICIENT
                                      POLY-COEFFICIENT TERMS-QUOTIENT
                                      MAKE-ETERM PRINT-TERM))
(setf (callers-list 'PAIR :setters) '(SQUARE-FREE FACTOR CANONICAL))
(setf (callers-list 'CACHED :setters) '(CANONICAL))
(setf (callers-list 'CELL1 :setters) '(CELL-ORDER))
(setf (callers-list 'CELL2 :setters) '(CELL-ORDER))
(setf (callers-list 'AORDER :setters) '(CELL-ORDER))
(setf (callers-list 'SIMPLICES :setters) '(MAKE-COCHAIN MAKE-CHAIN
                                           MAKE-CHAIN-OR-COCHAIN))
(setf (callers-list 'CHAIN-OR-COCHAIN :setters) '(MAKE-CHAIN-OR-COCHAIN))
(setf (callers-list 'SIMPS :setters) '(MAKE-CHAIN-OR-COCHAIN))
(setf (callers-list 'XT :setters) '(CHAIN-TERMS-TIMES FREE-GROUP-MINUS
                                    FREE-GROUP-DIFFERENCE FREE-GROUP-PLUS))
(setf (callers-list 'YT :setters) '(CHAIN-TERMS-TIMES FREE-GROUP-DIFFERENCE
                                    FREE-GROUP-PLUS))
(setf (callers-list 'C-SUM :setters) '(TERMS-DIFFERENCE TERMS-PLUS
                                       FREE-GROUP-DIFFERENCE FREE-GROUP-PLUS))
(setf (callers-list 'C-PROD :setters) '(CHAIN-TERMS-TIMES))
(setf (callers-list 'SIMPLICIAL-COMPLEX :setters) '(BOUNDARY))
(setf (callers-list 'PAIRS :setters) '(MAKE-POLYNOMIAL-MORPHISM COBOUNDARY
                                       BOUNDARY))
(setf (callers-list 'BD :setters) '(COBOUNDARY BOUNDARY))
(setf (callers-list 'HT :setters) '(COBOUNDARY BOUNDARY))
(setf (callers-list 'CDOM :setters) '(GET-TPOWER-SERIES-DOMAIN))
(setf (callers-list 'GVARIABLE :setters) '(GET-TPOWER-SERIES-DOMAIN))
(setf (callers-list 'SERIES :setters) '(MODIFY-BRANCH-ORDER MAKE-TPOWER-SERIES))
(setf (callers-list 'LEAD :setters) '(TRIM-ZEROES))
(setf (callers-list 'TRAIL :setters) '(TRIM-ZEROES))
(setf (callers-list 'STR :setters) '(GROUPED? PRINT-GROUPED))
(setf (callers-list 'LAST :setters) '(GROUPED?))
(setf (callers-list 'BR :setters) '(PRINT-EXPONENT))
(setf (callers-list 'ZED :setters) '(TPS-SPREAD-COEFFS))
(setf (callers-list 'RVAL :setters) '(TPS-SPREAD-COEFFS))
(setf (callers-list 'VARS-AND-TPS :setters) '(WITH-TPOWER-SERIES))
(setf (callers-list 'NEW-BODY :setters) '(WITH-TPOWER-SERIES))
(setf (callers-list 'FACTOR :setters) '(CLIST-SQFR-DECOMPOSE SPARSEINTERPSTAGEI
                                        MODIFY-BRANCH-ORDER))
(setf (callers-list 'F :setters) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                   CLIST-FACTOR-SQUAREFREE CLIST-DERIV INITY
                                   ADD-UNDONE MAP-TPOWER-SERIES))
(setf (callers-list 'ORD :setters) '(COERCE))
(setf (callers-list 'VAL :setters) '(COERCE))
(setf (callers-list 'ARR :setters) '(COERCE))
(setf (callers-list 'MTORDER :setters) '(TRUNCATE-ORDER))
(setf (callers-list 'VALENCE :setters) '(EXPT))
(setf (callers-list 'OBJ :setters) '(MAKE-ELEMENT))
(setf (callers-list 'SUBSUMED-PROPERTIES :setters) '(DEFINE-MATH-PROPERTY))
(setf (callers-list 'KEYWORD :setters) '(DEFINE-MATH-PROPERTY))
(setf (callers-list '*COEFFICIENT-DOMAIN* :setters) '(EXTENDED-GCD INTERPOLATE
                                                      SPARSEINTERPSTAGEI
                                                      %BIND-DYNAMIC-DOMAIN-CONTEXT))
(setf (callers-list 'O :setters) '(INITIALIZE-INSTANCE))
(setf (callers-list 'NMBR :setters) '(SAVE!CONST BF-MINUS BF-ABS ROUND!EP
                                      ROUND!MT ROUND!LAST ORDER! PRECI! CUT!EP
                                      CUT!MT CONV!EP))
(setf (callers-list 'MT :setters) '(READ!LNUM PRECI!))
(setf (callers-list 'CHARS :setters) '(CONVERT-NUMBER->CHARACTERS))
(setf (callers-list 'DIGIT :setters) '(CONVERT-NUMBER->CHARACTERS))
(setf (callers-list 'ABS-NMBR :setters) '(ROUND!LAST))
(setf (callers-list 'EP :setters) '(READ!LNUM))
(setf (callers-list 'FRACTION :setters) '(READ!NUM))
(setf (callers-list 'FLOAT :setters) '(CONVERT-TO-BIGFLOAT))
(setf (callers-list 'MANTISSA :setters) '(CONVERT-TO-BIGFLOAT))
(setf (callers-list 'N2 :setters) '(BF-BINARY> BF-BINARY>= BF-BINARY= BF-FLOOR
                                    BF-QUOTIENT BF-TIMES BF-DIFFERENCE BF-PLUS))
(setf (callers-list 'E2 :setters) '(BF-FLOOR BF-DIFFERENCE BF-PLUS))
(setf (callers-list 'PRECISION :setters) '(BF-E BF-PI BF-EXPT))
(setf (callers-list 'CNST :setters) '(SAVE!CONST GET!CONST))
(setf (callers-list 'CONSTANT :setters) '(SET!CONST))
(setf (callers-list 'DIGITS :setters) '(SET!CONST))
(setf (callers-list 'K+3 :setters) '(BF-PI-MACHIN))
(setf (callers-list 'SS :setters) '(BF-PI-MACHIN))
(setf (callers-list 'K2 :setters) '(USE-CHINESE-REMAINDER BF-ACOS BF-ASIN
                                    BF-ATAN BF-TAN BF-SIN BF-COS BF-LOG BF-EXP
                                    BF-E BF-PI-AGM BF-SQRT))
(setf (callers-list 'NCUT :setters) '(BF-ATAN BF-SIN BF-SQRT))
(setf (callers-list 'HALF :setters) '(EXPT BF-PI-AGM BF-SQRT))
(setf (callers-list 'DCUT :setters) '(BF-ATAN BF-SIN BF-COS BF-LOG BF-EXP
                                      BF-PI-AGM BF-SQRT))
(setf (callers-list 'DY :setters) '(BF-SQRT))
(setf (callers-list 'NFIG :setters) '(BF-SQRT))
(setf (callers-list 'Y0 :setters) '(BF-SQRT))
(setf (callers-list 'YQ :setters) '(BF-EXP))
(setf (callers-list 'YR :setters) '(BF-EXP))
(setf (callers-list 'RI :setters) '(BF-SIN BF-COS BF-EXP))
(setf (callers-list 'TM :setters) '(BF-ATAN BF-SIN BF-COS BF-LOG BF-EXP))
(setf (callers-list 'FCTRIAL :setters) '(BF-SIN BF-COS BF-EXP))
(setf (callers-list 'EE :setters) '(BF-LOG))
(setf (callers-list 'ES :setters) '(BF-LOG))
(setf (callers-list 'ZI :setters) '(BF-ATAN BF-LOG))
(setf (callers-list 'PI4 :setters) '(BF-ATAN BF-TAN BF-SIN BF-COS))
(setf (callers-list 'NUMBER~ :setters) '(MAKE-GFP-DOMAIN))
(setf (callers-list 'A1 :setters) '(COMPUTE-INVERSE))
(setf (callers-list 'A2 :setters) '(COMPUTE-INVERSE))
(setf (callers-list 'ELEMENT :setters) '(INSERT-INTO-ACCUMULATION-LIST
                                         MULTIPLICATIVE-ORDER))
(setf (callers-list 'GROUP-ORDER :setters) '(MULTIPLICATIVE-ORDER))
(setf (callers-list 'MASK :setters) '(MAKE-GFP-DOMAIN))
(setf (callers-list 'X^N :setters) '(MAKE-GFP-DOMAIN))
(setf (callers-list 'GROUP-SIZE :setters) '(MULTIPLICATIVE-ORDER))
(setf (callers-list 'SIZE :setters) '(GET-FINITE-FIELD MAKE-FINITE-FIELD
                                      MAKE-FINITE-FIELD*))
(setf (callers-list 'CHAR :setters) '(MAKE-FINITE-FIELD*))
(setf (callers-list 'DEGREE :setters) '(DENSE-INTERPOLATE-COEFFICIENTS
                                        CRITERION1 MAKE-FINITE-FIELD*))
(setf (callers-list 'IDEAL :setters) '(MAKE-IDEAL GET-FACTOR-RING))
(setf (callers-list 'REMAINDERS :setters) '(USE-CHINESE-REMAINDER))
(setf (callers-list 'GFM :setters) '(USE-CHINESE-REMAINDER))
(setf (callers-list 'P1 :setters) '(USE-CHINESE-REMAINDER))
(setf (callers-list 'P1INV :setters) '(USE-CHINESE-REMAINDER))
(setf (callers-list 'P2 :setters) '(USE-CHINESE-REMAINDER))
(setf (callers-list 'REAL :setters) '(REALPART MAKE-ELEMENT))
(setf (callers-list 'IMAG :setters) '(IMAGPART MAKE-ELEMENT))
(setf (callers-list 'X-VAL :setters) '(WITH-CONTAGION RECIP))
(setf (callers-list 'N-ROOT :setters) '(SQRT))
(setf (callers-list 'D-ROOT :setters) '(SQRT))
(setf (callers-list 'MAG :setters) '(SQRT))
(setf (callers-list 'Y-VAL :setters) '(WITH-CONTAGION))
(setf (callers-list 'BINARY-OP :setters) '(DEFINE-BINARY-CONTAGIONS))
(setf (callers-list 'NUMBER-NUMERIC? :setters) '(DEFINE-BINARY-CONTAGIONS))
(setf (callers-list 'NN :setters) '(EXPT))
(setf (callers-list 'ABS-NN :setters) '(EXPT))
(setf (callers-list 'A-DOMAIN :setters) '(BINARY-LCM BINARY-GCD))
(setf (callers-list 'B-DOMAIN :setters) '(BINARY-LCM BINARY-GCD))
(setf (callers-list 'GREATER-FUNCTION :setters) '(TERMS-REDUCE TERMS-S-POLY
                                                  CONVERT-LIST
                                                  INITIALIZE-INSTANCE
                                                  GTERMS-TIMES
                                                  GTERMS-DIFFERENCE GTERMS-PLUS
                                                  SCAN-POLY-FORM
                                                  MAKE-EPOLYNOMIAL
                                                  MAKE-EPOLYNOMIAL*))
(setf (callers-list 'NEXT-VAR :setters) '(SCAN-POLY-FORM))
(setf (callers-list 'FIRST? :setters) '(PRINT-OBJECT))
(setf (callers-list 'NUM-VARS :setters) '(BOUND-DEGREE-TERM-COUNT
                                          MAKE-COMPARISON-FUN
                                          GET-COMPARISON-FUN))
(setf (callers-list 'VAR-ORDER :setters) '(MAKE-COMPARISON-FUN))
(setf (callers-list 'TOTAL? :setters) '(MAKE-COMPARISON-FUN))
(setf (callers-list 'REVERSE? :setters) '(MAKE-COMPARISON-FUN))
(setf (callers-list 'NEW? :setters) '(MAKE-COMPARISON-FUN))
(setf (callers-list 'GREAT :setters) '(MAKE-COMPARISON-FUN))
(setf (callers-list 'LESS :setters) '(MAKE-COMPARISON-FUN))
(setf (callers-list 'ANS-TERMS :setters) '(TERMS-S-POLY GTERMS-DIFFERENCE
                                           GTERMS-PLUS))
(setf (callers-list '.E. :setters) '(COLLECT-TERM))
(setf (callers-list '.C. :setters) '(COLLECT-TERM))
(setf (callers-list 'POLY-TERMS :setters) '(TERMS-MON-TIMES GTERMS-MON-TIMES))
(setf (callers-list 'NTERM :setters) '(GTERMS-MON-TIMES))
(setf (callers-list 'X-TERM :setters) '(GTERM-EQUAL GTERM-DOMINATES
                                        GTERM-DISJOINT GTERM-LCM GTERM-QUOT
                                        GTERM-TIMES))
(setf (callers-list 'Y-TERM :setters) '(GTERM-EQUAL GTERM-DOMINATES
                                        GTERM-DISJOINT GTERM-LCM GTERM-QUOT
                                        GTERM-TIMES))
(setf (callers-list 'ANSWER :setters) '(POLY-EXPT TERMS-TIMES GTERMS-TIMES))
(setf (callers-list 'CF :setters) '(GTERMS-EXPT EXPT))
(setf (callers-list 'ID :setters) '(IDEAL-PRINT-OBJECT))
(setf (callers-list 'GENS :setters) '(IDEAL-PRINT-OBJECT))
(setf (callers-list 'GENERATORS :setters) '(ADD-UNDONE REDUCE-ALL CRITERION1
                                            RESET-GROBNER-BASIS CONVERT-LIST
                                            MAKE-IDEAL))
(setf (callers-list 'G :setters) '(ADD-UNDONE MAKE-IDEAL))
(setf (callers-list 'GROBNER-BASIS :setters) '(WITH-GROBNER-OPERATIONS))
(setf (callers-list 'NEW-FUNCTION :setters) '(CONVERT-LIST
                                              (SETF GREATER-FUNCTION)))
(setf (callers-list 'REDUCIBLES :setters) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                            CRITERION1 RESET-GROBNER-BASIS
                                            CONVERT-LIST))
(setf (callers-list 'POSSIBLES :setters) '(ADD-UNDONE REDUCE-ALL CRITERION1
                                           RESET-GROBNER-BASIS CONVERT-LIST))
(setf (callers-list 'BASIS :setters) '(TERMS-REDUCE NEW-BASIS REDUCE-ALL
                                       ADD-RELATION))
(setf (callers-list 'UNDONES :setters) '(ADD-UNDONE REDUCE-ALL CRITERION1
                                         RESET-GROBNER-BASIS))
(setf (callers-list 'TERMS1 :setters) '(PAIR-UP-TERMS TERMS-S-POLY))
(setf (callers-list 'TERMS2 :setters) '(TERMS-S-POLY))
(setf (callers-list 'XE :setters) '(TERMS-S-POLY))
(setf (callers-list 'XC :setters) '(TERMS-S-POLY))
(setf (callers-list 'YE :setters) '(TERMS-S-POLY))
(setf (callers-list 'YC :setters) '(TERMS-S-POLY))
(setf (callers-list 'NEW-XE :setters) '(TERMS-S-POLY))
(setf (callers-list 'NEW-YE :setters) '(TERMS-S-POLY))
(setf (callers-list 'B2 :setters) '(CRITERION1))
(setf (callers-list 'G0 :setters) '(REDUCE-ALL))
(setf (callers-list 'AGAIN :setters) '(TERMS-REDUCE))
(setf (callers-list '1/LC :setters) '(GTERMS-PRIM*))
(setf (callers-list 'E-C-PAIRS :setters) '(MAKE-MANY-TERMS))
(setf (callers-list 'ACCUMULATOR :setters) '(ACCUMULATE-ACCUMULATION-LIST
                                             INSERT-INTO-ACCUMULATION-LIST))
(setf (callers-list 'ACCUM-LIST :setters) '(ACCUMULATE-ACCUMULATION-LIST))
(setf (callers-list 'IDENTITY :setters) '(ACCUMULATE-ACCUMULATION-LIST))
(setf (callers-list 'RANGE-COEFFICIENT-DOMAIN :setters) '(MAKE-POLYNOMIAL-MORPHISM))
(setf (callers-list 'SIMPLE-COEFS? :setters) '(PRINT-MPOLYNOMIAL-FORM))
(setf (callers-list 'COMPLEX-NUM-COEFS? :setters) '(PRINT-MPOLYNOMIAL-FORM))
(setf (callers-list 'BL :setters) '(POLY-EXPT))
(setf (callers-list 'MONOMIAL :setters) '(POLY-EXPT))
(setf (callers-list 'X^M :setters) '(POLY-EXPT))
(setf (callers-list 'NOM :setters) '(POLY-EXPT))
(setf (callers-list 'QUOTIENT :setters) '(TERMS-QUOTIENT))
(setf (callers-list 'GCD :setters) '(POLY-MGCD TERMS-CONTENT))
(setf (callers-list 'PP :setters) '(SPMOD-GCD1 TERMS-CONTENT))
(setf (callers-list 'PC :setters) '(SPMOD-GCD1 POLY-GCD))
(setf (callers-list 'QC :setters) '(SPMOD-GCD1 POLY-GCD))
(setf (callers-list 'PVARS :setters) '(POLY-FIND-COMMON-VARS POLY-SPLIT-ON-VARS))
(setf (callers-list 'POLYS :setters) '(POLY-MGCD POLY-FIND-COMMON-VARS
                                       POLY-SPLIT-ON-VARS))
(setf (callers-list 'ALL-POLYS :setters) '(POLY-FIND-COMMON-VARS))
(setf (callers-list 'SAME-VARS :setters) '(POLY-FIND-COMMON-VARS))
(setf (callers-list 'ODD-POLY :setters) '(POLY-MGCD))
(setf (callers-list 'EVEN-POLY :setters) '(POLY-MGCD))
(setf (callers-list 'NEW-POLYS :setters) '(POLY-MGCD))
(setf (callers-list 'CONTENT :setters) '(POLY-CONTENT-AND-PRIM-PART))
(setf (callers-list 'INV :setters) '(TERMS-MONICIZE))
(setf (callers-list 'DELTA :setters) '(TERMS-SUBRESULTANT-GCD TERMS-REDUCED-GCD))
(setf (callers-list 'BETA :setters) '(TERMS-SUBRESULTANT-GCD TERMS-REDUCED-GCD))
(setf (callers-list 'POLYNOMIAL :setters) '(COEFFICIENT LIST-OF-VARIABLES
                                            DEGREE PARTIAL-DERIV RESULTANT))
(setf (callers-list 'POLYNOMIAL~ :setters) '(RESULTANT))
(setf (callers-list 'PVAR :setters) '(RESULTANT))
(setf (callers-list 'INTO-VARLIST :setters) '(RESULTANT))
(setf (callers-list 'OUT-VARLIST :setters) '(RESULTANT))
(setf (callers-list 'FIRST-TIME :setters) '(TERMS-SUBRESULTANT-GCD))
(setf (callers-list 'VAR-VAL-PAIRS :setters) '(TERMS-SUBST))
(setf (callers-list 'VARLIST :setters) '(POLY-VARIABLE-LIST))
(setf (callers-list 'PDV :setters) '(TERMS-DEGREE-VECTOR ADD-VARIABLE-DEGREE
                                     POLY-DEGREE-VECTOR))
(setf (callers-list 'DEG :setters) '(CLIST-PRIMITIVE-PART! ADD-VARIABLE-DEGREE))
(setf (callers-list 'LIST-OF-VARS :setters) '(POLY-LIST-OF-VARIABLES))
(setf (callers-list 'ORDER-NUMBER :setters) '(GET-VARIABLE-NAME))
(setf (callers-list 'VARIABLE-TABLE :setters) '(ADD-NEW-VARIABLE
                                                INITIALIZE-INSTANCE))
(setf (callers-list 'VARIABLE-HASH-TABLE :setters) '(ADD-NEW-VARIABLE
                                                     INITIALIZE-INSTANCE))
(setf (callers-list 'PTS :setters) '(INTERPOLATE-FROM-SKEL SOLVE-VANDERMONDETD
                                     SOLVE-VANDERMONDET SOLVE-VANDERMONDE
                                     COMPUTE-VANDERMONDE-Q MAKE-DEGREE-MATRIX
                                     INTERPOLATE POLY-INTERPOLATE
                                     TERMS-INTERPOLATE))
(setf (callers-list 'QK :setters) '(TERMS-INTERPOLATE))
(setf (callers-list 'UK :setters) '(TERMS-INTERPOLATE))
(setf (callers-list 'XK :setters) '(TERMS-INTERPOLATE))
(setf (callers-list 'DEGREES :setters) '(INTERPOLATE))
(setf (callers-list 'VAR-CNT :setters) '(INTERPOLATE))
(setf (callers-list 'TERM-COUNT :setters) '(BOUND-DEGREE-TERM-COUNT))
(setf (callers-list 'EXPT-VECTS :setters) '(MAKE-DEGREE-MATRIX))
(setf (callers-list 'SOLS :setters) '(SOLVE-VANDERMONDETD SOLVE-VANDERMONDET
                                      SOLVE-VANDERMONDE))
(setf (callers-list 'QI :setters) '(SOLVE-VANDERMONDETD SOLVE-VANDERMONDET
                                    SOLVE-VANDERMONDE))
(setf (callers-list 'SKELETON :setters) '(POLY-SKELETON))
(setf (callers-list 'BP :setters) '(SPARSEINTERPSTAGEI SPARSEINTERPSTAGE))
(setf (callers-list 'PKMINUS1 :setters) '(SPARSEINTERPSTAGEI))
(setf (callers-list 'COEF-BOUND :setters) '(SPARSEINTERPSTAGEI))
(setf (callers-list 'SKEL :setters) '(INTERPOLATE-FROM-SKEL SPMOD-GCD2
                                      SPARSEINTERPSTAGEI))
(setf (callers-list 'GFP-DOMAIN :setters) '(SPARSEINTERPSTAGEI))
(setf (callers-list 'CUR-PT :setters) '(SPARSEINTERPSTAGEI))
(setf (callers-list 'EQ :setters) '(SPARSEINTERPSTAGEI))
(setf (callers-list 'PPRIME :setters) '(SPARSEINTERPSTAGEI))
(setf (callers-list 'TEMP-POLY :setters) '(SPARSEINTERPSTAGEI))
(setf (callers-list 'PK :setters) '(SPARSEINTERPSTAGEI))
(setf (callers-list 'QP :setters) '(SPMOD-GCD1))
(setf (callers-list 'PLC :setters) '(SPMOD-GCD1))
(setf (callers-list 'QLC :setters) '(SPMOD-GCD1))
(setf (callers-list 'START-POINT :setters) '(SPMOD-GCD1))
(setf (callers-list 'LC :setters) '(CLIST-PRIMITIVE-PART! TERMS-GCDU+
                                    SPMOD-GCD3 SPMOD-GCD2 SPMOD-GCD1))
(setf (callers-list 'IMAGE :setters) '(SPMOD-GCD2))
(setf (callers-list 'MAX-TERMS :setters) '(SPMOD-GCD3 SPMOD-GCD2))
(setf (callers-list 'SKELS :setters) '(SPMOD-GCD3 SPMOD-GCD2))
(setf (callers-list 'RAND-VALS :setters) '(SPMOD-GCD2))
(setf (callers-list 'GCDS :setters) '(CHECK-DEGREE SPMOD-GCD2))
(setf (callers-list 'SUBST :setters) '(CHECK-DEGREE SPMOD-GCD2))
(setf (callers-list 'RAND-VARS :setters) '(CHECK-DEGREE))
(setf (callers-list 'INIT-PT :setters) '(INTERPOLATE-FROM-SKEL CHECK-DEGREE))
(setf (callers-list 'EXPS :setters) '(EVAL-MONOMIAL))
(setf (callers-list 'COEFS :setters) '(INTERPOLATE-FROM-SKEL))
(setf (callers-list 'POLY-LIST :setters) '(DENSE-INTERPOLATE-COEFFICIENTS))
(setf (callers-list 'THIS-VAR :setters) '(DENSE-INTERPOLATE-COEFFICIENTS))
(setf (callers-list 'TERMS-LIST :setters) '(DENSE-INTERPOLATE-COEFFICIENTS))
(setf (callers-list 'SUB-POLYS :setters) '(DENSE-INTERPOLATE-COEFFICIENTS))
(setf (callers-list 'PT :setters) '(TERMS-GCDU+ TERMS-GCDU))
(setf (callers-list 'QT :setters) '(TERMS-GCDU+ TERMS-GCDU))
(setf (callers-list 'LENGTH :setters) '(MAKE-CLIST))
(setf (callers-list 'CL :setters) '(CLIST-SUBSEQ CLIST-GET))
(setf (callers-list 'BEG :setters) '(CLIST-SUBSEQ))
(setf (callers-list 'END :setters) '(CLIST-SIMPLIFY CLIST-SUBSEQ))
(setf (callers-list 'CLIST :setters) '(PRINT-UPOLYNOMIAL))
(setf (callers-list 'X-DEG :setters) '(CLIST-DIFFERENCE CLIST-PLUS))
(setf (callers-list 'Y-DEG :setters) '(CLIST-DIFFERENCE CLIST-PLUS))
(setf (callers-list 'ANSLIST :setters) '(CLIST-TIMES CLIST-MINUS))
(setf (callers-list 'XLEN :setters) '(CLIST-TIMES))
(setf (callers-list 'YLEN :setters) '(CLIST-TIMES))
(setf (callers-list 'XEXP :setters) '(CLIST-TIMES))
(setf (callers-list 'XELT :setters) '(CLIST-TIMES))
(setf (callers-list 'YEXP :setters) '(CLIST-DIVIDE CLIST-TIMES))
(setf (callers-list 'ANSEXP :setters) '(CLIST-TIMES))
(setf (callers-list 'XDEG :setters) '(CLIST-DIVIDE))
(setf (callers-list 'YDEG :setters) '(CLIST-DIVIDE))
(setf (callers-list 'YHIGH :setters) '(CLIST-DIVIDE))
(setf (callers-list 'QDEG :setters) '(CLIST-DIVIDE))
(setf (callers-list 'REM :setters) '(CLIST-DIVIDE))
(setf (callers-list 'QUOT :setters) '(CLIST-DIVIDE))
(setf (callers-list 'QEXP :setters) '(CLIST-DIVIDE))
(setf (callers-list 'FACTLIST :setters) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES
                                          CLIST-FACTOR-SQUAREFREE CFACTOR))
(setf (callers-list 'FACT :setters) '(CLIST-FACTOR CFACTOR))
(setf (callers-list 'PROD2 :setters) '(CLIST-SQFR-DECOMPOSE))
(setf (callers-list 'ROOTDEGREE :setters) '(CLIST-PTH-ROOT))
(setf (callers-list 'PEXP :setters) '(CLIST-PTH-ROOT))
(setf (callers-list 'REXP :setters) '(CLIST-PTH-ROOT))
(setf (callers-list 'DPOLY :setters) '(CLIST-FACTOR-SQUAREFREE))
(setf (callers-list 'POWER :setters) '(CLIST-FACTOR-SQUAREFREE))
(setf (callers-list 'NEWREDUCIBLES :setters) '(CLIST-FACTOR-PRODUCT-NTH-DEGREES))
(setf (callers-list 'Q1 :setters) '(COERCE CLIST-FACTOR-PRODUCT-NTH-DEGREES))
(setf (callers-list 'Q2 :setters) '(COERCE CLIST-FACTOR-PRODUCT-NTH-DEGREES))
(setf (callers-list 'NUM-VALUES :setters) '(MAKE-ELEMENT))
(setf (callers-list 'COEFF-DOMAIN :setters) '(QUOTIENT TIMES MAKE-ELEMENT))
(setf (callers-list 'RANGE-SPACE :setters) '(MAKE-AFFINE-SPACE))
(setf (callers-list 'HOMO :setters) '(MAP-FUN MAKE-AFFINE-SPACE))
(setf (callers-list 'Q0 :setters) '(COERCE))
(setf (callers-list 'Q3 :setters) '(COERCE))
(setf (callers-list 'Q0Q0 :setters) '(COERCE))
(setf (callers-list 'Q0Q1 :setters) '(COERCE))
(setf (callers-list 'Q0Q2 :setters) '(COERCE))
(setf (callers-list 'Q0Q3 :setters) '(COERCE))
(setf (callers-list 'Q1Q1 :setters) '(COERCE))
(setf (callers-list 'Q1Q2 :setters) '(COERCE))
(setf (callers-list 'Q1Q3 :setters) '(COERCE))
(setf (callers-list 'Q2Q2 :setters) '(COERCE))
(setf (callers-list 'Q2Q3 :setters) '(COERCE))
(setf (callers-list 'Q3Q3 :setters) '(COERCE))
(setf (callers-list 'MAT :setters) '(COERCE))
(setf (callers-list 'VARS-VECTORS :setters) '(LOOP-VECTOR-BIND))
(setf (callers-list 'VAR-BINDINGS :setters) '(LOOP-VECTOR-BIND))
(setf (callers-list 'SCALAR :setters) '(MULTIPLY-VECTOR-BY-SCALAR TIMES))
(setf (callers-list 'COERCED-SCALAR :setters) '(QUOTIENT TIMES))
(setf (callers-list 'V1 :setters) '(TILDE CROSS-PRODUCT))
(setf (callers-list 'V2 :setters) '(TILDE CROSS-PRODUCT))
(setf (callers-list 'MATRIX-SPACE :setters) '(TILDE))
(setf (callers-list 'V3 :setters) '(TILDE))