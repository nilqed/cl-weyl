%!PS-Adobe-2.0
%%Title: lisp-utilities.mss
%%DocumentFonts: (atend)
%%Creator: Mark Kantrowitz and Scribe 7(1700)
%%CreationDate: 23 May 1991 14:00
%%Pages: (atend)
%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq 
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath translate
    100.0 -100.0 scale pop /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
    div dup scale 100.0 -100.0 scale /showpage {} def} bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
   {dup FontMapDict exch known{FontMapDict exch get} if
   original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
/RC {100.0 -100.0 scale
612.0 0.0 translate
-90.0 rotate
.01 -.01 scale} bind def
/URC {100.0 -100.0 scale
90.0 rotate
-612.0 0.0 translate
.01 -.01 scale} bind def
/RCC {100.0 -100.0 scale
0.0 -792.0 translate 90.0 rotate
.01 -.01 scale} bind def
/URCC {100.0 -100.0 scale
-90.0 rotate 0.0 792.0 translate
.01 -.01 scale} bind def
%%EndProlog
%%Page: 0 1
BS
0 SI
17 /Times-Bold AF
17756 18843 MT
(Portable Utilities for Common Lisp)SH
17285 20838 MT
(User Guide & Implementation Notes)SH
14 /Times-Roman AF
25759 23943 MT
(Mark Kantrowitz)SH
/Times-Bold SF
27664 25790 MT
(May 1991)SH
25584 27637 MT
(CMU-CS-91-143)SH
12 /Times-Roman AF
23716 31798 MT
(School of Computer Science)SH
23565 33356 MT
(Cargnegie Mellon University)SH
24015 34914 MT
(Pittsburgh, PA 15213-3890)SH
/Times-Italic SF
25510 36472 MT
(mkant+@cs.cmu.edu)SH
15 /Times-Bold AF
27808 41875 MT
(Abstract)SH
12 /Times-Roman AF
7200 44614 MT
(One of the most frequent complaints in the Lisp community is)
304 W( the lack of availability of)303 W
7200 46117 MT
(programming tools. This document describes portable implementations of six tools for the)314 W
7200 47620 MT
(development and maintenance)
107 W( of Common Lisp programs:)106 W
10 SS 
36515 XM
(XREF)SH
12 SS 
(, a Lisp code cross referencer;)106 W
10 SS 
7200 49123 MT
(METERING)SH
12 SS 
(, a timing and consing code profiler;)780 W
10 SS 
35563 XM
(DEFSYSTEM)SH
12 SS 
(, a "make")
780 W( for Lisp;)781 W
10 SS 
7200 50626 MT
(LOGICAL-PATHNAMES)SH
12 SS 
(, portable pathnames)
148 W( for Lisp;)147 W
10 SS 
33505 XM
(SOURCE-COMPARE)SH
12 SS 
(, a "diff" for Lisp; and)147 W
10 SS 
7200 52129 MT
(USER-MANUAL)SH
12 SS 
(, a program which extracts documentation)
98 W( from Lisp programs. All six tools are)99 W
7200 53632 MT
(publicly available via anonymous ftp.)SH
10 SS 
7200 61886 MT
(This research was sponsored in part by a Hertz Foundation)
13 W( Research Fellowship Grant. The author is supported by a)12 W
7200 62991 MT
(National Science Foundation \050NSF\051 Graduate Fellowship.)SH
7200 65198 MT
(The views and conclusions)
152 W( contained in this document are those of the author and should not be interpreted as)153 W
7200 66303 MT
(representing the official policies, either expressed or implied, of the Hertz Foundation or the NSF.)SH
ES
%%Page: 1 2
BS
0 SI
11 /Times-Roman AF
8280 69155 MT
(Keywords: programming environments, Common Lisp, program maintenance,)
78 W( programming tools, cross)77 W
8280 70351 MT
(referencing, code profiling, source comparison, system definition, logical pathnames.)SH
ES
%%Page: 1 3
BS
0 SI
10 /Times-BoldItalic AF
8280 4291 MT
(Introduction)SH
/Times-Roman SF
54580 XM
(1)SH
16 /Times-Bold AF
8280 8272 MT
(1. Introduction)SH
12 /Times-Roman AF
8280 10703 MT
(This document describes six portable systems tools)
82 W( which aid programmers in the development)83 W
8280 12261 MT
(and maintenance of Common Lisp programs.)SH
14 /Times-Bold AF
8280 16079 MT
(1.1. Why Portable Utilities?)SH
12 /Times-Roman AF
8280 18334 MT
(One of the)
46 W( most frequent complaints in the Lisp community is the lack of general availability of)45 W
8280 19892 MT
(tools for system development and management.)
14 W( While some tools are available in particular Lisp)15 W
8280 21450 MT
(environments \050most notably)
117 W( on dedicated Lisp Machines, such as Symbolics and Xerox\051, none)116 W
8280 23008 MT
(are available in every version of Lisp, and those that are available are often incompatible.)SH
8280 25668 MT
(For example, many Lisps provide some sort)
393 W( of system definition tool, commonly called)394 W
8280 27226 MT
(`defsystem', but most such)
246 W( tools are incompatible.  Some Lisps use simple modules)
245 W( [6,)
SH( pp.)245 W
8280 28784 MT
(188-192], perhaps augmented)
71 W( with search lists, while others use a more complicated procedural)72 W
8280 30342 MT
(system-construction tool)
86 W( [3, 4].)
SH( Even those with)
86 W( similar functionality have a different definition)85 W
8280 31900 MT
(syntax. Since the tools are often)
81 W( proprietary, one is constrained either to using a particular Lisp)82 W
8280 33458 MT
(or to writing separate system definitions for)
159 W( each and every tool. With today's heterogeneous)158 W
8280 35016 MT
(programming environments,)
205 W( programmers often use different Lisps on different machines, or)206 W
8280 36574 MT
(even on the same machine, so the former is not a viable option and the)
21 W( latter is a major headache)20 W
8280 38132 MT
(for the program maintainer.)SH
8280 40792 MT
(A primary goal of this manual and associated)
210 W( software is to address this issue by providing)211 W
8280 42350 MT
(portable implementations of the most useful utilities.)
235 W( All of the utilities are implemented in)234 W
10 SS 
15635 43527 MT
(1)SH
12 SS 
8280 43908 MT
(Common Lisp)453 W
16888 XM
(and any Lisp implementation-dependent changes are clearly)
453 W( noted, with)452 W
8280 45466 MT
(reasonable defaults if)
34 W( the changes not supplied. Porting the tools to other Lisps is therefore quite)35 W
8280 47024 MT
(painless. Since)
242 W( the tools are publicly available for no fee, one may simply use the tools in)241 W
8280 48582 MT
(whichever Lisps one desires.)SH
14 /Times-Bold AF
8280 52400 MT
(1.2. Design Philosophy)SH
12 /Times-Roman AF
8280 54655 MT
(Although system development tools can greatly improve programmer productivity, not)
209 W( every)210 W
8280 56213 MT
(programmer has the time and opportunity to write such tools from scratch.)
122 W( On the other hand,)121 W
8280 57771 MT
(given source code for a tool that is close to what)
62 W( they want, most programmers can quickly and)63 W
8280 59329 MT
(easily modify it to meet their needs. Likewise, the programmer who encounters a bug in the tool)37 W
8280 60887 MT
(can fix it himself.)SH
8280 63547 MT
(If the incremental enhancements and changes made)
46 W( by the users are then propagated back to the)47 W
10800 50 8280 66675 UL
8 SS 
9280 68340 MT
(1)SH
10 SS 
9680 68685 MT
(The utilities)
126 W( have all been tested in Franz Allegro Common Lisp \0503.0.1 Decstation 3100\051, Macintosh Allegro)127 W
8280 69790 MT
(Common Lisp \0501.3.2\051, and CMU Common Lisp \050old and new compilers\051.)
126 W( In addition, many of the utilities have)125 W
8280 70895 MT
(been tested in other Lisps, including Lucid Common Lisp)
10 W( \0502.1 Vax, 3.0, and 4.0\051, Symbolics Common Lisp \0507.2 and)11 W
8280 72000 MT
(8.0\051, Ibuki Common Lisp, and VAXLisp.)SH
ES
%%Page: 2 4
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(2)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 /Times-Roman AF
6120 8023 MT
(original source, the improvements can snowball, yielding)
122 W( a better program than any individual)121 W
6120 9581 MT
(programmer or team)
1 W( of programmers could have written. This is especially true of programs with)2 W
6120 11139 MT
(a large community of users, such as programming tools.  The key is to get the ball rolling.)SH
6120 13799 MT
(Thus our philosophy in designing and implementing)
151 W( these utilities has been to concentrate on)150 W
6120 15357 MT
(basic functionality, and rely on the users to add)
103 W( the bells and whistles they want. To provide a)104 W
6120 16915 MT
(good starting point for new features, the program must be)
123 W( written in as generic and portable a)122 W
6120 18473 MT
(manner as)
114 W( possible. Accordingly, we wrote these utilities in "pure" Common Lisp, segregating)115 W
6120 20031 MT
(any implementation-dependent functions, and focused on)
430 W( providing a clean and efficient)429 W
6120 21589 MT
(implementation of the core of the programs.)SH
6120 24249 MT
(Even though most of the tools have been available for much)
70 W( less than a year, they have already)71 W
6120 25807 MT
(benefited from this approach. Users)
293 W( have helped port the utilities to other Lisps \050often by)292 W
6120 27365 MT
(providing just)
155 W( the implementation-dependent functions\051, fixed bugs, added features, and made)156 W
6120 28923 MT
(suggestions for)
206 W( other improvements. The tools have become quite popular, and are currently)205 W
6120 30481 MT
(being used by programmers at over 100 sites that we know of.)SH
14 /Times-Bold AF
6120 34299 MT
(1.3. Overview)SH
12 /Times-Roman AF
6120 36554 MT
(In the following chapters we describe each of the following utilities in detail:)SH
10 SS 
6120 38663 MT
(XREF)SH
12 SS 
9720 XM
(A portable cross)
182 W( referencing tool for determining callers of functions and variables in)183 W
9720 39949 MT
(Lisp programs.  Useful for mapping out)
300 W( the structure of a program. Similar to the)299 W
9720 41235 MT
(Symbolics Who-Calls database)
62 W( [3] [8,)
SH( pp.)
62 W( 183-185] and the Xerox Masterscope program)63 W
10020 42521 MT
([2]. Includes)
300 W( an interface to Joe Bates' PostScript DAG grapher for drawing call graphs.)SH
10 SS 
6120 44333 MT
(METERING)SH
12 SS 
9720 45619 MT
(A portable code profiling tool, for gathering)
357 W( timing and consing statistics while a)358 W
9720 46905 MT
(program is running. Monitors the use of functions and macros, calculating the number of)43 W
9720 48191 MT
(calls, CPU time, and storage use. Inclusive and)
210 W( exclusive function call statistics. The)211 W
10 SS 
9720 49477 MT
(METERING)SH
12 SS 
15191 XM
(system is based on the)5 W
10 SS 
26252 XM
(MONITOR)SH
12 SS 
31223 XM
(program written by Chris)
5 W( McConnell and the)4 W
10 SS 
9720 50763 MT
(PROFILE)SH
12 SS 
14076 XM
(program written by Skef Wholey and Rob MacLachlan, with several extensions.)SH
10 SS 
6120 52575 MT
(DEFSYSTEM)SH
12 SS 
9720 53861 MT
(A portable system definition facility \050a "make" for Lisp\051, similar to the)
16 W( Symbolics system)15 W
9720 55147 MT
(construction tool)
355 W( [3] [4].)
SH( Compiles and loads files according to a user-defined file-)356 W
9720 56433 MT
(dependency graph, while trying)
40 W( to minimize extraneous compilations and loads. Includes)39 W
9720 57719 MT
(an interface to)46 W
10 SS 
17025 XM
(LOGICAL-PATHNAMES)SH
12 SS 
(.)SH
10 SS 
28503 XM
(XREF)SH
12 SS 
31405 XM
(includes a tool to)
46 W( assist in building a system)47 W
9720 59005 MT
(definition for a set of files.)SH
10 SS 
6120 60817 MT
(LOGICAL-PATHNAMES)SH
12 SS 
9720 62103 MT
(A portable implementation of the X3J13 June 1989)
102 W( specification for logical pathnames,)103 W
9720 63389 MT
(as documented in)
87 W( [7,)
SH( section 23.1.5].)
87 W( Useful for portable pathname reference, cross-host)86 W
9720 64675 MT
(access, and pathname aliasing.)SH
10 SS 
6120 66487 MT
(SOURCE-COMPARE)SH
12 SS 
9720 67773 MT
(A portable tool for finding the)
47 W( differences between source files \050a "diff" for Lisp\051. While)46 W
9720 69059 MT
(it may be used to)
41 W( compare arbitrary text files, it has several features specialized for Lisp,)42 W
9720 70345 MT
(such as the ability to ignore)
269 W( Lisp comments. It uses a greedy algorithm for longest)268 W
9720 71631 MT
(common substring that)
1 W( may not necessarily find the longest common substring, but which)2 W
ES
%%Page: 3 5
BS
0 SI
10 /Times-BoldItalic AF
8280 4291 MT
(Introduction)SH
/Times-Roman SF
54580 XM
(3)SH
12 SS 
11880 8023 MT
(runs in average case linear time and works well in practice.)SH
10 SS 
8280 9835 MT
(USER-MANUAL)SH
12 SS 
11880 11121 MT
(A portable program for extracting documentation from)
169 W( Lisp source code. Helps create)170 W
11880 12407 MT
(user guides and program documentation.)SH
8280 15067 MT
(This manual describes only the programming utilities. The collection)
91 W( also includes other useful)90 W
8280 16625 MT
(Lisp programs, such as a regular-expression style matcher and FrameWork,)
194 W( a generic frame-)195 W
8280 18183 MT
(based knowledge representation system, as well as a variety of)
231 W( text files of interest to Lisp)230 W
8280 19741 MT
(programmers.)SH
8280 22401 MT
(Within each chapter we first give an overview of the basic features of the utility, including basic)35 W
8280 23959 MT
(commands and variables. Next,)
22 W( we describe how to load the software, with a particular emphasis)21 W
8280 25517 MT
(on what implementation-dependent changes may be required. Then come usage)
169 W( notes, if any.)170 W
8280 27075 MT
(After that follows a few examples of how to use the programs)
125 W( and sample output. Finally, we)124 W
8280 28633 MT
(conclude each chapter)
55 W( with a discussion of the implementation, which should help users modify)56 W
8280 30191 MT
(and extend the software.)SH
14 /Times-Bold AF
8280 34009 MT
(1.4. Obtaining the Utilities)SH
12 /Times-Roman AF
8280 36264 MT
(The utilities are available by anonymous ftp from CMU:)SH
/Symbol SF
10428 37967 MT
(\267)SH
11 /Courier AF
11280 XM
(ftp)SH
12 /Times-Roman AF
13560 XM
(to)SH
11 /Courier AF
14794 XM
(a.gp.cs.cmu.edu)SH
12 /Times-Roman AF
24994 XM
([128.2.242.7] or any other CMU CS machine.)SH
/Symbol SF
10428 39996 MT
(\267)SH
/Times-Roman SF
11280 XM
(The directory)830 W
11 /Courier AF
19740 XM
(/afs/cs.cmu.edu/user/mkant/Public/Lisp-Utilities/)SH
12 /Times-Roman AF
11280 41282 MT
(contains the files.)SH
/Symbol SF
10428 43311 MT
(\267)SH
11 /Courier AF
11280 XM
(cd)SH
12 /Times-Roman AF
13108 XM
(to this directory in one fell swoop. Do not try to)208 W
11 /Courier AF
38669 XM
(cd)SH
12 /Times-Roman AF
40498 XM
(or)SH
11 /Courier AF
42007 XM
(ls)SH
12 /Times-Roman AF
43836 XM
(any intermediate)209 W
11280 44597 MT
(directories, since the CMU security)
90 W( mechanisms prevent access to other directories)89 W
11280 45883 MT
(from an anonymous ftp.)SH
/Symbol SF
10428 47912 MT
(\267)SH
/Times-Roman SF
11280 XM
(Use)SH
11 /Courier AF
13682 XM
(ls)SH
12 /Times-Roman AF
15538 XM
(to see what files are available.)
236 W( For users accessing the directory via an)237 W
11280 49198 MT
(anonymous ftp mail server, the file)506 W
11 /Courier AF
31420 XM
(README)SH
12 /Times-Roman AF
36186 XM
(contains a current listing and)506 W
11280 50484 MT
(description of the files in the directory. The file)95 W
11 /Courier AF
35207 XM
(UPDATES)SH
12 /Times-Roman AF
40222 XM
(describes recent)
95 W( updates)96 W
11280 51770 MT
(to the released versions of the software in the directory. The file)29 W
11 /Courier AF
42665 XM
(COPYING)SH
12 /Times-Roman AF
47613 XM
(describes)SH
11280 53056 MT
(the general license agreement and lack of warranty.)SH
10 SS 
33308 55335 MT
(2)SH
12 SS 
8280 55716 MT
(Of course, if your site runs the Andrew File System)25 W
34133 XM
(and you have afs access, you can just)25 W
11 /Courier AF
52500 XM
(cd)SH
12 /Times-Roman AF
54146 XM
(to)SH
8280 57274 MT
(the directory and copy the files directly.)SH
8280 59934 MT
(The following is an example of using ftp to retrieve the software:)SH
10 /Courier-Bold AF
10080 61739 MT
(% ftp a.gp.cs.cmu.edu)SH
10080 62870 MT
(Connected to A.GP.CS.CMU.EDU.)SH
10800 50 8280 65570 UL
8 /Times-Roman AF
9280 67235 MT
(2)SH
10 SS 
9680 67580 MT
(Currently Boston University, Carnegie Mellon University, Chalmers)
69 W( University of Technology, Dartmouth, HP)70 W
8280 68685 MT
(Cupertino, Idaho National Engineering Lab, MIT, Mt. Xinu, Naval Research Lab, NIH, Open Software)
30 W( Foundation,)29 W
8280 69790 MT
(Pittsburgh Supercomputing)
73 W( Center, Rensselaer Polytechnic Institute, Stanford, Superconducting Supercollider Lab,)74 W
8280 70895 MT
(Transarc, Unisys, University of)
315 W( Arizona, University of Michigan, University of Notre Dame, University of)314 W
8280 72000 MT
(Pittsburgh, and University of Southern California/ISI.)SH
ES
%%Page: 4 6
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(4)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
/Courier-Bold SF
7920 7874 MT
(220 A.GP.CS.CMU.EDU FTP server \050Version 4.105 of 10-Jul-90 12:07\051 ready.)SH
7920 9005 MT
(Name \050a.gp.cs.cmu.edu:mkant\051: anonymous)SH
7920 10136 MT
(331 Guest login ok, send ident as password.)SH
7920 11267 MT
(Password:)SH
7920 12398 MT
(230 Filenames can not have '/..' in them.)SH
7920 13529 MT
(ftp> cd /afs/cs.cmu.edu/user/mkant/Public/Lisp-Utilities)SH
7920 14660 MT
(250 Directory path set to /afs/cs.cmu.edu/user/mkant/Public/Lisp-Utilities.)SH
7920 15791 MT
(ftp> ls)SH
7920 16922 MT
(200 PORT command successful.)SH
7920 18053 MT
(150 Opening data connection for ls \050128.2.220.10,3107\051.)SH
7920 19184 MT
(COPYING)SH
7920 20315 MT
(README)SH
7920 21446 MT
(UPDATES)SH
7920 22577 MT
(c-lisp-interfaces.text)SH
7920 23708 MT
(cl-x-lisp-interfaces.text)SH
7920 24839 MT
(defsystem.lisp)SH
9720 25970 MT
([...rest of listing deleted...])SH
7920 27101 MT
(226 Transfer complete.)SH
7920 28232 MT
(430 bytes received in 0.23 seconds \0501.8 Kbytes/s\051)SH
12 /Times-Roman AF
6120 30892 MT
(The following table lists the relevant files, their length in)
128 W( lines of Lisp \050excluding comments\051,)127 W
6120 32450 MT
(and their size in bytes:)SH
25237 34741 MT
(File)SH
33453 XM
(lines)SH
36685 XM
(bytes)SH
20197 50 19421 35403 LH BX1
-1884 50 32922 35403 LV BX1
-1884 50 36120 35403 LV BX1
19820 36625 MT
(defsystem.lisp)SH
33321 XM
(1391)SH
37419 XM
(88k)SH
20197 50 19421 37287 LH BX1
19820 38509 MT
(framework.lisp)SH
33321 XM
(1666)SH
36819 XM
(125k)SH
20197 50 19421 39171 LH BX1
19820 40393 MT
(logical-pathnames.lisp)SH
33321 XM
(1511)SH
37419 XM
(77k)SH
20197 50 19421 41055 LH BX1
19820 42277 MT
(matcher.lisp)SH
33921 XM
(113)SH
37419 XM
(15k)SH
20197 50 19421 42939 LH BX1
19820 44161 MT
(metering.lisp)SH
33921 XM
(714)SH
37419 XM
(45k)SH
20197 50 19421 44823 LH BX1
19820 46045 MT
(psgraph.lisp)SH
33921 XM
(457)SH
37419 XM
(18k)SH
20197 50 19421 46707 LH BX1
19820 47929 MT
(psgraph.doc)SH
38019 XM
(5k)SH
20197 50 19421 48591 LH BX1
19820 49813 MT
(source-compare.lisp)SH
33921 XM
(640)SH
37419 XM
(54k)SH
20197 50 19421 50475 LH BX1
19820 51697 MT
(user-manual.lisp)SH
33921 XM
(500)SH
37419 XM
(35k)SH
20197 50 19421 52359 LH BX1
19820 53581 MT
(xref.lisp)SH
33321 XM
(2109)SH
36819 XM
(125k)SH
20197 50 19421 54243 LH BX1
19820 55465 MT
(xref-patterns-for-macl.lisp)SH
34521 XM
(76)SH
38019 XM
(3k)SH
20197 50 19421 56127 LH BX1
19820 57349 MT
(xref-test.lisp)SH
34521 XM
(92)SH
38019 XM
(2k)SH
20197 50 19421 58011 LH BX1
/Times-Bold SF
19820 59233 MT
(Total)SH
/Times-Roman SF
33321 XM
(9269)SH
36819 XM
(592k)SH
20197 26376 50 19421 59895 BX BX1
-24492 50 32922 59895 LV BX1
-24492 50 36120 59895 LV BX1
6120 62555 MT
(There is a mailing list for notification of major updates, bug-fixes and additions to the)
208 W( Lisp)209 W
6120 64113 MT
(Utilities collection. To be added to the mailing list, send)
104 W( email with your name, email address,)103 W
6120 65671 MT
(and affiliation to)SH
11 /Courier AF
14423 XM
(CL-Utilities-Request@cs.cmu.edu)SH
12 /Times-Roman AF
(.)SH
6120 68331 MT
(Bug reports,)
233 W( comments, questions and suggestions should be sent to)234 W
11 /Courier AF
41400 XM
(mkant+@cs.cmu.edu)SH
12 /Times-Roman AF
(.)SH
6120 69889 MT
(Also, please send us copies of any changes or improvements)
96 W( you make to the software, so that)95 W
6120 71447 MT
(we may merge them into the originals.)SH
ES
%%Page: 5 7
BS
0 SI
10 /Times-BoldItalic AF
8280 4291 MT
(Introduction)SH
/Times-Roman SF
54580 XM
(5)SH
14 /Times-Bold AF
8280 8138 MT
(1.5. Acknowledgments)SH
12 /Times-Roman AF
8280 10393 MT
(Many users of the tools have contributed enhancements, bug fixes, suggestions)
48 W( and detailed bug)49 W
8280 11951 MT
(reports. I would especially like to thank Anton Beschta, Sean Boisen, Michael Brent,)
233 W( Steve)232 W
8280 13509 MT
(Chanin, Daniel J. Clancy, Matthew Cornell, Rodney Daughtrey,)
222 W( David A. Duff, Ute Gappa,)223 W
8280 15067 MT
(Gabriel Inaebnit, Dick Jackson,)
76 W( Bradford W. Miller, Karsten Poeck, Jean-Francois Rit, William)75 W
8280 16625 MT
(D. Smith, Ralph P. Sobek, Steve Strassmann and Rick Taube.)SH
8280 19285 MT
(The)SH
10 SS 
10710 XM
(METERING)SH
12 SS 
16440 XM
(code profiler is derived directly from the work of Chris McConnell on the)264 W
10 SS 
8280 20843 MT
(MONITOR)SH
12 SS 
13274 XM
(program and the work of Skef Wholey and Rob MacLachlan on the)27 W
10 SS 
46330 XM
(PROFILE)SH
12 SS 
50713 XM
(program.)SH
8280 22401 MT
(Many thanks to Chris)
94 W( McConnell and Rob MacLachlan for comments on the result of merging)95 W
8280 23959 MT
(and extending their two programs.)SH
8280 26619 MT
(Thanks to Neil J. Calkin for the idea that)
25 W( led to the proof that)24 W
10 SS 
38263 XM
(SOURCE-COMPARE)SH
12 SS 
47699 XM
(runs in average)24 W
8280 28177 MT
(case linear time.)SH
8280 30837 MT
(I am grateful to Peter Lee for supervising this work towards a minor in programming systems.)SH
8280 33497 MT
(Finally, I would like to thank)
141 W( my advisor, Joe Bates, for allowing me to become occasionally)142 W
8280 35055 MT
("distracted" from my research to work on the utilities during the past year.)SH
ES
%%Page: 6 8
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(6)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
ES
%%Page: 7 9
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(XREF)SH
10 SS 
(: Cross Referencer)SH
/Times-Roman SF
54580 XM
(7)SH
16 /Times-Bold AF
8280 8272 MT
(2.)SH
14 SS 
9880 XM
(XREF)SH
16 SS 
(: Cross Referencer)SH
12 /Times-Roman AF
8280 10703 MT
(The)SH
10 SS 
10582 XM
(XREF)SH
12 SS 
13574 XM
(or List Callers system is a portable Common Lisp)
136 W( cross referencing tool. It grovels)135 W
8280 12261 MT
(over a set of files and compiles a database of the locations of all references to)
44 W( each symbol used)45 W
8280 13819 MT
(in the files. It is similar to the Symbolics Who-Calls and Xerox Masterscope facilities [2] [3] [8].)SH
8280 16479 MT
(When you change a function)
73 W( or variable definition, it can be useful to know its callers, in order)72 W
8280 18037 MT
(to update each of them to match the)
3 W( new definition. Similarly, a graphical display of the structure)4 W
8280 19595 MT
(of a program)
287 W( can help make undocumented code more understandable. This code analyzer)286 W
8280 21153 MT
(implements both capabilities.)SH
8280 23813 MT
(The database compiled by)136 W
10 SS 
21691 XM
(XREF)SH
12 SS 
24683 XM
(is suitable for viewing by a graphical browser. Since the call)136 W
8280 25371 MT
(graph is)
147 W( not necessarily a DAG, and many graphical browsers assume a DAG,)146 W
10 SS 
48077 XM
(XREF)SH
12 SS 
51079 XM
(includes)SH
8280 26929 MT
(code to)
4 W( convert the graph to a tree-like representation.)5 W
10 SS 
34593 XM
(XREF)SH
12 SS 
37454 XM
(also includes a simple text-indenting)5 W
8280 28487 MT
(outliner for displaying call graphs on ascii terminals, as)
271 W( well as an interface to Joe Bates')270 W
10 SS 
8280 30045 MT
(PSGRAPH)SH
12 SS 
13081 XM
(PostScript DAG grapher.)SH
14 /Times-Bold AF
8280 33863 MT
(2.1. Overview)SH
10 /Times-Roman AF
8280 36118 MT
(XREF)SH
12 SS 
11374 XM
(analyzes a user's program, determining which functions call a given function and the)239 W
8280 37676 MT
(locations where variables are bound/assigned and used. The user may retrieve this information)119 W
8280 39234 MT
(for a single symbol, or display the)
34 W( call graph of portions of the program \050up to and including the)35 W
8280 40792 MT
(entire program\051. This helps the programmer debug and document the program's structure.)SH
10 SS 
8280 43452 MT
(XREF)SH
12 SS 
11501 XM
(is primarily intended for)
365 W( analyzing large programs, for which it is difficult, if not)364 W
8280 45010 MT
(impossible, for the programmer to grasp the structure of the whole program. Nothing)
84 W( precludes)85 W
8280 46568 MT
(using)SH
10 SS 
11674 XM
(XREF)SH
12 SS 
15023 XM
(for smaller programs, however, where it can be useful for)
493 W( inspecting the)492 W
8280 48126 MT
(relationships between pieces of the program and for documenting the program.)SH
10 SS 
53989 50405 MT
(3)SH
12 SS 
8280 50786 MT
(Two aspects of the Lisp programming language greatly simplify the analysis of Lisp programs:)SH
/Symbol SF
10428 52489 MT
(\267)SH
/Times-Roman SF
11280 XM
(The syntax of Lisp programs and)
117 W( data are the same. Successive definitions from a)118 W
11280 53775 MT
(file may be read in as list structure.)SH
/Symbol SF
10428 55804 MT
(\267)SH
/Times-Roman SF
11280 XM
(The basic syntax)
196 W( of Lisp is uniform. A Lisp program consists of a set of nested)195 W
11280 57090 MT
(forms, where each)
290 W( form is a list whose car is a tag \050e.g., function name\051 that)291 W
11280 58376 MT
(specifies the structure of the rest of the form.)SH
10 SS 
44228 59805 MT
(4)SH
12 SS 
8280 60186 MT
(Thus Lisp programs, when read)
89 W( as data, can be thought of as parse trees.)88 W
45116 XM
(Given a grammar of)88 W
8280 61744 MT
(syntax patterns)
40 W( for the language,)41 W
10 SS 
24419 XM
(XREF)SH
12 SS 
27316 XM
(recursively descends the parse tree for a given definition,)41 W
8280 63302 MT
(computing a set of relations that hold for the definition at each)
74 W( node in the tree. For example, a)73 W
10800 50 8280 65570 UL
8 SS 
9280 67235 MT
(3)SH
10 SS 
9680 67580 MT
(Of course, macros and eval complicate the analysis of Lisp programs.)SH
8 SS 
9280 69445 MT
(4)SH
10 SS 
9680 69790 MT
(While)SH
8 SS 
12555 XM
(XREF)SH
10 SS 
15032 XM
(currently works only for programs written)
181 W( in Lisp, it could be extended to other programming)180 W
8280 70895 MT
(languages by writing a function to generate parse trees for definitions in that language, and a)
25 W( core set of patterns for)26 W
8280 72000 MT
(the language's syntax.)SH
ES
%%Page: 8 10
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(8)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 /Times-Roman AF
6120 8023 MT
(typical relation is that the functions in the body of a definition are called by the defined function.)19 W
6120 9581 MT
(The relations are stored in a database for later inspection by the user.)SH
10 SS 
6120 12241 MT
(XREF)SH
12 SS 
9109 XM
(may operate in either a)
133 W( static or a dynamic mode. In the static mode)132 W
10 SS 
43800 XM
(XREF)SH
12 SS 
46788 XM
(does a static)132 W
6120 13799 MT
(syntactic analysis of the)
26 W( program, but does not detect references due to the expansion of a macro)27 W
6120 15357 MT
(definition. In the dynamic mode)265 W
10 SS 
23182 XM
(XREF)SH
12 SS 
26303 XM
(will expand any macros for which it)
265 W( does not have)264 W
6120 16915 MT
(predefined patterns.)SH
6120 19575 MT
(The dynamic analysis of a program requires)60 W
10 SS 
27975 XM
(XREF)SH
12 SS 
30891 XM
(to have some knowledge about the semantics)60 W
6120 21133 MT
(of the program. For example, a macro could call functions defined by)
175 W( the program to do the)174 W
6120 22691 MT
(expansion. This entails either modifying)
15 W( the compiler to record the relationships \050e.g., Symbolics)16 W
6120 24249 MT
(Who-Calls Database\051 or doing a)
39 W( walk of loaded code and macroexpanding as needed \050PCL code)38 W
6120 25807 MT
(walker\051. Since the former is not portable,)SH
10 SS 
26156 XM
(XREF)SH
12 SS 
29012 XM
(implements the latter.)SH
6120 28467 MT
(In order for)35 W
10 SS 
12058 XM
(XREF)SH
12 SS 
14949 XM
(to expand macros)
35 W( the code used by the macros must be loaded and in working)36 W
6120 30025 MT
(order. Also,)72 W
10 SS 
12264 XM
(XREF)SH
12 SS 
('s parameters probably should)
72 W( be set so that it processes forms in their proper)71 W
6120 31583 MT
(packages. If the code is not loaded,)121 W
10 SS 
24134 XM
(XREF)SH
12 SS 
27111 XM
(will default to operating in the static analysis mode.)121 W
6120 33141 MT
(When)SH
10 SS 
9291 XM
(XREF)SH
12 SS 
12152 XM
(operates in dynamic mode it doesn't need any special knowledge about the syntax)
5 W( of)4 W
6120 34699 MT
(macros \050excluding the 24 special forms of Lisp\051. On the)
45 W( other hand, to operate properly in static)46 W
6120 36257 MT
(analysis mode)144 W
10 SS 
13542 XM
(XREF)SH
12 SS 
16541 XM
(must have patterns defined for all the standard macros of Common Lisp.)143 W
6120 37815 MT
(Thus, even though most Lisps)
618 W( implement)619 W
11 /Courier AF
30002 XM
(dolist)SH
12 /Times-Roman AF
34881 XM
(as a macro,)619 W
10 SS 
42471 XM
(XREF)SH
12 SS 
45946 XM
(will not call)619 W
11 /Courier AF
6120 39373 MT
(macroexpand-1)SH
12 /Times-Roman AF
15020 XM
(on a form whose car)
20 W( is)19 W
11 /Courier AF
26338 XM
(dolist)SH
12 /Times-Roman AF
30617 XM
(because it will use the predefined template for)19 W
11 /Courier AF
6120 40931 MT
(dolist)SH
12 /Times-Roman AF
10380 XM
(instead.)SH
6120 43591 MT
(If macro)
244 W( expansion is disabled, the default rules for handling macro references may not be)245 W
6120 45149 MT
(sufficient for some user-defined macros, because macros)
382 W( allow a variety of non-standard)381 W
6120 46707 MT
(syntactic extensions to the)
63 W( language. In this case, the user may specify additional templates in a)64 W
6120 48265 MT
(manner similar to that in which the core Lisp grammar was specified.)SH
14 /Times-Bold AF
6120 52083 MT
(2.2. Loading)SH
12 SS 
13899 XM
(XREF)SH
10 /Times-Roman AF
6120 54338 MT
(XREF)SH
12 SS 
9088 XM
(runs best when compiled and will issue a warning if the source is loaded instead. It also)112 W
6120 55896 MT
(loads much faster when compiled. To use, load the)
156 W( compiled version of)157 W
11 /Courier AF
42600 XM
(xref.lisp)SH
12 /Times-Roman AF
48997 XM
(and any)157 W
6120 57454 MT
(additional patterns, such as)443 W
11 /Courier AF
21195 XM
(xref-patterns-for-macl.lisp)SH
12 /Times-Roman AF
(.)SH
10 SS 
40058 XM
(XREF)SH
12 SS 
43357 XM
(is loaded)
443 W( into the)442 W
6120 59012 MT
("XREF" package, so prefix all the following functions and variables with an "XREF:".)SH
14 /Times-Bold AF
6120 62830 MT
(2.3. Using)SH
12 SS 
12343 XM
(XREF)SH
/Times-Roman SF
6120 65085 MT
(This section describes all of the basic)188 W
10 SS 
25673 XM
(XREF)SH
12 SS 
28717 XM
(commands and)
188 W( the variables which control their)189 W
6120 66643 MT
(behavior.)SH
10 SS 
10934 XM
(XREF)SH
12 SS 
13804 XM
(includes functions for creating)
14 W( the reference database, saving the database to file,)13 W
6120 68201 MT
(restoring a saved database, and retrieving information from the database in a variety of formats.)SH
ES
%%Page: 9 11
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(XREF)SH
10 SS 
(: Cross Referencer)SH
/Times-Roman SF
54580 XM
(9)SH
12 /Times-Bold AF
8280 8004 MT
(2.3.1. Creating, Saving and Restoring the Reference Database)SH
11 /Courier AF
8280 10083 MT
(xref-files)SH
12 /Times-Roman AF
15332 XM
(and)SH
11 /Courier AF
17517 XM
(xref-file)SH
12 /Times-Roman AF
23909 XM
(are the main functions for creating the reference)
152 W( database. For)153 W
8280 11641 MT
(very large systems of files it can take several)
4 W( minutes to process the code, so writing the database)3 W
8280 13199 MT
(to file may)
146 W( save some time.)147 W
11 /Courier AF
22664 XM
(write-callers-database-to-file)SH
12 /Times-Roman AF
42911 XM
(may be used to save the)147 W
8280 14757 MT
(database to a file, which may then be loaded using)SH
11 /Courier AF
32782 XM
(load)SH
12 /Times-Roman AF
35722 XM
(to restore the database.)SH
11 /Courier AF
8280 16649 MT
(xref-files)SH
12 /Times-Roman AF
15180 XM
(\050&rest files\051)SH
50012 XM
([Function])SH
10680 18432 MT
(Grovels over the Lisp code located in the specified source files)SH
/Times-Italic SF
41183 XM
(files)SH
/Times-Roman SF
(, using)SH
11 /Courier AF
10680 19718 MT
(xref-file)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
8280 21610 MT
(xref-file)SH
12 /Times-Roman AF
14520 XM
(\050filename &optional \050clear-tables t\051)SH
50012 XM
([Function])SH
15120 22896 MT
(\050verbose *xref-verbose*\051\051)SH
10680 24679 MT
(Cross references the function and variable calls in)SH
/Times-Italic SF
34949 XM
(filename)SH
/Times-Roman SF
39383 XM
(by walking over the source)SH
10680 25965 MT
(code located in the file. Defaults type of filename to ")SH
11 /Courier AF
(lisp)SH
12 /Times-Roman AF
(". If)SH
/Times-Italic SF
41304 XM
(clear-tables)SH
/Times-Roman SF
47339 XM
(is)SH
11 /Courier AF
48440 XM
(t)SH
12 /Times-Roman AF
49400 XM
(\050the)SH
10680 27251 MT
(default\051, it clears the callers database before processing the file. Specify)SH
/Times-Italic SF
45451 XM
(clear-tables)SH
/Times-Roman SF
51486 XM
(as)SH
11 /Courier AF
10680 28537 MT
(nil)SH
12 /Times-Roman AF
12960 XM
(to append to the database. If)SH
/Times-Italic SF
26794 XM
(verbose)SH
/Times-Roman SF
30827 XM
(is)SH
11 /Courier AF
31928 XM
(t)SH
12 /Times-Roman AF
32888 XM
(\050the default\051, prints out the name of the)SH
10680 29823 MT
(file, one progress dot for each form processed, and the total number of forms.)SH
11 /Courier AF
8280 31715 MT
(write-callers-database-to-file)SH
12 /Times-Roman AF
28380 XM
(\050filename\051)SH
50012 XM
([Function])SH
10680 33498 MT
(Saves the contents of the current callers database to a file. This file can be loaded to)SH
10680 34784 MT
(restore the previous contents of the database.)SH
/Times-Bold SF
8280 38468 MT
(2.3.2. Examining Symbol References)SH
/Times-Roman SF
8280 40547 MT
(The following functions display information about the uses of the specified symbol as)
28 W( a function)27 W
8280 42105 MT
(or variable.)SH
11 /Courier AF
8280 43997 MT
(list-callers)SH
12 /Times-Roman AF
16500 XM
(\050symbol\051)SH
50012 XM
([Function])SH
10680 45780 MT
(Lists all functions which call)SH
/Times-Italic SF
24851 XM
(symbol)SH
/Times-Roman SF
28551 XM
(as a function \050function invocation\051.)SH
11 /Courier AF
8280 47672 MT
(list-readers)SH
12 /Times-Roman AF
16500 XM
(\050symbol\051)SH
50012 XM
([Function])SH
10680 49455 MT
(Lists all functions which refer to)SH
/Times-Italic SF
26617 XM
(symbol)SH
/Times-Roman SF
30317 XM
(as a variable \050variable reference\051.)SH
11 /Courier AF
8280 51347 MT
(list-setters)SH
12 /Times-Roman AF
16500 XM
(\050symbol\051)SH
50012 XM
([Function])SH
10680 53130 MT
(Lists all functions which bind/set)SH
/Times-Italic SF
26919 XM
(symbol)SH
/Times-Roman SF
30619 XM
(as a variable \050variable assignment\051.)SH
11 /Courier AF
8280 55022 MT
(list-users)SH
12 /Times-Roman AF
15180 XM
(\050symbol\051)SH
50012 XM
([Function])SH
10680 56805 MT
(Lists all functions which use)SH
/Times-Italic SF
24717 XM
(symbol)SH
/Times-Roman SF
28417 XM
(as a variable or function.)SH
11 /Courier AF
8280 58697 MT
(who-calls)SH
12 /Times-Roman AF
14520 XM
(\050symbol &optional how\051)SH
50012 XM
([Function])SH
10680 60480 MT
(Lists callers of symbol.)SH
/Times-Italic SF
22184 XM
(how)SH
/Times-Roman SF
24484 XM
(may be)SH
11 /Courier AF
28284 XM
(:function)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
34824 XM
(:reader)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
40044 XM
(:setter)SH
12 /Times-Roman AF
(, or)SH
11 /Courier AF
10680 61766 MT
(:variable)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
8280 63658 MT
(what-files-call)SH
12 /Times-Roman AF
18480 XM
(\050symbol\051)SH
50012 XM
([Function])SH
10680 65441 MT
(Lists names of files that contain uses of)SH
/Times-Italic SF
29952 XM
(symbol)SH
/Times-Roman SF
33652 XM
(as a function, variable, or constant.)SH
11 /Courier AF
8280 67333 MT
(source-file)SH
12 /Times-Roman AF
15840 XM
(\050symbol\051)SH
50012 XM
([Function])SH
10680 69116 MT
(Lists the names of files in which)SH
/Times-Italic SF
26584 XM
(symbol)SH
/Times-Roman SF
30284 XM
(is defined and/or used.)SH
ES
%%Page: 10 12
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(10)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
11 /Courier AF
6120 8023 MT
(list-callees)SH
12 /Times-Roman AF
14340 XM
(\050symbol\051)SH
47852 XM
([Function])SH
8520 9806 MT
(Lists names of functions and variables called by)SH
/Times-Italic SF
31924 XM
(symbol)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
6120 13490 MT
(2.3.3. Viewing and Graphing the Reference Database)SH
/Times-Roman SF
6120 15569 MT
(The following functions are useful for viewing the database)
188 W( and displaying it in a variety of)189 W
6120 17127 MT
(formats.)SH
11 /Courier AF
6120 19019 MT
(display-database)SH
12 /Times-Roman AF
16980 XM
(\050&optional \050database :callers\051)SH
47852 XM
([Function])SH
17580 20305 MT
(\050types-to-ignore *types-to-ignore*\051\051)SH
8520 22088 MT
(Prints the name of each symbol and a list of all its callers. Specify)SH
/Times-Italic SF
40495 XM
(database)SH
/Times-Roman SF
45129 XM
(as)SH
11 /Courier AF
8520 23374 MT
(:callers)SH
12 /Times-Roman AF
14100 XM
(\050the default\051 to get function call references, as)SH
11 /Courier AF
36469 XM
(:file)SH
12 /Times-Roman AF
40069 XM
(to the get files in)SH
8520 24660 MT
(which the symbol is called, as)SH
11 /Courier AF
23223 XM
(:readers)SH
12 /Times-Roman AF
28803 XM
(to get variable references, and as)SH
11 /Courier AF
44836 XM
(:setters)SH
12 /Times-Roman AF
8520 25946 MT
(to get variable binding and assignments. Ignores functions of the types listed in)SH
/Times-Italic SF
8520 27232 MT
(types-to-ignore)SH
/Times-Roman SF
(.)SH
11 /Courier AF
6120 29124 MT
(print-caller-trees)SH
12 /Times-Roman AF
18300 XM
(\050&key \050mode *default-graphing-mode*\051)SH
47852 XM
([Function])SH
18900 30410 MT
(\050types-to-ignore *types-to-ignore*\051 compact)SH
18900 31696 MT
(root-nodes\051)SH
8520 33479 MT
(Prints the calling trees \050which may actually be a full graph and not necessarily a DAG\051)SH
8520 34765 MT
(as indented text trees using)SH
11 /Courier AF
21823 XM
(print-indented-tree)SH
12 /Times-Roman AF
(.)SH
/Times-Italic SF
34963 XM
(mode)SH
/Times-Roman SF
37862 XM
(is)SH
11 /Courier AF
38963 XM
(:call-graph)SH
12 /Times-Roman AF
46523 XM
(for trees)SH
8520 36051 MT
(where the children of a node are the functions called by the node, or)SH
11 /Courier AF
41487 XM
(:caller-graph)SH
12 /Times-Roman AF
8520 37337 MT
(for trees where the children of a node are the functions the node calls.)SH
/Times-Italic SF
42588 XM
(types-to-ignore)SH
/Times-Roman SF
8520 38623 MT
(is a list of funcall types \050as specified in the patterns\051 to ignore in printing out the)SH
8520 39909 MT
(database. For example,)SH
11 /Courier AF
19887 XM
('\050:lisp\051)SH
12 /Times-Roman AF
25467 XM
(would ignore all calls to Common Lisp functions.)SH
/Times-Italic SF
8520 41195 MT
(compact)SH
/Times-Roman SF
12886 XM
(is a flag to tell the program to try to compact the trees a bit by not printing)SH
8520 42481 MT
(trees if they have already been seen.)SH
/Times-Italic SF
26186 XM
(root-nodes)SH
/Times-Roman SF
31687 XM
(is a list of root nodes of trees to)SH
8520 43767 MT
(display. If)SH
/Times-Italic SF
13688 XM
(root-nodes)SH
/Times-Roman SF
19189 XM
(is)SH
11 /Courier AF
20290 XM
(nil)SH
12 /Times-Roman AF
(, displays trees for all the root nodes in the database.)SH
11 /Courier AF
6120 45659 MT
(print-file-dependencies)SH
12 /Times-Roman AF
21600 XM
(\050&optional \050database *callers-database*\051\051)SH
47852 XM
([Function])SH
8520 47442 MT
(Prints a list of file dependencies for the references listed in)SH
/Times-Italic SF
37026 XM
(database)SH
/Times-Roman SF
(. This function)SH
8520 48728 MT
(may be useful for automatically computing file loading constraints for a system)SH
8520 50014 MT
(definition tool such as defsystem.)SH
6120 52674 MT
(The)SH
10 SS 
8286 XM
(PSGRAPH)SH
12 SS 
13087 XM
(program \050)SH
11 /Courier AF
(psgraph.lisp)SH
12 /Times-Roman AF
(\051 must be loaded before using)SH
11 /Courier AF
40309 XM
(psgraph-xref)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
6120 54566 MT
(psgraph-xref)SH
12 /Times-Roman AF
14340 XM
(\050&key \050mode *default-graphing-mode*\051)SH
47852 XM
([Function])SH
14940 55852 MT
(\050output-directory *postscript-output-directory*\051)SH
14940 57138 MT
(\050types-to-ignore *types-to-ignore*\051 \050compact t\051)SH
14940 58424 MT
(\050shrink t\051 root-nodes\051)SH
8520 60207 MT
(Creates a postscript file for each call-graph in the database. If)SH
/Times-Italic SF
38323 XM
(shrink)SH
/Times-Roman SF
41624 XM
(is)SH
11 /Courier AF
42725 XM
(t)SH
12 /Times-Roman AF
(, shrinks the)SH
8520 61493 MT
(output to fit on a single page. If)SH
/Times-Italic SF
23957 XM
(compact)SH
/Times-Roman SF
28323 XM
(is)SH
11 /Courier AF
29424 XM
(t)SH
12 /Times-Roman AF
(, will print the tree rooted at a given node)SH
8520 62779 MT
(only once.)SH
/Times-Italic SF
13820 XM
(mode)SH
/Times-Roman SF
16719 XM
(may be)SH
11 /Courier AF
20519 XM
(:call-graph)SH
12 /Times-Roman AF
28079 XM
(to display the call-graph,)SH
11 /Courier AF
40315 XM
(:caller-graph)SH
12 /Times-Roman AF
49195 XM
(to)SH
8520 64065 MT
(display the inverse. If)SH
/Times-Italic SF
19222 XM
(root-nodes)SH
/Times-Roman SF
24723 XM
(is)SH
11 /Courier AF
25824 XM
(nil)SH
12 /Times-Roman AF
(, it tries to find all the root nodes in the)SH
8520 65351 MT
(database \050functions not called by other functions\051 and display those. Otherwise,)SH
/Times-Italic SF
8520 66637 MT
(root-nodes)SH
/Times-Roman SF
14021 XM
(should be a list of root nodes of the trees to be displayed.)SH
ES
%%Page: 11 13
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(XREF)SH
10 SS 
(: Cross Referencer)SH
/Times-Roman SF
54080 XM
(11)SH
12 /Times-Bold AF
8280 8004 MT
(2.3.4.)SH
10 SS 
11280 XM
(XREF)SH
12 SS 
14302 XM
(Variables)SH
/Times-Roman SF
8280 10083 MT
(The following variables control the default operation of)SH
10 SS 
35284 XM
(XREF)SH
12 SS 
(.)SH
11 /Courier AF
8280 11975 MT
(*xref-verbose*)SH
12 /Times-Roman AF
17820 XM
(t)SH
50147 XM
([Variable])SH
10680 13758 MT
(When)SH
11 /Courier AF
13846 XM
(t)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
15106 XM
(xref-file)SH
12 /Times-Roman AF
21346 XM
(prints out the names of the files it looks at, progress dots, and the)SH
10680 15044 MT
(number of forms read.)SH
11 /Courier AF
8280 16936 MT
(*types-to-ignore*)SH
12 /Times-Roman AF
19800 XM
(\050quote \050:lisp :lisp2\051\051)SH
50147 XM
([Variable])SH
10680 18719 MT
(Default set of caller types \050as specified in the patterns\051 to ignore in the database)SH
10680 20005 MT
(handling functions.)SH
11 /Courier AF
20249 XM
(:lisp)SH
12 /Times-Roman AF
23849 XM
(is CLtL 1st edition [6],)SH
11 /Courier AF
35186 XM
(:lisp2)SH
12 /Times-Roman AF
39446 XM
(is additional patterns from)SH
10680 21291 MT
(CLtL 2nd edition [7].)SH
11 /Courier AF
8280 23183 MT
(*handle-package-forms*)SH
12 /Times-Roman AF
23100 XM
(\050\051)SH
50147 XM
([Variable])SH
10680 24966 MT
(When non-)SH
11 /Courier AF
(nil)SH
12 /Times-Roman AF
18326 XM
(and)SH
11 /Courier AF
20359 XM
(xref-file)SH
12 /Times-Roman AF
26599 XM
(encounters a package-setting form like)SH
11 /Courier AF
45501 XM
(in-package)SH
12 /Times-Roman AF
(,)SH
10680 26252 MT
(the form is evaluated to set the current package to the specified package. When done)SH
10680 27538 MT
(with the file,)SH
11 /Courier AF
17082 XM
(xref-file)SH
12 /Times-Roman AF
23322 XM
(resets the package to its original value. In some of the)SH
10680 28824 MT
(displaying functions, when this variable is non-)SH
11 /Courier AF
(nil)SH
12 /Times-Roman AF
35732 XM
(one may specify that all symbols)SH
10680 30110 MT
(from a particular set of packages be ignored. This is only useful if the files use)SH
10680 31396 MT
(different packages with conflicting names.)SH
11 /Courier AF
8280 33288 MT
(*handle-function-forms*)SH
12 /Times-Roman AF
23760 XM
(t)SH
50147 XM
([Variable])SH
10680 35071 MT
(When)SH
11 /Courier AF
13846 XM
(t)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
15106 XM
(xref-file)SH
12 /Times-Roman AF
21346 XM
(tries to be smart about forms which occur in a function position,)SH
10680 36357 MT
(such as lambdas and arbitrary Lisp forms.  If so, it recursively calls)SH
11 /Courier AF
43253 XM
(record-callers)SH
12 /Times-Roman AF
10680 37643 MT
(with pattern)SH
11 /Courier AF
16748 XM
('form)SH
12 /Times-Roman AF
(. If)
300 W( the form is a lambda, the name)SH
11 /Courier AF
37184 XM
(:unnamed-lambda)SH
12 /Times-Roman AF
47384 XM
(is used in)SH
10680 38929 MT
(the database.)SH
11 /Courier AF
8280 40821 MT
(*handle-macro-forms*)SH
12 /Times-Roman AF
21780 XM
(t)SH
50147 XM
([Variable])SH
10680 42604 MT
(When)SH
11 /Courier AF
13846 XM
(t)SH
12 /Times-Roman AF
(, if the file was loaded before being processed by)SH
10 SS 
38340 XM
(XREF)SH
12 SS 
(, and the car of a form is)SH
10680 43890 MT
(a macro, it notes that the parent calls the macro, and then calls)SH
11 /Courier AF
40852 XM
(macroexpand-1)SH
12 /Times-Roman AF
49732 XM
(on)SH
10680 45176 MT
(the form.)SH
11 /Courier AF
8280 47068 MT
(*default-graphing-mode*)SH
12 /Times-Roman AF
23760 XM
(:call-graph)SH
50147 XM
([Variable])SH
10680 48851 MT
(Specifies whether we graph up or down. If)SH
11 /Courier AF
31445 XM
(:call-graph)SH
12 /Times-Roman AF
(, the children of a node are)SH
10680 50137 MT
(the functions it calls. If)SH
11 /Courier AF
22084 XM
(:caller-graph)SH
12 /Times-Roman AF
(, the children of a node are the functions that)SH
10680 51423 MT
(call it.)SH
11 /Courier AF
8280 53315 MT
(*indent-amount*)SH
12 /Times-Roman AF
18480 XM
(3)SH
50147 XM
([Variable])SH
10680 55098 MT
(Number of spaces to indent successive levels in)SH
11 /Courier AF
33883 XM
(print-indented-tree)SH
12 /Times-Roman AF
(.)SH
14 /Times-Bold AF
8280 58916 MT
(2.4. An Example of Using)SH
12 SS 
23797 XM
(XREF)SH
/Times-Roman SF
8280 61171 MT
(In this section we give some examples of using)136 W
10 SS 
32474 XM
(XREF)SH
12 SS 
35465 XM
(to analyze)135 W
11 /Courier AF
40935 XM
(xref-test.lisp)SH
12 /Times-Roman AF
(, a simple)135 W
8280 62729 MT
(nonsense program. The program is listed in Appendix I and tests several aspects of)SH
10 SS 
48385 XM
(XREF)SH
12 SS 
(.)SH
8280 65389 MT
(Assuming)SH
10 SS 
13448 XM
(XREF)SH
12 SS 
16304 XM
(is already loaded, we must first analyze the forms in the file using xref-file:)SH
10 /Courier-Bold AF
9480 67194 MT
(<cl> \050xref:xref-file "xref-test.lisp"\051)SH
9480 68325 MT
(Cross-referencing file xref-test.lisp.)SH
9480 69456 MT
(......)SH
9480 70587 MT
(6 forms processed.)SH
ES
%%Page: 12 14
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(12)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 /Times-Roman AF
6120 8023 MT
(If we wish to see which functions call)SH
11 /Courier AF
24588 XM
(frowz)SH
12 /Times-Roman AF
(, we use the list-callers function:)SH
10 /Courier-Bold AF
7320 9828 MT
(<cl> \050xref:list-callers 'frowz\051)SH
7320 10959 MT
(\050BARF TOP-LEVEL\051)SH
12 /Times-Roman AF
6120 13619 MT
(The function print-caller-trees may be used)
194 W( to print the call graph using indentation to show)195 W
6120 15177 MT
(levels:)SH
10 /Courier-Bold AF
7320 16982 MT
(<cl> \050xref:print-caller-trees\051)SH
7320 18113 MT
(Rooted calling trees:)SH
8520 19244 MT
(TOP-LEVEL)SH
10320 20375 MT
(FROB)SH
12120 21506 MT
(FROB-ITEM)SH
13920 22637 MT
(APPEND-FROBS)SH
10320 23768 MT
(BARF)SH
12120 24899 MT
(FROWZ)SH
13920 26030 MT
(PROCESS-KEYS)SH
13920 27161 MT
(SNARF-ITEM)SH
13920 28292 MT
(PROCESS-KEY)SH
15720 29423 MT
(SYMBOL-NAME-KEY)SH
13920 30554 MT
(NODE-POSITION)SH
10320 31685 MT
(FROWZ)SH
12120 32816 MT
(PROCESS-KEYS)SH
12120 33947 MT
(SNARF-ITEM)SH
12120 35078 MT
(PROCESS-KEY)SH
13920 36209 MT
(SYMBOL-NAME-KEY)SH
12120 37340 MT
(NODE-POSITION)SH
12 /Times-Roman AF
6120 39294 MT
(Note how the tree rooted at)79 W
11 /Courier AF
19994 XM
(frowz)SH
12 /Times-Roman AF
23673 XM
(is repeated, once for each place it occurs. We can eliminate)78 W
6120 40852 MT
(this duplication using the)SH
11 /Courier AF
18525 XM
(:compact)SH
12 /Times-Roman AF
24105 XM
(keyword:)SH
10 /Courier-Bold AF
7320 42657 MT
(<cl> \050xref:print-caller-trees :compact t\051)SH
7320 43788 MT
(Rooted calling trees:)SH
8520 44919 MT
(TOP-LEVEL)SH
10320 46050 MT
(FROB)SH
12120 47181 MT
(FROB-ITEM)SH
13920 48312 MT
(APPEND-FROBS)SH
10320 49443 MT
(BARF)SH
12120 50574 MT
(FROWZ)SH
10320 51705 MT
(FROWZ)SH
12120 52836 MT
(PROCESS-KEYS)SH
12120 53967 MT
(SNARF-ITEM)SH
12120 55098 MT
(PROCESS-KEY)SH
13920 56229 MT
(SYMBOL-NAME-KEY)SH
12120 57360 MT
(NODE-POSITION)SH
12 /Times-Roman AF
6120 59314 MT
(This time the tree is printed only once, and only the symbol)SH
11 /Courier AF
35027 XM
(frowz)SH
12 /Times-Roman AF
38627 XM
(is repeated.)SH
6120 61974 MT
(A PostScript version of the call graph)
81 W( may be created using the)82 W
11 /Courier AF
37702 XM
(psgraph-xref)SH
12 /Times-Roman AF
46004 XM
(interface from)82 W
10 SS 
6120 63532 MT
(XREF)SH
12 SS 
9438 XM
(to)SH
10 SS 
11134 XM
(PSGRAPH)SH
12 SS 
(. To use this interface, load)462 W
10 SS 
31742 XM
(PSGRAPH)SH
12 SS 
37005 XM
(and evaluate the)
462 W( definition of)461 W
11 /Courier AF
6120 65090 MT
(psgraph-xref)SH
12 /Times-Roman AF
14378 XM
(which is commented out in)38 W
11 /Courier AF
27871 XM
(xref.lisp)SH
12 /Times-Roman AF
(. Running)38 W
11 /Courier AF
38922 XM
(psgraph-xref)SH
12 /Times-Roman AF
47181 XM
(then creates)39 W
6120 66648 MT
(a separate PostScript file for each root of a call graph in the database.)
631 W( The file)630 W
11 /Courier AF
6120 68206 MT
(xref-test.lisp)SH
12 /Times-Roman AF
15660 XM
(has only one root, the function)SH
11 /Courier AF
30629 XM
(top-level)SH
12 /Times-Roman AF
(:)SH
10 /Courier-Bold AF
7320 70011 MT
(* \050xref:psgraph-xref\051)SH
7320 71142 MT
(Creating PostScript file "top-level.ps".)SH
ES
%%Page: 13 15
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(XREF)SH
10 SS 
(: Cross Referencer)SH
/Times-Roman SF
54080 XM
(13)SH
12 SS 
8280 8023 MT
(Figure 2-1 shows what this graph looks like.)SH
1 1 0 11880 27309 GB 
%%BeginDocument: top-level.ps
%!PS-Adobe-1.0
/max {2 copy lt {exch} if pop} def
/min {2 copy gt {exch} if pop} def
/inch {72 mul} def
/drawbox
 {/height exch def
  /width exch def
  /y exch def
  /x exch def
  gsave newpath
  x y boxradius add moveto
  x y height add x width add y height add boxradius arcto pop pop pop pop
  x width add y height add x width add y boxradius arcto pop pop pop pop
  x width add y x y boxradius arcto pop pop pop pop
  x y x y height add boxradius arcto pop pop pop pop
  boxgray setgray boxkind grestore
 } def
/printposter
 {/rows exch def
  /columns exch def
  /bigpictureproc exch def
  newpath
    leftmargin botmargin moveto
    0 pageheight rlineto
    pagewidth 0 rlineto
    0 pageheight neg rlineto
  closepath clip
  leftmargin botmargin translate
  0 1 rows 1 sub
   {/rowcount exch def
    0 1 columns 1 sub
     {/colcount exch def
      gsave
       pagewidth colcount mul neg
       pageheight rowcount mul neg
       translate
       bigpictureproc
       gsave showpage grestore
      grestore
     } for
   } for
 } def

/xarray 12 array def
/widtharray 12 array def
/leftmargin 36 def
/botmargin 36 def
/pagewidth 540 def
/pageheight 720 def
/boxradius 5 def 
/boxedge 2 def 
/boxgray 0 def 
/boxkind {stroke} def
/Helvetica findfont 9 scalefont setfont
widtharray 0 (TOP-LEVEL) stringwidth pop put
widtharray 1 (FROB) stringwidth pop put
widtharray 2 (FROB-ITEM) stringwidth pop put
widtharray 3 (APPEND-FROBS) stringwidth pop put
widtharray 4 (BARF) stringwidth pop put
widtharray 5 (FROWZ) stringwidth pop put
widtharray 6 (FROWZ) stringwidth pop put
widtharray 7 (PROCESS-KEYS) stringwidth pop put
widtharray 8 (SNARF-ITEM) stringwidth pop put
widtharray 9 (PROCESS-KEY) stringwidth pop put
widtharray 10 (SYMBOL-NAME-KEY) stringwidth pop put
widtharray 11 (NODE-POSITION) stringwidth pop put
/Helvetica-Oblique findfont 7 scalefont setfont
widtharray 0 get
4 add widtharray exch 0 exch put
widtharray 1 get
4 add widtharray exch 1 exch put
widtharray 2 get
4 add widtharray exch 2 exch put
widtharray 3 get
4 add widtharray exch 3 exch put
widtharray 4 get
4 add widtharray exch 4 exch put
widtharray 5 get
4 add widtharray exch 5 exch put
widtharray 6 get
4 add widtharray exch 6 exch put
widtharray 7 get
4 add widtharray exch 7 exch put
widtharray 8 get
4 add widtharray exch 8 exch put
widtharray 9 get
4 add widtharray exch 9 exch put
widtharray 10 get
4 add widtharray exch 10 exch put
widtharray 11 get
4 add widtharray exch 11 exch put
xarray 0 0 put
xarray 0 get widtharray 0 get add
20 add xarray exch 1 exch put
xarray 1 get widtharray 1 get add
20 add xarray exch 2 exch put
xarray 2 get widtharray 2 get add
20 add xarray exch 3 exch put
xarray 0 get widtharray 0 get add
20 add xarray exch 4 exch put
xarray 4 get widtharray 4 get add
20 add xarray exch 5 exch put
xarray 0 get widtharray 0 get add
20 add xarray exch 6 exch put
xarray 6 get widtharray 6 get add
20 add xarray exch 7 exch put
xarray 6 get widtharray 6 get add
20 add xarray exch 8 exch put
xarray 6 get widtharray 6 get add
20 add xarray exch 9 exch put
xarray 9 get widtharray 9 get add
20 add xarray exch 10 exch put
xarray 6 get widtharray 6 get add
20 add xarray exch 11 exch put
/maximum-x 0
xarray 0 get widtharray 0 get add max
xarray 1 get widtharray 1 get add max
xarray 2 get widtharray 2 get add max
xarray 3 get widtharray 3 get add max
xarray 4 get widtharray 4 get add max
xarray 5 get widtharray 5 get add max
xarray 6 get widtharray 6 get add max
xarray 7 get widtharray 7 get add max
xarray 8 get widtharray 8 get add max
xarray 9 get widtharray 9 get add max
xarray 10 get widtharray 10 get add max
xarray 11 get widtharray 11 get add max
def
102 dict begin
/box0 {
xarray 0 get 69 widtharray 0 get 13 drawbox
} def
/box1 {
xarray 1 get 98 widtharray 1 get 13 drawbox
} def
/box2 {
xarray 2 get 98 widtharray 2 get 13 drawbox
} def
/box3 {
xarray 3 get 98 widtharray 3 get 13 drawbox
} def
/box4 {
xarray 4 get 79 widtharray 4 get 13 drawbox
} def
/box5 {
xarray 5 get 79 widtharray 5 get 13 drawbox
} def
/box6 {
xarray 6 get 31 widtharray 6 get 13 drawbox
} def
/box7 {
xarray 7 get 60 widtharray 7 get 13 drawbox
} def
/box8 {
xarray 8 get 41 widtharray 8 get 13 drawbox
} def
/box9 {
xarray 9 get 22 widtharray 9 get 13 drawbox
} def
/box10 {
xarray 10 get 22 widtharray 10 get 13 drawbox
} def
/box11 {
xarray 11 get 3 widtharray 11 get 13 drawbox
} def
/text0 {xarray 0 get boxedge add 72 moveto (TOP-LEVEL) show} def
/text1 {xarray 1 get boxedge add 101 moveto (FROB) show} def
/text2 {xarray 2 get boxedge add 101 moveto (FROB-ITEM) show} def
/text3 {xarray 3 get boxedge add 101 moveto (APPEND-FROBS) show} def
/text4 {xarray 4 get boxedge add 82 moveto (BARF) show} def
/text5 {xarray 5 get boxedge add 82 moveto (FROWZ) show} def
/text6 {xarray 6 get boxedge add 34 moveto (FROWZ) show} def
/text7 {xarray 7 get boxedge add 63 moveto (PROCESS-KEYS) show} def
/text8 {xarray 8 get boxedge add 44 moveto (SNARF-ITEM) show} def
/text9 {xarray 9 get boxedge add 25 moveto (PROCESS-KEY) show} def
/text10 {xarray 10 get boxedge add 25 moveto (SYMBOL-NAME-KEY) show} def
/text11 {xarray 11 get boxedge add 6 moveto (NODE-POSITION) show} def
/edge0 {newpath
stroke } def
/edge1 {newpath
xarray 0 get widtharray 0 get add 75 moveto
xarray 1 get 104 lineto
stroke } def
/edge2 {newpath
xarray 1 get widtharray 1 get add 104 moveto
xarray 2 get 104 lineto
stroke } def
/edge3 {newpath
xarray 2 get widtharray 2 get add 104 moveto
xarray 3 get 104 lineto
stroke } def
/edge4 {newpath
xarray 0 get widtharray 0 get add 75 moveto
xarray 4 get 85 lineto
stroke } def
/edge5 {newpath
xarray 4 get widtharray 4 get add 85 moveto
xarray 5 get 85 lineto
stroke } def
/edge6 {newpath
xarray 0 get widtharray 0 get add 75 moveto
xarray 6 get 37 lineto
stroke } def
/edge7 {newpath
xarray 6 get widtharray 6 get add 37 moveto
xarray 7 get 66 lineto
stroke } def
/edge8 {newpath
xarray 6 get widtharray 6 get add 37 moveto
xarray 8 get 47 lineto
stroke } def
/edge9 {newpath
xarray 6 get widtharray 6 get add 37 moveto
xarray 9 get 28 lineto
stroke } def
/edge10 {newpath
xarray 9 get widtharray 9 get add 28 moveto
xarray 10 get 28 lineto
stroke } def
/edge11 {newpath
xarray 6 get widtharray 6 get add 37 moveto
xarray 11 get 9 lineto
stroke } def
/boxchunk0 {
box0
box1
box2
box3
box4
box5
box6
box7
box8
box9
box10
box11
} def
/textchunk0 {
text0
text1
text2
text3
text4
text5
text6
text7
text8
text9
text10
text11
} def
/secondtextchunk0 {
} def
/edgechunk0 {
edge0
edge1
edge2
edge3
edge4
edge5
edge6
edge7
edge8
edge9
edge10
edge11
} def
/drawgraph { gsave
boxchunk0
1 setlinewidth
1 setlinecap
0 setgray
edgechunk0
0 setgray
/Helvetica findfont 9 scalefont setfont
textchunk0
/Helvetica-Oblique findfont 7 scalefont setfont
secondtextchunk0
grestore } def
gsave
   leftmargin botmargin translate
   pagewidth dup maximum-x max div pageheight dup 114 max div min dup scale
   drawgraph
grestore
end

showpage


%%EndDocument
 GE /Times-Bold SF
21311 25601 MT
(Figure 2-1:)SH
/Times-Roman SF
27611 XM
(Sample PostScript Call Graph)SH
14 /Times-Bold AF
8280 29419 MT
(2.5. Extending)SH
12 SS 
17225 XM
(XREF)SH
/Times-Roman SF
8280 31674 MT
(As noted in Section 2.1,)254 W
10 SS 
21385 XM
(XREF)SH
12 SS 
24495 XM
(works by)
254 W( considering the Lisp forms to be parse trees, and)255 W
8280 33232 MT
(matching the parse trees against a)
79 W( grammar for the language. The following macros define new)78 W
8280 34790 MT
(function and macro call patterns. They may be used to extend)158 W
10 SS 
39887 XM
(XREF)SH
12 SS 
42901 XM
(to handle new definition)159 W
8280 36348 MT
(forms and extensions to Common Lisp.)SH
11 /Courier AF
8280 38240 MT
(define-pattern-substitution)SH
12 /Times-Roman AF
26400 XM
(\050name pattern\051)SH
51147 XM
([Macro])SH
10680 40023 MT
(Defines)SH
/Times-Italic SF
14713 XM
(name)SH
/Times-Roman SF
17612 XM
(to be equivalent to the specified pattern. Useful for making patterns)SH
10680 41309 MT
(more readable. For example, the)SH
11 /Courier AF
26514 XM
(lambda-list)SH
12 /Times-Roman AF
34074 XM
(pattern is defined as a pattern)SH
10680 42595 MT
(substitution, thereby making the definition of the)SH
11 /Courier AF
34488 XM
(defun)SH
12 /Times-Roman AF
38088 XM
(caller-pattern simpler.)SH
11 /Courier AF
8280 44487 MT
(define-caller-pattern)SH
12 /Times-Roman AF
22440 XM
(\050name pattern &optional caller-type\051)SH
51147 XM
([Macro])SH
10680 46270 MT
(Defines)SH
/Times-Italic SF
14713 XM
(name)SH
/Times-Roman SF
17612 XM
(as a function/macro call with argument structure described by)SH
/Times-Italic SF
47583 XM
(pattern)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
10680 47556 MT
(caller-type)SH
/Times-Roman SF
(, if specified, assigns a type to the pattern, which may be used to exclude)SH
10680 48842 MT
(references to)SH
/Times-Italic SF
17146 XM
(name)SH
/Times-Roman SF
20045 XM
(while viewing the database. For example, all the Common Lisp)SH
10680 50128 MT
(definitions have a caller-type of)SH
11 /Courier AF
26249 XM
(:lisp)SH
12 /Times-Roman AF
29849 XM
(or)SH
11 /Courier AF
31149 XM
(:lisp2)SH
12 /Times-Roman AF
(, so that you can exclude references)SH
10680 51414 MT
(to common Lisp functions from the calling tree.)SH
11 /Courier AF
8280 53306 MT
(define-variable-pattern)SH
12 /Times-Roman AF
23760 XM
(\050name &optional caller-type\051)SH
51147 XM
([Macro])SH
10680 55089 MT
(Defines)SH
/Times-Italic SF
14713 XM
(name)SH
/Times-Roman SF
17612 XM
(as a variable reference of type)SH
/Times-Italic SF
32344 XM
(caller-type)SH
/Times-Roman SF
(. This is mainly used to)SH
10680 56375 MT
(establish the caller-type of the variable.)SH
11 /Courier AF
8280 58267 MT
(define-caller-pattern-synonyms)SH
12 /Times-Roman AF
28380 XM
(\050source destinations\051)SH
51147 XM
([Macro])SH
10680 60050 MT
(For defining function caller pattern syntax synonyms. For each name in)SH
/Times-Italic SF
45352 XM
(destinations)SH
/Times-Roman SF
(,)SH
10680 61336 MT
(defines its pattern as a copy of the definition of)SH
/Times-Italic SF
33618 XM
(source)SH
/Times-Roman SF
(. Allows a large number of)SH
10680 62622 MT
(identical patterns to be defined simultaneously. Must occur after the)SH
/Times-Italic SF
43654 XM
(source)SH
/Times-Roman SF
47154 XM
(pattern has)SH
10680 63908 MT
(been defined.)SH
10 SS 
8280 66568 MT
(XREF)SH
12 SS 
11136 XM
(includes pattern definitions for the latest Common Lisp specification, as published in [7].)SH
8280 69228 MT
(Patterns may be either structures to)
392 W( match, or a predicate like)391 W
11 /Courier AF
42258 XM
(#'numberp)SH
12 /Times-Roman AF
(. The pattern)391 W
8280 70786 MT
(specification language is similar to the notation used in [7], but in a more Lisp-like format:)SH
ES
%%Page: 14 16
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(14)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
11 /Courier AF
6120 8023 MT
(\050:eq name\051)SH
12 /Times-Roman AF
23478 XM
(The form element must be eq to the symbol)SH
11 /Courier AF
44716 XM
(name)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
6120 9948 MT
(\050:test test\051)SH
23478 XM
(test)SH
12 /Times-Roman AF
26418 XM
(must be true when applied to the form element.)SH
11 /Courier AF
6120 11873 MT
(\050:typep type\051)SH
12 /Times-Roman AF
23478 XM
(The form element must be of type)SH
11 /Courier AF
40114 XM
(type)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
6120 13798 MT
(\050:or pat1 pat2 ...\051)SH
12 /Times-Roman AF
23478 XM
(Tries each of)
406 W( the patterns in left-to-right order, until one)407 W
23478 15084 MT
(succeeds. Equivalent to)SH
11 /Courier AF
35079 XM
({ pat1 | pat2 | ... })SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
6120 17009 MT
(\050:rest pattern\051)SH
12 /Times-Roman AF
23478 XM
(The remaining)
127 W( form elements are grouped into a list which is)126 W
23478 18295 MT
(matched against)SH
11 /Courier AF
31546 XM
(pattern)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
6120 20220 MT
(\050:optional pat1 ...\051)SH
12 /Times-Roman AF
23478 XM
(The patterns may optionally match against the form element.)170 W
23478 21506 MT
(Equivalent to)SH
11 /Courier AF
30213 XM
([ pat1 ... ])SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
6120 23431 MT
(\050:star pat1 ...\051)SH
12 /Times-Roman AF
23478 XM
(The patterns may match)
241 W( against the patterns any number of)240 W
23478 24717 MT
(times, including zero. Equivalent to)SH
11 /Courier AF
40916 XM
({ pat1 ... }*)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
6120 26642 MT
(\050:plus pat1 ...\051)SH
12 /Times-Roman AF
23478 XM
(The patterns may match against the patterns)
240 W( any number of)241 W
23478 27928 MT
(times, but at least once. Equivalent to)SH
11 /Courier AF
41783 XM
({ pat1 ... }+)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
6120 29853 MT
(&optional, &key, &rest)SH
12 /Times-Roman AF
23478 XM
(Similar in behavior to the corresponding lambda-list keywords.)SH
11 /Courier AF
6120 31778 MT
(FORM)SH
12 /Times-Roman AF
23478 XM
(A random Lisp form. If a cons, assumes the car is a)
23 W( function or)22 W
23478 33064 MT
(macro and tries to match)
22 W( the args against that symbol's pattern.)23 W
23478 34350 MT
(If a symbol, assumes it's a variable reference.)SH
11 /Courier AF
6120 36275 MT
(:IGNORE)SH
12 /Times-Roman AF
23478 XM
(Ignores the corresponding form element.)SH
11 /Courier AF
6120 38200 MT
(NAME)SH
12 /Times-Roman AF
23478 XM
(The corresponding form element should be the name of a)
80 W( new)79 W
23478 39486 MT
(definition \050e.g., the first arg in a defun pattern is)SH
11 /Courier AF
46850 XM
(name)SH
12 /Times-Roman AF
(\051.)SH
11 /Courier AF
6120 41411 MT
(FUNCTION, MACRO)SH
12 /Times-Roman AF
23478 XM
(The corresponding form element)
680 W( should be a function)681 W
23478 42697 MT
(reference not handled by)166 W
11 /Courier AF
36341 XM
(form)SH
12 /Times-Roman AF
(. Used in the definition)
166 W( of the)165 W
23478 43983 MT
(pattern)SH
11 /Courier AF
27118 XM
(fn)SH
12 /Times-Roman AF
28745 XM
(which is used in defining the patterns for)7 W
11 /Courier AF
48738 XM
(apply)SH
12 /Times-Roman AF
52345 XM
(and)SH
11 /Courier AF
23478 45269 MT
(funcall)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
6120 47194 MT
(VAR)SH
12 /Times-Roman AF
23478 XM
(The corresponding form element should be)
700 W( a variable)699 W
23478 48480 MT
(definition or mutation.)
211 W( Used in the definition of)212 W
11 /Courier AF
48346 XM
(let)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
51138 XM
(let*)SH
12 /Times-Roman AF
(,)SH
23478 49766 MT
(etc.)SH
11 /Courier AF
6120 51691 MT
(VARIABLE)SH
12 /Times-Roman AF
23478 XM
(The corresponding form element should be)
700 W( a variable)699 W
23478 52977 MT
(reference.)SH
6120 55637 MT
(In all other pattern symbols, it looks up the symbol's)
1 W( pattern substitution and recursively matches)2 W
6120 57195 MT
(against the pattern. It will automatically destructure list structure that does)
112 W( not include consing)111 W
6120 58753 MT
(dots.)SH
6120 61413 MT
(Among the predefined pattern substitution names are:)SH
11 /Courier AF
6120 63305 MT
(STRING, SYMBOL, NUMBER)SH
12 /Times-Roman AF
21438 XM
(Appropriate :test patterns.)SH
11 /Courier AF
6120 65230 MT
(LAMBDA-LIST)SH
12 /Times-Roman AF
21438 XM
(Matches against a lambda list.)SH
11 /Courier AF
6120 67155 MT
(BODY)SH
12 /Times-Roman AF
21438 XM
(Matches against a function body definition.)SH
11 /Courier AF
6120 69080 MT
(FN)SH
12 /Times-Roman AF
21438 XM
(Matches against)SH
11 /Courier AF
29506 XM
(#'<function>)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
38026 XM
('<function>)SH
12 /Times-Roman AF
(, and lambdas. This is)SH
21438 70366 MT
(used in the definition of)SH
11 /Courier AF
33208 XM
(apply)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
37108 XM
(funcall)SH
12 /Times-Roman AF
(, and the mapping patterns.)SH
ES
%%Page: 15 17
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(XREF)SH
10 SS 
(: Cross Referencer)SH
/Times-Roman SF
54080 XM
(15)SH
12 SS 
8280 8023 MT
(See)SH
11 /Courier AF
10313 XM
(xref.lisp)SH
12 /Times-Roman AF
16553 XM
(for others.)SH
8280 10683 MT
(Here are some sample pattern definitions which)
1439 W( illustrate the use of)1440 W
11 /Courier AF
8280 12241 MT
(define-caller-pattern)SH
12 /Times-Roman AF
(:)SH
10 /Courier-Bold AF
9480 14046 MT
(\050define-caller-pattern defun)SH
10680 15177 MT
(\050name lambda-list)SH
11880 16308 MT
(\050:star \050:or documentation-string declaration\051\051)SH
11880 17439 MT
(\050:star form\051\051)SH
10080 18570 MT
(:lisp\051)SH
9480 20832 MT
(\050define-caller-pattern funcall \050fn \050:star form\051\051 :lisp\051)SH
12 /Times-Roman AF
8280 23492 MT
(In general,)132 W
10 SS 
13977 XM
(XREF)SH
12 SS 
16965 XM
(is intelligent enough to handle)
132 W( any sort of simple funcall. One only needs to)131 W
8280 25050 MT
(specify the syntax for macros that use destructuring \050unless)61 W
11 /Courier AF
37601 XM
(*handle-macro-forms*)SH
12 /Times-Roman AF
51162 XM
(is)SH
11 /Courier AF
52325 XM
(t)SH
12 /Times-Roman AF
53347 XM
(and)SH
8280 26608 MT
(the files being analyzed)
155 W( are also loaded\051, for functions with some argument positions that are)154 W
8280 28166 MT
(special \050e.g., apply and funcall\051, or to indicate that the function is of a specific caller type.)SH
14 /Times-Bold AF
8280 31984 MT
(2.6. Implementation Notes)SH
12 /Times-Roman AF
8280 34239 MT
(The functions)44 W
11 /Courier AF
15302 XM
(record-callers)SH
12 /Times-Roman AF
24887 XM
(and)SH
11 /Courier AF
26965 XM
(record-callers*)SH
12 /Times-Roman AF
37210 XM
(do the real work in cross referencing)45 W
8280 35797 MT
(a file.)387 W
11 /Courier AF
12088 XM
(record-callers)SH
12 /Times-Roman AF
22015 XM
(processes patterns that are symbols or)
387 W( otherwise atomic, while)386 W
11 /Courier AF
8280 37355 MT
(record-callers*)SH
12 /Times-Roman AF
18480 XM
(processes simple list-structure patterns.)SH
11 /Courier AF
8280 40015 MT
(record-callers)SH
12 /Times-Roman AF
17892 XM
(checks if the pattern is one of the known basic patterns. If so,)
72 W( it updates the)73 W
8280 41573 MT
(database appropriately. Otherwise,)
385 W( it is a pattern defined in terms of other patterns, and)384 W
11 /Courier AF
8280 43131 MT
(record-callers)SH
12 /Times-Roman AF
17820 XM
(substitutes the definition of the pattern substitution.)SH
8280 45791 MT
(If the pattern is)71 W
11 /Courier AF
16166 XM
(form)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
19477 XM
(record-callers)SH
12 /Times-Roman AF
29088 XM
(uses the form's tag \050the car of the form\051 to)
71 W( look up a)72 W
8280 47349 MT
(new pattern from the pattern database, and)
117 W( calls record-callers recursively on the form and the)116 W
8280 48907 MT
(new pattern. If)50 W
11 /Courier AF
15763 XM
(*handle-macro-forms*)SH
12 /Times-Roman AF
29313 XM
(is)SH
11 /Courier AF
30464 XM
(t)SH
12 /Times-Roman AF
31474 XM
(and the tag is a macro, it)
50 W( expands the macro and)51 W
8280 50465 MT
(calls itself again on the result. Otherwise,)49 W
11 /Courier AF
28794 XM
(record-callers)SH
12 /Times-Roman AF
38383 XM
(assumes that the form is a)
49 W( random)48 W
8280 52023 MT
(function call, and processes it with a default pattern of)SH
11 /Courier AF
34651 XM
(\050:star form\051)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
8280 54683 MT
(record-callers)SH
12 /Times-Roman AF
17866 XM
(also handles the special)46 W
11 /Courier AF
29652 XM
(:eq)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
32278 XM
(:test)SH
12 /Times-Roman AF
35924 XM
(and)SH
11 /Courier AF
38003 XM
(:typep)SH
12 /Times-Roman AF
42309 XM
(patterns. If the pattern is a)47 W
8280 56241 MT
(list and not one of)
8 W( these special patterns,)7 W
11 /Courier AF
28111 XM
(record-callers)SH
12 /Times-Roman AF
37658 XM
(asks)SH
11 /Courier AF
40032 XM
(record-callers*)SH
12 /Times-Roman AF
50239 XM
(to process)7 W
8280 57799 MT
(the form and pattern.)SH
11 /Courier AF
8280 59691 MT
(record-callers)SH
12 /Times-Roman AF
17820 XM
(\050filename form &optional pattern parent)SH
50012 XM
([Function])SH
18420 60977 MT
(\050environment nil\051 funcall\051)SH
11 /Courier AF
10680 62760 MT
(record-callers)SH
12 /Times-Roman AF
20220 XM
(is the main routine used to walk down the code. It matches the)SH
/Times-Italic SF
10680 64046 MT
(pattern)SH
/Times-Roman SF
14448 XM
(against the)SH
/Times-Italic SF
19916 XM
(form)SH
/Times-Roman SF
(, possibly adding statements to the database.)SH
/Times-Italic SF
43755 XM
(parent)SH
/Times-Roman SF
47189 XM
(is the name)SH
10680 65332 MT
(defined by the current outermost definition; it is the caller of the forms in the body.)SH
/Times-Italic SF
10680 66618 MT
(environment)SH
/Times-Roman SF
16980 XM
(is used to keep track of the scoping of variables.)SH
/Times-Italic SF
40716 XM
(funcall)SH
/Times-Roman SF
44351 XM
(deals with the)SH
10680 67904 MT
(type of variable assignment and determines how the environment should be modified.)SH
11 /Courier AF
10680 69190 MT
(record-callers)SH
12 /Times-Roman AF
20220 XM
(handles atomic patterns and simple list-structure patterns. For)SH
10680 70476 MT
(complex list-structure pattern destructuring, it calls)SH
11 /Courier AF
35522 XM
(record-callers*)SH
12 /Times-Roman AF
(.)SH
ES
%%Page: 16 18
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(16)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
11 /Courier AF
6120 8023 MT
(record-callers*)SH
12 /Times-Roman AF
16410 XM
(is a more complex)
90 W( function. It is recursive in both)91 W
11 /Courier AF
41556 XM
(record-callers)SH
12 /Times-Roman AF
51187 XM
(and)SH
6120 9581 MT
(itself, and also maintains a stack of unprocessed patterns. The)
180 W( stack is needed to process the)179 W
11 /Courier AF
6120 11139 MT
(:optional)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
13123 XM
(:star)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
17486 XM
(:plus)SH
12 /Times-Roman AF
21549 XM
(and)SH
11 /Courier AF
24045 XM
(:rest)SH
12 /Times-Roman AF
28108 XM
(patterns correctly.  For example, to)
463 W( process a)464 W
11 /Courier AF
6120 12697 MT
(:optional)SH
12 /Times-Roman AF
12365 XM
(pattern element,)5 W
11 /Courier AF
20410 XM
(record-callers*)SH
12 /Times-Roman AF
30614 XM
(first tries matching the form against the rest of)4 W
6120 14255 MT
(the)SH
11 /Courier AF
8076 XM
(:optional)SH
12 /Times-Roman AF
14505 XM
(pattern element, pushing the other pattern)
189 W( elements onto the stack. If at any)190 W
6120 15813 MT
(point)SH
11 /Courier AF
8899 XM
(record-callers*)SH
12 /Times-Roman AF
19110 XM
(runs out of pattern elements, it)
11 W( continues from the pattern at the top of)10 W
6120 17371 MT
(the stack. If processing the form with the)178 W
11 /Courier AF
27514 XM
(:optional)SH
12 /Times-Roman AF
33933 XM
(pattern element included fails \050returns)179 W
11 /Courier AF
6120 18929 MT
(nil)SH
12 /Times-Roman AF
(\051,)SH
11 /Courier AF
9143 XM
(record-callers*)SH
12 /Times-Roman AF
19386 XM
(then tries skipping)
43 W( over the element.  The)42 W
11 /Courier AF
39961 XM
(:star)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
43903 XM
(:plus)SH
12 /Times-Roman AF
47545 XM
(and)SH
11 /Courier AF
49620 XM
(:rest)SH
12 /Times-Roman AF
6120 20487 MT
(patterns are similar.)SH
11 /Courier AF
6120 22379 MT
(record-callers*)SH
12 /Times-Roman AF
16320 XM
(\050filename form pattern parent environment &optional)SH
47852 XM
([Function])SH
16920 23665 MT
(continuation in-optionals in-keywords\051)SH
11 /Courier AF
8520 25448 MT
(record-callers*)SH
12 /Times-Roman AF
18720 XM
(handles complex list-structure patterns, such as ordered lists of)SH
8520 26734 MT
(subpatterns, patterns involving)SH
11 /Courier AF
23591 XM
(:star)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
27491 XM
(:plus)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
31391 XM
(&optional)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
37931 XM
(&key)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
41171 XM
(&rest)SH
12 /Times-Roman AF
(, etc.)SH
/Times-Italic SF
8520 28020 MT
(continuation)SH
/Times-Roman SF
14889 XM
(is a stack of unprocessed patterns,)SH
/Times-Italic SF
31524 XM
(in-optionals)SH
/Times-Roman SF
37627 XM
(and)SH
/Times-Italic SF
39660 XM
(in-keywords)SH
/Times-Roman SF
45827 XM
(are)SH
8520 29306 MT
(corresponding stacks which determine whether)SH
11 /Courier AF
31421 XM
(&rest)SH
12 /Times-Roman AF
35021 XM
(or)SH
11 /Courier AF
36321 XM
(&key)SH
12 /Times-Roman AF
39261 XM
(has been seen yet in)SH
8520 30592 MT
(the current pattern.)SH
10 SS 
6120 33252 MT
(XREF)SH
12 SS 
9122 XM
(assumes that the source code is syntactically)
146 W( correct Lisp, and uses)147 W
11 /Courier AF
43138 XM
(read)SH
12 /Times-Roman AF
46225 XM
(to read forms)147 W
6120 34810 MT
(from the file. If)2 W
11 /Courier AF
13830 XM
(xref-file)SH
12 /Times-Roman AF
20072 XM
(drops into the debugger while processing a file, examining the value)1 W
6120 36368 MT
(of)SH
11 /Courier AF
7420 XM
(*last-form*)SH
12 /Times-Roman AF
14980 XM
(can help determine what went wrong.)SH
11 /Courier AF
6120 38260 MT
(*last-form*)SH
12 /Times-Roman AF
13680 XM
(\050\051)SH
47987 XM
([Variable])SH
8520 40043 MT
(The last form read from the file. Useful for figuring out what went wrong when)SH
11 /Courier AF
8520 41329 MT
(xref-file)SH
12 /Times-Roman AF
14760 XM
(drops into the debugger.)SH
6120 43989 MT
(The function)66 W
11 /Courier AF
12719 XM
(gather-tree)SH
12 /Times-Roman AF
20345 XM
(is used to create a list-structure tree representation of the database.)67 W
6120 45547 MT
(Since the database may contain)
136 W( cycles, it stops when a reference is repeated in order to avoid)135 W
6120 47105 MT
(infinite loops. The function)251 W
11 /Courier AF
20561 XM
(make-caller-tree)SH
12 /Times-Roman AF
31672 XM
(does something similar)
251 W( for when the root)252 W
6120 48663 MT
(nodes are not specified. It calls)257 W
11 /Courier AF
22831 XM
(find-roots-and-cycles)SH
12 /Times-Roman AF
37247 XM
(to return a list of the uncalled)256 W
6120 50221 MT
(callers as potential roots. The function)326 W
11 /Courier AF
26781 XM
(print-indented)SH
12 /Times-Roman AF
36648 XM
(tree prints out such trees using)327 W
6120 51779 MT
(indentation to represent child nodes.)SH
11 /Courier AF
6120 53671 MT
(gather-tree)SH
12 /Times-Roman AF
13680 XM
(\050parents &optional already-seen)SH
47852 XM
([Function])SH
14280 54957 MT
(\050mode *default-graphing-mode*\051)SH
14280 56243 MT
(\050types-to-ignore *types-to-ignore*\051 compact\051)SH
8520 58026 MT
(Extends the tree, copying it into list structure, until it repeats a reference \050hits a cycle\051.)SH
11 /Courier AF
6120 59918 MT
(make-caller-tree)SH
12 /Times-Roman AF
16980 XM
(\050&optional \050mode *default-graphing-mode*\051)SH
47852 XM
([Function])SH
17580 61204 MT
(\050types-to-ignore *types-to-ignore*\051 compact\051)SH
8520 62987 MT
(Outputs list structure of a tree which roughly represents the possibly cyclical structure)SH
8520 64273 MT
(of the caller database.  If)SH
/Times-Italic SF
20687 XM
(mode)SH
/Times-Roman SF
23586 XM
(is)SH
11 /Courier AF
24687 XM
(:call-graph)SH
12 /Times-Roman AF
(, the children of a node are the)SH
8520 65559 MT
(functions it calls. If)SH
/Times-Italic SF
18157 XM
(mode)SH
/Times-Roman SF
21056 XM
(is)SH
11 /Courier AF
22157 XM
(:caller-graph)SH
12 /Times-Roman AF
(, the children of a node are the functions)SH
8520 66845 MT
(that call it.  If)SH
/Times-Italic SF
15323 XM
(compact)SH
/Times-Roman SF
19689 XM
(is)SH
11 /Courier AF
20790 XM
(t)SH
12 /Times-Roman AF
(, tries to eliminate the already seen nodes, so that the graph)SH
8520 68131 MT
(for a node is printed at most once. Otherwise it will duplicate the node's tree \050except)SH
8520 69417 MT
(for cycles\051. This is useful because the call tree is actually a directed graph, so we can)SH
8520 70703 MT
(either duplicate references or display only the first one.)SH
ES
%%Page: 17 19
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(XREF)SH
10 SS 
(: Cross Referencer)SH
/Times-Roman SF
54080 XM
(17)SH
11 /Courier AF
8280 8023 MT
(find-roots-and-cycles)SH
12 /Times-Roman AF
22440 XM
(\050&optional \050mode *default-graphing-mode*\051)SH
50012 XM
([Function])SH
23040 9309 MT
(\050types-to-ignore *types-to-ignore*\051\051)SH
10680 11092 MT
(Returns a list of uncalled callers \050roots\051 and called callers \050potential cycles\051.)SH
11 /Courier AF
8280 12984 MT
(print-indented-tree)SH
12 /Times-Roman AF
21120 XM
(\050trees &optional \050indent 0\051\051)SH
50012 XM
([Function])SH
10680 14767 MT
(Simple code to print out a list-structure tree \050such as those created by)SH
11 /Courier AF
10680 16053 MT
(make-caller-tree)SH
12 /Times-Roman AF
(\051 as indented text.)SH
ES
%%Page: 18 20
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(18)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
ES
%%Page: 19 21
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(METERING)SH
10 SS 
(: Code Timing and Consing Profiler)SH
/Times-Roman SF
54080 XM
(19)SH
16 /Times-Bold AF
8280 8272 MT
(3.)SH
14 SS 
9880 XM
(METERING)SH
16 SS 
(: Code Timing and Consing Profiler)SH
12 /Times-Roman AF
8280 10703 MT
(The)SH
10 SS 
10604 XM
(METERING)SH
12 SS 
16228 XM
(system is a portable Common Lisp code profiling tool.  It gathers timing and)157 W
8280 12261 MT
(consing statistics for specified)
119 W( functions while a program is running. The)120 W
10 SS 
44938 XM
(METERING)SH
12 SS 
50524 XM
(system is)120 W
8280 13819 MT
(the result of a merging of the capabilities)
60 W( of the)59 W
10 SS 
31949 XM
(MONITOR)SH
12 SS 
36974 XM
(program written by Chris McConnell)59 W
8280 15377 MT
(and the)254 W
10 SS 
12588 XM
(PROFILE)SH
12 SS 
17198 XM
(program written by)
254 W( Skef Wholey and Rob MacLachlan and extending the)255 W
8280 16935 MT
(resulting program. Portions of the documentation from those programs)
151 W( were incorporated into)150 W
8280 18493 MT
(this chapter.)SH
14 /Times-Bold AF
8280 22311 MT
(3.1. Installing)SH
12 SS 
16759 XM
(METERING)SH
/Times-Roman SF
8280 24566 MT
(Before using)214 W
10 SS 
15175 XM
(METERING)SH
12 SS 
20855 XM
(there are a number of small, implementation-dependent macros you)215 W
8280 26124 MT
(may want to customize for your Lisp.)SH
8280 28784 MT
(The)SH
10 SS 
10705 XM
(METERING)SH
12 SS 
16429 XM
(system will collect timing statistics in any valid Common Lisp. The macro)258 W
11 /Courier AF
8280 30342 MT
(get-time)SH
12 /Times-Roman AF
13960 XM
(is called to find the total)
100 W( number of ticks since the beginning of time. The constant)101 W
11 /Courier AF
8280 31900 MT
(time-units-per-second)SH
12 /Times-Roman AF
23053 XM
(is used to)
613 W( convert ticks into seconds.  These default to)612 W
11 /Courier AF
8280 33458 MT
(get-internal-run-time)SH
12 /Times-Roman AF
22440 XM
(and)SH
11 /Courier AF
24473 XM
(internal-time-units-per-second)SH
12 /Times-Roman AF
(, respectively.)SH
8280 36118 MT
(To collect consing statistics, define a)149 W
11 /Courier AF
27213 XM
(get-cons)SH
12 /Times-Roman AF
32943 XM
(macro for your implementation of Lisp. The)150 W
11 /Courier AF
8280 37676 MT
(get-cons)SH
12 /Times-Roman AF
14044 XM
(macro has been defined for)
184 W( CMU Common Lisp, Lucid Common Lisp \0503.0\051, and)183 W
8280 39234 MT
(Macintosh Allegro Common Lisp \0501.3.2\051.)
280 W( If you write a)281 W
11 /Courier AF
37942 XM
(get-cons)SH
12 /Times-Roman AF
43803 XM
(macro for a particular)281 W
8280 40792 MT
(version of Common Lisp, we'd appreciate receiving the code. This macro)
38 W( should return the total)37 W
8280 42350 MT
(number of bytes consed since the beginning of time.)SH
8280 45010 MT
(The)SH
10 SS 
10606 XM
(METERING)SH
12 SS 
16232 XM
(system works by encapsulating the)
160 W( definitions of the monitored functions. By)161 W
8280 46568 MT
(default, this encapsulation captures the)
243 W( arguments in an &rest arg, and then applies the old)242 W
8280 48126 MT
(definition to the arguments. In most Lisps this will result in additional)
103 W( consing.  To reduce the)104 W
8280 49684 MT
(extra consing, when a)178 W
11 /Courier AF
19758 XM
(required-arguments)SH
12 /Times-Roman AF
32115 XM
(function is available we use it to find out the)177 W
8280 51242 MT
(number of required arguments, and use &rest to)
194 W( capture only the non-required arguments \050if)195 W
8280 52800 MT
(any\051. The)86 W
11 /Courier AF
13351 XM
(required-arguments)SH
12 /Times-Roman AF
25617 XM
(function should return two values: the first)
86 W( is the number of)85 W
8280 54358 MT
(required arguments,)
162 W( and the second is non-)163 W
11 /Courier AF
(nil)SH
12 /Times-Roman AF
32335 XM
(if there are any non-required arguments \050e.g.,)163 W
8280 55916 MT
(&optional, &rest, and &key args\051. The)150 W
11 /Courier AF
28083 XM
(required-arguments)SH
12 /Times-Roman AF
40413 XM
(function has been defined for)150 W
8280 57474 MT
(CMU Common Lisp, Macintosh)
82 W( Allegro Common Lisp \0501.3.2\051, Lucid Common Lisp \0503.0\051, and)83 W
8280 59032 MT
(Allegro Common Lisp.)SH
8280 61692 MT
(Since the)
13 W( encapsulation process creates closures, performance and accuracy are greatly improved)12 W
8280 63250 MT
(if the code is compiled. Accordingly, the user is warned if the source is loaded instead of)258 W
8280 64808 MT
(compiling it first.)SH
ES
%%Page: 20 22
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(20)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
14 /Times-Bold AF
6120 8138 MT
(3.2. Using)SH
12 SS 
12343 XM
(METERING)SH
/Times-Roman SF
6120 10393 MT
(This section describes all of the basic)138 W
10 SS 
25323 XM
(METERING)SH
12 SS 
30927 XM
(commands and variables which control their)138 W
6120 11951 MT
(behavior.)SH
10 SS 
11058 XM
(METERING)SH
12 SS 
16662 XM
(includes functions for)
138 W( monitoring and unmonitoring functions, as well as)139 W
6120 13509 MT
(functions for displaying a report of profiling statistics, including number of calls,)
35 W( CPU time, and)34 W
6120 15067 MT
(storage usage.)SH
/Times-Bold SF
6120 18751 MT
(3.2.1. Suggested Usage)SH
/Times-Roman SF
6120 20830 MT
(The easiest way to use the)SH
10 SS 
18987 XM
(METERING)SH
12 SS 
24453 XM
(system is to load it and evaluate either)SH
10 /Courier-Bold AF
10320 22635 MT
(\050mon:with-monitoring \050<name>*\051 \050\051)SH
12720 23766 MT
(<form>*\051)SH
12 /Times-Roman AF
6120 25720 MT
(or)SH
10 /Courier-Bold AF
10320 27525 MT
(\050mon:monitor-form <form>\051)SH
12 /Times-Roman AF
6120 29479 MT
(The former allows you to specify which functions will be monitored, while the)
8 W( latter monitors all)9 W
6120 31037 MT
(functions in)
90 W( the current package. Both automatically produce a table of statistics. Variations on)89 W
6120 32595 MT
(these functions can be constructed)
307 W( from the monitoring primitives, which are described in)308 W
6120 34153 MT
(Section 3.2.2.)SH
6120 36813 MT
(Start by monitoring big)
236 W( pieces of the program, then carefully choose which functions to be)235 W
6120 38371 MT
(monitored next.)SH
6120 41031 MT
(If you monitor functions that are called by other monitored functions, decide whether)
78 W( you want)79 W
6120 42589 MT
(inclusive or exclusive statistics. The former includes)
20 W( the monitoring time of inner functions from)19 W
6120 44147 MT
(their callers, while the latter subtracts it. It is important)
21 W( to be aware of what kind of statistics you)22 W
6120 45705 MT
(are displaying, since the difference can be confusing.)SH
6120 48365 MT
(If the per-call time reported is less than 1/10th of)
127 W( a second, then consider the clock resolution)126 W
6120 49923 MT
(and profiling overhead before you believe the time. You may need to)
124 W( run your program many)125 W
6120 51481 MT
(times in order to average out to a higher resolution.)SH
/Times-Bold SF
6120 55165 MT
(3.2.2.)SH
10 SS 
9120 XM
(METERING)SH
12 SS 
14976 XM
(Primitives)SH
/Times-Roman SF
6120 57244 MT
(The)SH
11 /Courier AF
8542 XM
(with-monitoring)SH
12 /Times-Roman AF
18998 XM
(and)SH
11 /Courier AF
21287 XM
(monitor-form)SH
12 /Times-Roman AF
29763 XM
(macros are the main)
256 W( external interface to the)255 W
10 SS 
6120 58802 MT
(METERING)SH
12 SS 
11586 XM
(system.)SH
11 /Courier AF
6120 60694 MT
(with-monitoring)SH
12 /Times-Roman AF
16320 XM
(\050\050&rest functions\051)SH
48987 XM
([Macro])SH
16920 61980 MT
(\050&optional \050nested :exclusive\051 \050threshold 0.01\051)SH
17220 63266 MT
(\050key :percent-time\051\051)SH
16920 64552 MT
(&body body\051)SH
8520 66335 MT
(The named functions are monitored, the body forms executed, a table of results)SH
8520 67621 MT
(printed, and the functions unmonitored. The)SH
/Times-Italic SF
29990 XM
(nested)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
33657 XM
(threshold)SH
/Times-Roman SF
(, and)SH
/Times-Italic SF
40825 XM
(key)SH
/Times-Roman SF
42724 XM
(arguments are)SH
8520 68907 MT
(passed to)SH
11 /Courier AF
13254 XM
(report-monitoring)SH
12 /Times-Roman AF
(.)SH
ES
%%Page: 21 23
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(METERING)SH
10 SS 
(: Code Timing and Consing Profiler)SH
/Times-Roman SF
54080 XM
(21)SH
11 /Courier AF
8280 8023 MT
(monitor-form)SH
12 /Times-Roman AF
16500 XM
(\050form &optional \050nested :exclusive\051)SH
51147 XM
([Macro])SH
17100 9309 MT
(\050threshold 0.01\051 \050key :percent-time\051\051)SH
10680 11092 MT
(Monitor the execution of all functions in the current package during the evaluation of)SH
/Times-Italic SF
10680 12378 MT
(form)SH
/Times-Roman SF
(. A table of results is printed. The)SH
/Times-Italic SF
29350 XM
(nested)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
33017 XM
(threshold)SH
/Times-Roman SF
(, and)SH
/Times-Italic SF
40185 XM
(key)SH
/Times-Roman SF
42084 XM
(arguments are passed)SH
10680 13664 MT
(to)SH
11 /Courier AF
11914 XM
(report-monitoring)SH
12 /Times-Roman AF
(.)SH
8280 16324 MT
(The functions)201 W
11 /Courier AF
15616 XM
(monitor)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
21037 XM
(unmonitor)SH
12 /Times-Roman AF
(, and)201 W
11 /Courier AF
30012 XM
(monitor-all)SH
12 /Times-Roman AF
37773 XM
(are primitives which are called by)201 W
11 /Courier AF
8280 17882 MT
(with-monitoring)SH
12 /Times-Roman AF
18480 XM
(and)SH
11 /Courier AF
20513 XM
(monitor-form)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
8280 19774 MT
(*monitored-functions*)SH
12 /Times-Roman AF
22440 XM
(\050\051)SH
50147 XM
([Variable])SH
10680 21557 MT
(List of all functions that are currently being monitored.)SH
11 /Courier AF
8280 23449 MT
(monitor)SH
12 /Times-Roman AF
13200 XM
(\050&rest names\051)SH
51147 XM
([Macro])SH
10680 25232 MT
(The named functions are set up for monitoring by augmenting their function)SH
10680 26518 MT
(definitions with code that gathers statistical information about code performance. As)SH
10680 27804 MT
(with the)SH
11 /Courier AF
14881 XM
(trace)SH
12 /Times-Roman AF
18481 XM
(macro, the names are not evaluated. If a function is already monitored,)SH
10680 29090 MT
(unmonitors it before remonitoring \050useful when a function has been redefined\051. If a)SH
10680 30376 MT
(name is undefined, gives a warning and ignores it. If no names are specified, returns a)SH
10680 31662 MT
(list of all monitored functions. If a name is not a symbol, it is evaluated to return the)SH
10680 32948 MT
(appropriate closure. This allows the monitoring of closures stored anywhere, such as in)SH
10680 34234 MT
(a variable, array, or structure. Most other metering packages do not handle this.)SH
11 /Courier AF
8280 36126 MT
(unmonitor)SH
12 /Times-Roman AF
14520 XM
(\050&rest names\051)SH
51147 XM
([Macro])SH
10680 37909 MT
(Remove the monitoring on the named functions. If no names are specified, all)SH
10680 39195 MT
(currently monitored functions are unmonitored.)SH
11 /Courier AF
8280 41087 MT
(monitor-all)SH
12 /Times-Roman AF
15840 XM
(\050&optional \050package *package*\051\051)SH
50012 XM
([Function])SH
10680 42870 MT
(Monitors all functions in the specified package, which defaults to the current package.)SH
11 /Courier AF
8280 44762 MT
(monitored)SH
12 /Times-Roman AF
14520 XM
(\050function-place\051)SH
50012 XM
([Function])SH
10680 46545 MT
(Predicate which tests whether a function is monitored.)SH
8280 49205 MT
(The following two functions are used to erase accumulated statistics.)SH
11 /Courier AF
8280 51097 MT
(reset-monitoring-info)SH
12 /Times-Roman AF
22440 XM
(\050name\051)SH
50012 XM
([Function])SH
10680 52880 MT
(Resets the monitoring statistics for the specified function.)SH
11 /Courier AF
8280 54772 MT
(reset-all-monitoring)SH
12 /Times-Roman AF
21780 XM
(\050\051)SH
50012 XM
([Function])SH
10680 56555 MT
(Resets the monitoring statistics for all monitored functions.)SH
8280 59215 MT
(The functions)28 W
11 /Courier AF
15270 XM
(report-monitoring)SH
12 /Times-Roman AF
26818 XM
(and)SH
11 /Courier AF
28879 XM
(display-monitoring-results)SH
12 /Times-Roman AF
46367 XM
(are used to print a)28 W
8280 60773 MT
(statistical report)
79 W( on the monitored functions.)80 W
11 /Courier AF
30713 XM
(display-monitoring-results)SH
12 /Times-Roman AF
48253 XM
(may be called)80 W
8280 62331 MT
(to view the data created by)SH
11 /Courier AF
21480 XM
(report-monitoring)SH
12 /Times-Roman AF
33000 XM
(in various ways.)SH
ES
%%Page: 22 24
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(22)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
11 /Courier AF
6120 8023 MT
(report-monitoring)SH
12 /Times-Roman AF
17640 XM
(\050&optional names \050nested :exclusive\051)SH
47852 XM
([Function])SH
18240 9309 MT
(\050threshold 0.01\051 \050key :percent-time\051)SH
18240 10595 MT
(ignore-no-calls\051)SH
8520 12378 MT
(Creates a table of monitoring information for the current state of the specified list of)SH
8520 13664 MT
(functions, and displays the table using)SH
11 /Courier AF
27158 XM
(display-monitoring-results)SH
12 /Times-Roman AF
(. If)SH
/Times-Italic SF
46018 XM
(names)SH
/Times-Roman SF
49384 XM
(is)SH
11 /Courier AF
8520 14950 MT
(:all)SH
12 /Times-Roman AF
11460 XM
(or)SH
11 /Courier AF
12760 XM
(nil)SH
12 /Times-Roman AF
(, uses all currently monitored functions.)SH
8520 17338 MT
(Takes the following arguments:)SH
/Symbol SF
10668 19041 MT
(\267)SH
/Times-Italic SF
11520 XM
(nested)SH
/Times-Roman SF
14887 XM
(specifies whether nested calls of monitored functions are included in the)SH
11520 20327 MT
(times of monitored functions.)SH
9 /Symbol AF
13806 21790 MT
(\267)SH
12 /Times-Roman AF
14520 21940 MT
(If)SH
11 /Courier AF
15620 XM
(:inclusive)SH
12 /Times-Roman AF
(, the per-function information is for the entire duration of)SH
14520 23226 MT
(the monitored function, including any calls to other monitored functions.)SH
14520 24512 MT
(If functions A and B are monitored, and A calls B, then the accumulated)SH
10 SS 
44559 25461 MT
(5)SH
12 SS 
14520 25842 MT
(time and consing for A will include the time and consing of B.)SH
9 /Symbol AF
13806 27721 MT
(\267)SH
12 /Times-Roman AF
14520 27871 MT
(If)SH
11 /Courier AF
15620 XM
(:exclusive)SH
12 /Times-Roman AF
(, the information excludes time attributed to calls to other)SH
14520 29157 MT
(monitored functions. This is the default.)SH
/Symbol SF
10668 31186 MT
(\267)SH
/Times-Italic SF
11520 XM
(threshold)SH
/Times-Roman SF
16355 XM
(specifies that only functions which have been executed more than)SH
/Times-Italic SF
11520 32472 MT
(threshold)SH
/Times-Roman SF
16355 XM
(amount of the time will be reported. Defaults to 1%. If a threshold of)SH
11520 33758 MT
(0 is specified, all functions are listed, even those with 0 or negative running)SH
11520 35044 MT
(times. See relevant note in Section 3.4.2.)SH
/Symbol SF
10668 37073 MT
(\267)SH
/Times-Italic SF
11520 XM
(key)SH
/Times-Roman SF
13419 XM
(specifies that the table be sorted by one of the following sort keys:)SH
9 /Symbol AF
13806 38536 MT
(\267)SH
11 /Courier AF
14520 38686 MT
(:function)SH
12 /Times-Roman AF
(. Alphabetically by function name.)SH
9 /Symbol AF
13806 40565 MT
(\267)SH
11 /Courier AF
14520 40715 MT
(:percent-time)SH
12 /Times-Roman AF
(. By percent of total execution time.)SH
9 /Symbol AF
13806 42594 MT
(\267)SH
11 /Courier AF
14520 42744 MT
(:percent-cons)SH
12 /Times-Roman AF
(. By percent of total consing.)SH
9 /Symbol AF
13806 44623 MT
(\267)SH
11 /Courier AF
14520 44773 MT
(:calls)SH
12 /Times-Roman AF
(. By number of times the function was called.)SH
9 /Symbol AF
13806 46652 MT
(\267)SH
11 /Courier AF
14520 46802 MT
(:time-per-call)SH
12 /Times-Roman AF
(. By average execution time per function.)SH
9 /Symbol AF
13806 48681 MT
(\267)SH
11 /Courier AF
14520 48831 MT
(:cons-per-call)SH
12 /Times-Roman AF
(. By average consing per function.)SH
9 /Symbol AF
13806 50710 MT
(\267)SH
11 /Courier AF
14520 50860 MT
(:time)SH
12 /Times-Roman AF
(. Same as)SH
11 /Courier AF
22687 XM
(:percent-time)SH
12 /Times-Roman AF
(.)SH
9 /Symbol AF
13806 52739 MT
(\267)SH
11 /Courier AF
14520 52889 MT
(:cons)SH
12 /Times-Roman AF
(. Same as)SH
11 /Courier AF
22687 XM
(:percent-cons)SH
12 /Times-Roman AF
(.)SH
10800 50 6120 69990 UL
8 SS 
7120 71655 MT
(5)SH
10 SS 
7520 72000 MT
(If a function calls itself recursively, the time spent in the inner call\050s\051 may be counted several times.)SH
ES
%%Page: 23 25
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(METERING)SH
10 SS 
(: Code Timing and Consing Profiler)SH
/Times-Roman SF
54080 XM
(23)SH
11 /Courier AF
8280 8023 MT
(display-monitoring-results)SH
12 /Times-Roman AF
25740 XM
(\050&optional \050threshold 0.01\051)SH
50012 XM
([Function])SH
26340 9309 MT
(\050key :percent-time\051 \050ignore-no-calls t\051\051)SH
10680 11092 MT
(Prints a table showing for each named function:)SH
/Symbol SF
12828 12795 MT
(\267)SH
/Times-Roman SF
13680 XM
(the total CPU time used in that function for all calls)SH
/Symbol SF
12828 14824 MT
(\267)SH
/Times-Roman SF
13680 XM
(the total number of bytes consed in that function for all calls)SH
/Symbol SF
12828 16853 MT
(\267)SH
/Times-Roman SF
13680 XM
(the total number of calls)SH
/Symbol SF
12828 18882 MT
(\267)SH
/Times-Roman SF
13680 XM
(the average amount of CPU time per call)SH
/Symbol SF
12828 20911 MT
(\267)SH
/Times-Roman SF
13680 XM
(the average amount of consing per call)SH
/Symbol SF
12828 22940 MT
(\267)SH
/Times-Roman SF
13680 XM
(the percent of total execution time spent executing that function)SH
/Symbol SF
12828 24969 MT
(\267)SH
/Times-Roman SF
13680 XM
(the percent of total consing spent consing in that function)SH
10680 26535 MT
(Summary totals of the CPU time, consing, and calls columns are printed.  An estimate)SH
10680 27821 MT
(of the monitoring overhead is also printed. May be run even after unmonitoring all the)SH
10680 29107 MT
(functions, to play with the data.)SH
14 /Times-Bold AF
8280 32925 MT
(3.3. An Example of)SH
12 SS 
20024 XM
(METERING)SH
14 SS 
27040 XM
(Output)SH
12 /Times-Roman AF
8280 35180 MT
(The following is an example of what the table looks like:)SH
10 /Courier-Bold AF
37680 36985 MT
(Cons)SH
19680 38116 MT
(% %)
2400 W( Per)
13200 W( Total)
3000 W( Total)1200 W
9480 39247 MT
(Function Time)
4800 W( Cons Calls Sec/Call)
600 W( Call)
1200 W( Time)
2400 W( Cons)1800 W
9480 40378 MT
(----------------------------------------------------------------------)SH
9480 41509 MT
(FIND-ROLE: 0.58)
3600 W( 0.00  136 0.003521)
600 W( 0)
3000 W( 0.478863)
600 W( 0)3600 W
9480 42640 MT
(GROUP-ROLE: 0.35)
3000 W( 0.00  365 0.000802)
600 W( 0)
3000 W( 0.292760)
600 W( 0)3600 W
9480 43771 MT
(GROUP-PROJECTOR: 0.05  0.00)
SH( 102)
1800 W( 0.000408)
600 W( 0)
3000 W( 0.041648)
600 W( 0)3600 W
9480 44902 MT
(FEATURE-P: 0.02)
3600 W( 0.00  570 0.000028)
600 W( 0)
3000 W( 0.015680)
600 W( 0)3600 W
9480 46033 MT
(----------------------------------------------------------------------)SH
9480 47164 MT
(TOTAL: 1173)
13800 W( 0.828950)
10800 W( 0)3600 W
9480 48295 MT
(Estimated total monitoring overhead: 0.88 seconds)SH
14 /Times-Bold AF
8280 52113 MT
(3.4. Usage Notes)SH
12 /Times-Roman AF
8280 54368 MT
(This section comments on some aspects of the implementation that may)
114 W( affect the accuracy of)113 W
8280 55926 MT
(the statistics.)SH
/Times-Bold SF
8280 59610 MT
(3.4.1. Clock Resolution)SH
/Times-Roman SF
8280 61689 MT
(On most machines, the length of)
182 W( a clock tick is much longer than the time it takes a simple)183 W
8280 63247 MT
(function to run. For example, on an)
16 W( IBM RT-APC the clock resolution is 1/100th of a second, on)15 W
8280 64805 MT
(a Decstation)
46 W( 3100 it is 1/1000th of a second, and on a Symbolics 3640 it is 1/977th of a second.)47 W
8280 66363 MT
(This means that if a function is called only a few times,)
7 W( then only the first few decimal places are)6 W
8280 67921 MT
(really meaningful.)SH
ES
%%Page: 24 26
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(24)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 /Times-Bold AF
6120 8004 MT
(3.4.2. Calculating Monitoring Overhead)SH
/Times-Roman SF
6120 10083 MT
(Every time a monitored function is)
12 W( called, the added monitoring code takes some amount of time)13 W
6120 11641 MT
(to run. This can result in inflated times for functions that take little time)
105 W( to run. Also, in many)104 W
6120 13199 MT
(Lisps the function)140 W
11 /Courier AF
15509 XM
(get-internal-run-time)SH
12 /Times-Roman AF
29809 XM
(conses, which can affect the consing)
140 W( statistics.)141 W
6120 14757 MT
(Accordingly, an estimate of the overhead due to monitoring)
207 W( is subtracted from the time and)206 W
6120 16315 MT
(storage reported for each function.)SH
6120 18975 MT
(Although this correction works fairly well, it is not)
41 W( completely accurate. This can result in times)42 W
6120 20533 MT
(that become)
460 W( increasingly meaningless for functions with shorter runtimes. For example,)459 W
6120 22091 MT
(subtracting the estimated overhead may result in)
55 W( negative times for some functions. This should)56 W
6120 23649 MT
(only be of concern when the estimated)
38 W( profiling overhead is many times larger than the reported)37 W
6120 25207 MT
(total CPU time.)SH
6120 27867 MT
(If you monitor functions)
255 W( that are called by monitored functions, in)256 W
11 /Courier AF
41074 XM
(:inclusive)SH
12 /Times-Roman AF
48230 XM
(mode the)256 W
6120 29425 MT
(monitoring overhead for the inner functions are)
218 W( subtracted from the CPU time for the outer)219 W
10 SS 
10421 30602 MT
(6)SH
12 SS 
6120 30983 MT
(function.)SH
11285 XM
(In)SH
11 /Courier AF
12649 XM
(:exclusive)SH
12 /Times-Roman AF
19613 XM
(mode this is not necessary, since we)
64 W( subtract the monitoring time of)63 W
6120 32541 MT
(inner functions, overhead and all.)SH
6120 35201 MT
(Otherwise, the estimated monitoring overhead is not counted in)
18 W( the reported total CPU time. The)19 W
6120 36759 MT
(sum of total CPU time and)
75 W( the estimated monitoring overhead should be close to the total CPU)74 W
6120 38317 MT
(time for the entire monitoring run \050as reported by the)SH
11 /Courier AF
31859 XM
(time)SH
12 /Times-Roman AF
34799 XM
(macro\051.)SH
6120 40977 MT
(The timing overhead factor is computed at load time. This)
150 W( will be incorrect if the monitoring)151 W
6120 42535 MT
(code is run in a different environment than that in which)
2 W( the file was loaded. For example, saving)1 W
6120 44093 MT
(a Lisp image on a high performance)
5 W( machine and running it on a low performance one will result)6 W
6120 45651 MT
(in an erroneously small overhead factor.)SH
6120 48311 MT
(If the statistics vary widely, possible causes are:)SH
/Symbol SF
8268 50014 MT
(\267)SH
/Times-Roman SF
9120 XM
(Garbage collection.)
29 W( Try turning it off and then running the code. Be forewarned that)28 W
9120 51300 MT
(running an encapsulated function results in some extra consing, and)
616 W( that)617 W
11 /Courier AF
9120 52586 MT
(get-internal-run-time)SH
12 /Times-Roman AF
23280 XM
(will probably cons as well.)SH
/Symbol SF
8268 54615 MT
(\267)SH
/Times-Roman SF
9120 XM
(Swapping. The time it takes to swap your function into memory can affect the)256 W
9120 55901 MT
(reported statistics. If you have enough memory, try executing)
16 W( your form once before)17 W
9120 57187 MT
(monitoring it so that it will be swapped into memory.)SH
/Symbol SF
8268 59216 MT
(\267)SH
/Times-Roman SF
9120 XM
(Resolution of)143 W
11 /Courier AF
16208 XM
(internal-time-units-per-second)SH
12 /Times-Roman AF
(. This)
143 W( value is rather coarse)142 W
9120 60502 MT
(in many)
13 W( Lisps, as noted in Section 3.4.1. If this value is too low, the timings become)14 W
9120 61788 MT
(wild. Try executing your test form more times or for a larger number of iterations.)SH
10800 50 6120 68885 UL
8 SS 
7120 70550 MT
(6)SH
10 SS 
7520 70895 MT
(This is accomplished by counting for each function not only the number of calls to the function itself,)
74 W( but also)73 W
6120 72000 MT
(the number of calls to monitored functions. This can become rather confusing for recursive functions.)SH
ES
%%Page: 25 27
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(METERING)SH
10 SS 
(: Code Timing and Consing Profiler)SH
/Times-Roman SF
54080 XM
(25)SH
14 /Times-Bold AF
8280 8138 MT
(3.5. Implementation Notes)SH
12 /Times-Roman AF
8280 10393 MT
(The overhead is calculated by monitoring)30 W
11 /Courier AF
28729 XM
(stub-function)SH
12 /Times-Roman AF
37639 XM
(and running it for)
30 W( a large number of)29 W
8280 11951 MT
(times \050)208 W
11 /Courier AF
(overhead-iterations)SH
12 /Times-Roman AF
(\051, storing the timing and)
208 W( consing overhead into the variables)209 W
11 /Courier AF
8280 13509 MT
(*monitor-time-overhead*)SH
12 /Times-Roman AF
24870 XM
(and)SH
11 /Courier AF
28013 XM
(*monitor-cons-overhead*)SH
12 /Times-Roman AF
(, respectively.)
1110 W( Since)1109 W
11 /Courier AF
8280 15067 MT
(stub-function)SH
12 /Times-Roman AF
17227 XM
(is a null function, this results in a)
67 W( fairly accurate estimate for the overhead of)68 W
8280 16625 MT
(monitoring a function. If you suspect that)
650 W( these values are inaccurate, try running)649 W
11 /Courier AF
8280 18183 MT
(set-monitor-overhead)SH
12 /Times-Roman AF
21780 XM
(again.)SH
11 /Courier AF
8280 20075 MT
(*monitor-time-overhead*)SH
12 /Times-Roman AF
23760 XM
(\050\051)SH
50147 XM
([Variable])SH
10680 21858 MT
(The amount of time an empty monitored function costs.)SH
11 /Courier AF
8280 23750 MT
(*monitor-cons-overhead*)SH
12 /Times-Roman AF
23760 XM
(\050\051)SH
50147 XM
([Variable])SH
10680 25533 MT
(The amount of cons an empty monitored function costs.)SH
11 /Courier AF
8280 27425 MT
(overhead-iterations)SH
12 /Times-Roman AF
21120 XM
(5000)SH
50012 XM
([Constant])SH
10680 29208 MT
(Number of iterations over which the timing overhead is averaged.)SH
11 /Courier AF
8280 31100 MT
(stub-function)SH
12 /Times-Roman AF
17160 XM
(\050\051)SH
50012 XM
([Function])SH
10680 32883 MT
(A null piece of code run monitored to estimate monitoring overhead.)SH
11 /Courier AF
8280 34775 MT
(set-monitor-overhead)SH
12 /Times-Roman AF
21780 XM
(\050\051)SH
50012 XM
([Function])SH
10680 36558 MT
(Determines the average overhead of monitoring by monitoring the execution of an)SH
10680 37844 MT
(empty function many times.)SH
8280 40504 MT
(The key idea behind)190 W
10 SS 
19106 XM
(METERING)SH
12 SS 
24763 XM
(is to replace the definition of the monitored function with a)191 W
8280 42062 MT
(closure that records the)
90 W( monitoring data and updates the data with each call to the function. As)89 W
8280 43620 MT
(noted in Section 3.1, we)
25 W( can reduce the amount of consing done by the &rest arg in each lambda)26 W
8280 45178 MT
(by using the &rest)
692 W( arg to capture only the non-required arguments. The function)691 W
11 /Courier AF
8280 46736 MT
(make-monitoring-encapsulation)SH
12 /Times-Roman AF
27837 XM
(returns a lambda)
117 W( expression which, when called with a)118 W
8280 48294 MT
(function name, encapsulates it with)
124 W( a closure that has the right number of required arguments.)123 W
8280 49852 MT
(To create these closures)
108 W( efficiently, we precompute the encapsulation-creating functions for up)109 W
8280 51410 MT
(to)SH
11 /Courier AF
9566 XM
(precomputed-encapsulations)SH
12 /Times-Roman AF
27078 XM
(number of required arguments \050with and without optional)52 W
8280 52968 MT
(arguments\051 and store)
28 W( them in a hash table for later retrieval by)29 W
11 /Courier AF
38831 XM
(monitoring-encapsulate)SH
12 /Times-Roman AF
(. If,)29 W
8280 54526 MT
(when encapsulating a function, the encapsulation-creating)
36 W( function is not found in the hash table)35 W
8280 56084 MT
(by)SH
11 /Courier AF
9950 XM
(find-encapsulation)SH
12 /Times-Roman AF
(, a new function is)
170 W( added to the table.  Since we're precomputing)171 W
8280 57642 MT
(closure functions for)
130 W( common argument signatures, there is no need to call)129 W
11 /Courier AF
46003 XM
(compile)SH
12 /Times-Roman AF
51052 XM
(for each)129 W
8280 59200 MT
(monitored function.)SH
11 /Courier AF
8280 61092 MT
(make-monitoring-encapsulation)SH
12 /Times-Roman AF
27720 XM
(\050min-args optionals-p\051)SH
50012 XM
([Function])SH
10680 62875 MT
(Makes a function which will appropriately encapsulate any function with)SH
/Times-Italic SF
46084 XM
(min-args)SH
/Times-Roman SF
10680 64161 MT
(required arguments.)SH
11 /Courier AF
8280 66053 MT
(precomputed-encapsulations)SH
12 /Times-Roman AF
25740 XM
(8)SH
50012 XM
([Constant])SH
10680 67836 MT
(We create precomputed encapsulations for up to this number of required arguments.)SH
10680 69122 MT
(Any others will be computed as needed.)SH
ES
%%Page: 26 28
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(26)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
11 /Courier AF
6120 8023 MT
(*existing-encapsulations*)SH
12 /Times-Roman AF
22920 XM
(\050make-hash-table :test \050function equal\051\051)SH
47987 XM
([Variable])SH
8520 9806 MT
(Hash table which maps from common argument signatures \050required-args .  optionals-)SH
8520 11092 MT
(p\051 to appropriate precomputed closure functions.)SH
11 /Courier AF
6120 12984 MT
(find-encapsulation)SH
12 /Times-Roman AF
18300 XM
(\050min-args optionals-p\051)SH
47852 XM
([Function])SH
8520 14767 MT
(Used to find the appropriate precomputed encapsulation function if it exists, or create)SH
8520 16053 MT
(\050and save\051 a new one if necessary.)SH
11 /Courier AF
6120 17945 MT
(monitoring-encapsulate)SH
12 /Times-Roman AF
20940 XM
(\050name &optional warn\051)SH
47852 XM
([Function])SH
8520 19728 MT
(Monitors the function Name. If already monitored, unmonitor first.)SH
11 /Courier AF
6120 21620 MT
(monitoring-unencapsulate)SH
12 /Times-Roman AF
22260 XM
(\050name &optional warn\051)SH
47852 XM
([Function])SH
8520 23403 MT
(Removes monitoring encapsulation code from around Name.)SH
6120 26063 MT
(The variables)177 W
11 /Courier AF
13274 XM
(*monitor-results*)SH
12 /Times-Roman AF
24971 XM
(and)SH
11 /Courier AF
27182 XM
(*no-calls*)SH
12 /Times-Roman AF
34260 XM
(are associated with the functions that)178 W
6120 27621 MT
(create and display monitoring statistics.)SH
11 /Courier AF
6120 29513 MT
(*monitor-results*)SH
12 /Times-Roman AF
17640 XM
(\050\051)SH
47987 XM
([Variable])SH
8520 31296 MT
(A table of monitoring statistics is stored here.)SH
11 /Courier AF
6120 33188 MT
(*no-calls*)SH
12 /Times-Roman AF
13020 XM
(\050\051)SH
47987 XM
([Variable])SH
8520 34971 MT
(A list of monitored functions which weren't called.)SH
ES
%%Page: 27 29
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(DEFSYSTEM)SH
10 SS 
(: A "make" for Lisp)SH
/Times-Roman SF
54080 XM
(27)SH
16 /Times-Bold AF
8280 8272 MT
(4.)SH
14 SS 
9880 XM
(DEFSYSTEM)SH
16 SS 
(: A "make" for Lisp)SH
10 /Times-Roman AF
49019 10566 MT
(7)SH
12 SS 
8280 10947 MT
(The)SH
10 SS 
10509 XM
(DEFSYSTEM)SH
12 SS 
16706 XM
(program is a portable system definition facility)
63 W( for Common Lisp.)64 W
49883 XM
(It is useful)64 W
8280 12505 MT
(for managing programs)
22 W( which consist of several files, and provides a convenient way to describe)21 W
8280 14063 MT
(dependencies between files in the system and dependencies of the system on other systems.)SH
8280 16723 MT
(A system is defined as hierarchical layers of modules, with an optionally matching)
189 W( directory)190 W
8280 18281 MT
(structure. In contrast with the)
187 W( Symbolics defsystem, systems are described solely in terms of)186 W
8280 19839 MT
(their structure; the user does not need to worry about procedural matters such)
166 W( as compilation)167 W
8280 21397 MT
(order. For example, the components of a system may be listed in any order the)
181 W( user desires,)180 W
8280 22955 MT
(because the)159 W
11 /Courier AF
14464 XM
(defsystem)SH
12 /Times-Roman AF
20863 XM
(macro reorganizes them according to the file-dependency)
159 W( constraints)160 W
8280 24513 MT
(specified by)
355 W( the user. Since it accomplishes this by performing a topological sort of the)354 W
8280 26071 MT
(constraint graph, cyclical file dependencies)
190 W( are not supported \050i.e., the file-dependency graph)191 W
8280 27629 MT
(must be a DAG\051.)SH
10 SS 
8280 30289 MT
(DEFSYSTEM)SH
12 SS 
14478 XM
(includes many of the)
64 W( basic features, such as minimizing the amount of compilation)63 W
8280 31847 MT
(and loading that must be done when some part of the system is changed.)
26 W( Selective recompilation)27 W
8280 33405 MT
(occurs only when the binary file)
92 W( either does not exist or is older than the corresponding source)91 W
8280 34963 MT
(file, or when the file depends on other files that needed to be recompiled. Of)
20 W( course, the user can)21 W
8280 36521 MT
(decide to override this behavior and require that all files be recompiled, even those)
22 W( whose binary)21 W
8280 38079 MT
(files are up to date.)SH
8280 40739 MT
(Only two operations on systems are)
235 W( currently defined \050compile and load\051. The interface for)236 W
8280 42297 MT
(defining new operations on systems, however, is simple and straightforward.)SH
10 SS 
8280 44957 MT
(DEFSYSTEM)SH
12 SS 
14414 XM
(does not currently support patching.)SH
14 /Times-Bold AF
8280 48775 MT
(4.1. Installing)SH
12 SS 
16759 XM
(DEFSYSTEM)SH
/Times-Roman SF
8280 51030 MT
(Before using)210 W
10 SS 
15167 XM
(DEFSYSTEM)SH
12 SS 
(, decide if you want)
210 W( to have one or more central directories where)209 W
8280 52588 MT
(system definition files will be kept.  If so, modify the)
260 W( value of)261 W
11 /Courier AF
41705 XM
(*central-registry*)SH
12 /Times-Roman AF
54146 XM
(to)SH
8280 54146 MT
(contain a list of the pathnames of those directories.)SH
8280 56806 MT
(Verify that the value of)113 W
11 /Courier AF
20346 XM
(*filename-extensions*)SH
12 /Times-Roman AF
34618 XM
(includes source and binary extensions for)112 W
8280 58364 MT
(your Lisp; if not, add them.)SH
8280 61024 MT
(Set the variable)165 W
11 /Courier AF
16543 XM
(*dont-redefine-require*)SH
12 /Times-Roman AF
32189 XM
(to)SH
11 /Courier AF
33589 XM
(t)SH
12 /Times-Roman AF
34715 XM
(if you want to prevent)166 W
10 SS 
46446 XM
(DEFSYSTEM)SH
12 SS 
52746 XM
(from)SH
8280 62582 MT
(redefining)SH
11 /Courier AF
13587 XM
(require)SH
12 /Times-Roman AF
(. This is useful for Lisps that treat)73 W
11 /Courier AF
35296 XM
(require)SH
12 /Times-Roman AF
40288 XM
(specially in the compiler. \050For)72 W
8280 64140 MT
(example, some Lisps treat)181 W
11 /Courier AF
21840 XM
(require)SH
12 /Times-Roman AF
26941 XM
(as if an)181 W
11 /Courier AF
31252 XM
(\050eval-when \050compile load eval\051 ...\051)182 W
10800 50 8280 66675 UL
8 /Times-Roman AF
9280 68340 MT
(7)SH
10 SS 
9680 68685 MT
(Though home-grown, it was inspired by)
209 W( fond memories of the defsystem facility on Symbolics 3600 Lisp)208 W
8280 69790 MT
(Machines [3] [4].)
SH( The exhaustive list of filename extensions for various Lisps was)
226 W( initially taken from Xerox)227 W
8280 70895 MT
(Corporation's PCL miniature defsystem facility. The idea)
232 W( to have one)231 W
11 /Courier AF
38787 XM
(operate-on-system)SH
10 /Times-Roman AF
50488 XM
(function in)231 W
8280 72000 MT
(addition to separate)SH
11 /Courier AF
16362 XM
(compile-system)SH
10 /Times-Roman AF
25852 XM
(and)SH
11 /Courier AF
27546 XM
(load-system)SH
10 /Times-Roman AF
35056 XM
(functions was also taken from PCL.)SH
ES
%%Page: 28 30
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(28)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 /Times-Roman AF
6120 8023 MT
(were wrapped around the form, and)
222 W( lose this special treatment when)221 W
11 /Courier AF
41624 XM
(require)SH
12 /Times-Roman AF
46765 XM
(is redefined.)221 W
6120 9581 MT
(While we)
33 W( provide an alternate redefinition of)34 W
11 /Courier AF
28326 XM
(require)SH
12 /Times-Roman AF
33280 XM
(as a macro to work around this problem,)34 W
6120 11139 MT
(some users may find it simpler to not redefine)256 W
11 /Courier AF
30797 XM
(require)SH
12 /Times-Roman AF
(, especially if they don't)
256 W( need the)255 W
6120 12697 MT
(backward compatibility.\051)SH
6120 15357 MT
(If you)
204 W( intend to use logical pathnames in your system definitions, the)205 W
10 SS 
42088 XM
(LOGICAL-PATHNAMES)SH
12 SS 
6120 16915 MT
(package must be loaded before compiling or loading)SH
10 SS 
31656 XM
(DEFSYSTEM)SH
12 SS 
(.)SH
6120 19575 MT
(Save a Lisp image with)108 W
10 SS 
18228 XM
(DEFSYSTEM)SH
12 SS 
24470 XM
(loaded, so that you)
108 W( won't have to reload it each time you)107 W
6120 21133 MT
(restart Lisp.)SH
14 /Times-Bold AF
6120 24951 MT
(4.2. Overview)SH
10 /Times-Roman AF
6120 27206 MT
(DEFSYSTEM)SH
12 SS 
12524 XM
(is loaded into the "MAKE" package, so prefix)
270 W( all the following functions and)271 W
6120 28764 MT
(variables with a "MAKE:" or the nickname "MK:". This name was chosen)
210 W( to avoid naming)209 W
6120 30322 MT
(conflicts with various Lisps,)
134 W( many of which already have a "DEFSYSTEM" package for their)135 W
6120 31880 MT
(own particular system construction tool.)SH
6120 34540 MT
(The external interface to the defsystem facility consists of the)299 W
11 /Courier AF
38983 XM
(defsystem)SH
12 /Times-Roman AF
45522 XM
(macro and the)299 W
11 /Courier AF
6120 36098 MT
(operate-on-system)SH
12 /Times-Roman AF
18420 XM
(function.)SH
11 /Courier AF
23801 XM
(defsystem)SH
12 /Times-Roman AF
30821 XM
(is used to define)
780 W( a new system and)781 W
11 /Courier AF
6120 37656 MT
(operate-on-system)SH
12 /Times-Roman AF
18144 XM
(to compile it and load)
504 W( it. The functions)503 W
11 /Courier AF
41144 XM
(compile-system)SH
12 /Times-Roman AF
51187 XM
(and)SH
11 /Courier AF
6120 39214 MT
(load-system)SH
12 /Times-Roman AF
13806 XM
(are provided as an alternate way of compiling)
126 W( and loading a system. They call)127 W
11 /Courier AF
6120 40772 MT
(operate-on-system)SH
12 /Times-Roman AF
18080 XM
(with appropriate arguments. The definition of)440 W
11 /Courier AF
42956 XM
(require)SH
12 /Times-Roman AF
48315 XM
(has been)439 W
6120 42330 MT
(modified to mesh)
423 W( well with systems defined using)424 W
11 /Courier AF
33917 XM
(defsystem)SH
12 /Times-Roman AF
(, and is fully backward-)424 W
6120 43888 MT
(compatible.)SH
6120 46548 MT
(To use)SH
10 SS 
9653 XM
(DEFSYSTEM)SH
12 SS 
(,)SH
8520 48114 MT
(1.)SH
9720 XM
(Write a)45 W
11 /Courier AF
13677 XM
(defsystem)SH
12 /Times-Roman AF
19962 XM
(form for your system, and save it in a file of type)45 W
11 /Courier AF
44340 XM
("system")SH
12 /Times-Roman AF
(.)SH
9720 49400 MT
(If the)
44 W( name of your system is)45 W
11 /Courier AF
24337 XM
(foo)SH
12 /Times-Roman AF
(, the file should be named)45 W
11 /Courier AF
39289 XM
("foo.system")SH
12 /Times-Roman AF
(. You)45 W
9720 50686 MT
(may want to move the file into one of your central registry directories.)SH
8520 52715 MT
(2.)SH
9720 XM
(Use the function)1246 W
11 /Courier AF
21692 XM
(operate-on-system)SH
12 /Times-Roman AF
34457 XM
(\050or)SH
11 /Courier AF
37402 XM
(compile-system)SH
12 /Times-Roman AF
48187 XM
(and)SH
11 /Courier AF
9720 54001 MT
(load-system)SH
12 /Times-Roman AF
(\051 to do things to your system.)
770 W( For example evalutating)771 W
11 /Courier AF
9720 55287 MT
(\050operate-on-system "foo" 'load\051)113 W
12 /Times-Roman AF
30819 XM
(will load the)
113 W( system, while evalutating)112 W
11 /Courier AF
9720 56573 MT
(\050operate-on-system "foo" 'compile\051)52 W
12 /Times-Roman AF
32616 XM
(will compile it. [If you are)
52 W( going to)53 W
9720 57859 MT
(load the system and not compile it, you can also use)102 W
11 /Courier AF
36114 XM
(\050require "foo"\051)102 W
12 /Times-Roman AF
46518 XM
(to load)101 W
9720 59145 MT
(it.])SH
10 SS 
6120 61805 MT
(DEFSYSTEM)SH
12 SS 
12578 XM
(checks for an appropriately named system definition file)
324 W( first in your current)325 W
6120 63363 MT
(directory, then in the central registry directories)
223 W( in the order in which they are listed in the)222 W
6120 64921 MT
(variable)SH
11 /Courier AF
10327 XM
(*central-registry*)SH
12 /Times-Roman AF
(. If it finds a match, it will)
40 W( reload the system definition file if it)41 W
6120 66479 MT
(has changed since you last loaded)
27 W( the system definition. If the system definition file is located in)26 W
6120 68037 MT
(neither the current directory nor one of the central)
87 W( registry directories, you must explicitly load)88 W
6120 69595 MT
(the system definition file.)SH
ES
%%Page: 29 31
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(DEFSYSTEM)SH
10 SS 
(: A "make" for Lisp)SH
/Times-Roman SF
54080 XM
(29)SH
14 /Times-Bold AF
8280 8138 MT
(4.3. Using)SH
12 SS 
14503 XM
(DEFSYSTEM)SH
/Times-Roman SF
8280 10393 MT
(This section)
144 W( describes all of the basic)143 W
10 SS 
27519 XM
(DEFSYSTEM)SH
12 SS 
33796 XM
(commands and the variables which control)143 W
8280 11951 MT
(their behavior.)26 W
10 SS 
15633 XM
(DEFSYSTEM)SH
12 SS 
21793 XM
(includes functions for defining new)
26 W( systems, compiling systems, and)27 W
8280 13509 MT
(loading systems.)SH
/Times-Bold SF
8280 17193 MT
(4.3.1. Defining a System)SH
/Times-Roman SF
8280 19272 MT
(A system is a set of)85 W
/Times-Italic SF
18459 XM
(components)SH
/Times-Roman SF
24577 XM
(with associated)85 W
/Times-Italic SF
32415 XM
(properties)SH
/Times-Roman SF
(. The)
470 W( properties include the type of)85 W
8280 20830 MT
(the component, its name, source and binary pathnames, its package,)
487 W( initializations and)488 W
8280 22388 MT
(finalizations, and the component dependencies, as well as the components of the component.)SH
8280 25048 MT
(The)SH
11 /Courier AF
10446 XM
(defsystem)SH
12 /Times-Roman AF
16686 XM
(macro is used to define new systems.)SH
11 /Courier AF
8280 26940 MT
(defsystem)SH
12 /Times-Roman AF
14520 XM
(\050name &rest definition-body\051)SH
51147 XM
([Macro])SH
10680 28723 MT
(Defines)SH
/Times-Italic SF
14713 XM
(name)SH
/Times-Roman SF
17612 XM
(to be the name of the system described in)SH
/Times-Italic SF
37782 XM
(definition-body)SH
/Times-Roman SF
(. This name is)SH
10680 30009 MT
(used for all operations on the system.  The definition body consists of a sequence of)SH
10680 31295 MT
(keyword-value pairs, where the keywords correspond to the properties described)SH
10680 32581 MT
(below. These properties determine what files are included in the system, what files)SH
10680 33867 MT
(depend on other files, and any features of the overall system, such as its directory or)SH
10680 35153 MT
(package.)SH
/Times-Italic SF
15212 XM
(name)SH
/Times-Roman SF
18111 XM
(may be a symbol or a string; if a symbol, the symbol-name is used. The)SH
10680 36439 MT
(format of the top level)SH
11 /Courier AF
21716 XM
(defsystem)SH
12 /Times-Roman AF
27956 XM
(definition parallels that of components, except the)SH
10 SS 
51325 37388 MT
(8)SH
12 SS 
10680 37769 MT
(component type is replaced with the symbol)SH
11 /Courier AF
32184 XM
(defsystem)SH
12 /Times-Roman AF
(. Once)
300 W( a system is defined,)SH
10680 39055 MT
(certain operations such as loading and compilation may be applied to it.)SH
/Times-Bold SF
8280 42019 MT
(4.3.1.1. Component Types)SH
/Times-Roman SF
8280 44098 MT
(There are five types of components,)596 W
11 /Courier AF
29423 XM
(:system)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
35239 XM
(:subsystem)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
43035 XM
(:module)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
48851 XM
(:file)SH
12 /Times-Roman AF
(, and)596 W
11 /Courier AF
8280 45656 MT
(:private-file)SH
12 /Times-Roman AF
(.)SH
/Symbol SF
10428 47359 MT
(\267)SH
/Times-Roman SF
11280 XM
(Components of type)181 W
11 /Courier AF
21858 XM
(:system)SH
12 /Times-Roman AF
26959 XM
(have absolute pathnames)
181 W( and are used to define a)182 W
11280 48645 MT
(multi-system system. The toplevel system defined by the)282 W
11 /Courier AF
41177 XM
(defsystem)SH
12 /Times-Roman AF
47698 XM
(macro is)281 W
11280 49931 MT
(implicitly of type)SH
11 /Courier AF
19918 XM
(:system)SH
12 /Times-Roman AF
(.)SH
/Symbol SF
10428 51960 MT
(\267)SH
/Times-Roman SF
11280 XM
(Components of type)130 W
11 /Courier AF
21705 XM
(:subsystem)SH
12 /Times-Roman AF
28735 XM
(have relative pathnames and are used to)
130 W( define)131 W
11280 53246 MT
(subsystems of a system.)SH
/Symbol SF
10428 55275 MT
(\267)SH
/Times-Roman SF
11280 XM
(Components of type)116 W
11 /Courier AF
21663 XM
(:module)SH
12 /Times-Roman AF
26699 XM
(have pathnames that are relative to)
116 W( their containing)115 W
11280 56561 MT
(system or module, and may contain a set of files and/or modules.)
85 W( This enables one)86 W
11280 57847 MT
(to define modules, submodules, and so on.)SH
/Symbol SF
10428 59876 MT
(\267)SH
/Times-Roman SF
11280 XM
(Components of type)SH
11 /Courier AF
21315 XM
(:file)SH
12 /Times-Roman AF
24915 XM
(represent files with relative pathnames.)SH
/Symbol SF
10428 61905 MT
(\267)SH
/Times-Roman SF
11280 XM
(Components of type)446 W
11 /Courier AF
22653 XM
(:private-file)SH
12 /Times-Roman AF
31979 XM
(also represent files, but with absolute)446 W
11280 63191 MT
(pathnames. Components of type)283 W
11 /Courier AF
28181 XM
(:private-file)SH
12 /Times-Roman AF
37344 XM
(are useful)
283 W( for having private)284 W
11280 64477 MT
(copies of one or two files of a system without)
131 W( having to rewrite the entire system)130 W
11280 65763 MT
(definition or duplicate the entire system directory tree.)SH
10800 50 8280 69990 UL
8 SS 
9280 71655 MT
(8)SH
10 SS 
9680 72000 MT
(System definitions may be automatically loaded if not defined. See Section 4.5.2.)SH
ES
%%Page: 30 32
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(30)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 /Times-Bold AF
6120 8004 MT
(4.3.1.2. Component Names)SH
/Times-Roman SF
6120 10083 MT
(The name of)
89 W( a component is refered to by other components to indicate that they depend on it.)90 W
6120 11641 MT
(The name of a component may also be used)
116 W( as the name of the subdirectory or file associated)115 W
6120 13199 MT
(with the component.  See Section 4.3.1.3 for details.)SH
6120 15859 MT
(The name of a component may be a)
129 W( symbol or a string. For ease of access the definition of a)130 W
6120 17417 MT
(system \050its component\051 is stored in a hash table entry corresponding to)
82 W( an uppercase version of)81 W
6120 18975 MT
(the string or symbol name. If the system)
121 W( name is a symbol, for all other purposes the name is)122 W
6120 20533 MT
(converted to a)
76 W( lowercase string \050system names that are strings are left alone\051. A system defined)75 W
6120 22091 MT
(as)SH
11 /Courier AF
7506 XM
('foo)SH
12 /Times-Roman AF
10532 XM
(will have an internal name of)86 W
11 /Courier AF
25383 XM
("FOO")SH
12 /Times-Roman AF
29069 XM
(and will)
86 W( be stored in the file)87 W
11 /Courier AF
43447 XM
("foo.system")SH
12 /Times-Roman AF
(. A)87 W
6120 23649 MT
(system defined as)175 W
11 /Courier AF
15479 XM
("Foo")SH
12 /Times-Roman AF
19253 XM
(will have an internal name of)174 W
11 /Courier AF
34632 XM
("FOO")SH
12 /Times-Roman AF
38406 XM
(and will be stored in the file)174 W
11 /Courier AF
6120 25207 MT
("Foo.system")SH
12 /Times-Roman AF
(.)SH
/Times-Bold SF
6120 28171 MT
(4.3.1.3. Component Pathnames and File Types)SH
/Times-Roman SF
6120 30250 MT
(The absolute pathnames)
105 W( \050for components of type)106 W
11 /Courier AF
30629 XM
(:system)SH
12 /Times-Roman AF
35655 XM
(and)SH
11 /Courier AF
37794 XM
(:private-file)SH
12 /Times-Roman AF
(\051 and relative)106 W
6120 31808 MT
(pathnames \050for all)
96 W( other components\051 of the binary and source files may be specified using the)95 W
10 SS 
50027 32985 MT
(9)SH
11 /Courier AF
6120 33366 MT
(:source-pathname)SH
12 /Times-Roman AF
17206 XM
(and)SH
11 /Courier AF
19465 XM
(:binary-pathname)SH
12 /Times-Roman AF
30551 XM
(keywords in the)
226 W( component definition.)227 W
51054 XM
(The)SH
6120 34924 MT
(pathnames associated with a module correspond to subdirectories of the containing)
144 W( module or)143 W
6120 36482 MT
(system. If no binary pathname is specified, the binaries are distributed among the)
43 W( sources.  If no)44 W
6120 38040 MT
(source pathname is given for)
92 W( a component, it defaults to the name of the component. Since the)91 W
6120 39598 MT
(names are converted to)
276 W( lowercase, pathnames must be provided for each component if the)277 W
6120 41156 MT
(operating system is case sensitive \050unless the pathnames are all lowercase\051. Similarly, if a)289 W
6120 42714 MT
(module does not correspond to a subdirectory, a null-string pathname \050)162 W
11 /Courier AF
("")SH
12 /Times-Roman AF
(\051 must be provided.)162 W
6120 44272 MT
(One may change this behavior by modifying the)
40 W( variable)39 W
11 /Courier AF
34114 XM
(*source-pathname-default*)SH
12 /Times-Roman AF
(. For)39 W
6120 45830 MT
(example, one could set it to)71 W
11 /Courier AF
20049 XM
("")SH
12 /Times-Roman AF
21740 XM
(instead of)71 W
11 /Courier AF
26883 XM
(nil)SH
12 /Times-Roman AF
29234 XM
(to avoid having to)
71 W( specify)72 W
11 /Courier AF
42360 XM
(:source-pathname)SH
6120 47388 MT
("")SH
12 /Times-Roman AF
7740 XM
(in every module if the files are kept in a single flat directory.)SH
6120 50048 MT
(File types \050e.g.,)337 W
11 /Courier AF
14866 XM
(lisp)SH
12 /Times-Roman AF
18143 XM
(and)SH
11 /Courier AF
20513 XM
(fasl)SH
12 /Times-Roman AF
(\051 for source and binary)
337 W( files may be specified using the)336 W
11 /Courier AF
6120 51606 MT
(:source-extension)SH
12 /Times-Roman AF
17754 XM
(and)SH
11 /Courier AF
19901 XM
(:binary-extension)SH
12 /Times-Roman AF
31535 XM
(keywords. These file types are inherited by)114 W
6120 53164 MT
(the components)
133 W( of the system. If the file types are not specified or given as)132 W
11 /Courier AF
44374 XM
(nil)SH
12 /Times-Roman AF
(,)SH
10 SS 
47086 XM
(DEFSYSTEM)SH
12 SS 
6120 54722 MT
(makes a reasonable choice of defaults based)
248 W( on the machine type and underlying operating)249 W
6120 56280 MT
(system.)SH
6120 58940 MT
(At system definition)
25 W( time, every relative directory is replaced with the corresponding cumulative)24 W
6120 60498 MT
(absolute pathname with all the pathname-components specified.)SH
10800 50 6120 67780 UL
8 SS 
7120 69445 MT
(9)SH
10 SS 
7520 69790 MT
(Macintosh pathnames are not fully supported at this time. For example, trailing)
74 W( colons must be included in the)75 W
6120 70895 MT
(pathnames of each)
136 W( module. For system definitions to be portable between UNIX Lisps and Macintosh Common)135 W
6120 72000 MT
(Lisp, one must use the)SH
8 SS 
15342 XM
(LOGICAL-PATHNAMES)SH
10 SS 
24261 XM
(package.)SH
ES
%%Page: 31 33
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(DEFSYSTEM)SH
10 SS 
(: A "make" for Lisp)SH
/Times-Roman SF
54080 XM
(31)SH
12 /Times-Bold AF
8280 8004 MT
(4.3.1.4. Segregating Binaries for Different Lisps)SH
/Times-Roman SF
8280 10083 MT
(The user may wish to maintain different subdirectories for)
130 W( the binaries of different Lisps. The)131 W
8280 11641 MT
(function)SH
11 /Courier AF
12865 XM
(afs-binary-directory)SH
12 /Times-Roman AF
26649 XM
(has been provided to imitate the behavior of the)
284 W( @sys)283 W
8280 13199 MT
(feature of the Andrew File System on)
112 W( systems not running AFS. The @sys feature allows soft)113 W
8280 14757 MT
(links to point to different directories depending on which platform is accessing)
240 W( the files. A)239 W
8280 16315 MT
(common setup would)
285 W( be to have the bin directory soft linked to)286 W
11 /Courier AF
42449 XM
(.bin/@sys)SH
12 /Times-Roman AF
48975 XM
(and to have)286 W
8280 17873 MT
(subdirectories of)547 W
11 /Courier AF
17709 XM
(.bin)SH
12 /Times-Roman AF
21195 XM
(corresponding to each platform \050)546 W
11 /Courier AF
(.bin/vax_mach)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
48840 XM
(.bin/unix)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
8280 19431 MT
(.bin/pmax_mach)SH
12 /Times-Roman AF
(, etc.\051.)SH
11 /Courier AF
8280 21323 MT
(afs-binary-directory)SH
12 /Times-Roman AF
21780 XM
(\050root-directory\051)SH
50012 XM
([Function])SH
10680 23106 MT
(Returns the appropriate binary directory for use as the)SH
11 /Courier AF
36916 XM
(:binary-pathname)SH
12 /Times-Roman AF
47776 XM
(argument)SH
10680 24392 MT
(in the)SH
11 /Courier AF
13681 XM
(defsystem)SH
12 /Times-Roman AF
19921 XM
(macro. For example, if we evaluate)SH
11 /Courier AF
37188 XM
(\050afs-binary-directory)SH
10680 25678 MT
("foodir/"\051)SH
12 /Times-Roman AF
17580 XM
(on a vax running the Mach operating system,)SH
11 /Courier AF
10680 26964 MT
("foodir/.bin/vax_mach/")SH
12 /Times-Roman AF
26160 XM
(would be returned.)SH
8280 29624 MT
(The functions)154 W
11 /Courier AF
15522 XM
(machine-type-translation)SH
12 /Times-Roman AF
31816 XM
(and)SH
11 /Courier AF
34004 XM
(software-type-translation)SH
12 /Times-Roman AF
50959 XM
(are used)155 W
8280 31182 MT
(to define the directory components)
333 W( corresponding to the values of)332 W
11 /Courier AF
43475 XM
(\050machine-type\051)SH
12 /Times-Roman AF
53347 XM
(and)SH
11 /Courier AF
8280 32740 MT
(\050software-type\051)SH
12 /Times-Roman AF
18480 XM
(for particular Lisps.)SH
11 /Courier AF
8280 34632 MT
(machine-type-translation)SH
12 /Times-Roman AF
24420 XM
(\050name &optional dir-component\051)SH
50012 XM
([Function])SH
11 /Courier AF
8280 36524 MT
(software-type-translation)SH
12 /Times-Roman AF
25080 XM
(\050name &optional dir-component\051)SH
50012 XM
([Function])SH
/Times-Bold SF
8280 39488 MT
(4.3.1.5. Including Foreign Systems)SH
/Times-Roman SF
8280 41567 MT
(Systems defined using some other system definition tool may be included by providing separate)53 W
8280 43125 MT
(compile and load forms for them \050using the)226 W
11 /Courier AF
31226 XM
(:compile-form)SH
12 /Times-Roman AF
40331 XM
(and)SH
11 /Courier AF
42589 XM
(:load-form)SH
12 /Times-Roman AF
49714 XM
(keywords\051.)SH
8280 44683 MT
(These forms will be run if and only)
20 W( if they are included in a module with no components. This is)21 W
8280 46241 MT
(useful if it isn't possible to convert these systems to the)SH
11 /Courier AF
35190 XM
(defsystem)SH
12 /Times-Roman AF
41430 XM
(format all at once.)SH
/Times-Bold SF
8280 49205 MT
(4.3.1.6. Component Packages, Initializations and Finalizations)SH
/Times-Roman SF
8280 51284 MT
(One may also specify the package to be used and any initializations)
107 W( and finalizations. Package)106 W
8280 52842 MT
(usage \050specified with the keyword)131 W
11 /Courier AF
25702 XM
(:package)SH
12 /Times-Roman AF
(\051 remains in force)
131 W( until the)132 W
11 /Courier AF
44841 XM
(*package*)SH
12 /Times-Roman AF
51213 XM
(variable)SH
8280 54400 MT
(reverts to its old value at the end of the operation on the component.  Initializations)
114 W( \050specified)113 W
8280 55958 MT
(with the keyword)52 W
11 /Courier AF
17136 XM
(:initially-do)SH
12 /Times-Roman AF
(\051 are evaluated)
52 W( before the system is loaded or compiled, and)53 W
8280 57516 MT
(finalizations \050specified with the)
319 W( keyword)318 W
11 /Courier AF
29843 XM
(:finally-do)SH
12 /Times-Roman AF
(\051 are evaluated after the system is)318 W
8280 59074 MT
(finished loading or compiling. The argument to the keyword)
261 W( is a form which is evaluated.)262 W
8280 60632 MT
(Multiple forms may be evaluated by wrapping a progn around the forms.)SH
/Times-Bold SF
8280 63596 MT
(4.3.1.7. Component Dependencies)SH
/Times-Roman SF
8280 65675 MT
(The dependencies of a system, module or file are specified with)
157 W( the)156 W
11 /Courier AF
42865 XM
(:depends-on)SH
12 /Times-Roman AF
50581 XM
(keyword,)SH
8280 67233 MT
(followed by a list of the names of the components the)
107 W( system, module or file depends on. The)108 W
8280 68791 MT
(components referred to must exist at the same level in the hierarchy as the)
53 W( referring component.)52 W
8280 70349 MT
(This enforces the modularity)
92 W( of the system definition. If module A depends on a file contained)93 W
8280 71907 MT
(within module B, then module A depends on module B and should be specified as such. This)133 W
ES
%%Page: 32 34
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(32)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 /Times-Roman AF
6120 8023 MT
(requirement is not enforced in the software, but any use contrary to)
26 W( it will produce unpredictable)27 W
6120 9581 MT
(results.)SH
6120 12241 MT
(Thus the only requirement for how the files are to be)
215 W( organized is that at the level of each)214 W
6120 13799 MT
(module or system, the)
130 W( dependency graph of the components must be a DAG \050directed)131 W
/Times-Bold SF
49453 XM
(acyclic)SH
/Times-Roman SF
6120 15357 MT
(graph\051. If there are any dependency cycles)
76 W( \050i.e., module A uses definitions from module B, and)75 W
6120 16915 MT
(module B uses definitions from module A\051, the)22 W
11 /Courier AF
29268 XM
(defsystem)SH
12 /Times-Roman AF
35530 XM
(macro will not be able to compute a)22 W
6120 18473 MT
(total ordering of the files \050a linear order in which they should be compiled and loaded\051. Usually)60 W
11 /Courier AF
6120 20031 MT
(defsystem)SH
12 /Times-Roman AF
12360 XM
(will detect such cycles and halt with an error.)SH
6120 22691 MT
(If no dependencies are provided for the system, modules and)
7 W( files, it may load them in any order.)8 W
6120 24249 MT
(There is no guarantee of loading them in any particular order. Currently, however, it loads them)53 W
6120 25807 MT
(in serial order, because the topological-sort it uses is a stable sorting method.)SH
6120 28467 MT
(The algorithm topologically sorts the DAG at each level in the hierarchy \050system level, module)78 W
6120 30025 MT
(level, submodule level, etc.\051 to ensure that the system's files are compiled and loaded in the)
14 W( right)13 W
6120 31583 MT
(order. This occurs at system definition time, rather than at)
70 W( system use time, because it probably)71 W
6120 33141 MT
(saves the user some time to do it this way.)SH
/Times-Bold SF
6120 36105 MT
(4.3.1.8. Load-only and Compile-only Components)SH
/Times-Roman SF
6120 38184 MT
(One may define components that are load-only and compile-only using the keywords)536 W
11 /Courier AF
6120 39742 MT
(:load-only t)SH
12 /Times-Roman AF
14340 XM
(and)SH
11 /Courier AF
16373 XM
(:compile-only t)SH
12 /Times-Roman AF
(.)SH
6120 42402 MT
(Load-only components are not compiled during operation)183 W
11 /Courier AF
35438 XM
(:compile)SH
12 /Times-Roman AF
(. For)
666 W( such components,)184 W
6120 43960 MT
(loading the component satisfies any demand for recompilation.)SH
6120 46620 MT
(Compile-only components are not loaded during operation)46 W
11 /Courier AF
34880 XM
(:compile)SH
12 /Times-Roman AF
(. The)
390 W( component is either)45 W
6120 48178 MT
(loaded or compiled, but)
77 W( not both. For such components, compiling the file satisfies the demand)78 W
6120 49736 MT
(to load it.  This isn't as strange as it seems at first.)
317 W( For example, PCL)316 W
11 /Courier AF
44631 XM
(defmethod)SH
12 /Times-Roman AF
51187 XM
(and)SH
11 /Courier AF
6120 51294 MT
(defclass)SH
12 /Times-Roman AF
11741 XM
(definitions wrap an)41 W
11 /Courier AF
21432 XM
(\050eval-when \050compile load eval\051 ...\051)41 W
12 /Times-Roman AF
45037 XM
(around the)
41 W( body)42 W
6120 52852 MT
(of the definition, making)
127 W( it pointless in some Lisps to compile and load a file containing only)126 W
6120 54410 MT
(class definitions.)SH
/Times-Bold SF
6120 57374 MT
(4.3.1.9. Component Definitions)SH
/Times-Roman SF
6120 59453 MT
(The components of)
47 W( a system, module or file are specified with the)48 W
11 /Courier AF
38732 XM
(:components)SH
12 /Times-Roman AF
46340 XM
(keyword, and)48 W
6120 61011 MT
(are defined in a manner analogous to the way in which a system is defined.)SH
6120 63671 MT
(The general format of a component's definition is:)SH
10 /Courier-Bold AF
6120 65476 MT
(<definition> ::= \050<type> <name> [:host <host>] [:device <device>])SH
25320 66607 MT
([:source-pathname <pathname>])SH
25320 67738 MT
([:source-extension <extension>])SH
25320 68869 MT
([:binary-pathname <pathname>])SH
25320 70000 MT
([:binary-extension <extension>])SH
25320 71131 MT
([:package <package>])SH
ES
%%Page: 33 35
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(DEFSYSTEM)SH
10 SS 
(: A "make" for Lisp)SH
/Times-Roman SF
54080 XM
(33)SH
/Courier-Bold SF
27480 7874 MT
([:initially-do <form>])SH
27480 9005 MT
([:finally-do <form>])SH
27480 10136 MT
([:components \050<definition>*\051])SH
27480 11267 MT
([:depends-on \050<name>*\051])SH
27480 12398 MT
([:load-only t])SH
27480 13529 MT
([:compile-only t])SH
27480 14660 MT
([:compile-form <form>])SH
27480 15791 MT
([:load-form <form>]\051)SH
8280 16922 MT
(<type> ::= :system | :module | :file | :private-file)SH
12 /Times-Roman AF
8280 19582 MT
(The top level defsystem form does not specify a type, replacing it with the symbol)SH
11 /Courier AF
48088 XM
(defsystem)SH
12 /Times-Roman AF
(.)SH
8280 22242 MT
(In addition, component definitions which are strings or)
133 W( lists whose first element is not a valid)132 W
8280 23800 MT
(type are assumed to be of type)72 W
11 /Courier AF
23685 XM
(:file)SH
12 /Times-Roman AF
(. This)
444 W( allows the user to specify a)
72 W( list of files as a list of)73 W
8280 25358 MT
(the filenames.)SH
8280 28018 MT
(Here are three examples of various component definitions:)SH
10 /Courier-Bold AF
9480 29823 MT
(\050:system test)SH
10680 30954 MT
(:source-pathname "/afs/cs.cmu.edu/user/mkant/Defsystem/test/")SH
10680 32085 MT
(:source-extension "lisp")SH
10680 33216 MT
(:binary-pathname nil)SH
10680 34347 MT
(:binary-extension nil)SH
10680 35478 MT
(:components \050\050:module basic)SH
23880 36609 MT
(:source-pathname "")SH
23880 37740 MT
(:components \050\050:file "primitives"\051)SH
31680 38871 MT
(\050:file "macros")SH
35880 40002 MT
(:depends-on \050"primitives"\051\051\051\051)SH
18480 41133 MT
(\050:module graphics)SH
23880 42264 MT
(:source-pathname "graphics")SH
23880 43395 MT
(:components \050\050:file "macros")SH
35880 44526 MT
(:depends-on \050"primitives"\051\051)SH
31680 45657 MT
(\050:file "primitives"\051\051)SH
23880 46788 MT
(:depends-on \050basic\051\051\051\051)SH
9480 49050 MT
(\050:module graphics)SH
11280 50181 MT
(:source-pathname "graphics")SH
11280 51312 MT
(:components \050\050"macros" :depends-on \050"primitives"\051\051)SH
19080 52443 MT
(\050:private-file "primitives"\051\051\051)SH
9480 54705 MT
(\050:module graphics)SH
11280 55836 MT
(:source-pathname "graphics")SH
11280 56967 MT
(:components \050"primitives" "macros" "scanning"\051\051)SH
12 /Times-Roman AF
8280 59627 MT
(Thus one would define a system)
248 W( named)247 W
11 /Courier AF
29315 XM
(foo)SH
12 /Times-Roman AF
31842 XM
(that depends on systems)247 W
11 /Courier AF
44766 XM
(bar)SH
12 /Times-Roman AF
47293 XM
(and)SH
11 /Courier AF
49573 XM
(bletch)SH
12 /Times-Roman AF
54080 XM
(as)SH
8280 61185 MT
(follows:)SH
10 /Courier-Bold AF
9480 62990 MT
(\050defsystem foo)SH
10680 64121 MT
(:source-pathname "/afs/cs.cmu.edu/user/mkant/foo/")SH
10680 65252 MT
(:source-extension "lisp")SH
10680 66383 MT
(:binary-pathname nil)SH
10680 67514 MT
(:binary-extension nil)SH
10680 68645 MT
(:components \050\050:module graphics)SH
23880 69776 MT
(:source-pathname "graphics")SH
23880 70907 MT
(:components \050"primitives" "macros" "scanning"\051\051\051)SH
ES
%%Page: 34 36
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(34)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
/Courier-Bold SF
8520 7874 MT
(:depends-on \050bar bletch\051\051)SH
12 /Times-Roman AF
6120 9828 MT
(This system would load the)260 W
11 /Courier AF
20923 XM
(bar)SH
12 /Times-Roman AF
23463 XM
(and)SH
11 /Courier AF
25756 XM
(bletch)SH
12 /Times-Roman AF
30276 XM
(systems before loading any files of the)261 W
11 /Courier AF
50940 XM
(foo)SH
12 /Times-Roman AF
6120 11386 MT
(system. Note that the modularity restrictions require that)111 W
11 /Courier AF
34450 XM
(bar)SH
12 /Times-Roman AF
36841 XM
(and)SH
11 /Courier AF
38985 XM
(bletch)SH
12 /Times-Roman AF
43355 XM
(and not modules or)110 W
6120 12944 MT
(files. Components can depend only on components of the same)
158 W( complexity; thus systems can)159 W
6120 14502 MT
(depend only on systems.)SH
6120 17162 MT
(Also worth stressing is the fact that systems in)71 W
10 SS 
29333 XM
(DEFSYSTEM)SH
12 SS 
35538 XM
(are structural, unlike the procedural)70 W
6120 18720 MT
(systems in)
109 W( the Symbolics)110 W
11 /Courier AF
19031 XM
(defsystem)SH
12 /Times-Roman AF
(. So while specifying)110 W
11 /Courier AF
35846 XM
(\050:system bar\051)110 W
12 /Times-Roman AF
44946 XM
(in the body of a)110 W
6120 20278 MT
(Symbolics)SH
11 /Courier AF
11580 XM
(defsystem)SH
12 /Times-Roman AF
17911 XM
(would include the)91 W
11 /Courier AF
27085 XM
(bar)SH
12 /Times-Roman AF
29456 XM
(system at that point, in)91 W
10 SS 
41115 XM
(DEFSYSTEM)SH
12 SS 
47339 XM
(it would be)90 W
6120 21836 MT
(saying that the)123 W
11 /Courier AF
13791 XM
(bar)SH
12 /Times-Roman AF
16194 XM
(system has no files. To)
123 W( achieve the same effect one must include the)124 W
11 /Courier AF
50940 XM
(bar)SH
12 /Times-Roman AF
6120 23394 MT
(system in the dependency list of the system.)SH
/Times-Bold SF
6120 27078 MT
(4.3.2. Describing a System)SH
/Times-Roman SF
6120 29157 MT
(The function)SH
11 /Courier AF
12587 XM
(describe-system)SH
12 /Times-Roman AF
22787 XM
(may be used to print a description of a system.)SH
11 /Courier AF
6120 31049 MT
(describe-system)SH
12 /Times-Roman AF
16320 XM
(\050name &optional \050stream *standard-output*\051\051)SH
47852 XM
([Function])SH
8520 32832 MT
(Prints a description of the system to)SH
/Times-Italic SF
26026 XM
(stream)SH
/Times-Roman SF
(. If)SH
/Times-Italic SF
30993 XM
(name)SH
/Times-Roman SF
33892 XM
(is the name of a system, gets it)SH
8520 34118 MT
(and prints a description of the system.  If)SH
/Times-Italic SF
28458 XM
(name)SH
/Times-Roman SF
31357 XM
(is a component, prints a description of)SH
8520 35404 MT
(the component.)SH
6120 38064 MT
(The function)SH
11 /Courier AF
12587 XM
(defined-systems)SH
12 /Times-Roman AF
22787 XM
(may be used to get a list of all currently defined systems.)SH
/Times-Bold SF
6120 41748 MT
(4.3.3. Removing a System)SH
/Times-Roman SF
6120 43827 MT
(The function)SH
11 /Courier AF
12587 XM
(undefsystem)SH
12 /Times-Roman AF
20147 XM
(may be used to remove the definition of a system.)SH
11 /Courier AF
6120 45719 MT
(undefsystem)SH
12 /Times-Roman AF
13680 XM
(\050name\051)SH
47852 XM
([Function])SH
8520 47502 MT
(Removes the definition of the system named)SH
/Times-Italic SF
30225 XM
(name)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
6120 51186 MT
(4.3.4. Loading and Compiling a System)SH
/Times-Roman SF
6120 53265 MT
(The function)292 W
11 /Courier AF
13170 XM
(operate-on-system)SH
12 /Times-Roman AF
24981 XM
(is used to compile or load a system, or do any other)291 W
6120 54823 MT
(operation on a system.)
275 W( At present only compile and load operations are defined, but other)276 W
6120 56381 MT
(operations such as edit, hardcopy, or applying arbitrary functions)
19 W( \050e.g., enscript, lpr\051 to every file)18 W
6120 57939 MT
(in the system could be easily added.)SH
6120 60599 MT
(The syntax of operate-on-system is as follows:)SH
11 /Courier AF
6120 62491 MT
(operate-on-system)SH
12 /Times-Roman AF
17640 XM
(\050name operation &key force \050version *version*\051)SH
47852 XM
([Function])SH
18240 63777 MT
(\050test *oos-test*\051 \050verbose *oos-verbose*\051)SH
18240 65063 MT
(\050load-source-instead-of-binary *load-source-instead-of-binary*\051)SH
18240 66349 MT
(\050load-source-if-no-binary *load-source-if-no-binary*\051)SH
18240 67635 MT
(\050bother-user-if-no-binary *bother-user-if-no-binary*\051)SH
18240 68921 MT
(\050compile-during-load *compile-during-load*\051)SH
18240 70207 MT
(dribble \050minimal-load *minimal-load*\051\051)SH
ES
%%Page: 35 37
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(DEFSYSTEM)SH
10 SS 
(: A "make" for Lisp)SH
/Times-Roman SF
54080 XM
(35)SH
12 /Symbol AF
12828 8160 MT
(\267)SH
/Times-Italic SF
13680 XM
(system-name)SH
/Times-Roman SF
20179 XM
(is the name of the system and may be a symbol or string. If the)SH
13680 9446 MT
(system is not defined, it will be loaded from a file with extension)SH
11 /Courier AF
45222 XM
("system")SH
12 /Times-Roman AF
13680 10732 MT
(and name the same as the system, located either in the current directory or in)SH
13680 12018 MT
(the central registry, if such a file exists. Otherwise an error will be signalled.)SH
/Symbol SF
12828 14047 MT
(\267)SH
/Times-Italic SF
13680 XM
(operation)SH
/Times-Roman SF
18648 XM
(is)SH
11 /Courier AF
19749 XM
('compile)SH
12 /Times-Roman AF
25329 XM
(\050or)SH
11 /Courier AF
27029 XM
(:compile)SH
12 /Times-Roman AF
(\051 or)SH
11 /Courier AF
34309 XM
('load)SH
12 /Times-Roman AF
37909 XM
(\050or)SH
11 /Courier AF
39609 XM
(:load)SH
12 /Times-Roman AF
(\051 or any new)SH
13680 15333 MT
(operation defined by the user. If no such operation is defined, an error will be)SH
13680 16619 MT
(signalled.)SH
/Symbol SF
12828 18648 MT
(\267)SH
/Times-Italic SF
13680 XM
(force)SH
/Times-Roman SF
16447 XM
(determines what files are operated on:)SH
9 /Symbol AF
15966 20111 MT
(\267)SH
11 /Courier AF
16680 20261 MT
(:all)SH
12 /Times-Roman AF
19620 XM
(\050or)SH
11 /Courier AF
21320 XM
(t)SH
12 /Times-Roman AF
(\051 specifies that all files in the system should be used)SH
9 /Symbol AF
15966 22140 MT
(\267)SH
11 /Courier AF
16680 22290 MT
(:new-source)SH
12 /Times-Roman AF
24240 XM
(If the operation is)SH
11 /Courier AF
33042 XM
('compile)SH
12 /Times-Roman AF
(, compiles only those files)SH
16680 23576 MT
(whose sources are more recent than the binaries. If the operation is)SH
11 /Courier AF
16680 24862 MT
('load)SH
12 /Times-Roman AF
(, loads the source if it is more recent than the binaries. This allows)SH
16680 26148 MT
(you to load the most up to date version of the system even if it isn't)SH
16680 27434 MT
(compiled.)SH
9 /Symbol AF
15966 29313 MT
(\267)SH
11 /Courier AF
16680 29463 MT
(:new-source-and-dependents)SH
12 /Times-Roman AF
34800 XM
(uses all files used by)SH
11 /Courier AF
16680 30749 MT
(:new-source)SH
12 /Times-Roman AF
(, plus any files that depend on the those files or their)SH
16680 32035 MT
(dependents \050recursively\051.)SH
9 /Symbol AF
15966 33914 MT
(\267)SH
12 /Times-Italic AF
16680 34064 MT
(force)SH
/Times-Roman SF
19447 XM
(may also be a list of the specific modules or files to be used \050plus)SH
16680 35350 MT
(their dependents\051.)SH
13680 36916 MT
(The default for)SH
11 /Courier AF
21180 XM
('load)SH
12 /Times-Roman AF
24780 XM
(is)SH
11 /Courier AF
25881 XM
(:all)SH
12 /Times-Roman AF
28821 XM
(and for)SH
11 /Courier AF
32554 XM
('compile)SH
12 /Times-Roman AF
38134 XM
(is)SH
11 /Courier AF
13680 38202 MT
(:new-source-and-dependents)SH
12 /Times-Roman AF
(.)SH
/Symbol SF
12828 40231 MT
(\267)SH
/Times-Italic SF
13680 XM
(version)SH
/Times-Roman SF
17514 XM
(indicates which version of the system should be used. If)SH
11 /Courier AF
44685 XM
(nil)SH
12 /Times-Roman AF
(, then the)SH
13680 41517 MT
(usual root directory is used. If a symbol, such as)SH
11 /Courier AF
37151 XM
('alpha)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
41711 XM
('beta)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
45611 XM
('omega)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
13680 42803 MT
(:alpha)SH
12 /Times-Roman AF
(, or)SH
11 /Courier AF
19540 XM
('mark)SH
12 /Times-Roman AF
(, it substitutes the appropriate \050lowercase\051 subdirectory of)SH
13680 44089 MT
(the root directory for the root directory. If a string, it replaces the entire root)SH
13680 45375 MT
(directory with the given directory. \050default)SH
11 /Courier AF
34450 XM
(*version*)SH
12 /Times-Roman AF
(, which is)SH
11 /Courier AF
45324 XM
(nil)SH
12 /Times-Roman AF
(\051)SH
/Symbol SF
12828 47404 MT
(\267)SH
/Times-Italic SF
13680 XM
(verbose)SH
/Times-Roman SF
17713 XM
(is)SH
11 /Courier AF
18814 XM
(t)SH
12 /Times-Roman AF
19774 XM
(to print out what it is doing \050compiling, loading of modules and)SH
13680 48690 MT
(files\051 as it does it. \050default)SH
11 /Courier AF
26518 XM
(nil)SH
12 /Times-Roman AF
(\051)SH
/Symbol SF
12828 50719 MT
(\267)SH
/Times-Italic SF
13680 XM
(test)SH
/Times-Roman SF
15648 XM
(is)SH
11 /Courier AF
16749 XM
(t)SH
12 /Times-Roman AF
17709 XM
(to print out what it would do without actually doing it.  If test is)SH
11 /Courier AF
48586 XM
(t)SH
12 /Times-Roman AF
49546 XM
(it)SH
13680 52005 MT
(automatically sets verbose to)SH
11 /Courier AF
27884 XM
(t)SH
12 /Times-Roman AF
(. \050default)SH
11 /Courier AF
33178 XM
(nil)SH
12 /Times-Roman AF
(\051)SH
/Symbol SF
12828 54034 MT
(\267)SH
/Times-Italic SF
13680 XM
(compile-during-load)SH
/Times-Roman SF
23915 XM
(is)SH
11 /Courier AF
25016 XM
(t)SH
12 /Times-Roman AF
25976 XM
(to compile source files when loading a system if the)SH
13680 55320 MT
(binary files are missing or old. If)SH
11 /Courier AF
29751 XM
(nil)SH
12 /Times-Roman AF
32031 XM
(it doesn't compile them, but loads either)SH
13680 56606 MT
(the old binaries or the sources. If)SH
11 /Courier AF
29749 XM
(:query)SH
12 /Times-Roman AF
34009 XM
(\050the default\051, it will ask the user)SH
13680 57892 MT
(whether the files should be compiled.)SH
/Symbol SF
12828 59921 MT
(\267)SH
/Times-Italic SF
13680 XM
(dribble)SH
/Times-Roman SF
17448 XM
(should be the pathname of a dribble file if you want to keep a record of)SH
13680 61207 MT
(the compilation. \050default)SH
11 /Courier AF
25817 XM
(nil)SH
12 /Times-Roman AF
(\051)SH
/Symbol SF
12828 63236 MT
(\267)SH
/Times-Italic SF
13680 XM
(minimal-load)SH
/Times-Roman SF
20448 XM
(is)SH
11 /Courier AF
21549 XM
(t)SH
12 /Times-Roman AF
22509 XM
(to only load those files which haven't already been loaded)SH
13680 64522 MT
(yet, as judged by the file-write-dates of the files. Note that)SH
10 SS 
41985 XM
(DEFSYSTEM)SH
12 SS 
48119 XM
(will)SH
13680 65808 MT
(notice when files change even if a different user compiles the files. \050default)SH
11 /Courier AF
13680 67094 MT
(*minimal-load*)SH
12 /Times-Roman AF
(, which is)SH
11 /Courier AF
27854 XM
(nil)SH
12 /Times-Roman AF
(\051)SH
/Symbol SF
12828 69123 MT
(\267)SH
/Times-Italic SF
13680 XM
(load-source-instead-of-binary)SH
/Times-Roman SF
28450 XM
(is)SH
11 /Courier AF
29551 XM
(t)SH
12 /Times-Roman AF
30511 XM
(to force the system to load source files)SH
13680 70409 MT
(instead of binary files. \050default)SH
11 /Courier AF
28750 XM
(nil)SH
12 /Times-Roman AF
(\051)SH
ES
%%Page: 36 38
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(36)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 /Symbol AF
10668 8160 MT
(\267)SH
/Times-Italic SF
11520 XM
(load-source-if-no-binary)SH
/Times-Roman SF
23756 XM
(is)SH
11 /Courier AF
24857 XM
(t)SH
12 /Times-Roman AF
25817 XM
(to have the system load source files if the binary)SH
11520 9446 MT
(file is missing. \050default)SH
11 /Courier AF
22892 XM
(nil)SH
12 /Times-Roman AF
(\051)SH
/Symbol SF
10668 11475 MT
(\267)SH
/Times-Italic SF
11520 XM
(bother-user-if-no-binary)SH
/Times-Roman SF
23623 XM
(is)SH
11 /Courier AF
24724 XM
(t)SH
12 /Times-Roman AF
25684 XM
(to have the system bother the user about missing)SH
11520 12761 MT
(binaries before it goes ahead and loads them if)SH
11 /Courier AF
11520 14047 MT
(load-source-if-no-binary)SH
12 /Times-Roman AF
27660 XM
(is)SH
11 /Courier AF
28761 XM
(t)SH
12 /Times-Roman AF
(. \050default)SH
11 /Courier AF
34055 XM
(t)SH
12 /Times-Roman AF
(\051 Times out in 60 seconds)SH
11520 15333 MT
(unless)SH
11 /Courier AF
14821 XM
(*use-timeouts*)SH
12 /Times-Roman AF
24361 XM
(is set to)SH
11 /Courier AF
28330 XM
(nil)SH
12 /Times-Roman AF
(.)SH
6120 17993 MT
(The)SH
11 /Courier AF
8699 XM
(compile-system)SH
12 /Times-Roman AF
18653 XM
(and)SH
11 /Courier AF
21100 XM
(load-system)SH
12 /Times-Roman AF
29074 XM
(functions are just like)414 W
11 /Courier AF
41400 XM
(operate-on-system)SH
12 /Times-Roman AF
(,)SH
6120 19551 MT
(except the operation is)
338 W( hard-coded as)337 W
11 /Courier AF
26279 XM
(:compile)SH
12 /Times-Roman AF
32196 XM
(and)SH
11 /Courier AF
34566 XM
(:load)SH
12 /Times-Roman AF
(, respectively, so there is no)337 W
/Times-Italic SF
6120 21109 MT
(operation)SH
/Times-Roman SF
11236 XM
(argument. Some)
596 W( users find this interface)
148 W( easier to understand. The function)149 W
11 /Courier AF
49690 XM
(oos)SH
12 /Times-Roman AF
52119 XM
(is)SH
6120 22667 MT
(defined as a synonym for)SH
11 /Courier AF
18554 XM
(operate-on-system)SH
12 /Times-Roman AF
(.)SH
6120 25327 MT
(For example, one would compile all the changed files in a system named "foo" by typing)272 W
11 /Courier AF
6120 26885 MT
(\050mk:compile-system "foo" :force)
41 W( :new-source :minimal-load t\051)42 W
12 /Times-Roman AF
(. Or one could)42 W
6120 28443 MT
(selectively compile changed files in the system when loading the system from)
320 W( scratch by)319 W
6120 30001 MT
(invoking)SH
11 /Courier AF
10896 XM
(\050mk:load-system "foo" :compile-during-load :query\051)208 W
12 /Times-Roman AF
(. To load all the)208 W
6120 31559 MT
(files in the system, type)139 W
11 /Courier AF
18485 XM
(\050mk:load-system "foo"\051)138 W
12 /Times-Roman AF
(. To compile all the files in the system,)138 W
6120 33117 MT
(type)SH
11 /Courier AF
8487 XM
(\050mk:compile-system "foo"\051)SH
12 /Times-Roman AF
(.)SH
6120 35777 MT
(An implicit assumption is that if we need to load a file for some reason, then)
59 W( we should be able)60 W
6120 37335 MT
(to compile it immediately before we need to load it.)
102 W( This obviates the need to specify separate)101 W
6120 38893 MT
(load and compile dependencies in the modules.)SH
6120 41553 MT
(Note that under this assumption, the example)
327 W( given in the PCL defsystem becomes quite)328 W
6120 43111 MT
(ludicrous. Those constraints are of the form:)SH
8520 44677 MT
(1.)SH
9720 XM
(C must be loaded before A&B are loaded)SH
8520 46706 MT
(2.)SH
9720 XM
(A&B must be loaded before C is compiled)SH
6120 48272 MT
(When you add in the reasonable assumption that before you)
6 W( load C, you must compile C, you get)5 W
6120 49830 MT
(a cycle.)SH
6120 52490 MT
(One case is which this might not be true is in a system which worked on)
70 W( the dependency graph)71 W
6120 54048 MT
(of individual definitions. But we have restricted ourselves to file dependencies)
179 W( and will stick)178 W
6120 55606 MT
(with that.  \050In situations where a)
239 W( file defining macros must have the sources loaded before)240 W
6120 57164 MT
(compiling them, most often it is because the macros are)
46 W( used before they are defined, and hence)45 W
6120 58722 MT
(assumed to be functions. This can)
28 W( be fixed by organizing the macros better, or including them in)29 W
6120 60280 MT
(a separate file.\051)SH
6120 62940 MT
(Files which must not be compiled should be loaded in the)
175 W( initializations or finalizations of a)174 W
6120 64498 MT
(module by means of an explicit load form, or be specified as)SH
11 /Courier AF
35491 XM
(:load-only t)SH
12 /Times-Roman AF
(.)SH
6120 67158 MT
(It is a known bug that)5 W
10 SS 
16885 XM
(DEFSYSTEM)SH
12 SS 
23024 XM
(may report loading or compiling a system or module even if it)5 W
6120 68716 MT
(doesn't do anything)
18 W( with the files. So if)17 W
10 SS 
25563 XM
(DEFSYSTEM)SH
12 SS 
31714 XM
(reports loading a module, but doesn't report)17 W
6120 70274 MT
(loading any files in the module, it hasn't)
84 W( touched the files in the module. In a future version of)85 W
10 SS 
6120 71832 MT
(DEFSYSTEM)SH
12 SS 
12254 XM
(we may change the message to say that it is checking the system or module.)SH
ES
%%Page: 37 39
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(DEFSYSTEM)SH
10 SS 
(: A "make" for Lisp)SH
/Times-Roman SF
54080 XM
(37)SH
12 /Times-Bold AF
8280 8004 MT
(4.3.5. Other Operations on Systems)SH
/Times-Roman SF
8280 10083 MT
(To define a)
65 W( new operation, write a function with parameters)64 W
/Times-Italic SF
38023 XM
(component)SH
/Times-Roman SF
43653 XM
(and)SH
/Times-Italic SF
45750 XM
(force)SH
/Times-Roman SF
48581 XM
(that performs)64 W
8280 11641 MT
(the operation. The function)268 W
11 /Courier AF
22720 XM
(component-pathname)SH
12 /Times-Roman AF
35168 XM
(may be used to extract the)
268 W( source and)269 W
8280 13199 MT
(binary pathnames from the component.)
186 W( \050)185 W
11 /Courier AF
(component-pathname)SH
12 /Times-Roman AF
41110 XM
(takes parameters)185 W
/Times-Italic SF
49814 XM
(component)SH
/Times-Roman SF
8280 14757 MT
(and)SH
/Times-Italic SF
10670 XM
(file-type)SH
/Times-Roman SF
(, where)357 W
/Times-Italic SF
19151 XM
(file-type)SH
/Times-Roman SF
23743 XM
(is either)357 W
11 /Courier AF
28592 XM
(:source)SH
12 /Times-Roman AF
33869 XM
(or)SH
11 /Courier AF
35527 XM
(:binary)SH
12 /Times-Roman AF
(, and returns the appropriate)358 W
8280 16315 MT
(pathname.\051 If the component)
129 W( has "changed" as a result of the operation,)128 W
11 /Courier AF
44468 XM
(t)SH
12 /Times-Roman AF
45556 XM
(should be returned;)128 W
8280 17873 MT
(otherwise)SH
11 /Courier AF
15051 XM
(nil)SH
12 /Times-Roman AF
(. See the definition)
1804 W( of)1805 W
11 /Courier AF
36722 XM
(compile-file-operation)SH
12 /Times-Roman AF
53347 XM
(and)SH
11 /Courier AF
8280 19431 MT
(load-file-operation)SH
12 /Times-Roman AF
21120 XM
(for examples.)SH
8280 22091 MT
(Then install the definition using)369 W
11 /Courier AF
25764 XM
(component-operation)SH
12 /Times-Roman AF
(, which takes)
369 W( as parameters the)368 W
8280 23649 MT
(symbol which will be used to name the operation in)25 W
11 /Courier AF
33668 XM
(operate-on-system)SH
12 /Times-Roman AF
(, and the name of the)25 W
8280 25207 MT
(function. For example, here are the definition of the)SH
11 /Courier AF
33450 XM
('compile)SH
12 /Times-Roman AF
39030 XM
(and)SH
11 /Courier AF
41063 XM
(:compile)SH
12 /Times-Roman AF
46643 XM
(operations:)SH
10 /Courier-Bold AF
14280 27012 MT
(\050component-operation :compile  'compile-and-load-operation\051)SH
14280 28143 MT
(\050component-operation 'compile  'compile-and-load-operation\051)SH
12 /Times-Roman AF
8280 30097 MT
(The user could define operations such as)SH
11 /Courier AF
28114 XM
('hardcopy)SH
12 /Times-Roman AF
34354 XM
(and)SH
11 /Courier AF
36387 XM
('edit)SH
12 /Times-Roman AF
39987 XM
(in this manner.)SH
/Times-Bold SF
8280 33781 MT
(4.3.6. Changes to Require)SH
/Times-Roman SF
8280 35860 MT
(This defsystem interacts smoothly with the)88 W
11 /Courier AF
29747 XM
(require)SH
12 /Times-Roman AF
34754 XM
(and)SH
11 /Courier AF
36874 XM
(provide)SH
12 /Times-Roman AF
41881 XM
(facilities of Common Lisp.)87 W
11 /Courier AF
8280 37418 MT
(operate-on-system)SH
12 /Times-Roman AF
19808 XM
(automatically provides the name of any system it loads, and)
8 W( uses the new)9 W
8280 38976 MT
(definition of)SH
11 /Courier AF
14549 XM
(require)SH
12 /Times-Roman AF
19469 XM
(to load any dependencies of the toplevel system.)SH
8280 41636 MT
(One may prevent)868 W
10 SS 
19450 XM
(DEFSYSTEM)SH
12 SS 
26452 XM
(from redefining)868 W
11 /Courier AF
36056 XM
(require)SH
12 /Times-Roman AF
41843 XM
(by setting the variable)867 W
11 /Courier AF
8280 43194 MT
(*dont-redefine-require*)SH
12 /Times-Roman AF
23760 XM
(to)SH
11 /Courier AF
24994 XM
(t)SH
12 /Times-Roman AF
25954 XM
(before compiling)SH
10 SS 
34489 XM
(DEFSYSTEM)SH
12 SS 
(.)SH
10 SS 
8280 45854 MT
(DEFSYSTEM)SH
12 SS 
14495 XM
(adds three new optional arguments to)81 W
11 /Courier AF
33250 XM
(require)SH
12 /Times-Roman AF
(. Thus the)
81 W( new syntax of)82 W
11 /Courier AF
50460 XM
(require)SH
12 /Times-Roman AF
8280 47412 MT
(is as follows:)SH
11 /Courier AF
8280 49304 MT
(new-require)SH
12 /Times-Roman AF
15840 XM
(\050system-name &optional pathname definition-pname)SH
50012 XM
([Function])SH
16440 50590 MT
(default-action \050version *version*\051\051)SH
10680 52373 MT
(If pathname is provided, the new)SH
11 /Courier AF
26781 XM
(require)SH
12 /Times-Roman AF
31701 XM
(behaves just like the old definition.)SH
10680 53659 MT
(Otherwise it first tries to find the definition of the)SH
/Times-Italic SF
34755 XM
(system-name)SH
/Times-Roman SF
41254 XM
(\050if it is not already)SH
10680 54945 MT
(defined it will load the definition file if it is in the current-directory, the central-registry)SH
10680 56231 MT
(directory, or the directory specified by)SH
/Times-Italic SF
29449 XM
(definition-pname)SH
/Times-Roman SF
(\051 and runs)SH
11 /Courier AF
10680 57517 MT
(operate-on-system)SH
12 /Times-Roman AF
22200 XM
(on the system definition. If no definition is found, it will)SH
10680 58803 MT
(evaluate the)SH
/Times-Italic SF
16747 XM
(default-action)SH
/Times-Roman SF
23783 XM
(if there is one. Otherwise it will try running the old)SH
10680 60089 MT
(definition of)SH
11 /Courier AF
16949 XM
(require)SH
12 /Times-Roman AF
21869 XM
(on just the system name. If all else fails, it will print out a)SH
10680 61375 MT
(warning.)SH
/Times-Bold SF
8280 65059 MT
(4.3.7.)SH
10 SS 
11280 XM
(DEFSYSTEM)SH
12 SS 
17692 XM
(Variables)SH
/Times-Roman SF
8280 67138 MT
(The following variables control the default operation of)261 W
10 SS 
37372 XM
(DEFSYSTEM)SH
12 SS 
(. Many of the program)260 W
8280 68696 MT
(parameters set by modifying these variables can also be changed by specifying keyword)372 W
8280 70254 MT
(arguments to)SH
10 SS 
14815 XM
(DEFSYSTEM)SH
12 SS 
20949 XM
(functions.)SH
ES
%%Page: 38 40
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(38)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
11 /Courier AF
6120 8023 MT
(*defsystem-version*)SH
12 /Times-Roman AF
18960 XM
("v2.4 22-MAY-91")SH
47987 XM
([Variable])SH
8520 9806 MT
(Current version number/date for)SH
10 SS 
24322 XM
(DEFSYSTEM)SH
12 SS 
(.)SH
11 /Courier AF
6120 11698 MT
(*central-registry*)SH
12 /Times-Roman AF
18300 XM
(\050\051)SH
47987 XM
([Variable])SH
8520 13481 MT
(Central directory of system definitions. May be either a single directory pathname, or a)SH
8520 14767 MT
(list of directory pathnames to be checked after the local directory.)SH
11 /Courier AF
6120 16659 MT
(*bin-subdir*)SH
12 /Times-Roman AF
14340 XM
(".bin/")SH
47987 XM
([Variable])SH
8520 18442 MT
(The subdirectory of an AFS directory where the binaries are really kept.)SH
11 /Courier AF
6120 20334 MT
(*tell-user-when-done*)SH
12 /Times-Roman AF
20280 XM
(\050\051)SH
47987 XM
([Variable])SH
8520 22117 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(, system will print)SH
11 /Courier AF
19251 XM
("...DONE")SH
12 /Times-Roman AF
25491 XM
(at the end of an operation.)SH
11 /Courier AF
6120 24009 MT
(*oos-verbose*)SH
12 /Times-Roman AF
15000 XM
(\050\051)SH
47987 XM
([Variable])SH
8520 25792 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
10880 XM
(operate-on-system)SH
12 /Times-Roman AF
22400 XM
(describes what it is doing as it does it.)SH
11 /Courier AF
6120 27684 MT
(*oos-test*)SH
12 /Times-Roman AF
13020 XM
(\050\051)SH
47987 XM
([Variable])SH
8520 29467 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
10880 XM
(operate-on-system)SH
12 /Times-Roman AF
22400 XM
(runs in a test mode where it describes what it would do,)SH
8520 30753 MT
(but doesn't actually do it.)SH
11 /Courier AF
6120 32645 MT
(*load-source-if-no-binary*)SH
12 /Times-Roman AF
23580 XM
(\050\051)SH
47987 XM
([Variable])SH
8520 34428 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(, system will try loading the source if the binary is missing.)SH
11 /Courier AF
6120 36320 MT
(*bother-user-if-no-binary*)SH
12 /Times-Roman AF
23580 XM
(t)SH
47987 XM
([Variable])SH
8520 38103 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(, the system will ask the user whether to load the source if the binary is missing.)SH
11 /Courier AF
6120 39995 MT
(*load-source-instead-of-binary*)SH
12 /Times-Roman AF
26880 XM
(\050\051)SH
47987 XM
([Variable])SH
8520 41778 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(, the system will load the source file instead of the binary.)SH
11 /Courier AF
6120 43670 MT
(*minimal-load*)SH
12 /Times-Roman AF
15660 XM
(\050\051)SH
47987 XM
([Variable])SH
8520 45453 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(, the system tries to avoid reloading files that were already loaded and up to date.)SH
11 /Courier AF
6120 47345 MT
(*operations-propagate-to-subsystems*)SH
12 /Times-Roman AF
30180 XM
(t)SH
47987 XM
([Variable])SH
8520 49128 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(, operations like)SH
11 /Courier AF
18282 XM
(:compile)SH
12 /Times-Roman AF
23862 XM
(and)SH
11 /Courier AF
25895 XM
(:load)SH
12 /Times-Roman AF
29495 XM
(propagate to subsystems of a system that)SH
8520 50414 MT
(are defined either using a component-type of :system or by another defsystem form.)SH
11 /Courier AF
6120 52306 MT
(*filename-extensions*)SH
12 /Times-Roman AF
20280 XM
(\050car)SH
47987 XM
([Variable])SH
20880 53592 MT
(\050quote)SH
21180 54878 MT
(\050\050"lisp" . "fasl"\051 \050"lisp" . "lbin"\051\051\051\051)SH
8520 56661 MT
(Filename extensions for Common Lisp. Each is a read-time conditionalized cons of the)SH
8520 57947 MT
(form \050Source-Extension .  Binary-Extension\051. If the Lisp is unknown \050as in)SH
11 /Courier AF
8520 59233 MT
(*features*)SH
12 /Times-Roman AF
15420 XM
(not known\051, defaults to)SH
11 /Courier AF
26855 XM
(lisp)SH
12 /Times-Roman AF
29795 XM
(and)SH
11 /Courier AF
31828 XM
(lbin)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
6120 61125 MT
(*system-dependencies-delayed*)SH
12 /Times-Roman AF
25560 XM
(t)SH
47987 XM
([Variable])SH
8520 62908 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(, system dependencies of top-level systems are expanded at run time. There is little)SH
8520 64194 MT
(support for not delaying the expansion of top-level system dependencies, so this)SH
8520 65480 MT
(variable should not be set to)SH
11 /Courier AF
22323 XM
(nil)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
6120 67372 MT
(*providing-blocks-load-propagation*)SH
12 /Times-Roman AF
29520 XM
(t)SH
47987 XM
([Variable])SH
8520 69155 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(, if a system dependency exists \050was provided using)SH
11 /Courier AF
35483 XM
(provide)SH
12 /Times-Roman AF
(\051 in)SH
11 /Courier AF
42037 XM
(*modules*)SH
12 /Times-Roman AF
(, it is)SH
8520 70441 MT
(not loaded.)SH
ES
%%Page: 39 41
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(DEFSYSTEM)SH
10 SS 
(: A "make" for Lisp)SH
/Times-Roman SF
54080 XM
(39)SH
14 /Times-Bold AF
8280 8138 MT
(4.4. An Example of Using)SH
12 SS 
23797 XM
(DEFSYSTEM)SH
/Times-Roman SF
8280 10393 MT
(This section gives an example of using)247 W
11 /Courier AF
28979 XM
(defsystem)SH
12 /Times-Roman AF
35466 XM
(for the files in the following directory)246 W
8280 11951 MT
(structure:)SH
10 /Courier-Bold AF
9480 13756 MT
(% du -a test)SH
9480 14887 MT
(1 test/fancy/macros.lisp)3600 W
9480 16018 MT
(1 test/fancy/primitives.lisp)3600 W
9480 17149 MT
(3 test/fancy)3600 W
9480 18280 MT
(1 test/macros.lisp)3600 W
9480 19411 MT
(1 test/primitives.lisp)3600 W
9480 20542 MT
(1 test/graphics/macros.lisp)3600 W
9480 21673 MT
(1 test/graphics/primitives.lisp)3600 W
9480 22804 MT
(3 test/graphics)3600 W
9480 23935 MT
(1 test/os/macros.lisp)3600 W
9480 25066 MT
(1 test/os/primitives.lisp)3600 W
9480 26197 MT
(3 test/os)3600 W
9480 27328 MT
(12 test)3000 W
12 /Times-Roman AF
8280 29988 MT
(First we define the system)SH
11 /Courier AF
21183 XM
(test)SH
12 /Times-Roman AF
24123 XM
(to correspond to the file dependency structure:)SH
10 /Courier-Bold AF
9480 31793 MT
(\050defsystem test)SH
10680 32924 MT
(:source-pathname "/afs/cs.cmu.edu/user/mkant/Defsystem/test/")SH
10680 34055 MT
(:source-extension "lisp")SH
10680 35186 MT
(:binary-pathname nil)SH
10680 36317 MT
(:binary-extension nil)SH
10680 37448 MT
(:components \050\050:module basic)SH
23880 38579 MT
(:source-pathname "")SH
23880 39710 MT
(:components \050\050:file "primitives"\051)SH
31680 40841 MT
(\050:file "macros")SH
35880 41972 MT
(:depends-on \050"primitives"\051\051\051\051)SH
18480 43103 MT
(\050:module graphics)SH
23880 44234 MT
(:source-pathname "graphics")SH
23880 45365 MT
(:components \050\050:file "macros")SH
35880 46496 MT
(:depends-on \050"primitives"\051\051)SH
31680 47627 MT
(\050:file "primitives"\051\051)SH
23880 48758 MT
(:depends-on \050basic\051\051)SH
18480 49889 MT
(\050:module fancy-stuff)SH
23880 51020 MT
(:source-pathname "fancy")SH
23880 52151 MT
(:components \050\050:file "macros")SH
35880 53282 MT
(:depends-on \050"primitives"\051\051)SH
31680 54413 MT
(\050:file "primitives"\051\051)SH
23880 55544 MT
(:depends-on \050graphics operating-system\051\051)SH
18480 56675 MT
(\050:module operating-system)SH
23880 57806 MT
(:source-pathname "os")SH
23880 58937 MT
(:components \050\050:file "primitives"\051)SH
31680 60068 MT
(\050:file "macros")SH
35880 61199 MT
(:depends-on \050"primitives"\051\051\051)SH
23880 62330 MT
(:depends-on \050basic\051\051\051)SH
10680 63461 MT
(:depends-on nil\051)SH
12 /Times-Roman AF
8280 66121 MT
(Then we may use)SH
11 /Courier AF
17012 XM
(operate-on-system)SH
12 /Times-Roman AF
28532 XM
(to compile and load the system.)SH
10 /Courier-Bold AF
9480 67926 MT
(<cl> \050operate-on-system 'test 'compile :verbose t\051)SH
9480 70188 MT
(; - Compiling system "test")SH
9480 71319 MT
(; -)
1200 W( Compiling module "basic")SH
ES
%%Page: 40 42
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(40)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
/Courier-Bold SF
7320 7874 MT
(; -)
2400 W( Compiling source file)SH
7320 9005 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/primitives.lisp")3600 W
7320 10136 MT
(; -)
2400 W( Loading binary file)SH
7320 11267 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/primitives.fasl")3600 W
7320 12398 MT
(; -)
2400 W( Compiling source file)SH
7320 13529 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/macros.lisp")3600 W
7320 14660 MT
(; -)
2400 W( Loading binary file)SH
7320 15791 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/macros.fasl")3600 W
7320 16922 MT
(; -)
1200 W( Compiling module "graphics")SH
7320 18053 MT
(; -)
2400 W( Compiling source file)SH
7320 19184 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/graphics/primitives.lisp")3600 W
7320 20315 MT
(; -)
2400 W( Loading binary file)SH
7320 21446 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/graphics/primitives.fasl")3600 W
7320 22577 MT
(; -)
2400 W( Compiling source file)SH
7320 23708 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/graphics/macros.lisp")3600 W
7320 24839 MT
(; -)
2400 W( Loading binary file)SH
7320 25970 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/graphics/macros.fasl")3600 W
7320 27101 MT
(; -)
1200 W( Compiling module "operating-system")SH
7320 28232 MT
(; -)
2400 W( Compiling source file)SH
7320 29363 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/os/primitives.lisp")3600 W
7320 30494 MT
(; -)
2400 W( Loading binary file)SH
7320 31625 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/os/primitives.fasl")3600 W
7320 32756 MT
(; -)
2400 W( Compiling source file)SH
7320 33887 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/os/macros.lisp")3600 W
7320 35018 MT
(; -)
2400 W( Loading binary file)SH
7320 36149 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/os/macros.fasl")3600 W
7320 37280 MT
(; -)
1200 W( Compiling module "fancy-stuff")SH
7320 38411 MT
(; -)
2400 W( Compiling source file)SH
7320 39542 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/fancy/primitives.lisp")3600 W
7320 40673 MT
(; -)
2400 W( Loading binary file)SH
7320 41804 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/fancy/primitives.fasl")3600 W
7320 42935 MT
(; -)
2400 W( Compiling source file)SH
7320 44066 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/fancy/macros.lisp")3600 W
7320 45197 MT
(; -)
2400 W( Loading binary file)SH
7320 46328 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/fancy/macros.fasl")3600 W
7320 47459 MT
(; - Providing system test)SH
7320 48590 MT
(NIL)SH
7320 50852 MT
(<cl> \050operate-on-system 'test 'load :verbose t\051)SH
7320 53114 MT
(; - Loading system "test")SH
7320 54245 MT
(; -)
1200 W( Loading module "basic")SH
7320 55376 MT
(; -)
2400 W( Loading binary file)SH
7320 56507 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/primitives.fasl")3600 W
7320 57638 MT
(; -)
2400 W( Loading binary file)SH
7320 58769 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/macros.fasl")3600 W
7320 59900 MT
(; -)
1200 W( Loading module "graphics")SH
7320 61031 MT
(; -)
2400 W( Loading binary file)SH
7320 62162 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/graphics/primitives.fasl")3600 W
7320 63293 MT
(; -)
2400 W( Loading binary file)SH
7320 64424 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/graphics/macros.fasl")3600 W
7320 65555 MT
(; -)
1200 W( Loading module "operating-system")SH
7320 66686 MT
(; -)
2400 W( Loading binary file)SH
7320 67817 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/os/primitives.fasl")3600 W
7320 68948 MT
(; -)
2400 W( Loading binary file)SH
7320 70079 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/os/macros.fasl")3600 W
7320 71210 MT
(; -)
1200 W( Loading module "fancy-stuff")SH
ES
%%Page: 41 43
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(DEFSYSTEM)SH
10 SS 
(: A "make" for Lisp)SH
/Times-Roman SF
54080 XM
(41)SH
/Courier-Bold SF
9480 7874 MT
(; -)
2400 W( Loading binary file)SH
9480 9005 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/fancy/primitives.fasl")3600 W
9480 10136 MT
(; -)
2400 W( Loading binary file)SH
9480 11267 MT
(; "/afs/cs.cmu.edu/user/mkant/Defsystem/test/fancy/macros.fasl")3600 W
9480 12398 MT
(; - Providing system test)SH
9480 13529 MT
(NIL)SH
14 /Times-Bold AF
8280 17347 MT
(4.5. Implementation Notes)SH
12 /Times-Roman AF
8280 19602 MT
(In this section we discuss some issues relating to the implementation of)SH
10 SS 
42891 XM
(DEFSYSTEM)SH
12 SS 
(.)SH
/Times-Bold SF
8280 23286 MT
(4.5.1. Structural vs. Procedural System Construction Tools)SH
/Times-Roman SF
8280 25365 MT
(There are two major types of system construction tools, procedural and)
166 W( structural. Procedural)167 W
8280 26923 MT
(tools define a system as a sequence of explicit construction steps, perhaps augmented with)
40 W( some)39 W
8280 28481 MT
(description of structural dependencies. The UNIX)502 W
11 /Courier AF
35592 XM
(make)SH
12 /Times-Roman AF
38532 XM
([1] and Symbolics)502 W
11 /Courier AF
49140 XM
(defsystem)SH
12 /Times-Roman AF
8580 30039 MT
([3] [4])
SH( are examples)
6 W( of this kind of tool. Structural tools define a system in terms of its structure.)5 W
8280 31597 MT
(Instead of describing how)
127 W( modules are to be constructed, a structural definition describes how)128 W
8280 33155 MT
(the modules reference each other, and infers the order of construction operations from)
287 W( the)286 W
8280 34713 MT
(reference graph. The)SH
10 SS 
18544 XM
(BUILD)SH
12 SS 
21899 XM
(system [5] is an example of a structure-based system definition tool.)SH
8280 37373 MT
(As noted by Robbins in)
124 W( [5],)
SH( a procedural)
124 W( definition of a system is harder to understand than a)125 W
8280 38931 MT
(structural definition. In addition, there)
261 W( are several benefits to the separation of construction)260 W
8280 40489 MT
(knowledge from systems knowledge that occurs in structural system construction tools:)SH
/Symbol SF
10428 42192 MT
(\267)SH
/Times-Roman SF
11280 XM
(Such tools can be extended by adding new operations)
127 W( on systems without altering)128 W
11280 43478 MT
(existing system definitions. Since the tool is not constrained to a particular set of)158 W
11280 44764 MT
(embedded tasks, the users are free to define new operations.)SH
/Symbol SF
10428 46793 MT
(\267)SH
/Times-Roman SF
11280 XM
(When defining a new operation, many)
38 W( low level details \050e.g., compilation order\051 are)39 W
11280 48079 MT
(hidden from the task definer, simplifying the definition of new operations.)SH
/Symbol SF
10428 50108 MT
(\267)SH
/Times-Roman SF
11280 XM
(Structural tools are a more natural way)
41 W( for users to describe systems, allowing them)40 W
11280 51394 MT
(to concentrate on the overall structure of the system.  Users can)
159 W( ignore low level)160 W
11280 52680 MT
(details of the construction operations when writing a system. The)
556 W( explicit)555 W
11280 53966 MT
(declaration of high level system relationships is also much easier to understand.)SH
/Symbol SF
10428 55995 MT
(\267)SH
/Times-Roman SF
11280 XM
(It is much easier)
168 W( to automatically generate structural descriptions of systems. For)169 W
11280 57281 MT
(example,)SH
10 SS 
16109 XM
(XREF)SH
12 SS 
19127 XM
(includes tools to assist the user)
162 W( in creating a system definition by)161 W
11280 58567 MT
(producing the file dependency graph.)SH
8280 60133 MT
(Accordingly, we chose to design)SH
10 SS 
24280 XM
(DEFSYSTEM)SH
12 SS 
30414 XM
(as a structure-based system construction tool.)SH
8280 62793 MT
(The user supplies)44 W
10 SS 
17113 XM
(DEFSYSTEM)SH
12 SS 
23291 XM
(with a description of the structure of the system, and)45 W
10 SS 
49246 XM
(DEFSYSTEM)SH
12 SS 
8280 64351 MT
(infers the compilation steps. The system definition describes how modules reference each other)80 W
8280 65909 MT
(instead of how they are constructed. From a structural)
8 W( description \050module A refers to module B\051)9 W
8280 67467 MT
(it can infer the procedural requirements \050a)
46 W( change to module B implies that module A should be)45 W
8280 69025 MT
(recompiled, but a change to module A does not imply that module B should be recompiled\051.)SH
8280 71685 MT
(Unfortunately,)SH
10 SS 
15635 XM
(DEFSYSTEM)SH
12 SS 
('s mechanism for describing)
21 W( operations is not as elegant or as general)22 W
ES
%%Page: 42 44
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(42)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 /Times-Roman AF
6120 8023 MT
(as)SH
10 SS 
7549 XM
(BUILD)SH
12 SS 
('s. The knowledge about Lisp compilation and loading, although largely isolated into)128 W
6120 9581 MT
(separate operation definitions,)
1028 W( is still partially embedded in the definition of)1029 W
11 /Courier AF
6120 11139 MT
(operate-on-system)SH
12 /Times-Roman AF
(. So if a new operation is sensitive to)
178 W( reference types other than those)177 W
6120 12697 MT
(provided for the compile and load operations, it may require revising)
435 W( the definition of)436 W
10 SS 
34291 13874 MT
(10)SH
11 /Courier AF
6120 14255 MT
(operate-on-system)SH
12 /Times-Roman AF
17781 XM
(as well as the system definitions.)141 W
35732 XM
(However,)SH
10 SS 
40870 XM
(DEFSYSTEM)SH
12 SS 
47144 XM
(is sufficient)140 W
6120 15813 MT
(for at least compilation and loading in Lisp, which is where the major need lies.)SH
/Times-Bold SF
6120 19497 MT
(4.5.2. Retrieving System Definitions)SH
/Times-Roman SF
6120 21576 MT
(It is desirable that a system definition be automatically loaded if not already present)
148 W( when its)149 W
6120 23134 MT
(name is referenced by the user or a system definition.)64 W
11 /Courier AF
32730 XM
(find-system)SH
12 /Times-Roman AF
40354 XM
(implements this behavior,)64 W
6120 24692 MT
(loading the definition of the system)151 W
11 /Courier AF
24366 XM
(foo)SH
12 /Times-Roman AF
26798 XM
(from the file)152 W
11 /Courier AF
33556 XM
("foo.system")SH
12 /Times-Roman AF
41928 XM
(in the central registry.)152 W
11 /Courier AF
6120 26250 MT
(find-system)SH
12 /Times-Roman AF
13760 XM
(calls)SH
11 /Courier AF
16341 XM
(compute-system-path)SH
12 /Times-Roman AF
29261 XM
(to determine)
80 W( the pathname of the file containing)79 W
6120 27808 MT
(the system definition.)SH
11 /Courier AF
6120 29700 MT
(find-system)SH
12 /Times-Roman AF
13680 XM
(\050system &optional \050mode :ask\051 definition-pname\051)SH
47852 XM
([Function])SH
8520 31483 MT
(Returns the system named)SH
/Times-Italic SF
21456 XM
(system)SH
/Times-Roman SF
(. If the system was not previously defined or the)SH
8520 32769 MT
(version on disk is newer,)SH
11 /Courier AF
20788 XM
(find-system)SH
12 /Times-Roman AF
28348 XM
(tries to load the system definition. This)SH
8520 34055 MT
(allows)SH
11 /Courier AF
11954 XM
(operate-on-system)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
23774 XM
(compile-system)SH
12 /Times-Roman AF
(, and)SH
11 /Courier AF
35647 XM
(load-system)SH
12 /Times-Roman AF
43207 XM
(to work on)SH
8520 35341 MT
(non-loaded as well as loaded system definitions.)SH
/Times-Italic SF
32058 XM
(definition-pname)SH
/Times-Roman SF
40560 XM
(is the pathname for)SH
8520 36627 MT
(the file containing the system definition, if provided. Otherwise)SH
11 /Courier AF
39361 XM
(find-system)SH
12 /Times-Roman AF
46921 XM
(checks)SH
8520 37913 MT
(for a file matching the system name first in the current directory and then in the central)SH
8520 39199 MT
(registry directories. If the variable)SH
11 /Courier AF
25190 XM
(*reload-systems-from-disk*)SH
12 /Times-Roman AF
42650 XM
(is)SH
11 /Courier AF
43751 XM
(nil)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
8520 40485 MT
(find-system)SH
12 /Times-Roman AF
16080 XM
(will not reload the system definition of a defined system from disk if)SH
8520 41771 MT
(the version on disk is newer.)SH
/Times-Bold SF
6120 45455 MT
(4.5.3. Appending Directories)SH
/Times-Roman SF
6120 47534 MT
(The)SH
11 /Courier AF
8479 XM
(append-directories)SH
12 /Times-Roman AF
20852 XM
(function is used to tack a subdirectory onto a pathname. Sadly,)193 W
6120 49092 MT
(Common Lisp lacks a primitive to do this.)
39 W( Our definition will work for all Lisps that conform to)38 W
6120 50650 MT
(the conventions on)
188 W( structured directories)
189 W( [7,)
SH( Section 23.1.3]. Minor incompatibilities with the)189 W
6120 52208 MT
(standard are fixed using read-time conditionalization. Major aberrations are)
42 W( handled either using)41 W
6120 53766 MT
(special purpose code, or using)SH
10 /Courier-Bold AF
7320 55571 MT
(\050namestring \050merge-pathnames \050or absolute-directory ""\051)SH
24720 56702 MT
(\050or relative-directory ""\051\051\051)SH
12 /Times-Roman AF
6120 58656 MT
(which seems to work surprisingly well in VMS-based VaxLisp.)SH
6120 61316 MT
(The output)
130 W( from the function)131 W
11 /Courier AF
21010 XM
(test-new-append-directories)SH
12 /Times-Roman AF
39261 XM
(may be useful for verifying)131 W
6120 62874 MT
(correct operation of this primitive when porting it to new Lisps.)SH
10800 50 6120 65570 UL
8 SS 
7120 67235 MT
(10)SH
10 SS 
7920 67580 MT
(For example,)
315 W( we currently assume that compilation-load dependencies and if-changed dependencies are)314 W
6120 68685 MT
(identical. However, in some cases)
48 W( this might not be true. For example, if we change a macro we have to recompile)49 W
6120 69790 MT
(functions that depend on it, but not if we change a function. Splitting these)
8 W( apart \050with appropriate defaulting\051 would)7 W
6120 70895 MT
(be nice, but not worth doing immediately since it may save only a couple of)
64 W( file recompilations, while making the)65 W
6120 72000 MT
(defsystem much more complex.)SH
ES
%%Page: 43 45
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(DEFSYSTEM)SH
10 SS 
(: A "make" for Lisp)SH
/Times-Roman SF
54080 XM
(43)SH
12 SS 
8280 8023 MT
(See Appendix II for a discussion of this and other problems with Common Lisp.)SH
11 /Courier AF
8280 9915 MT
(append-directories)SH
12 /Times-Roman AF
20460 XM
(\050absolute-directory relative-directory\051)SH
50012 XM
([Function])SH
10680 11698 MT
(There is no Common Lisp primitive for tacking a subdirectory onto a directory.  We)SH
10680 12984 MT
(need such a function because)SH
11 /Courier AF
24979 XM
(defsystem)SH
12 /Times-Roman AF
31219 XM
(has both absolute and relative pathnames in)SH
10680 14270 MT
(the modules. We assume that)SH
/Times-Italic SF
25016 XM
(absolute-directory)SH
/Times-Roman SF
34185 XM
(is a directory, with no filename stuck)SH
10680 15556 MT
(on the end.)SH
/Times-Italic SF
16580 XM
(relative-directory)SH
/Times-Roman SF
(, however, may have a filename stuck on the end.)SH
/Times-Bold SF
8280 19240 MT
(4.5.4. Defining a System)SH
/Times-Roman SF
8280 21319 MT
(Defining a)
313 W( system invokes several functions.)312 W
11 /Courier AF
31990 XM
(create-component)SH
12 /Times-Roman AF
43162 XM
(is the main routine for)312 W
8280 22877 MT
(creating a representation. It)
532 W( takes care of inheriting appropriate attributes from parent)533 W
8280 24435 MT
(components, initializes the component's pathnames)
278 W( using)277 W
11 /Courier AF
37920 XM
(create-component-pathnames)SH
12 /Times-Roman AF
8280 25993 MT
(and)SH
11 /Courier AF
10833 XM
(generate-component-pathname)SH
12 /Times-Roman AF
(, recursively creates)
520 W( any child components using)521 W
11 /Courier AF
8280 27551 MT
(expand-component-components)SH
12 /Times-Roman AF
26512 XM
(and)SH
11 /Courier AF
28657 XM
(expand-component-definition)SH
12 /Times-Roman AF
(, ties)
112 W( together the)111 W
8280 29109 MT
(dependency graph using)718 W
11 /Courier AF
22400 XM
(link-component-depends-on)SH
12 /Times-Roman AF
(, and topologically sorts the)719 W
8280 30667 MT
(dependency graph using)SH
11 /Courier AF
20246 XM
(topological-sort)SH
12 /Times-Roman AF
(.)SH
/Times-Bold SF
8280 34351 MT
(4.5.5. Operating on a System)SH
11 /Courier AF
8280 36430 MT
(operate-on-system)SH
12 /Times-Roman AF
19811 XM
(calls)SH
11 /Courier AF
22323 XM
(operate-on-component)SH
12 /Times-Roman AF
35834 XM
(to apply the operation to the)
11 W( system and)10 W
8280 37988 MT
(its components.)232 W
11 /Courier AF
16581 XM
(operate-on-component)SH
12 /Times-Roman AF
30314 XM
(sets up the component's package, propagates the)233 W
8280 39546 MT
(operations to the system's dependencies if)47 W
11 /Courier AF
29166 XM
(*operations-propagate-to-subsystems*)SH
12 /Times-Roman AF
53273 XM
(is)SH
11 /Courier AF
54420 XM
(t)SH
12 /Times-Roman AF
8280 41104 MT
(using)SH
11 /Courier AF
11294 XM
(operate-on-system-dependencies)SH
12 /Times-Roman AF
(, and does the)
113 W( component's initializations. Then,)114 W
8280 42662 MT
(if the component is)
126 W( of type)125 W
11 /Courier AF
22236 XM
(:file)SH
12 /Times-Roman AF
25961 XM
(or)SH
11 /Courier AF
27386 XM
(:private-file)SH
12 /Times-Roman AF
36391 XM
(it applies the operation directly to the)125 W
8280 44220 MT
(component. Otherwise,)
510 W( it)
105 W( calls)106 W
11 /Courier AF
24043 XM
(operate-on-components)SH
12 /Times-Roman AF
38309 XM
(to work on the components of the)106 W
8280 45778 MT
(component. Finally, it does the component's finalizations and provides the system.)SH
8280 48438 MT
(The function)101 W
11 /Courier AF
14949 XM
(compile-and-load-operation)SH
12 /Times-Roman AF
32510 XM
(corresponds to)
101 W( the)100 W
11 /Courier AF
41912 XM
(:load)SH
12 /Times-Roman AF
45612 XM
(operation while the)100 W
8280 49996 MT
(function)SH
11 /Courier AF
13265 XM
(load-file-operation)SH
12 /Times-Roman AF
26789 XM
(corresponds to the)685 W
11 /Courier AF
37945 XM
(:compile)SH
12 /Times-Roman AF
44210 XM
(operation. They use)685 W
11 /Courier AF
8280 51554 MT
(needs-compilation)SH
12 /Times-Roman AF
20220 XM
(and)SH
11 /Courier AF
22673 XM
(needs-loading)SH
12 /Times-Roman AF
31973 XM
(to determine if the component)
420 W( needs to be)419 W
8280 53112 MT
(compiled or loaded based on its compile and load)
279 W( times. The compile time is checked by)280 W
8280 54670 MT
(comparing the file-write-date of the binary file with)
27 W( that of the source file, while the load-time is)26 W
8280 56228 MT
(cached in the component)
136 W( itself. The)137 W
11 /Courier AF
26534 XM
(delete-binaries-operation)SH
12 /Times-Roman AF
43471 XM
(function corresponds to)137 W
8280 57786 MT
(the)SH
11 /Courier AF
10047 XM
(:delete-binaries)SH
12 /Times-Roman AF
20907 XM
(operation, which deletes all the binary files associated with a system.)SH
/Times-Bold SF
8280 61470 MT
(4.5.6. Querying the User with Timeouts)SH
/Times-Roman SF
8280 63549 MT
(Since compiling and loading large systems can take)
88 W( a considerable amount of time, some users)87 W
8280 65107 MT
(would prefer to avoid having to babysit the compilation.)349 W
10 SS 
38761 XM
(DEFSYSTEM)SH
12 SS 
45245 XM
(includes a function)350 W
11 /Courier AF
8280 66665 MT
(y-or-n-p-wait)SH
12 /Times-Roman AF
17194 XM
(which is similar to the Common Lisp)33 W
11 /Courier AF
35598 XM
(y-or-n-p)SH
12 /Times-Roman AF
41211 XM
(but which will time out after)33 W
8280 68223 MT
(a specified interval of time.)
627 W( All queries from)628 W
10 SS 
35005 XM
(DEFSYSTEM)SH
12 SS 
41767 XM
(to the user are through)628 W
11 /Courier AF
8280 69781 MT
(y-or-n-p-wait)SH
12 /Times-Roman AF
17695 XM
(with reasonable defaults, allowing the user to eat)
535 W( dinner during the)534 W
8280 71339 MT
(compilation without)
94 W( worrying whether the compilation hung up on a query a few seconds after)95 W
ES
%%Page: 44 46
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(44)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 /Times-Roman AF
6120 8023 MT
(the user left.)SH
6120 10683 MT
(Some Lisps, however, have)
199 W( broken definitions of)198 W
11 /Courier AF
31411 XM
(read-char-no-hang)SH
12 /Times-Roman AF
43129 XM
(and)SH
11 /Courier AF
45360 XM
(clear-input)SH
12 /Times-Roman AF
(,)SH
6120 12241 MT
(which can result in)1029 W
10 SS 
19638 XM
(DEFSYSTEM)SH
12 SS 
('s ignoring user input to the queries. Also,)1030 W
10 SS 
40222 13418 MT
(11)SH
11 /Courier AF
6120 13799 MT
(get-internal-run-time)SH
12 /Times-Roman AF
20888 XM
(conses considerably in some)
608 W( Lisps,)607 W
42129 XM
(with the result that)607 W
11 /Courier AF
6120 15357 MT
(y-or-n-p-wait)SH
12 /Times-Roman AF
15227 XM
(conses several megabytes per minute. The variable)227 W
11 /Courier AF
41552 XM
(*use-timeouts*)SH
12 /Times-Roman AF
51320 XM
(has)SH
6120 16915 MT
(been provided to allow the user to turn off the timeout behavior of)90 W
11 /Courier AF
39395 XM
(y-or-n-p-wait)SH
12 /Times-Roman AF
(, in which)89 W
6120 18473 MT
(case it works just like)SH
11 /Courier AF
16823 XM
(y-or-n-p)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
6120 20365 MT
(*use-timeouts*)SH
12 /Times-Roman AF
15660 XM
(t)SH
47987 XM
([Variable])SH
8520 22148 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(, timeouts in)SH
11 /Courier AF
16550 XM
(y-or-n-p-wait)SH
12 /Times-Roman AF
25430 XM
(are enabled. Otherwise it behaves like)SH
11 /Courier AF
43997 XM
(y-or-n-p)SH
12 /Times-Roman AF
(.)SH
8520 23434 MT
(This is provided for users whose Lisps don't handle)SH
11 /Courier AF
33690 XM
(read-char-no-hang)SH
12 /Times-Roman AF
45210 XM
(properly.)SH
11 /Courier AF
6120 25326 MT
(*clear-input-before-query*)SH
12 /Times-Roman AF
23580 XM
(t)SH
47987 XM
([Variable])SH
8520 27109 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
10880 XM
(y-or-n-p-wait)SH
12 /Times-Roman AF
19760 XM
(will clear the input before printing the prompt and asking the)SH
8520 28395 MT
(user for input.)SH
11 /Courier AF
6120 30287 MT
(y-or-n-p-wait)SH
12 /Times-Roman AF
15000 XM
(\050&optional \050default #\134y\051 \050timeout 20\051 format-string)SH
47852 XM
([Function])SH
15600 31573 MT
(&rest args\051)SH
11 /Courier AF
8520 33356 MT
(y-or-n-p-wait)SH
12 /Times-Roman AF
17400 XM
(prints the message, if any, and reads characters from)SH
11 /Courier AF
42902 XM
(*query-io*)SH
12 /Times-Roman AF
8520 34642 MT
(until the user enters)SH
11 /Courier AF
18256 XM
(y)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
19516 XM
(Y)SH
12 /Times-Roman AF
20476 XM
(or a space as an affirmative, or either)SH
11 /Courier AF
38577 XM
(n)SH
12 /Times-Roman AF
39537 XM
(or)SH
11 /Courier AF
40837 XM
(N)SH
12 /Times-Roman AF
41797 XM
(as a negative)SH
8520 35928 MT
(answer, or the timeout occurs. It asks again if you enter any other characters.)SH
/Times-Bold SF
6120 39612 MT
(4.5.7. Debugging)SH
/Times-Roman SF
6120 41691 MT
(The functions)52 W
11 /Courier AF
13158 XM
(files-which-need-compilation)SH
12 /Times-Roman AF
31990 XM
(and)SH
11 /Courier AF
34075 XM
(files-in-system)SH
12 /Times-Roman AF
44327 XM
(may be useful for)53 W
6120 43249 MT
(debugging an incorrect system definition.)SH
11 /Courier AF
6120 45141 MT
(files-which-need-compilation)SH
12 /Times-Roman AF
24900 XM
(\050system\051)SH
47852 XM
([Function])SH
8520 46924 MT
(Returns a list of files in)SH
/Times-Italic SF
20058 XM
(system)SH
/Times-Roman SF
23558 XM
(which currently need to be compiled to be brought up)SH
8520 48210 MT
(to date.)SH
11 /Courier AF
6120 50102 MT
(files-in-system)SH
12 /Times-Roman AF
16320 XM
(\050name &optional \050force :all\051 \050type :source\051 version)SH
47852 XM
([Function])SH
16920 51388 MT
(&aux system\051)SH
8520 53171 MT
(Returns a list of all files in the system named)SH
/Times-Italic SF
30461 XM
(name)SH
/Times-Roman SF
33360 XM
(in load order.)SH
10800 50 6120 69990 UL
8 SS 
7120 71655 MT
(11)SH
10 SS 
7920 72000 MT
(500 bytes per call is not unusual.)SH
ES
%%Page: 45 47
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(LOGICAL-PATHNAMES)SH
10 SS 
(: Portable Pathnames)SH
/Times-Roman SF
54080 XM
(45)SH
16 /Times-Bold AF
8280 8272 MT
(5.)SH
14 SS 
9880 XM
(LOGICAL-PATHNAMES)SH
16 SS 
(: Portable Pathnames)SH
12 /Times-Roman AF
8280 10703 MT
(The)SH
10 SS 
10852 XM
(LOGICAL-PATHNAMES)SH
12 SS 
22390 XM
(system is a portable implementation of)
406 W( the X3J13 June 1989)405 W
8280 12261 MT
(specification for logical)
58 W( pathnames, as documented in)
59 W( [7,)
SH( section 23.1.5].)59 W
10 SS 
44248 XM
(LOGICAL-PATHNAMES)SH
12 SS 
8280 13819 MT
(lets programs refer to pathnames and files in a)
231 W( portable manner. The logical pathnames are)230 W
8280 15377 MT
(mapped to physical pathnames by a set of implementation-dependent and site-dependent rules.)SH
14 /Times-Bold AF
8280 19195 MT
(5.1. Overview)SH
12 /Times-Roman AF
8280 21450 MT
(Logical pathnames allow large)
210 W( programs to be moved between sites by separating pathname)211 W
8280 23008 MT
(reference from actual file location. The program will refer to files using)
114 W( logical pathnames. At)113 W
8280 24566 MT
(each site, a user will specify)
85 W( a set of)86 W
/Times-Italic SF
26651 XM
(translations)SH
/Times-Roman SF
32774 XM
(which map from the logical pathnames to the)86 W
8280 26124 MT
(physical pathnames used on the device.)SH
8280 28784 MT
(Logical pathnames provide a uniform)
303 W( convention for filesystem access, with the following)302 W
8280 30342 MT
(properties:)SH
10680 31908 MT
(1.)SH
/Times-Italic SF
11880 XM
(Pathname Portability.)62 W
/Times-Roman SF
22973 XM
(The program specifies a pathname in a conventional format)63 W
11880 33194 MT
(which may be mapped in a reasonably literal manner onto a variety of filesystems.)SH
10680 35223 MT
(2.)SH
/Times-Italic SF
11880 XM
(Pathname Aliasing.)3 W
/Times-Roman SF
21654 XM
(Logical pathnames introduce a level of)
3 W( indirection in pathname)2 W
11880 36509 MT
(reference, so)
429 W( that the files may exist in different locations in the different)430 W
11880 37795 MT
(filesystems. For example, the root directory)
123 W( might change. The translations make)122 W
11880 39081 MT
(such a change easy to implement.)SH
10680 41110 MT
(3.)SH
/Times-Italic SF
11880 XM
(Cross-host Access.)70 W
/Times-Roman SF
21388 XM
(The files need not all exist on the same physical host, but may)71 W
11880 42396 MT
(still be refered to as one logical unit.)SH
8280 45056 MT
(This implementation of logical pathnames provides support for parsing and generating physical)87 W
8280 46614 MT
(pathnames for UNIX, VMS/VAX, Symbolics Lisp Machines and TI Explorers, and)
208 W( is easily)209 W
8280 48172 MT
(extended to handle additional platforms.)SH
8280 50832 MT
(The)SH
10 SS 
10446 XM
(LOGICAL-PATHNAMES)SH
12 SS 
21578 XM
(system may be used with the)SH
10 SS 
35714 XM
(DEFSYSTEM)SH
12 SS 
41848 XM
(program.)SH
/Times-Bold SF
8280 54516 MT
(5.1.1. Logical Pathname Syntax)SH
/Times-Roman SF
8280 56595 MT
(Logical pathnames employ the following syntax:)SH
10 /Courier-Bold AF
9480 58400 MT
([host:] [;] {directory ;}* [name] [. type [. version]])SH
12 /Times-Roman AF
8280 60354 MT
(where)SH
10 /Courier-Bold AF
9480 62159 MT
(host ::=)
8400 W( word)SH
9480 63290 MT
(directory ::=)
5400 W( word | wildcard-word | wildcard-inferiors)SH
9480 64421 MT
(name ::=)
8400 W( word | wildcard-word)SH
9480 65552 MT
(type ::=)
8400 W( word | wildcard-word)SH
9480 66683 MT
(version ::=)
6600 W( word | wildcard-word)SH
9480 67814 MT
(word ::=)
8400 W( {letter | digit | -}*)SH
9480 68945 MT
(wildcard-word ::=)
3000 W( [word] * {word *}* [word])SH
9480 70076 MT
(wildcard-inferiors ::= **)SH
ES
%%Page: 46 48
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(46)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 /Times-Roman AF
6120 8023 MT
(A wildcard-word of)38 W
11 /Courier AF
16066 XM
(*)SH
12 /Times-Roman AF
17064 XM
(parses as)38 W
11 /Courier AF
21740 XM
(:wild)SH
12 /Times-Roman AF
(; all others as strings.)
38 W( These)
374 W( definitions may be extended)37 W
6120 9581 MT
(\050e.g.,)SH
11 /Courier AF
8853 XM
("newest")SH
12 /Times-Roman AF
14433 XM
(parsing as)SH
11 /Courier AF
19567 XM
(:newest)SH
12 /Times-Roman AF
(\051 by defining new canonical types.)SH
/Times-Bold SF
6120 13265 MT
(5.1.2. Incompatibilities with the X3J13 Specification)SH
/Times-Roman SF
6120 15344 MT
(The)SH
11 /Courier AF
8349 XM
(logical-pathname)SH
12 /Times-Roman AF
19272 XM
(structure is not)
63 W( defined as a subclass of)64 W
11 /Courier AF
38852 XM
(pathname)SH
12 /Times-Roman AF
44496 XM
(since we have no)64 W
6120 16902 MT
(guarantee about the format of)77 W
11 /Courier AF
21006 XM
(pathname)SH
12 /Times-Roman AF
26663 XM
(\050i.e., whether)
77 W( it is a defstruct or class definition, what)76 W
10 SS 
22884 18079 MT
(12)SH
12 SS 
6120 18460 MT
(are the types of its slots, etc.\051.)410 W
24594 XM
(Many Lisps will be able to replace the)
410 W( definition of)409 W
11 /Courier AF
6120 20018 MT
(physical-pathname)SH
12 /Times-Roman AF
17704 XM
(with their definition of)64 W
11 /Courier AF
29164 XM
(pathname)SH
12 /Times-Roman AF
34808 XM
(by substituting)
64 W( the string "pathname")65 W
6120 21576 MT
(for "physical-pathname" and deleting and/or renaming some of the definitions)
808 W( in)807 W
10 SS 
6120 23134 MT
(LOGICAL-PATHNAMES)SH
12 SS 
(.)SH
6120 25794 MT
(The X3J13 specification does not set a standard for the manner in which)
4 W( wildcards are translated.)5 W
6120 27352 MT
(We use reversible wildcard pathname)
128 W( translation, similar to that used in the Symbolics logical)127 W
6120 28910 MT
(pathnames.)SH
14 /Times-Bold AF
6120 32728 MT
(5.2. Installing)SH
12 SS 
14599 XM
(LOGICAL-PATHNAMES)SH
/Times-Roman SF
6120 34983 MT
(Before loading)79 W
10 SS 
13745 XM
(LOGICAL-PATHNAMES)SH
12 SS 
(, you may wish to)
79 W( perform the following implementation-)80 W
6120 36541 MT
(dependent changes:)SH
/Symbol SF
8268 38244 MT
(\267)SH
/Times-Roman SF
9120 XM
(Set)SH
11 /Courier AF
11078 XM
(local-host-table)SH
12 /Times-Roman AF
22062 XM
(to the pathname of the local host table if you're using a)123 W
9120 39530 MT
(host table to determine physical host types.)
22 W( Otherwise, you may wish to redefine the)23 W
9120 40816 MT
(function)SH
11 /Courier AF
14127 XM
(physical-host-type)SH
12 /Times-Roman AF
27013 XM
(to return)
706 W( the physical host types in an)705 W
9120 42102 MT
(implementation-dependent manner. You may also wish to change the)
429 W( default)430 W
9120 43388 MT
(physical host type.)SH
/Symbol SF
8268 45417 MT
(\267)SH
/Times-Roman SF
9120 XM
(Set the value of)78 W
11 /Courier AF
17233 XM
(directory-structure-type)SH
12 /Times-Roman AF
33451 XM
(to match the type of)
78 W( the directory)77 W
9120 46703 MT
(slot of pathname in your Lisp. This should only be necessary if you're)
18 W( porting it to a)19 W
9120 47989 MT
(new Lisp.)SH
/Symbol SF
8268 50018 MT
(\267)SH
/Times-Roman SF
9120 XM
(Set)SH
11 /Courier AF
11047 XM
(*logical-translations-directory*)SH
12 /Times-Roman AF
32560 XM
(to be the pathname of the directory)93 W
9120 51304 MT
(where translation files are kept.)SH
/Symbol SF
8268 53333 MT
(\267)SH
/Times-Roman SF
9120 XM
(Define any additional canonical types and translation rules you wish.)SH
6120 55993 MT
(After loading)1582 W
10 SS 
16019 XM
(LOGICAL-PATHNAMES)SH
12 SS 
(, load the physical host table using)1583 W
11 /Courier AF
6120 57551 MT
(load-physical-hostab)SH
12 /Times-Roman AF
23026 XM
(and any desired translations using)3406 W
11 /Courier AF
6120 59109 MT
(load-logical-pathname-translations)SH
12 /Times-Roman AF
(.)SH
6120 61769 MT
(If you intend to use)66 W
10 SS 
16085 XM
(LOGICAL-PATHNAMES)SH
12 SS 
27283 XM
(with)SH
10 SS 
29783 XM
(DEFSYSTEM)SH
12 SS 
(, you must load it)
66 W( before compiling)67 W
6120 63327 MT
(or loading)SH
10 SS 
11321 XM
(DEFSYSTEM)SH
12 SS 
(.)SH
10800 50 6120 68885 UL
8 SS 
7120 70550 MT
(12)SH
10 SS 
7920 70895 MT
(The latest version of Common Lisp tightened up the structure of pathnames,)
23 W( but we want to be compatible with)24 W
6120 72000 MT
(current Lisps.)SH
ES
%%Page: 47 49
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(LOGICAL-PATHNAMES)SH
10 SS 
(: Portable Pathnames)SH
/Times-Roman SF
54080 XM
(47)SH
14 /Times-Bold AF
8280 8138 MT
(5.3. Using)SH
12 SS 
14503 XM
(LOGICAL-PATHNAMES)SH
/Times-Roman SF
8280 10393 MT
(This section discusses the basics of)
494 W( using)493 W
10 SS 
31841 XM
(LOGICAL-PATHNAMES)SH
12 SS 
(, with an emphasis on)493 W
8280 11951 MT
(differences between this implementation and the X3J13 specification. See)
54 W( [7,)
SH( section 23.1.5] for)54 W
8280 13509 MT
(detailed documentation on logical pathnames.)SH
8280 16169 MT
(Most of the differences between this)
250 W( implementation and the X3J13 specification are either)249 W
8280 17727 MT
(enhancements or due to the problems of trying to ensure compatability with current Lisps.)SH
8280 20387 MT
(For example, nearly every Lisp has a different representation for pathnames, since)
238 W( this was)239 W
8280 21945 MT
(rather loosely)
265 W( specified in)
264 W( [6].)
SH( In)
828 W( some Lisps pathnames are classes and in some they are)264 W
8280 23503 MT
(structures, and the slots of a pathname may have)
149 W( arbitrary types, especially the directory slot.)150 W
8280 25061 MT
(Depending on the Lisp,)
105 W( the directory slot may be a list, vector, simple-vector, string, keyword,)104 W
8280 26619 MT
(and/or)SH
11 /Courier AF
11797 XM
(nil)SH
12 /Times-Roman AF
(. If a list or a vector,)
150 W( the items in the list may be strings, keywords \050for canonical)151 W
8280 28177 MT
(types\051, or)47 W
11 /Courier AF
13208 XM
(nil)SH
12 /Times-Roman AF
(. The first item in the list may or may not)
47 W( be a special keyword \050e.g.,)46 W
11 /Courier AF
49140 XM
(:relative)SH
12 /Times-Roman AF
8280 29735 MT
(or)SH
11 /Courier AF
9803 XM
(:absolute)SH
12 /Times-Roman AF
(\051, with different keywords in different Lisps \050e.g., some substitute)224 W
11 /Courier AF
49856 XM
(:root)SH
12 /Times-Roman AF
53680 XM
(for)SH
10 SS 
14920 30912 MT
(13)SH
11 /Courier AF
8280 31293 MT
(:absolute)SH
12 /Times-Roman AF
(\051.)SH
/Times-Bold SF
8280 34977 MT
(5.3.1. Physical Host Types)SH
/Times-Roman SF
8280 37056 MT
(Since the syntax of a pathname depends on the type of physical)
89 W( host, and such pathnames may)90 W
10 SS 
21148 38233 MT
(14)SH
12 SS 
8280 38614 MT
(be used in)
25 W( the translations,)24 W
10 SS 
22472 XM
(LOGICAL-PATHNAMES)SH
12 SS 
33628 XM
(needs to be able to determine the type of the)24 W
8280 40172 MT
(physical host in order to translate)
228 W( a logical pathname. The function)229 W
11 /Courier AF
43200 XM
(physical-host-type)SH
12 /Times-Roman AF
8280 41730 MT
(provides a mechanism for determining the host type of a physical host.)SH
10800 50 8280 45269 UL
8 SS 
9280 46934 MT
(13)SH
10 SS 
10080 47279 MT
(This will be remedied somewhat by X3J13's)
114 W( June 1989 specification of the pathname component format for)113 W
8280 48384 MT
(structured directories [7, section 23.1.3]. However, current Lisps do not yet comply with this vote.)SH
8 SS 
9280 50249 MT
(14)SH
10 SS 
10080 50594 MT
(The X3J13 specification states that the to-wildnames used in the translations can be anything)
136 W( coercible to a)135 W
8280 51699 MT
(pathname by application of the function)36 W
11 /Courier AF
24716 XM
(pathname)SH
10 /Times-Roman AF
(. However, this really)
36 W( leaves open the question of whether the)37 W
8280 52804 MT
(to-wildnames must be written only in the)
180 W( syntax of the Lisp implementation's underlying operating system, or)179 W
8280 53909 MT
(whether the to-wildnames may be)
10 W( in the syntax of the target physical host. For example, if the following translations)11 W
8280 55014 MT
(are acceptable,)SH
/Courier-Bold SF
9480 56819 MT
(\050setf \050lp:physical-host-type "U"\051 :unix\051)SH
9480 57950 MT
(\050setf \050lp:physical-host-type "MY-LISPM"\051 :symbolics\051)SH
9480 59081 MT
(\050setf \050lp:logical-pathname-translations "prog"\051)SH
13080 60212 MT
('\050\050"RELEASED;*.*.*" "U:/sys/bin/my-prog/*.*.*"\051)1800 W
14280 61343 MT
(\050"EXPERIMENTAL;*.*.*" "MY-LISPM:>my-prog>*.*.*"\051\051\051)SH
/Times-Roman SF
8280 63160 MT
(then the Lisp implementation must be able to parse both UNIX and Symbolics pathnames. The second example)
67 W( in)66 W
8280 64265 MT
(Section 5.4 which is taken from)
45 W( [7])
SH( seems to indicate that this is the case. On the other hand, Steele's example of)
45 W( a)46 W
8280 65370 MT
(UNIX system that doesn't support)316 W
11 /Courier AF
23831 XM
(:wild-inferiors)SH
10 /Times-Roman AF
34297 XM
(would imply that the implementation)
316 W( of logical)315 W
8280 66475 MT
(pathnames is relying on the underlying operating system to handle the translation of wildcards,)
111 W( and therefore the)112 W
8280 67580 MT
(to-wildname must be acceptable to the underlying operating system.)SH
9280 69790 MT
(In any)
145 W( event, since the intent is for)144 W
8 SS 
24514 XM
(LOGICAL-PATHNAMES)SH
10 SS 
33577 XM
(to be portable, we parse several common pathname)144 W
8280 70895 MT
(syntax formats and rely on the underlying operating system as little as)
61 W( possible. As a result, we need a mechanism)62 W
8280 72000 MT
(for determining the host type of a physical host.)SH
ES
%%Page: 48 50
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(48)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
11 /Courier AF
6120 8023 MT
(physical-host-type)SH
12 /Times-Roman AF
18300 XM
(\050host\051)SH
47852 XM
([Function])SH
8520 9806 MT
(Returns a keyword that represents the host type of the physical host)SH
/Times-Italic SF
41258 XM
(host)SH
/Times-Roman SF
(.)SH
11 /Courier AF
6120 11698 MT
(\050setf physical-host-type\051)SH
12 /Times-Roman AF
22920 XM
(\050type\051)SH
45552 XM
([Setf Mapping])SH
8520 13481 MT
(Sets the host type of the physical host)SH
/Times-Italic SF
26925 XM
(host)SH
/Times-Roman SF
29226 XM
(to)SH
/Times-Italic SF
30460 XM
(type)SH
/Times-Roman SF
(.)SH
6120 16141 MT
(The function)157 W
11 /Courier AF
12901 XM
(load-physical-hostab)SH
12 /Times-Roman AF
26558 XM
(may be used to set the host types for)
157 W( a collection of)156 W
6120 17699 MT
(physical hosts from a namespace table. The physical host namespace table is)
148 W( compatible with)149 W
6120 19257 MT
(both VMS and Symbolics host tables. The host table consists)
24 W( of a series of lines, one per host, in)23 W
6120 20815 MT
(the following format:)SH
10 /Courier-Bold AF
7320 22620 MT
(HOST NAME,CHAOS-#,STATUS,SYSTEM-TYPE,MACHINE-TYPE,NICKNAMES)SH
12 /Times-Roman AF
6120 24574 MT
(Lines that don't begin with ")222 W
11 /Courier AF
(HOST)SH
12 /Times-Roman AF
(" are ignored.)222 W
11 /Courier AF
31674 XM
(NAME)SH
12 /Times-Roman AF
34836 XM
(and)SH
11 /Courier AF
37091 XM
(SYSTEM-TYPE)SH
12 /Times-Roman AF
44873 XM
(are required; all)223 W
6120 26132 MT
(others are optional \050but delimiting commas are still required\051.)309 W
11 /Courier AF
38776 XM
(SYSTEM-TYPE)SH
12 /Times-Roman AF
46644 XM
(specifies the)308 W
6120 27690 MT
(operating system run on the host. Common values are:)171 W
11 /Courier AF
34131 XM
(LISP)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
37542 XM
(LISPM)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
41613 XM
(UNIX)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
45024 XM
(MACH)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
48435 XM
(VMS)SH
12 /Times-Roman AF
(, and)172 W
11 /Courier AF
6120 29248 MT
(EXPLORER)SH
12 /Times-Roman AF
(.)SH
11 /Courier AF
6120 31140 MT
(local-host-table)SH
12 /Times-Roman AF
16980 XM
("nethosts.txt")SH
47852 XM
([Constant])SH
8520 32923 MT
(Default name of the local physical host namespace.)SH
11 /Courier AF
6120 34815 MT
(load-physical-hostab)SH
12 /Times-Roman AF
19620 XM
(\050&optional \050local-hostab local-host-table\051\051)SH
47852 XM
([Function])SH
8520 36598 MT
(Loads the physical host namespace table. Can parse VMS and Symbolics host table)SH
8520 37884 MT
(formats.)SH
6120 40544 MT
(If the Lisp implementation has a different mechanism for determining the host)
24 W( type of a physical)23 W
6120 42102 MT
(host, the user should substitute a different definition for)SH
11 /Courier AF
33128 XM
(physical-host-type)SH
12 /Times-Roman AF
(.)SH
/Times-Bold SF
6120 45786 MT
(5.3.2. Logical Pathname Translations)SH
/Times-Roman SF
6120 47865 MT
(The translations for a logical host are the main mechanism for)
80 W( transforming a logical pathname)81 W
6120 49423 MT
(into a physical pathname.)SH
6120 52083 MT
(A translation is a list consisting of a from-wildname and a to-wildname. The former is a)
64 W( logical)63 W
6120 53641 MT
(pathname whose host is understood)
81 W( to be the logical host of the translation \050i.e., the host of the)82 W
6120 55199 MT
(from-pathname need not be explicitly specified in)
20 W( the translation\051.  The latter is any pathname. If)19 W
6120 56757 MT
(the to-wildname is a)
166 W( logical pathname,)167 W
11 /Courier AF
26023 XM
(translate-logical-pathname)SH
12 /Times-Roman AF
43650 XM
(will retranslate the)167 W
6120 58315 MT
(result, repeatedly if necessary.)SH
6120 60975 MT
(The translations are stored in a list according to host,)
127 W( and may be retrieved using the function)126 W
11 /Courier AF
6120 62533 MT
(logical-pathname-translations)SH
12 /Times-Roman AF
29933 XM
(and set using)4373 W
11 /Courier AF
49620 XM
(\050setf)SH
6120 64091 MT
(logical-pathname-translations\051)SH
12 /Times-Roman AF
(. Since translations are searched)
325 W( in the order listed,)324 W
6120 65649 MT
(more specific from-wildnames must precede more general ones.)SH
11 /Courier AF
6120 67541 MT
(logical-pathname-translations)SH
12 /Times-Roman AF
25560 XM
(\050host\051)SH
47852 XM
([Function])SH
8520 69324 MT
(If)SH
/Times-Italic SF
9620 XM
(host)SH
/Times-Roman SF
11921 XM
(has been defined as a logical pathname host name by)SH
11 /Courier AF
37656 XM
(setf)SH
12 /Times-Roman AF
40596 XM
(of)SH
11 /Courier AF
8520 70610 MT
(logical-pathname-translations)SH
12 /Times-Roman AF
(, this function returns the list of translations for)SH
8520 71896 MT
(the specified host. Otherwise it signals an error.)SH
ES
%%Page: 49 51
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(LOGICAL-PATHNAMES)SH
10 SS 
(: Portable Pathnames)SH
/Times-Roman SF
54080 XM
(49)SH
11 /Courier AF
8280 8023 MT
(\050setf logical-pathname-translations\051)SH
12 /Times-Roman AF
32340 XM
(\050translations\051)SH
47712 XM
([Setf Mapping])SH
11 /Courier AF
10680 9806 MT
(\050setf \050logical-pathname-translations host\051)SH
/Times-Italic SF
39060 XM
(translations)SH
/Courier SF
(\051)SH
12 /Times-Roman AF
45278 XM
(sets the list of)SH
10680 11092 MT
(translations for the logical pathname host to)SH
/Times-Italic SF
32053 XM
(translations)SH
/Times-Roman SF
(. If)
300 W( host is a string that has not)SH
10680 12378 MT
(previously been used as a logical pathname host, a new logical pathname host is)SH
10680 13664 MT
(defined; otherwise an existing host's translations are replaced. Logical pathname host)SH
10680 14950 MT
(names are compared with string-equal.)SH
/Times-Bold SF
8280 18634 MT
(5.3.3. Loading Logical Pathname Translations)SH
/Times-Roman SF
8280 20713 MT
(Translations for a logical host may be)
1619 W( loaded using the function)1620 W
11 /Courier AF
8280 22271 MT
(load-logical-pathname-translations)SH
12 /Times-Roman AF
(. If)147 W
11 /Courier AF
32713 XM
(*logical-translations-directory*)SH
12 /Times-Roman AF
54279 XM
(is)SH
8280 23829 MT
(defined,)SH
11 /Courier AF
12702 XM
(load-logical-pathname-translations)SH
12 /Times-Roman AF
35664 XM
(will check for an appropriately named)223 W
8280 25387 MT
(translations file in that directory.)SH
11 /Courier AF
8280 27279 MT
(*logical-translations-directory*)SH
12 /Times-Roman AF
29700 XM
(\050\051)SH
50147 XM
([Variable])SH
10680 29062 MT
(Directory where logical pathname translations are stored.)SH
11 /Courier AF
8280 30954 MT
(load-logical-pathname-translations)SH
12 /Times-Roman AF
31020 XM
(\050host\051)SH
50012 XM
([Function])SH
10680 32737 MT
(Loads the logical pathname translations for host named)SH
/Times-Italic SF
37552 XM
(host)SH
/Times-Roman SF
39853 XM
(if the logical pathname)SH
10680 34023 MT
(translations are not already defined. First checks for a file with the same name as the)SH
10680 35309 MT
(host \050lowercase\051 and type ")SH
11 /Courier AF
(translations)SH
12 /Times-Roman AF
(" in the current directory, then the)SH
10680 36595 MT
(translations directory. If it finds such a file it loads it and returns)SH
11 /Courier AF
41890 XM
(t)SH
12 /Times-Roman AF
(, otherwise it signals)SH
10680 37881 MT
(an error.)SH
/Times-Bold SF
8280 41565 MT
(5.3.4. Additional Transformations)SH
/Times-Roman SF
8280 43644 MT
(The function)1106 W
11 /Courier AF
16959 XM
(translate-logical-pathname)SH
12 /Times-Roman AF
35524 XM
(may need to perform additional)1105 W
8280 45202 MT
(transformations on the pathnames, besides those specified by)
96 W( the translations. For example, the)97 W
8280 46760 MT
(file system may require that)
43 W( pathnames include only uppercase letters, that hyphens not be used,)42 W
8280 48318 MT
(or that filenames be of limited length. In addition, the user)
10 W( may want file types to be translated to)11 W
8280 49876 MT
(local naming conventions.)
23 W( These additional transformations are implemented by translation rules)22 W
8280 51434 MT
(and canonical types.)SH
/Times-Bold SF
8280 54398 MT
(5.3.4.1. Translation Rules)SH
/Times-Roman SF
8280 56477 MT
(Translation rules are used to change the case of)
226 W( a pathname, to substitute one character for)227 W
8280 58035 MT
(another, and to replace)
652 W( particular directory components and file names. The macro)651 W
11 /Courier AF
8280 59593 MT
(define-translation-rule)SH
12 /Times-Roman AF
23760 XM
(is used to define translation rules for a particular host.)SH
11 /Courier AF
8280 61485 MT
(define-translation-rule)SH
12 /Times-Roman AF
23760 XM
(\050host-type &key case char-mappings)SH
51147 XM
([Macro])SH
24360 62771 MT
(component-mappings version-case type-case)SH
24360 64057 MT
(name-case component-case\051)SH
10680 65840 MT
(Defines translation rules for hosts of type)SH
/Times-Italic SF
30851 XM
(host-type)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
36152 XM
(case)SH
/Times-Roman SF
38585 XM
(may be)SH
11 /Courier AF
42385 XM
(:unchanged)SH
12 /Times-Roman AF
10680 67126 MT
(\050unchanged\051,)SH
11 /Courier AF
17279 XM
(nil)SH
12 /Times-Roman AF
19559 XM
(\050use default case\051,)SH
11 /Courier AF
28559 XM
(:upper)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
33119 XM
(:lower)SH
12 /Times-Roman AF
(, or)SH
11 /Courier AF
38979 XM
(:capitalize)SH
12 /Times-Roman AF
(.)SH
/Times-Italic SF
10680 68412 MT
(char-mappings)SH
/Times-Roman SF
18247 XM
(is a list of character substitutions which occur in parallel.)SH
/Times-Italic SF
10680 69698 MT
(component-mappings)SH
/Times-Roman SF
21313 XM
(is a list of string substitutions.)SH
ES
%%Page: 50 52
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(50)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 /Times-Roman AF
6120 8023 MT
(For example, the following rule changes VMS)
399 W( pathnames into uppercase and substitutes)400 W
6120 9581 MT
(underscores for hyphens.)SH
10 /Courier-Bold AF
7320 11386 MT
(\050define-translation-rule :vms)SH
8520 12517 MT
(:case :upper)SH
8520 13648 MT
(:char-mappings \050\050#\134- #\134_\051\051\051)SH
12 /Times-Bold AF
6120 16612 MT
(5.3.4.2. Canonical Types)SH
/Times-Roman SF
6120 18691 MT
(Canonical types are used to translate surface forms according to local naming)
92 W( conventions. For)91 W
6120 20249 MT
(example, the filename extensions ")149 W
11 /Courier AF
(lsp)SH
12 /Times-Roman AF
(", ")149 W
11 /Courier AF
(lisp)SH
12 /Times-Roman AF
(" and ")149 W
11 /Courier AF
(l)SH
12 /Times-Roman AF
(" denote Lisp)
149 W( source files in different)150 W
6120 21807 MT
(Lisps. The)
300 W( canonical type)SH
11 /Courier AF
19054 XM
(:lisp)SH
12 /Times-Roman AF
22654 XM
(expresses the commonality among these surface forms.)SH
6120 24467 MT
(The)SH
11 /Courier AF
8469 XM
(define-canonical)SH
12 /Times-Roman AF
19512 XM
(macro may be used to define)
183 W( new canonical types.  The functions)182 W
11 /Courier AF
6120 26025 MT
(canonicalize)SH
12 /Times-Roman AF
14439 XM
(and)SH
11 /Courier AF
16571 XM
(surface-form)SH
12 /Times-Roman AF
24890 XM
(may be used to convert to and)
99 W( from canonical types. For)100 W
6120 27583 MT
(example, we may define)SH
11 /Courier AF
18153 XM
(:wild)SH
12 /Times-Roman AF
21753 XM
(as the canonical type for ")SH
11 /Courier AF
(*)SH
12 /Times-Roman AF
(" by evaluating)SH
10 /Courier-Bold AF
7320 29388 MT
(\050define-canonical name :wild "*"\051)SH
7320 30519 MT
(\050define-canonical type :wild "*"\051)SH
7320 31650 MT
(\050define-canonical version :wild "*"\051)SH
12 /Times-Roman AF
6120 33604 MT
(Then)SH
11 /Courier AF
8948 XM
(\050canonicalize "*" :unix 'type\051)62 W
12 /Times-Roman AF
29296 XM
(returns)SH
11 /Courier AF
32991 XM
(:wild)SH
12 /Times-Roman AF
(. Note that we must define it once)61 W
6120 35162 MT
(for each component of a pathname,)
55 W( whether pathname-type, pathname-version, pathname-name,)56 W
6120 36720 MT
(or component of a directory.)SH
11 /Courier AF
6120 38612 MT
(define-canonical)SH
12 /Times-Roman AF
16980 XM
(\050level canonical default &body specs\051)SH
48987 XM
([Macro])SH
8520 40395 MT
(Defines a new canonical type.)SH
/Times-Italic SF
23252 XM
(level)SH
/Times-Roman SF
25819 XM
(specifies whether it is a canonical)SH
11 /Courier AF
42288 XM
(type)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
45528 XM
(version)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
8520 41681 MT
(name)SH
12 /Times-Roman AF
(, or)SH
11 /Courier AF
13060 XM
(component)SH
12 /Times-Roman AF
(.)SH
/Times-Italic SF
19900 XM
(default)SH
/Times-Roman SF
23535 XM
(is a string containing the default surface type for any)SH
8520 42967 MT
(kind of host not mentioned explicitly. The body contains a list of specs that define the)SH
8520 44253 MT
(surface types that represent the new canonical type on each host. For systems with)SH
8520 45539 MT
(more than one possible default surface form, the form that appears first becomes the)SH
8520 46825 MT
(preferred form for the type.)SH
11 /Courier AF
6120 48717 MT
(surface-form)SH
12 /Times-Roman AF
14340 XM
(\050canonical host-type &optional \050level \050quote type\051\051\051)SH
47852 XM
([Function])SH
8520 50500 MT
(Given the canonical form of some canonical type, replaces it with the appropriate)SH
8520 51786 MT
(surface form.)SH
11 /Courier AF
6120 53678 MT
(canonicalize)SH
12 /Times-Roman AF
14340 XM
(\050surface-form host-type &optional \050level \050quote type\051\051\051)SH
47852 XM
([Function])SH
8520 55461 MT
(Given the surface form of some canonical type, replaces it with the appropriate)SH
8520 56747 MT
(canonical type.)SH
/Times-Bold SF
6120 60431 MT
(5.3.5. Using Logical Pathnames)SH
/Times-Roman SF
6120 62510 MT
(The)SH
10 SS 
8377 XM
(LOGICAL-PATHNAMES)SH
12 SS 
19600 XM
(system redefines several functions that)
91 W( use pathnames to first check)90 W
6120 64068 MT
(if the host is a logical host, and if so, apply the translations for the)
620 W( host using)621 W
11 /Courier AF
6120 65626 MT
(translate-logical-pathname)SH
12 /Times-Roman AF
(. The original function is then called on the)
441 W( translated)440 W
6120 67184 MT
(pathname. Accordingly, the user rarely has)
263 W( to manually translate a logical pathname to the)264 W
6120 68742 MT
(corresponding physical pathname, but may)
86 W( do so by calling)85 W
11 /Courier AF
35760 XM
(translate-logical-pathname)SH
12 /Times-Roman AF
6120 70300 MT
(directly.)SH
ES
%%Page: 51 53
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(LOGICAL-PATHNAMES)SH
10 SS 
(: Portable Pathnames)SH
/Times-Roman SF
54080 XM
(51)SH
11 /Courier AF
8280 8023 MT
(translate-logical-pathname)SH
12 /Times-Roman AF
25740 XM
(\050logical-pathname &optional)SH
50012 XM
([Function])SH
26340 9309 MT
(\050output-format *translation-output*\051\051)SH
10680 11092 MT
(Translates a logical pathname to the corresponding physical pathname.  The pathname)SH
10680 12378 MT
(argument is first coerced to a logical pathname, if possible. If the coerced argument is)SH
10680 13664 MT
(a logical pathname, the first matching translation \050according to)SH
11 /Courier AF
10680 14950 MT
(logical-pathname-match-p)SH
12 /Times-Roman AF
(\051 of the logical pathname host is applied. If the result)SH
10680 16236 MT
(is a physical pathname it is returned, otherwise this process is repeated until the result)SH
10680 17522 MT
(is finally a physical pathname. If no translation matches a logical pathname, or the)SH
10680 18808 MT
(resolution process loops, an error is signaled.)SH
11 /Courier AF
32951 XM
(translate-logical-pathname)SH
12 /Times-Roman AF
50411 XM
(may)SH
10680 20094 MT
(perform additional transformations, as specified by the translation rules and canonical)SH
10680 21380 MT
(types.)SH
11 /Courier AF
8280 23272 MT
(logical-pathname-match-p)SH
12 /Times-Roman AF
24420 XM
(\050logical-pathname from-pathname\051)SH
50012 XM
([Function])SH
10680 25055 MT
(Returns)SH
11 /Courier AF
14714 XM
(t)SH
12 /Times-Roman AF
15674 XM
(if the logical pathname matches the test pathname.)SH
/Times-Bold SF
8280 28739 MT
(5.3.6.)SH
10 SS 
11280 XM
(LOGICAL-PATHNAMES)SH
12 SS 
23025 XM
(Variables)SH
/Times-Roman SF
8280 30818 MT
(The variables in this section control the operation of)SH
10 SS 
33652 XM
(LOGICAL-PATHNAMES)SH
12 SS 
(.)SH
11 /Courier AF
8280 32710 MT
(*translation-output*)SH
12 /Times-Roman AF
21780 XM
(:namestring)SH
50147 XM
([Variable])SH
10680 34493 MT
(Specifies whether the output of translate-logical-pathname should be a namestring)SH
10680 35779 MT
(\050)SH
11 /Courier AF
(:namestring)SH
12 /Times-Roman AF
(\051, a pathname made with)SH
11 /Courier AF
30474 XM
(lisp:make-pathname)SH
12 /Times-Roman AF
42654 XM
(\050)SH
11 /Courier AF
(:pathname)SH
12 /Times-Roman AF
(\051, or as)SH
10680 37065 MT
(is \050)SH
11 /Courier AF
(:as-is)SH
12 /Times-Roman AF
(\051.)SH
11 /Courier AF
8280 38957 MT
(*warn-about-host-type-collisions*)SH
12 /Times-Roman AF
30360 XM
(t)SH
50147 XM
([Variable])SH
10680 40740 MT
(Warn user when a logical host type definition collides with a physical host type)SH
10680 42026 MT
(definition.)SH
14 /Times-Bold AF
8280 45844 MT
(5.4. Examples of Using)SH
12 SS 
22203 XM
(LOGICAL-PATHNAMES)SH
/Times-Roman SF
8280 48099 MT
(This section gives several examples of the use of)
137 W( logical pathnames.  They are taken from)
138 W( [7,)SH
8280 49657 MT
(section 23.1.5.4].)SH
8280 52317 MT
(The first example shows how to specify the root of the physical directory tree that corresponds)
8 W( to)7 W
8280 53875 MT
(the logical pathnames. Note that we have to declare the type of the physical host "MY-LISPM".)SH
10 /Courier-Bold AF
9480 55680 MT
(\050setf \050lp:physical-host-type "MY-LISPM"\051 :symbolics\051)SH
9480 56811 MT
(\050setf \050lp:logical-pathname-translations "foo"\051)SH
13080 57942 MT
('\050\050"**;*.*.*" "MY-LISPM:>library>foo>**>"\051\051\051)SH
12 /Times-Roman AF
8280 59896 MT
(When using a logical pathname, we can translate it with)SH
11 /Courier AF
35450 XM
(translate-logical-pathname)SH
12 /Times-Roman AF
(.)SH
10 /Courier-Bold AF
9480 61701 MT
(<cl> \050lp:translate-logical-pathname "foo:bar;baz;mum.quux.3" :namestring\051)SH
9480 62832 MT
("MY-LISPM:>library>foo>bar>baz>mum.quux.3")SH
12 /Times-Roman AF
8280 64786 MT
(Many of the functions that use pathnames, such as)40 W
11 /Courier AF
33110 XM
(load)SH
12 /Times-Roman AF
36091 XM
(or)SH
11 /Courier AF
37432 XM
(delete-file)SH
12 /Times-Roman AF
(, have been redefined)41 W
8280 66344 MT
(to use)20 W
11 /Courier AF
11454 XM
(translate-logical-pathname)SH
12 /Times-Roman AF
28933 XM
(if the host of the pathname is a logical host. Note how)19 W
11 /Courier AF
8280 67902 MT
(translate-logical-pathname)SH
12 /Times-Roman AF
26780 XM
(takes an)
1040 W( additional argument \050)1041 W
11 /Courier AF
(:namestring)SH
12 /Times-Roman AF
54080 XM
(or)SH
ES
%%Page: 52 54
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(52)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
/Times-Roman SF
43230 7886 MT
(15)SH
11 /Courier AF
6120 8267 MT
(:pathname)SH
12 /Times-Roman AF
(\051 to specify whether a namestring or actual pathname is returned.)SH
6120 10927 MT
(The next example illustrates splitting a)
46 W( logical host across two physical hosts and translating the)47 W
10 SS 
16468 12104 MT
(16)SH
12 SS 
6120 12485 MT
(type)SH
11 /Courier AF
8556 XM
(.MAIL)SH
12 /Times-Roman AF
12225 XM
(to)SH
11 /Courier AF
13528 XM
(.MBX)SH
12 /Times-Roman AF
(.)SH
17836 XM
(Since this UNIX file system doesn't support)68 W
11 /Courier AF
39883 XM
(:wild-inferiors)SH
12 /Times-Roman AF
50151 XM
(in the)68 W
10 SS 
40927 13662 MT
(17)SH
12 SS 
6120 14043 MT
(pathname directory, each directory level must be translated individually.)SH
10 /Courier-Bold AF
7320 15848 MT
(\050setf \050lp:physical-host-type "U"\051 :unix\051)SH
7320 16979 MT
(\050setf \050lp:physical-host-type "V"\051 :vms\051)SH
7320 18110 MT
(\050setf \050lp:logical-pathname-translations "prog"\051)SH
10920 19241 MT
('\050\050"RELEASED;*.*.*" "U:/sys/bin/my-prog/"\051)1800 W
12120 20372 MT
(\050"RELEASED;*;*.*.*" "U:/sys/bin/my-prog/*/"\051)600 W
12120 21503 MT
(\050"EXPERIMENTAL;*.*.*" "U:/usr/Joe/development/prog/"\051)SH
12120 22634 MT
(\050"EXPERIMENTAL;DOCUMENTATION;*.*.*" "V:SYS$DISK:[JOE.DOC]"\051)SH
12120 23765 MT
(\050"EXPERIMENTAL;*;*.*.*" "U:/usr/Joe/development/prog/*/"\051)SH
12120 24896 MT
(\050"MAIL;**;*.MAIL" "V:SYS$DISK:[JOE.MAIL.PROG...]*.MBX"\051\051\051)3600 W
12 /Times-Roman AF
6120 26850 MT
(Using these translations, we can obtain pathnames for either the UNIX or VMS physical hosts.)SH
10 /Courier-Bold AF
7320 28655 MT
(<cl> \050lp:translate-logical-pathname "prog:mail;save;ideas.mail.3")SH
10920 29786 MT
(:namestring\051)SH
7320 30917 MT
("V:SYS$DISK:[JOE.MAIL.PROG.SAVE]IDEAS.MBX.3")SH
7320 32048 MT
(<cl> \050lp:translate-logical-pathname "prog:experimental;spreadsheet.c")SH
10920 33179 MT
(:namestring\051)SH
7320 34310 MT
("U:/usr/Joe/development/prog/spreadsheet.c")SH
12 /Times-Roman AF
6120 36970 MT
(The last three examples demonstrate)
1 W( how logical pathnames may be used to shorten file names to)2 W
6120 38528 MT
(conform with a file system with limited-length file names.)SH
10 /Courier-Bold AF
7320 40333 MT
(\050setf \050lp:logical-pathname-translations "prog"\051)SH
10920 41464 MT
('\050\050"CODE;*.*.*" "/lib/prog/"\051\051\051)1800 W
7320 42595 MT
(<cl> \050lp:translate-logical-pathname "prog:code;documentation.lisp")SH
10920 43726 MT
(:namestring\051)SH
7320 44857 MT
("/lib/prog/documentation.lisp")SH
7320 47119 MT
(\050setf \050lp:logical-pathname-translations "prog"\051)SH
10920 48250 MT
('\050\050"CODE;DOCUMENTATION.*.*" "/lib/prog/docum.*"\051)1800 W
12120 49381 MT
(\050"CODE;*.*.*" "/lib/prog/"\051\051\051)1800 W
7320 50512 MT
(<cl> \050lp:translate-logical-pathname "prog:code;documentation.lisp")SH
10920 51643 MT
(:namestring\051)SH
7320 52774 MT
("/lib/prog/docum.lisp")SH
7320 55036 MT
(\050setf \050lp:logical-pathname-translations "prog"\051)SH
10920 56167 MT
(`\050\050"**;*.LISP.*" ,\050lp:logical-pathname)
600 W( "PROG:**;*.L.*"\051\051)SH
12120 57298 MT
(\050"**;*.FASL.*" ,\050lp:logical-pathname)
600 W( "PROG:**;*.B.*"\051\051)SH
10800 50 6120 60045 UL
8 /Times-Roman AF
7120 61710 MT
(15)SH
10 SS 
7920 62055 MT
(This is an extension to the X3J13 specification. When redefining functions that use pathnames,)
61 W( it was felt that)60 W
6120 63160 MT
(providing a translated namestring would be safer than providing an actual pathname.)SH
8 SS 
7120 65025 MT
(16)SH
10 SS 
7920 65370 MT
(The type translations could also be accomplished)
683 W( by defining)682 W
11 /Courier AF
38811 XM
(:mail)SH
10 /Times-Roman AF
43043 XM
(as a canonical type,)682 W
11 /Courier AF
6120 66475 MT
(\050define-canonical type :mail "MAIL" \050:vms "MBX"\051\051)52 W
10 /Times-Roman AF
(. This is an extension)
52 W( to the X3J13)53 W
6120 67580 MT
(specification.)SH
8 SS 
7120 69445 MT
(17)SH
10 SS 
7920 69790 MT
(This is not strictly true of the)289 W
8 SS 
21804 XM
(LOGICAL-PATHNAMES)SH
10 SS 
31012 XM
(system. Since)289 W
8 SS 
37340 XM
(LOGICAL-PATHNAMES)SH
10 SS 
46548 XM
(parses physical)290 W
6120 70895 MT
(pathnames into a canonical format and can print pathnames in the formats of several)
234 W( Lisps, it may translate)233 W
11 /Courier AF
6120 72000 MT
(:wild-inferiors)SH
10 /Times-Roman AF
16270 XM
(itself instead of relying on the filesystem. This is an extension to the X3J13 specification.)SH
ES
%%Page: 53 55
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(LOGICAL-PATHNAMES)SH
10 SS 
(: Portable Pathnames)SH
/Times-Roman SF
54080 XM
(53)SH
/Courier-Bold SF
14280 7874 MT
(\050"CODE;DOCUMENTATION.*.*" "/lib/prog/documentatio.*"\051)SH
14280 9005 MT
(\050"CODE;*.*.*" "/lib/prog/"\051\051\051)7200 W
9480 10136 MT
(<cl> \050lp:translate-logical-pathname "prog:code;documentation.lisp")SH
13080 11267 MT
(:namestring\051)SH
9480 12398 MT
("/lib/prog/documentatio.l")SH
14 /Times-Bold AF
8280 16216 MT
(5.5. Implementation Notes)SH
12 /Times-Roman AF
8280 18471 MT
(The)SH
10 SS 
10462 XM
(LOGICAL-PATHNAMES)SH
12 SS 
21610 XM
(system can be)
16 W( divided into two major pieces.  The first is parsing and)15 W
8280 20029 MT
(generating the syntax of various pathname formats, and the second is)
117 W( the translation algorithm)118 W
8280 21587 MT
(itself.)SH
8280 24247 MT
(The parsing of the various pathname formats is straightforward. All of the)
56 W( associated operations)55 W
8280 25805 MT
(involve breaking a string into two pieces)
168 W( around a character or string delimiter. The function)169 W
11 /Courier AF
8280 27363 MT
(parse-generic-namestring)SH
12 /Times-Roman AF
24522 XM
(extracts the host from the namestring and uses)
102 W( it to determine)101 W
8280 28921 MT
(the physical host type. Then)59 W
11 /Courier AF
22378 XM
(do-generic-pathname-parse)SH
12 /Times-Roman AF
39238 XM
(decides what parsing function to)60 W
8280 30479 MT
(call based on the host type. This)
556 W( is where one would add new pathname types to)555 W
10 SS 
8280 32037 MT
(LOGICAL-PATHNAMES)SH
12 SS 
(. Most types of physical host have a similar pathname structure and)
105 W( may)106 W
8280 33595 MT
(be parsed using)SH
11 /Courier AF
16047 XM
(parse-generic-pathname)SH
12 /Times-Roman AF
(.)SH
8280 36255 MT
(The function)900 W
11 /Courier AF
16546 XM
(physical-namestring)SH
12 /Times-Roman AF
30285 XM
(returns the appropriate surface form of a)899 W
11 /Courier AF
8280 37813 MT
(physical-pathname)SH
12 /Times-Roman AF
20350 XM
(\050the underlying)
550 W( structure that all pathnames are parsed into by)551 W
10 SS 
8280 39371 MT
(LOGICAL-PATHNAMES)SH
12 SS 
(\051 corresponding to its host type.)SH
8280 42031 MT
(The function)2921 W
11 /Courier AF
20589 XM
(translate-logical-pathname)SH
12 /Times-Roman AF
40970 XM
(calls the)
2921 W( function)2920 W
11 /Courier AF
8280 43589 MT
(resolve-logical-pathname)SH
12 /Times-Roman AF
24696 XM
(to translate the logical pathname into)
276 W( a physical pathname.)277 W
11 /Courier AF
8280 45147 MT
(resolve-logical-pathname)SH
12 /Times-Roman AF
24515 XM
(calls)SH
11 /Courier AF
27111 XM
(map-logical-pathname)SH
12 /Times-Roman AF
40706 XM
(to retrieve and)
95 W( apply a single)94 W
8280 46705 MT
(translation pair)
67 W( to the logical pathname. If the result is a physical pathname it is returned. If the)68 W
8280 48263 MT
(result is a logical pathname,)90 W
11 /Courier AF
22467 XM
(resolve-logical-pathname)SH
12 /Times-Roman AF
38697 XM
(calls itself)
90 W( recursively. A table of)89 W
8280 49821 MT
(previously seen logical pathnames,)128 W
11 /Courier AF
25895 XM
(*circularity-check-table*)SH
12 /Times-Roman AF
(, is)
128 W( maintained to prevent)129 W
8280 51379 MT
(infinite loops.)44 W
11 /Courier AF
15338 XM
(resolve-logical-pathname)SH
12 /Times-Roman AF
31521 XM
(calls)SH
11 /Courier AF
34065 XM
(check-logical-pathname)SH
12 /Times-Roman AF
48928 XM
(to check and)43 W
8280 52937 MT
(update this table, signalling an error if a logical pathname is repeated.)SH
8280 55597 MT
(The function)43 W
11 /Courier AF
14833 XM
(map-logical-pathname)SH
12 /Times-Roman AF
28376 XM
(iterates down the list of translation pairs for the logical)44 W
8280 57155 MT
(host, stopping with)
36 W( the first translation pair whose from-wildname matches the logical pathname)35 W
8280 58713 MT
(according to)1703 W
11 /Courier AF
17953 XM
(logical-pathname-match-p)SH
12 /Times-Roman AF
35796 XM
(and returning)
1703 W( the result of)1704 W
11 /Courier AF
8280 60271 MT
(translate-logical-pathname-aux)SH
12 /Times-Roman AF
28588 XM
(being called on the logical pathname)
208 W( and translation)207 W
8280 61829 MT
(pair.)SH
11 /Courier AF
11313 XM
(translate-logical-pathname-aux)SH
12 /Times-Roman AF
31979 XM
(uses the functions)566 W
11 /Courier AF
42580 XM
(map-directories)SH
12 /Times-Roman AF
53347 XM
(and)SH
11 /Courier AF
8280 63387 MT
(map-wildcard-word)SH
12 /Times-Roman AF
19800 XM
(to do the translation.)SH
11 /Courier AF
8280 66047 MT
(map-wildcard-word)SH
12 /Times-Roman AF
20198 XM
(calls)SH
11 /Courier AF
23097 XM
(map-strings)SH
12 /Times-Roman AF
31055 XM
(to transform individual strings.)398 W
11 /Courier AF
47820 XM
(map-strings)SH
12 /Times-Roman AF
8280 67605 MT
(translates a string from the source wild-string to the target wild-string. It assumes that)
49 W( wildcards)50 W
8280 69163 MT
(\050")SH
11 /Courier AF
(*)SH
12 /Times-Roman AF
("\051 in the source)
14 W( wild-string will correspond to wildcards in the target wild-string, and replaces)13 W
8280 70721 MT
(wildcards in the target pattern with the string's contents as specified by the corresponding)284 W
ES
%%Page: 54 56
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(54)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 /Times-Roman AF
6120 8023 MT
(wildcard in the source wild-string. Literal strings are copied as is from source wild-string)
197 W( to)196 W
6120 9581 MT
(target wild-string. When not enough)
25 W( matching wildcards are available due to too few asterisks in)26 W
6120 11139 MT
(the source wild-string,)
58 W( the null string is used as the matching value for any wildcards remaining)57 W
6120 12697 MT
(in the target wild-string. When the source wild-string has too many wildcards, the first)
185 W( extra)186 W
6120 14255 MT
(wildcard and everything following it are ignored. The operation)
203 W( of)202 W
11 /Courier AF
40384 XM
(map-directories)SH
12 /Times-Roman AF
50786 XM
(with)SH
6120 15813 MT
(respect to the)SH
11 /Courier AF
12821 XM
(:wild)SH
12 /Times-Roman AF
16421 XM
(and)SH
11 /Courier AF
18454 XM
(:wild-inferiors)SH
12 /Times-Roman AF
28654 XM
(wildcards is analogous.)SH
6120 18473 MT
(The function)SH
11 /Courier AF
12587 XM
(append-logical-directories)SH
12 /Times-Roman AF
30047 XM
(is provided to tack a subdirectory onto)
SH( a logical)1 W
6120 20031 MT
(pathname. It is used by the)SH
10 SS 
19289 XM
(DEFSYSTEM)SH
12 SS 
25423 XM
(program.)SH
ES
%%Page: 55 57
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(SOURCE-COMPARE)SH
10 SS 
(: A "diff" for Lisp)SH
/Times-Roman SF
54080 XM
(55)SH
16 /Times-Bold AF
8280 8272 MT
(6.)SH
14 SS 
9880 XM
(SOURCE-COMPARE)SH
16 SS 
(: A "diff" for Lisp)SH
12 /Times-Roman AF
8280 10703 MT
(The)SH
10 SS 
10540 XM
(SOURCE-COMPARE)SH
12 SS 
20046 XM
(system is a portable tool for comparing Lisp source files.)
94 W( While it may)93 W
8280 12261 MT
(be used to find the differences between arbitrary text files, it has several features customized)
44 W( for)45 W
8280 13819 MT
(Lisp, such as the ability to ignore Lisp comments. It uses)
8 W( a greedy algorithm for longest common)7 W
8280 15377 MT
(substring that may not necessarily find the longest common substring, but which runs in average)35 W
8280 16935 MT
(case linear time and works well in practice.)SH
14 /Times-Bold AF
8280 20753 MT
(6.1. Overview)SH
10 /Times-Roman AF
8280 23008 MT
(SOURCE-COMPARE)SH
12 SS 
17816 XM
(is a portable Common Lisp tool for comparing Lisp source files, similar)
124 W( in)123 W
8280 24566 MT
(functionality to the UNIX program "diff".  Like diff it can ignore case, whitespace, and blank)130 W
8280 26124 MT
(lines. In addition, it can also correctly ignore certain classes of Lisp comments. It)
10 W( uses a different)9 W
8280 27682 MT
(algorithm from diff, and runs in)
135 W( average-case O)
150 136 WX(\050)SH
/Times-Italic SF
(m)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(\051 time, where)136 W
/Times-Italic SF
41930 XM
(m)SH
/Times-Roman SF
43232 XM
(and)SH
/Times-Italic SF
45401 XM
(n)SH
/Times-Roman SF
46437 XM
(are the lengths in)136 W
8280 29240 MT
(lines of the files being compared.)SH
8280 31900 MT
(The algorithm is a greedy variation on the usual dynamic programming implementation)
125 W( of the)124 W
8280 33458 MT
(algorithm for finding the longest common substring of two strings. When)
104 W( comparing two files,)105 W
10 SS 
8280 35016 MT
(SOURCE-COMPARE)SH
12 SS 
17751 XM
(tries to maintain the two)
59 W( files in sync, and when a difference is encountered,)58 W
8280 36574 MT
(uses the closest next match, where distance is minimized)
41 W( according to some metric. Since this is)42 W
8280 38132 MT
(a greedy)
260 W( algorithm, it is possible that it will not find the optimum global match sequence.)259 W
8280 39690 MT
(However, the suboptimal case hardly ever occurs in practice, and when it does occur, it doesn't)71 W
8280 41248 MT
(make much of a difference for comparing different versions of source files.)SH
8280 43908 MT
(The metrics should be chosen so that minimizing distance is)
85 W( equivalent to minimizing the edits)84 W
8280 45466 MT
(necessary to bring the two files into agreement. Two such metrics include)SH
/Symbol SF
10428 47169 MT
(\267)SH
/Times-Roman SF
11280 XM
(x + y, the total length of additions and deletions from both files)SH
/Symbol SF
10428 49198 MT
(\267)SH
/Times-Roman SF
11280 XM
(max\050x,y\051, the length of the largest addition or deletion from either file)SH
8280 50764 MT
(where x is a line number from the first file and y is a line number from the second file.)
63 W( Both of)64 W
8280 52322 MT
(these metrics are appropriate to the problem,)
31 W( since the former tries to minimize the total changes)30 W
8280 53880 MT
(and the latter gives a preference to small changes.)SH
8280 56540 MT
(While neither metric actually builds the dynamic programming table, they)
76 W( can be considered as)77 W
8280 58098 MT
(exploring the table in successive rectilinear and diagonal)
161 W( layers, respectively. The metrics are)160 W
8280 59656 MT
(illustrated in Figure 6-1. Both metrics have been implemented.)SH
8280 62316 MT
(If the two files have no lines)
7 W( in common, we get a worst-case running time of O)
150 8 WX(\050)SH
/Times-Italic SF
(mn)SH
/Times-Roman SF
(\051, where m is)8 W
8280 63874 MT
(the length in lines of the first)
244 W( file and n the length in lines of the second file. In practice,)243 W
10 SS 
37589 65051 MT
(18)SH
12 SS 
8280 65432 MT
(however, the algorithm seems to always run)
126 W( in linear time.)127 W
39016 XM
(We show in Section 6.4 that the)127 W
8280 66990 MT
(algorithm has an average case running time of O)
150 267 WX(\050)SH
/Times-Italic SF
(m)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(\051. The diagonal metric seems)
267 W( to run)266 W
10800 50 8280 69990 UL
8 SS 
9280 71655 MT
(18)SH
10 SS 
10080 72000 MT
(Presumably because the files one compares tend to have many lines in common.)SH
ES
%%Page: 56 58
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(56)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 SS 
1 1 0 -1930 64900 GB 
%%BeginDocument: metrics.ps
%!PS-Adobe-2.0 EPSF-1.2
%%DocumentFonts: Courier
%%%Pages: 1
%%BoundingBox: 148 410 481 577
%%EndComments

50 dict begin

/arrowHeight 8 def
/arrowWidth 4 def
/none null def
/numGraphicParameters 17 def
/stringLimit 65535 def

/Begin {
save
numGraphicParameters dict begin
} def

/End {
end
restore
} def

/SetB {
dup type /nulltype eq {
pop
false /brushRightArrow idef
false /brushLeftArrow idef
true /brushNone idef
} {
/brushDashOffset idef
/brushDashArray idef
0 ne /brushRightArrow idef
0 ne /brushLeftArrow idef
/brushWidth idef
false /brushNone idef
} ifelse
} def

/SetCFg {
/fgblue idef
/fggreen idef
/fgred idef
} def

/SetCBg {
/bgblue idef
/bggreen idef
/bgred idef
} def

/SetF {
/printSize idef
/printFont idef
} def

/SetP {
dup type /nulltype eq {
pop true /patternNone idef
} {
/patternGrayLevel idef
patternGrayLevel -1 eq {
/patternString idef
} if
false /patternNone idef
} ifelse
} def

/BSpl {
0 begin
storexyn
newpath
n 1 gt {
0 0 0 0 0 0 1 1 true subspline
n 2 gt {
0 0 0 0 1 1 2 2 false subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 2 copy false subspline
} if
n 2 sub dup n 1 sub dup 2 copy 2 copy false subspline
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Circ {
newpath
0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
} def

/CBSpl {
0 begin
dup 2 gt {
storexyn
newpath
n 1 sub dup 0 0 1 1 2 2 true subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 0 0 false subspline
n 2 sub dup n 1 sub dup 0 0 1 1 false subspline
patternNone not { ifill } if
brushNone not { istroke } if
} {
Poly
} ifelse
end
} dup 0 4 dict put def

/Elli {
0 begin
newpath
4 2 roll
translate
scale
0 0 1 0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 1 dict put def

/Line {
0 begin
2 storexyn
newpath
x 0 get y 0 get moveto
x 1 get y 1 get lineto
brushNone not { istroke } if
0 0 1 1 leftarrow
0 0 1 1 rightarrow
end
} dup 0 4 dict put def

/MLine {
0 begin
storexyn
newpath
n 1 gt {
x 0 get y 0 get moveto
1 1 n 1 sub {
/i exch def
x i get y i get lineto
} for
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Poly {
3 1 roll
newpath
moveto
-1 add
{ lineto } repeat
closepath
patternNone not { ifill } if
brushNone not { istroke } if
} def

/Rect {
0 begin
/t exch def
/r exch def
/b exch def
/l exch def
newpath
l b moveto
l t lineto
r t lineto
r b lineto
closepath
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 4 dict put def

/Text {
ishow
} def

/idef {
dup where { pop pop pop } { exch def } ifelse
} def

/ifill {
0 begin
gsave
patternGrayLevel -1 ne {
fgred bgred fgred sub patternGrayLevel mul add
fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor
eofill
} {
eoclip
originalCTM setmatrix
pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def
/h t b sub ceiling cvi def
/imageByteWidth w 8 div ceiling cvi def
/imageHeight h def
bgred bggreen bgblue setrgbcolor
eofill
fgred fggreen fgblue setrgbcolor
w 0 gt h 0 gt and {
l b translate w h scale
w h true [w 0 0 h neg 0 h] { patternproc } imagemask
} if
} ifelse
grestore
end
} dup 0 8 dict put def

/istroke {
gsave
brushDashOffset -1 eq {
[] 0 setdash
1 setgray
} {
brushDashArray brushDashOffset setdash
fgred fggreen fgblue setrgbcolor
} ifelse
brushWidth setlinewidth
originalCTM setmatrix
stroke
grestore
} def

/ishow {
0 begin
gsave
fgred fggreen fgblue setrgbcolor
/fontDict printFont findfont printSize scalefont dup setfont def
/descender fontDict begin 0 [FontBBox] 1 get FontMatrix end
transform exch pop def
/vertoffset 0 descender sub printSize sub printFont /Courier ne
printFont /Courier-Bold ne and { 1 add } if def {
0 vertoffset moveto show
/vertoffset vertoffset printSize sub def
} forall
grestore
end
} dup 0 3 dict put def

/patternproc {
0 begin
/patternByteLength patternString length def
/patternHeight patternByteLength 8 mul sqrt cvi def
/patternWidth patternHeight def
/patternByteWidth patternWidth 8 idiv def
/imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def
/imageMaxHeight imageByteMaxLength imageByteWidth idiv patternHeight idiv
patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store
/imageString imageByteWidth imageMaxHeight mul patternByteWidth add string def
0 1 imageMaxHeight 1 sub {
/y exch def
/patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def
0 patternByteWidth imageByteWidth 1 sub {
/x exch def
imageString imageRow x add patternRowString putinterval
} for
} for
imageString
end
} dup 0 12 dict put def

/min {
dup 3 2 roll dup 4 3 roll lt { exch } if pop
} def

/max {
dup 3 2 roll dup 4 3 roll gt { exch } if pop
} def

/arrowhead {
0 begin
transform originalCTM itransform
/taily exch def
/tailx exch def
transform originalCTM itransform
/tipy exch def
/tipx exch def
/dy tipy taily sub def
/dx tipx tailx sub def
/angle dx 0 ne dy 0 ne or { dy dx atan } { 90 } ifelse def
gsave
originalCTM setmatrix
tipx tipy translate
angle rotate
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
patternNone not {
originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def
/padtail brushWidth 2 div def
tipx tipy translate
angle rotate
padtip 0 translate
arrowHeight padtip add padtail add arrowHeight div dup scale
arrowheadpath
ifill
} if
brushNone not {
originalCTM setmatrix
tipx tipy translate
angle rotate
arrowheadpath
istroke
} if
grestore
end
} dup 0 9 dict put def

/arrowheadpath {
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
} def

/leftarrow {
0 begin
y exch get /taily exch def
x exch get /tailx exch def
y exch get /tipy exch def
x exch get /tipx exch def
brushLeftArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/rightarrow {
0 begin
y exch get /tipy exch def
x exch get /tipx exch def
y exch get /taily exch def
x exch get /tailx exch def
brushRightArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/midpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 x1 add 2 div
y0 y1 add 2 div
end
} dup 0 4 dict put def

/thirdpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 2 mul x1 add 3 div
y0 2 mul y1 add 3 div
end
} dup 0 4 dict put def

/subspline {
0 begin
/movetoNeeded exch def
y exch get /y3 exch def
x exch get /x3 exch def
y exch get /y2 exch def
x exch get /x2 exch def
y exch get /y1 exch def
x exch get /x1 exch def
y exch get /y0 exch def
x exch get /x0 exch def
x1 y1 x2 y2 thirdpoint
/p1y exch def
/p1x exch def
x2 y2 x1 y1 thirdpoint
/p2y exch def
/p2x exch def
x1 y1 x0 y0 thirdpoint
p1x p1y midpoint
/p0y exch def
/p0x exch def
x2 y2 x3 y3 thirdpoint
p2x p2y midpoint
/p3y exch def
/p3x exch def
movetoNeeded { p0x p0y moveto } if
p1x p1y p2x p2y p3x p3y curveto
end
} dup 0 17 dict put def

/storexyn {
/n exch def
/y n array def
/x n array def
n 1 sub -1 0 {
/i exch def
y i 3 2 roll put
x i 3 2 roll put
} for
} def

%%EndProlog

%I Idraw 7 Grid 8 

%%%Page: 1 1

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.9 0 0 0.9 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t u

Begin %I Line
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 0 -1 1 0 -168 576 ] concat
%I
89 496 89 336 Line
End

Begin %I Line
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 88 142 ] concat
%I
89 496 89 336 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
107 345 107 380 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
71 380 98 380 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
71 389 107 389 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
115 345 115 389 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
71 398 115 398 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
71 372 89 372 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
71 363 80 363 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
98 345 98 372 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
89 345 89 363 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
80 345 80 354 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
124 345 124 398 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
133 345 133 407 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
142 345 142 416 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
151 345 151 425 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
160 345 160 434 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 133 ] concat
%I
169 354 169 451 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
177 345 177 451 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
186 345 186 460 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
71 407 124 407 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
71 416 133 416 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
71 425 142 425 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
71 434 151 434 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
71 442 160 442 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
71 451 169 451 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
71 460 177 460 Line
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-courier-medium-r-*-100-*
/Courier 10 SetF
%I t
[ 1 0 0 1 195 469 ] concat
%I
[
(minimizing max\(x,y\))
] Text
End

Begin %I Line
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 292 142 ] concat
%I
89 496 89 336 Line
End

Begin %I Line
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 0 -1 1 0 36 576 ] concat
%I
89 496 89 336 Line
End

Begin %I Line
%I b 65535
1 1 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
275 354 284 345 Line
End

Begin %I Line
%I b 65535
1 1 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
275 363 293 345 Line
End

Begin %I Line
%I b 65535
1 1 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
275 372 301 345 Line
End

Begin %I Line
%I b 65535
1 1 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
275 380 310 345 Line
End

Begin %I Line
%I b 65535
1 1 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
275 389 319 345 Line
End

Begin %I Line
%I b 65535
1 1 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
275 398 328 345 Line
End

Begin %I Line
%I b 65535
1 1 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
275 407 337 345 Line
End

Begin %I Line
%I b 65535
1 1 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
275 416 346 345 Line
End

Begin %I Line
%I b 65535
1 1 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
275 425 354 345 Line
End

Begin %I Line
%I b 65535
1 1 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
275 434 363 345 Line
End

Begin %I Line
%I b 65535
1 1 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
275 442 372 345 Line
End

Begin %I Line
%I b 65535
1 1 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
275 451 381 345 Line
End

Begin %I Line
%I b 65535
1 1 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 106 142 ] concat
%I
275 460 390 345 Line
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-courier-medium-r-*-100-*
/Courier 10 SetF
%I t
[ 1 0 0 1 399 468 ] concat
%I
[
(minimizing x + y)
] Text
End

End %I eop

End %I eop

showpage

%%Trailer

end

%%EndDocument
 GE /Times-Bold SF
21370 25792 MT
(Figure 6-1:)SH
/Times-Roman SF
27670 XM
(Two Greedy Metrics)SH
6120 27901 MT
(slightly faster and use less space than the rectilinear metric, so it has been made the default.)SH
14 /Times-Bold AF
6120 31719 MT
(6.2. Using)SH
12 SS 
12343 XM
(SOURCE-COMPARE)SH
/Times-Roman SF
6120 33974 MT
(This section describes all of the basic)190 W
10 SS 
25687 XM
(SOURCE-COMPARE)SH
12 SS 
35289 XM
(commands and)
190 W( the variables which)191 W
6120 35532 MT
(control their behavior.)SH
/Times-Bold SF
6120 39216 MT
(6.2.1. Comparing Files)SH
11 /Courier AF
6120 41295 MT
(source-compare)SH
12 /Times-Roman AF
15796 XM
(is the main function for)
136 W( comparing files. The variable)135 W
11 /Courier AF
43020 XM
(*greedy-metric*)SH
12 /Times-Roman AF
6120 42853 MT
(contains the name of the greedy metric used to calculate the closest next match.)SH
11 /Courier AF
6120 44745 MT
(source-compare)SH
12 /Times-Roman AF
15660 XM
(\050filename-1 filename-2 &key)SH
47852 XM
([Function])SH
16260 46031 MT
(\050output-stream *standard-output*\051)SH
16260 47317 MT
(\050ignore-case *ignore-case*\051)SH
16260 48603 MT
(\050ignore-whitespace *ignore-whitespace*\051)SH
16260 49889 MT
(\050ignore-comments *ignore-comments*\051)SH
16260 51175 MT
(\050ignore-blank-lines *ignore-blank-lines*\051)SH
16260 52461 MT
(\050print-context *print-context*\051)SH
16260 53747 MT
(\050print-fancy-header *print-fancy-header*\051\051)SH
8520 55530 MT
(Compares the contents of the two files, outputting a report of what lines must be)SH
8520 56816 MT
(changed to bring the files into agreement. The report is similar to that generated by)SH
8520 58102 MT
(`diff': Lines of the forms)SH
10 /Courier-Bold AF
10320 59907 MT
(n1 a n3,n4)SH
10320 61038 MT
(n1,n2 d n3)SH
10320 62169 MT
(n1,n2 c n3,n4)SH
12 /Times-Roman AF
8520 64123 MT
(\050where a is for)SH
/Times-Italic SF
15786 XM
(add)SH
/Times-Roman SF
(, d is for)SH
/Times-Italic SF
21887 XM
(delete)SH
/Times-Roman SF
(, and c is for)SH
/Times-Italic SF
31021 XM
(change)SH
/Times-Roman SF
(\051 are followed by the lines)SH
8520 65409 MT
(affected in the first \050left\051 file flagged by '<' then all the lines affected in the second)SH
8520 66695 MT
(\050right\051 file flagged by '>'. If)SH
/Times-Italic SF
22366 XM
(print-context)SH
/Times-Roman SF
28868 XM
(is)SH
11 /Courier AF
29969 XM
(t)SH
12 /Times-Roman AF
(, will print out some additional)SH
8520 67981 MT
(contextual information, such as additional lines before and after the affected text and)SH
8520 69267 MT
(the definition most likely to be affected by the changes. If)SH
/Times-Italic SF
36592 XM
(print-fancy-header)SH
/Times-Roman SF
45960 XM
(is)SH
11 /Courier AF
47061 XM
(t)SH
12 /Times-Roman AF
(,)SH
8520 70553 MT
(prints the)SH
11 /Courier AF
13322 XM
(file-author)SH
12 /Times-Roman AF
20882 XM
(and)SH
11 /Courier AF
22915 XM
(file-write-date)SH
12 /Times-Roman AF
33115 XM
(in the header. The report is output)SH
8520 71839 MT
(to)SH
/Times-Italic SF
9754 XM
(output-stream)SH
/Times-Roman SF
(. Returns)SH
11 /Courier AF
21123 XM
(t)SH
12 /Times-Roman AF
22083 XM
(if the files were "identical",)SH
11 /Courier AF
35599 XM
(nil)SH
12 /Times-Roman AF
37879 XM
(otherwise. If)300 W
/Times-Italic SF
44546 XM
(ignore-case)SH
ES
%%Page: 57 59
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(SOURCE-COMPARE)SH
10 SS 
(: A "diff" for Lisp)SH
/Times-Roman SF
54080 XM
(57)SH
12 SS 
10680 8023 MT
(is)SH
11 /Courier AF
11781 XM
(t)SH
12 /Times-Roman AF
(, uses a case insensitive comparison.  If)SH
/Times-Italic SF
31644 XM
(ignore-whitespace)SH
/Times-Roman SF
40812 XM
(is)SH
11 /Courier AF
41913 XM
(t)SH
12 /Times-Roman AF
(, ignores spaces and)SH
10680 9309 MT
(tabs that occur at the beginning of the line. If)SH
/Times-Italic SF
32584 XM
(ignore-comments)SH
/Times-Roman SF
41217 XM
(is)SH
11 /Courier AF
42318 XM
(t)SH
12 /Times-Roman AF
(, tries to ignore)SH
10680 10595 MT
(comments at the end of the line. If)SH
11 /Courier AF
27450 XM
(*dont-ignore-major-comments*)SH
12 /Times-Roman AF
46230 XM
(is)SH
11 /Courier AF
47331 XM
(t)SH
12 /Times-Roman AF
(, will)SH
10680 11881 MT
(also ignore major comments \050comments with a semicolon as the first character of the)SH
10680 13167 MT
(line\051. If)SH
/Times-Italic SF
14581 XM
(ignore-blank-lines)SH
/Times-Roman SF
23750 XM
(is)SH
11 /Courier AF
24851 XM
(t)SH
12 /Times-Roman AF
(, will ignore blank lines in both files, including lines)SH
10680 14453 MT
(that are effectively blank because of ignored comments.)SH
11 /Courier AF
8280 16345 MT
(*greedy-metric*)SH
12 /Times-Roman AF
18480 XM
(\050quote find-next-diagonal-match\051)SH
50147 XM
([Variable])SH
10680 18128 MT
(Variable containing the name of the greedy matching function used to minimize)SH
10680 19414 MT
(distance to the next match:)SH
/Symbol SF
12828 21117 MT
(\267)SH
11 /Courier AF
13680 XM
(find-next-rectilinear-match)SH
12 /Times-Roman AF
31800 XM
(minimizes)SH
11 /Courier AF
37103 XM
(max\050x,y\051)SH
12 /Symbol AF
12828 23146 MT
(\267)SH
11 /Courier AF
13680 XM
(find-next-diagonal-match)SH
12 /Times-Roman AF
29820 XM
(minimizes)SH
11 /Courier AF
35123 XM
(x+y)SH
12 /Times-Roman AF
10680 24712 MT
(where x is a line number from the first file and y is a line number from the second file.)SH
11 /Courier AF
8280 26604 MT
(find-next-diagonal-match)SH
12 /Times-Roman AF
24420 XM
(\050file-1 start-1 file-2 start-2\051)SH
50012 XM
([Function])SH
10680 28387 MT
(First difference detected, look ahead for a match [x+y version].)SH
11 /Courier AF
8280 30279 MT
(find-next-rectilinear-match)SH
12 /Times-Roman AF
26400 XM
(\050file-1 start-1 file-2 start-2\051)SH
50012 XM
([Function])SH
10680 32062 MT
(First difference detected, look ahead for a match [max\050x,y\051 version].)SH
/Times-Bold SF
8280 35746 MT
(6.2.2.)SH
10 SS 
11280 XM
(SOURCE-COMPARE)SH
12 SS 
21246 XM
(Variables)SH
/Times-Roman SF
8280 37825 MT
(The following four variables control the appearance)
47 W( of the report on the differences between the)48 W
8280 39383 MT
(files.)SH
11 /Courier AF
8280 41275 MT
(*print-context*)SH
12 /Times-Roman AF
18480 XM
(t)SH
50147 XM
([Variable])SH
10680 43058 MT
(If)SH
11 /Courier AF
11780 XM
(t)SH
12 /Times-Roman AF
(, we print the context marking lines that occur before the difference.)SH
11 /Courier AF
8280 44950 MT
(*print-fancy-header*)SH
12 /Times-Roman AF
21780 XM
(\050\051)SH
50147 XM
([Variable])SH
10680 46733 MT
(If)SH
11 /Courier AF
11780 XM
(t)SH
12 /Times-Roman AF
(, prints a fancy header instead of the simple one.)SH
11 /Courier AF
8280 48625 MT
(*context-lines-before-difference*)SH
12 /Times-Roman AF
30360 XM
(0)SH
50147 XM
([Variable])SH
10680 50408 MT
(Number of lines of context to print before a difference.)SH
11 /Courier AF
8280 52300 MT
(*context-lines-after-difference*)SH
12 /Times-Roman AF
29700 XM
(1)SH
50147 XM
([Variable])SH
10680 54083 MT
(Number of lines of context to print after a difference.)SH
8280 56743 MT
(The next variable controls whether small changes close together are merged into a larger group.)SH
11 /Courier AF
8280 58635 MT
(*minimum-match-length*)SH
12 /Times-Roman AF
23100 XM
(2)SH
50147 XM
([Variable])SH
10680 60418 MT
(The minimum number of lines that must match for it to be considered a match. This)SH
10680 61704 MT
(has the effect of collecting lots of adjacent small differences together into one larger)SH
10680 62990 MT
(difference.)SH
8280 65650 MT
(The next five variables control sensitivity to whitespace, case, blank lines, and comments.)SH
11 /Courier AF
8280 67542 MT
(*ignore-whitespace*)SH
12 /Times-Roman AF
21120 XM
(t)SH
50147 XM
([Variable])SH
10680 69325 MT
(If)SH
11 /Courier AF
11780 XM
(t)SH
12 /Times-Roman AF
(, will ignore spaces and tabs that occur at the beginning of the line before other text)SH
10680 70611 MT
(appears and at the end of the line after the last text has appeared.)SH
ES
%%Page: 58 60
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(58)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
11 /Courier AF
6120 8023 MT
(*ignore-case*)SH
12 /Times-Roman AF
15000 XM
(t)SH
47987 XM
([Variable])SH
8520 9806 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(, uses a case insensitive comparison. Otherwise uses a case sensitive comparison.)SH
11 /Courier AF
6120 11698 MT
(*ignore-blank-lines*)SH
12 /Times-Roman AF
19620 XM
(t)SH
47987 XM
([Variable])SH
8520 13481 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(, will ignore blank lines when doing the comparison.)SH
11 /Courier AF
6120 15373 MT
(*ignore-comments*)SH
12 /Times-Roman AF
17640 XM
(t)SH
47987 XM
([Variable])SH
8520 17156 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(, will try to ignore comments of the semicolon variety when comparing lines. Tries)SH
8520 18442 MT
(to be rather intelligent about the context to avoid ignoring something that really isn't a)SH
8520 19728 MT
(comment. For example, semicolons appearing within strings, even multi-line strings,)SH
8520 21014 MT
(are not considered comment characters. Uses the following heuristics to decide if a)SH
8520 22300 MT
(semicolon is a comment character or not:)SH
/Symbol SF
10668 24003 MT
(\267)SH
/Times-Roman SF
11520 XM
(Slashification \050\134\051 works inside strings \050"foo\134"bar"\051 and symbol names)SH
11520 25289 MT
(\050|foo\134|bar|\051, but not balanced comments \050#|foobar\134|#\051.)SH
/Symbol SF
10668 27318 MT
(\267)SH
/Times-Roman SF
11520 XM
(Balanced comments do not work inside strings \050"#|"\051 or symbol names.)SH
/Symbol SF
10668 29347 MT
(\267)SH
/Times-Roman SF
11520 XM
(Strings do not work inside balanced comments \050#|"|#\051)SH
/Symbol SF
10668 31376 MT
(\267)SH
/Times-Roman SF
11520 XM
(Regular semicolon comments do not work inside strings, symbol names, or)SH
11520 32662 MT
(balanced comments \050#|foo;bar|#\051.)SH
8520 34228 MT
(All this is necessary for it to correctly identify when a semicolon indicates the)SH
8520 35514 MT
(beginning of a comment. Conceivably we should consider a semicolon as a comment)SH
8520 36800 MT
(when it is inside a balanced comment which isn't terminated from the semicolon to the)SH
8520 38086 MT
(end of the line. However, besides being complicated and time-consuming to)SH
8520 39372 MT
(implement, the Lisp interpreter doesn't treat it this way, and we like to err on the side)SH
8520 40658 MT
(of caution. Anyway, changes in the comments within commented out regions of code)SH
8520 41944 MT
(is worth knowing about.)SH
11 /Courier AF
6120 43836 MT
(*dont-ignore-major-comments*)SH
12 /Times-Roman AF
24900 XM
(\050\051)SH
47987 XM
([Variable])SH
8520 45619 MT
(If)SH
11 /Courier AF
9620 XM
(t)SH
12 /Times-Roman AF
(, ignoring comments does not ignore comments with a semicolon as the first)SH
8520 46905 MT
(character of the line.)SH
14 /Times-Bold AF
6120 50723 MT
(6.3. Example of Using)SH
12 SS 
19498 XM
(SOURCE-COMPARE)SH
10 /Times-Roman AF
6120 52978 MT
(SOURCE-COMPARE)SH
12 SS 
15973 XM
(is loaded into the "SOURCE-COMPARE" package, so we prefix)
441 W( the)440 W
6120 54536 MT
(functions and variables with a "SOURCE-COMPARE:" or the nickname "SC:".)SH
6120 57196 MT
(The following example shows what the output of the source comparison program looks like.)SH
9 /Courier-Bold AF
7200 58841 MT
(<cl> \050SC:source-compare "~/old/glinda.lisp" "glinda.lisp" :ignore-comments t\051)SH
7200 60917 MT
(===========================================================================)SH
7200 61955 MT
(Source compare of)SH
9900 62993 MT
(~/old/glinda.lisp)SH
9900 64031 MT
(\050written by mkant, FRI 20-JUL-90 11:59:05\051)SH
8280 65069 MT
(with)SH
9900 66107 MT
(glinda.lisp)SH
9900 67145 MT
(\050written by mkant, THU 15-NOV-90 15:53:44\051)SH
7200 68183 MT
(===========================================================================)SH
7200 69221 MT
(46c46)SH
7200 70259 MT
(**** File ~/old/glinda.lisp, After "\050defvar *glinda-version* nil\051")SH
7200 71297 MT
(< \050setq *glinda-version*  "6/19/90"\051)SH
ES
%%Page: 59 61
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(SOURCE-COMPARE)SH
10 SS 
(: A "diff" for Lisp)SH
/Times-Roman SF
54080 XM
(59)SH
9 /Courier-Bold AF
9360 7807 MT
(< \050format t "~%Using Glinda Generation, Generator Version ~A." *glinda-version*\051)SH
9360 8845 MT
(---)SH
9360 9883 MT
(**** File glinda.lisp, After "\050defvar *glinda-version* nil\051")SH
9360 10921 MT
(> \050setq *glinda-version*  "11/13/90"\051)SH
9360 11959 MT
(> \050format t "~%Using Glinda Generation, Generator Version ~A." *glinda-version*\051)SH
9360 12997 MT
(===========================================================================)SH
9360 14035 MT
(550c550)SH
9360 15073 MT
(**** File ~/old/glinda.lisp, After "\050defun constraint-match \050cvalue gvalue\051")SH
9360 16111 MT
(< \050\050or)
3240 W( \050symbolp cvalue\051 \050numberp cvalue\051\051)SH
9360 17149 MT
(< \050ontological-supertypep)
3780 W( cvalue gvalue\051\051)SH
9360 18187 MT
(---)SH
9360 19225 MT
(**** File glinda.lisp, After "\050defun constraint-match \050cvalue gvalue\051")SH
9360 20263 MT
(> \050\050or)
3240 W( \050symbolp cvalue\051 \050stringp cvalue\051\050numberp cvalue\051\051)SH
9360 21301 MT
(> \050ontological-supertypep)
3780 W( cvalue gvalue\051\051)SH
9360 22339 MT
(===========================================================================)SH
9360 23377 MT
(562a563,567)SH
9360 24415 MT
(**** File ~/old/glinda.lisp, After "\050defun constraint-match \050cvalue gvalue\051")SH
9360 25453 MT
(< \050defun find-organization \050head type features &optional group\051)SH
9360 26491 MT
(---)SH
9360 27529 MT
(**** File glinda.lisp, After "\050defun constraint-match \050cvalue gvalue\051")SH
9360 28567 MT
(> \050defvar *which-rule-to-choose* :random ; &new11/13/90)SH
9360 29605 MT
(> "If)
1080 W( find-rule returns more than one rule, specifies which rule we use.)SH
9360 30643 MT
(> :first)
1620 W( --)
1080 W( just take the first rule.)SH
9360 31681 MT
(> :random)
1620 W( --)
540 W( pick a rule at random."\051)SH
9360 32719 MT
(>)SH
9360 33757 MT
(> \050defun find-organization \050head type features &optional group\051 ; &mod11/13/90)SH
9360 34795 MT
(===========================================================================)SH
9360 35833 MT
(565c570,580)SH
9360 36871 MT
(**** File ~/old/glinda.lisp, After "\050defun find-organization \050head type features &op)SH
9360 37909 MT
(< \050car)
2160 W( \050find-rule \050lexical-organization category type\051 features group\051\051\051\051)SH
9360 38947 MT
(<)SH
9360 39985 MT
(---)SH
9360 41023 MT
(**** File glinda.lisp, After "\050defun find-organization \050head type features &optional)SH
9360 42061 MT
(> \050let)
2160 W( \050\050rules \050find-rule \050lexical-organization category type\051)SH
9360 43099 MT
(> features)
14040 W( group\051\051\051)SH
9360 44137 MT
(> \050case)
3240 W( *which-rule-to-choose*)SH
9360 45175 MT
(> \050:first)
3240 W( \050car)
540 W( rules\051\051)SH
9360 46213 MT
(> \050:random)
3240 W( \050choose-random rules\051\051\051\051\051\051)SH
9360 47251 MT
(>)SH
9360 48289 MT
(> \050defun choose-random \050list\051 ; &new11/13/90)SH
9360 49327 MT
(> "Chooses)
1080 W( a random element of the list.")SH
9360 50365 MT
(> \050if)
1080 W( \050null \050cdr list\051\051)SH
9360 51403 MT
(> \050car)
3240 W( list\051)SH
9360 52441 MT
(> \050nth)
2160 W( \050random \050length list\051\051 list\051\051\051)SH
9360 53479 MT
(>)SH
9360 54517 MT
(===========================================================================)SH
9360 55555 MT
(Done.)SH
14 /Times-Bold AF
8280 59373 MT
(6.4. Proof of Average Case Linear Running Time)SH
12 /Times-Roman AF
8280 61628 MT
(We prove that)SH
10 SS 
15380 XM
(SOURCE-COMPARE)SH
12 SS 
24792 XM
(runs in average case linear time.)SH
8280 64288 MT
(Let)SH
/Times-Italic SF
10225 XM
(a)SH
/Times-Roman SF
11448 XM
(and)SH
/Times-Italic SF
13526 XM
(b)SH
/Times-Roman SF
14749 XM
(be the)45 W
/Times-Italic SF
18039 XM
(i)SH
/Times-Roman SF
(th distances between matches)
45 W( in files A and B, respectively. Let)46 W
/Times-Italic SF
49846 XM
(k)SH
/Times-Roman SF
(, 1)150 W
/Symbol SF
51879 XM
(\243)SH
/Times-Italic SF
52688 XM
(k)SH
/Symbol SF
53371 XM
(\243)SH
/Times-Italic SF
54180 XM
(n)SH
/Times-Roman SF
(,)SH
10 /Times-Italic AF
10825 64669 MT
(i)SH
14126 XM
(i)SH
8 SS 
25285 65437 MT
(k)SH
32988 XM
(k)SH
12 /Times-Roman AF
8280 65999 MT
(be the number of matches. Then)28 W
/Times-Italic SF
26508 XM
(a)SH
/Times-Roman SF
27686 XM
(=)SH
/Times-Italic SF
28663 XM
(m)SH
/Times-Roman SF
29857 XM
(and)SH
/Times-Italic SF
34211 XM
(b)SH
/Times-Roman SF
35389 XM
(=)SH
/Times-Italic SF
36366 XM
(n)SH
/Times-Roman SF
(, where)28 W
/Times-Italic SF
40853 XM
(m)SH
/Times-Roman SF
42046 XM
(is the length in lines of file)27 W
15 /Symbol AF
24215 66119 MT
(\345)SH
31918 XM
(\345)SH
8 /Times-Italic AF
25285 66361 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
32988 XM
(i)SH
/Times-Roman SF
(=1)SH
10 /Times-Italic AF
27108 66380 MT
(i)SH
34811 XM
(i)SH
12 /Times-Roman AF
8280 67557 MT
(A and)38 W
/Times-Italic SF
11555 XM
(n)SH
/Times-Roman SF
12493 XM
(is the corresponding length)
38 W( for file B. The running time of the algorithm is proportional)39 W
8 /Times-Italic AF
10584 68553 MT
(k)SH
12 /Times-Roman AF
8280 69115 MT
(to)SH
/Times-Italic SF
11807 XM
(a)SH
12685 XM
(b)SH
/Times-Roman SF
13563 XM
(.)SH
15 /Symbol AF
9514 69235 MT
(\345)SH
8 /Times-Italic AF
10584 69477 MT
(i)SH
/Times-Roman SF
(=1)SH
10 /Times-Italic AF
12407 69496 MT
(i)SH
13285 XM
(i)SH
12 /Times-Roman AF
8280 71775 MT
(Since)SH
/Times-Italic SF
11247 XM
(a)SH
/Times-Roman SF
12425 XM
(and)SH
/Times-Italic SF
14458 XM
(b)SH
/Times-Roman SF
15636 XM
(are positive integers, it follows that)SH
10 /Times-Italic AF
11847 72156 MT
(i)SH
15058 XM
(i)SH
ES
%%Page: 60 62
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(60)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
8 /Times-Italic AF
8913 7749 MT
(k)SH
13519 XM
(k)SH
15688 XM
(k)SH
12 SS 
9811 8895 MT
(a)SH
10689 XM
(b)SH
/Symbol SF
12017 XM
(\243)SH
/Times-Italic SF
14417 XM
(a)SH
16586 XM
(b)SH
/Times-Roman SF
17764 XM
(=)SH
/Times-Italic SF
18741 XM
(m)
150 MX(n)SH
16 /Symbol AF
8520 9204 MT
(\345)SH
13126 XM
(\345)SH
15295 XM
(\345)SH
10 /Times-Italic AF
10411 9276 MT
(i)SH
11289 XM
(i)SH
15017 XM
(i)SH
17186 XM
(i)SH
8 SS 
8554 9998 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
13160 XM
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
15329 XM
(i)SH
/Times-Roman SF
(=1)SH
12 SS 
6120 11147 MT
(and hence)
75 W( the worst-case running time is O)
150 74 WX(\050)SH
/Times-Italic SF
(mn)SH
/Times-Roman SF
(\051. But the worst-case running time is atypical of)74 W
6120 12705 MT
(the average-case behavior. As we shall show, the average-case running time is O)
150 0 WX(\050)SH
/Times-Italic SF
(m)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(\051.)SH
10 SS 
27223 14984 MT
(19)SH
12 SS 
6120 15365 MT
(Combining the Cauchy-Schwartz inequality)SH
3469 50 13185 16526 UL
3469 50 17613 16526 UL
10 SS 
16154 17475 MT
(2)SH
20582 XM
(2)SH
12 /Times-Italic AF
9811 17856 MT
(a)SH
10689 XM
(b)SH
/Symbol SF
11717 XM
(\243)SH
-2 SI
12526 XM
(\326)SH
0 SI
/Times-Roman SF
14476 XM
(\050)SH
/Times-Italic SF
(a)SH
/Times-Roman SF
15754 XM
(\051)SH
-2 SI
/Symbol SF
16954 XM
(\326)SH
0 SI
/Times-Roman SF
18904 XM
(\050)SH
/Times-Italic SF
(b)SH
/Times-Roman SF
20182 XM
(\051)SH
16 /Symbol AF
8520 18165 MT
(\345)SH
13185 XM
(\345)SH
17613 XM
(\345)SH
10 /Times-Italic AF
10411 18237 MT
(i)SH
11289 XM
(i)SH
15476 XM
(i)SH
19904 XM
(i)SH
8 SS 
8979 18959 MT
(i)SH
13644 XM
(i)SH
18072 XM
(i)SH
12 /Times-Roman AF
6120 20108 MT
(with the arithmetic-mean geometric-mean inequality)SH
1366 50 9179 21513 UL
/Times-Italic SF
11804 21891 MT
(x)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(y)SH
1743 50 11804 22354 UL
-2 SI
/Symbol SF
8520 22599 MT
(\326)SH
0 SI
/Times-Italic SF
(x)SH
/Symbol SF
(\327)SH
/Times-Italic SF
(y)SH
/Symbol SF
10845 XM
(\243)SH
/Times-Roman SF
12375 23440 MT
(2)SH
6120 25223 MT
(yields)SH
10 SS 
15795 26869 MT
(2)SH
20241 XM
(2)SH
12 SS 
14117 27250 MT
(\050)SH
/Times-Italic SF
(a)SH
/Times-Roman SF
15395 XM
(\051)SH
16595 XM
(+ \050)991 W
/Times-Italic SF
(b)SH
/Times-Roman SF
19841 XM
(\051)SH
16 /Symbol AF
12826 27559 MT
(\345)SH
17272 XM
(\345)SH
10 /Times-Italic AF
15117 27631 MT
(i)SH
19563 XM
(i)SH
8 SS 
13285 28353 MT
(i)SH
17731 XM
(i)SH
7915 50 12826 28728 UL
12 SS 
9811 28973 MT
(a)SH
10689 XM
(b)SH
/Symbol SF
11867 XM
(\243)SH
16 SS 
8520 29282 MT
(\345)SH
10 /Times-Italic AF
10411 29354 MT
(i)SH
11289 XM
(i)SH
12 /Times-Roman AF
16483 29814 MT
(2)SH
8 /Times-Italic AF
8979 30076 MT
(i)SH
29726 31912 MT
(k)SH
10 /Times-Roman AF
32494 32093 MT
(2)SH
12 SS 
6120 32474 MT
(So it suffices to consider the average value)
41 W( of)40 W
30949 XM
(\050)SH
/Times-Italic SF
(r)SH
/Times-Roman SF
32094 XM
(\051)SH
33334 XM
(over all possible ordered sequences)40 W
/Times-Italic SF
50835 XM
(r)SH
/Times-Roman SF
51920 XM
(of)SH
15 /Symbol AF
28656 32594 MT
(\345)SH
8 /Times-Italic AF
29726 32836 MT
(i)SH
/Times-Roman SF
(=1)SH
10 /Times-Italic AF
31816 32855 MT
(i)SH
51302 XM
(i)SH
8 SS 
26739 33623 MT
(k)SH
12 /Times-Roman AF
6120 34185 MT
(positive integers for)62 W
/Times-Italic SF
16209 XM
(k)SH
/Times-Roman SF
16892 XM
(=)
150 MX(1 to)63 W
/Times-Italic SF
19979 XM
(n)SH
/Times-Roman SF
20942 XM
(such that)63 W
/Times-Italic SF
27962 XM
(r)SH
/Times-Roman SF
28857 XM
(=)SH
/Times-Italic SF
29684 XM
(n)SH
/Times-Roman SF
(. Such a sequence is called a composition of)63 W
/Times-Italic SF
52320 XM
(n)SH
15 /Symbol AF
25669 34305 MT
(\345)SH
8 /Times-Italic AF
26739 34547 MT
(i)SH
/Times-Roman SF
(=1)SH
10 /Times-Italic AF
28429 34566 MT
(i)SH
/Times-Roman SF
15591 35471 MT
(20)SH
12 SS 
6120 35852 MT
(into)SH
/Times-Italic SF
8288 XM
(k)SH
/Times-Roman SF
9121 XM
(distinct parts.)SH
6120 38512 MT
(To compute this average we sum the squares of the parts)
27 W( of the compositions of)28 W
/Times-Italic SF
45102 XM
(n)SH
/Times-Roman SF
(, and divide by)28 W
8 /Times-Italic AF
49804 39725 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
12 SS 
6120 40070 MT
(the total number of such compositions. We)
55 W( shall show that the former is equal to \0503)54 W
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(4\0512)SH
51343 XM
(+ 2)SH
10 /Symbol AF
38364 41247 MT
(-)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(2\051)SH
8 /Times-Italic AF
14522 41283 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
12 SS 
6120 41628 MT
(and the latter to 2)SH
15761 XM
(, and hence that the average is equal to 3)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(4+2)SH
41128 XM
(.)SH
6120 44288 MT
(The number of occurrences of part)151 W
/Times-Italic SF
23958 XM
(i)SH
/Times-Roman SF
24743 XM
(in the)151 W
/Times-Italic SF
28047 XM
(k)SH
/Times-Roman SF
(-compositions of)152 W
/Times-Italic SF
37287 XM
(n)SH
/Times-Roman SF
38339 XM
(is the same as the number of)152 W
6120 45846 MT
(\050)SH
/Times-Italic SF
(k)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1\051-compositions of)72 W
/Times-Italic SF
17259 XM
(n)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
19224 XM
(multiplied by)72 W
/Times-Italic SF
26105 XM
(k)SH
/Times-Roman SF
(, the number of positions in which)71 W
/Times-Italic SF
43872 XM
(i)SH
/Times-Roman SF
44577 XM
(could be inserted)71 W
8 /Times-Italic AF
34623 47059 MT
(n)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
12 SS 
6120 47404 MT
(to form a)133 W
/Times-Italic SF
11220 XM
(k)SH
/Times-Roman SF
(-composition of)133 W
/Times-Italic SF
19955 XM
(n)SH
/Times-Roman SF
(. To see that the former)
133 W( is)134 W
37056 XM
(, consider)134 W
/Times-Italic SF
42291 XM
(n)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
44318 XM
(dots separated by)134 W
16 SS 
34090 47624 MT
(\050)SH
36523 XM
(\051)SH
8 /Times-Italic AF
34976 47783 MT
(k)SH
/Symbol SF
(-)SH
/Times-Roman SF
(2)SH
/Times-Italic SF
50487 48996 MT
(n)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
12 SS 
6120 49341 MT
(\050)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
(\051)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1 spaces, and choose \050)333 W
/Times-Italic SF
(k)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1\051)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1 of them to form)332 W
/Times-Italic SF
34483 XM
(k)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1 integers. This gives us)332 W
/Times-Italic SF
49271 XM
(k)SH
16 /Times-Roman AF
49954 49561 MT
(\050)SH
52387 XM
(\051)SH
8 /Times-Italic AF
50840 49720 MT
(k)SH
/Symbol SF
(-)SH
/Times-Roman SF
(2)SH
12 SS 
6120 51278 MT
(occurrences of)SH
/Times-Italic SF
13452 XM
(i)SH
/Times-Roman SF
14086 XM
(in the)SH
/Times-Italic SF
17087 XM
(k)SH
/Times-Roman SF
(-compositions of)SH
/Times-Italic SF
26023 XM
(n)SH
/Times-Roman SF
(.)SH
8 /Times-Italic AF
13284 53376 MT
(n)SH
15877 XM
(n)SH
17584 53593 MT
(k)SH
18806 XM
(n)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
28810 XM
(n)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
36405 XM
(n)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(2)SH
/Times-Italic SF
40948 XM
(n)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
12 SS 
6120 53938 MT
(Thus)SH
/Times-Italic SF
8820 XM
(f)SH
/Times-Roman SF
9304 XM
(\050)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(\051=)SH
/Times-Italic SF
17100 XM
(i)SH
17939 XM
(j)SH
/Times-Roman SF
21239 XM
(. Substituting)SH
/Times-Italic SF
27943 XM
(j)SH
/Times-Roman SF
31393 XM
(=)
150 MX(\050)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1\051)SH
38988 XM
(+)
150 MX(2)SH
43681 XM
(yields)SH
15 /Symbol AF
12214 54058 MT
(\345)SH
14807 XM
(\345)SH
16 /Times-Roman AF
18273 54158 MT
(\050)SH
20706 XM
(\051)SH
28277 XM
(\050)SH
30710 XM
(\051)SH
35872 XM
(\050)SH
38305 XM
(\051)SH
40415 XM
(\050)SH
42848 XM
(\051)SH
8 /Times-Italic AF
13284 54300 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
15877 XM
(j)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
19225 54317 MT
(j)SH
/Symbol SF
(-)SH
/Times-Roman SF
(2)SH
/Times-Italic SF
29229 XM
(j)SH
/Symbol SF
(-)SH
/Times-Roman SF
(2)SH
/Times-Italic SF
36824 XM
(j)SH
/Symbol SF
(-)SH
/Times-Roman SF
(3)SH
/Times-Italic SF
41367 XM
(j)SH
/Symbol SF
(-)SH
/Times-Roman SF
(2)SH
10800 50 6120 57420 UL
6 /Symbol AF
22970 59047 MT
(\256)SH
25872 XM
(\256)SH
27148 XM
(\256)SH
27990 XM
(\256)SH
29846 XM
(\256)SH
31388 XM
(\256)SH
36083 XM
(\256)SH
37625 XM
(\256)SH
47769 XM
(\256)SH
50673 XM
(\256)SH
8 /Times-Roman AF
7120 59085 MT
(19)SH
10 SS 
7920 59430 MT
(One sentence proof: Given vectors)183 W
/Times-Italic SF
22970 XM
(a)SH
/Times-Roman SF
23995 XM
(and)SH
/Times-Italic SF
25872 XM
(b)SH
/Times-Roman SF
26464 XM
(,)SH
/Times-Italic SF
27148 XM
(a)SH
/Symbol SF
27740 XM
(\327)SH
/Times-Italic SF
(b)SH
/Times-Roman SF
28732 XM
(=)SH
/Symbol SF
29446 XM
(||)SH
/Times-Italic SF
(a)SH
/Symbol SF
30438 XM
(||)
150 MX(||)SH
/Times-Italic SF
(b)SH
/Symbol SF
31980 XM
(||)SH
/Times-Roman SF
32530 XM
(cos)SH
/Symbol SF
34013 XM
(q \243 ||)50 W
/Times-Italic SF
(a)SH
/Symbol SF
36675 XM
(||)
150 MX(||)SH
/Times-Italic SF
(b)SH
/Symbol SF
38217 XM
(||)SH
/Times-Roman SF
(, with equality when)184 W
/Times-Italic SF
47769 XM
(a)SH
/Times-Roman SF
48795 XM
(and)SH
/Times-Italic SF
50673 XM
(b)SH
/Times-Roman SF
51699 XM
(are)SH
6120 60535 MT
(parallel \050cos)SH
/Symbol SF
11185 XM
(q)SH
/Times-Roman SF
11856 XM
(=)
150 MX(1\051.)SH
8 SS 
7120 62400 MT
(20)SH
10 SS 
7920 62745 MT
(The word distinct here signifies that permutations of a sequence are not)
130 W( considered identical -- the cells are)129 W
6120 63850 MT
(distinct. A composition of n is an)73 W
/Times-Italic SF
20187 XM
(ordered)SH
/Times-Roman SF
23676 XM
(sequence of)
73 W( positive integers whose sum is equal to n. The elements of)74 W
6120 64955 MT
(the sequence are called parts. A composition with exactly k parts is called a k-composition. For)
59 W( example, there are)58 W
6120 66060 MT
(sixteen compositions of 5:)SH
8870 67580 MT
(\0505\051)SH
8870 68685 MT
(\0501,4\051 \0504,1\051 \0503,2\051 \0502,3\051)SH
8870 69790 MT
(\0501,1,3\051 \0501,3,1\051 \0503,1,1\051 \0501,2,2\051 \0502,1,2\051 \0502,2,1\051)SH
8870 70895 MT
(\0501,1,1,2\051 \0501,1,2,1\051 \0501,2,1,1\051 \0502,1,1,1\051)SH
8870 72000 MT
(\0501,1,1,1,1\051)SH
ES
%%Page: 61 63
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(SOURCE-COMPARE)SH
10 SS 
(: A "diff" for Lisp)SH
/Times-Roman SF
54080 XM
(61)SH
8 /Times-Italic AF
14374 7749 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(2)SH
/Times-Italic SF
25001 XM
(n)SH
16547 8550 MT
(k)SH
21454 XM
(n)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(2)SH
/Times-Italic SF
26706 XM
(k)SH
27811 XM
(n)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
12 SS 
10680 8895 MT
(f)SH
/Times-Roman SF
11164 XM
(\050)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
(k)SH
/Times-Roman SF
(\051)
150 MX(=)SH
/Times-Italic SF
16063 XM
(i)SH
/Times-Roman SF
17052 XM
(\050)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1\051)
150 MX(2)SH
23654 XM
(+)SH
/Times-Italic SF
26222 XM
(i)SH
/Times-Roman SF
27211 XM
(2)SH
16 /Symbol AF
14423 9204 MT
(\345)SH
24631 XM
(\345)SH
8 /Times-Italic AF
14457 9998 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
24665 XM
(i)SH
/Times-Roman SF
(=1)SH
12 SS 
8280 11147 MT
(.)SH
8280 13807 MT
(For)SH
/Times-Italic SF
10247 XM
(k)SH
/Times-Roman SF
(=2, substituting using)SH
/Times-Italic SF
21462 XM
(j)SH
/Times-Roman SF
(=)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(+1)SH
/Symbol SF
(-)SH
/Times-Italic SF
(i)SH
/Times-Roman SF
25643 XM
(and using the identities)SH
8 /Times-Italic AF
11050 15316 MT
(n)SH
12571 16117 MT
(i)SH
14670 XM
(n)SH
/Times-Roman SF
(+1)SH
12 SS 
11971 16462 MT
(2)SH
13093 XM
(= 2)SH
/Symbol SF
16071 XM
(-)SH
/Times-Roman SF
16880 XM
(2)SH
16 /Symbol AF
10680 16771 MT
(\345)SH
8 /Times-Italic AF
10714 17565 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
11050 18440 MT
(n)SH
13055 19241 MT
(i)SH
17963 XM
(n)SH
/Times-Roman SF
(+1)SH
12 /Times-Italic AF
11971 19586 MT
(i)SH
/Times-Roman SF
12455 XM
(2)SH
13577 XM
(= \050)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1\051)
150 MX(2)SH
19364 XM
(+)
150 MX(2)SH
16 /Symbol AF
10680 19895 MT
(\345)SH
8 /Times-Italic AF
10714 20689 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
11050 21564 MT
(n)SH
/Times-Roman SF
12305 22365 MT
(2)SH
/Times-Italic SF
13455 XM
(i)SH
/Times-Roman SF
15954 XM
(2)SH
/Times-Italic SF
20640 XM
(n)SH
/Times-Roman SF
(+1)SH
12 /Times-Italic AF
11971 22710 MT
(i)SH
/Times-Roman SF
12855 XM
(2)SH
13977 XM
(= \050)SH
/Times-Italic SF
(n)SH
/Symbol SF
16354 XM
(-)SH
/Times-Roman SF
(2)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(+3\051)
150 MX(2)SH
/Symbol SF
22041 XM
(-)SH
/Times-Roman SF
22850 XM
(6)SH
16 /Symbol AF
10680 23019 MT
(\345)SH
8 /Times-Italic AF
10714 23813 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
11050 24688 MT
(n)SH
/Times-Roman SF
12305 25489 MT
(3)SH
/Times-Italic SF
13455 XM
(i)SH
/Times-Roman SF
15954 XM
(3)SH
18213 XM
(2)SH
/Times-Italic SF
23499 XM
(n)SH
/Times-Roman SF
(+1)SH
12 /Times-Italic AF
11971 25834 MT
(i)SH
/Times-Roman SF
12855 XM
(2)SH
13977 XM
(= \050)SH
/Times-Italic SF
(n)SH
/Symbol SF
16354 XM
(-)SH
/Times-Roman SF
(3)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
18613 XM
(+9)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(13\051)
150 MX(2)SH
24900 XM
(+)
150 MX(26)SH
16 /Symbol AF
10680 26143 MT
(\345)SH
8 /Times-Italic AF
10714 26937 MT
(i)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
15307 27812 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
12 SS 
8280 28157 MT
(yields \0503)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(4\0512)SH
16846 XM
(+ 2 as desired.)SH
8 /Times-Italic AF
22605 30472 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
12 SS 
8280 30817 MT
(Note that since there are)365 W
/Times-Italic SF
25043 XM
(k)SH
/Times-Roman SF
(-compositions of)366 W
/Times-Italic SF
34711 XM
(n)SH
/Times-Roman SF
(, the total number of compositions is)366 W
16 SS 
22072 31037 MT
(\050)SH
23844 XM
(\051)SH
8 /Times-Italic AF
22627 31196 MT
(k)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
9350 32192 MT
(n)SH
11239 32409 MT
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
/Times-Italic SF
14588 XM
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
12 SS 
13161 32754 MT
(=)
150 MX(2)SH
15827 XM
(.)SH
15 /Symbol AF
8280 32874 MT
(\345)SH
16 /Times-Roman AF
10706 32974 MT
(\050)SH
12478 XM
(\051)SH
8 /Times-Italic AF
9350 33116 MT
(k)SH
/Times-Roman SF
(=1)SH
/Times-Italic SF
11261 33133 MT
(k)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1)SH
12 SS 
8280 35793 MT
(Thus the average value of the sum of the squares of the parts of the compositions of)23 W
/Times-Italic SF
49176 XM
(n)SH
/Times-Roman SF
50099 XM
(is equal to)23 W
10 /Symbol AF
12016 36970 MT
(-)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(2\051)SH
12 SS 
8280 37351 MT
(3)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(4+2)SH
14780 XM
(. Thus)SH
10 SS 
17955 38997 MT
(2)SH
22401 XM
(2)SH
12 SS 
16277 39378 MT
(\050)SH
/Times-Italic SF
(a)SH
/Times-Roman SF
17555 XM
(\051)SH
18755 XM
(+ \050)991 W
/Times-Italic SF
(b)SH
/Times-Roman SF
22001 XM
(\051)SH
16 /Symbol AF
14986 39687 MT
(\345)SH
19432 XM
(\345)SH
10 /Times-Italic AF
17277 39759 MT
(i)SH
21723 XM
(i)SH
12 /Times-Roman AF
23878 40393 MT
(3)
150 MX(\050)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
25778 XM
(+)SH
/Times-Italic SF
26605 XM
(m)SH
/Times-Roman SF
(\051)SH
8 /Times-Italic AF
15445 40481 MT
(i)SH
19891 XM
(i)SH
10 /Symbol AF
31007 40720 MT
(-)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(n)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1\051)SH
/Symbol SF
35048 XM
(-)SH
/Times-Roman SF
(\050)SH
/Times-Italic SF
(m)SH
/Symbol SF
(-)SH
/Times-Roman SF
(1\051)SH
7915 50 14986 40856 UL
3993 50 23878 40856 UL
12 /Times-Italic AF
11971 41101 MT
(a)SH
12849 XM
(b)SH
/Symbol SF
14027 XM
(\243)SH
/Times-Roman SF
23051 XM
(=)SH
/Symbol SF
28021 XM
(-)SH
/Times-Roman SF
28830 XM
(4)
150 MX(+)
150 MX(2)SH
33771 XM
(+2)SH
16 /Symbol AF
10680 41410 MT
(\345)SH
10 /Times-Italic AF
12571 41482 MT
(i)SH
13449 XM
(i)SH
12 /Times-Roman AF
18643 41942 MT
(2)SH
25574 XM
(2)SH
8 /Times-Italic AF
11139 42204 MT
(i)SH
12 /Times-Roman AF
8280 43725 MT
(on average, and hence the average case running time is O)
150 0 WX(\050)SH
/Times-Italic SF
(m)SH
/Times-Roman SF
(+)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
(\051.)SH
14 /Times-Bold AF
8280 47543 MT
(6.5. Implementation Notes)SH
10 /Times-Roman AF
8280 49798 MT
(SOURCE-COMPARE)SH
12 SS 
17713 XM
(has four major pieces: line comparison,)
21 W( the outer iteration loop that keeps the)22 W
8280 51356 MT
(files in sync, the inner iteration loops that find the next match, and the report generator.)SH
/Times-Bold SF
8280 54320 MT
(6.5.0.1. Line Comparison)SH
/Times-Roman SF
8280 56399 MT
(The function)46 W
11 /Courier AF
14839 XM
(compare-lines)SH
12 /Times-Roman AF
23765 XM
(is used to compare a)
46 W( line from each file. It uses)45 W
11 /Courier AF
47201 XM
(line-start)SH
12 /Times-Roman AF
54146 XM
(to)SH
8280 57957 MT
(find the positions in each line where it should begin comparing)
42 W( them, and)43 W
11 /Courier AF
44436 XM
(line-end)SH
12 /Times-Roman AF
50059 XM
(to find the)43 W
8280 59515 MT
(positions where it should stop)
762 W( comparing them.)761 W
11 /Courier AF
36684 XM
(line-start)SH
12 /Times-Roman AF
44345 XM
(and)SH
11 /Courier AF
47139 XM
(line-end)SH
12 /Times-Roman AF
53480 XM
(use)SH
11 /Courier AF
8280 61073 MT
(first-non-whitespace-char)SH
12 /Times-Roman AF
25132 XM
(to find the position in the line)
52 W( where the whitespace ends and)53 W
8280 62631 MT
(begins, respectively.)135 W
11 /Courier AF
18685 XM
(line-end)SH
12 /Times-Roman AF
24400 XM
(calls)SH
11 /Courier AF
27036 XM
(get-comment-position)SH
12 /Times-Roman AF
40671 XM
(to find)
135 W( the comment position)134 W
8280 64189 MT
(for the current line,)
382 W( if any, given the cached position information for the previous line.)383 W
11 /Courier AF
8280 65747 MT
(get-comment-position)SH
12 /Times-Roman AF
21814 XM
(calls)SH
11 /Courier AF
24349 XM
(find-comment-position)SH
12 /Times-Roman AF
38543 XM
(to actually determine where)
34 W( in the)33 W
8280 67305 MT
(line the comment begins, if at all.)SH
ES
%%Page: 62 64
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(62)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
11 /Courier AF
6120 8023 MT
(compare-lines)SH
12 /Times-Roman AF
15000 XM
(\050file-1 line-no-1 file-2 line-no-2\051)SH
47852 XM
([Function])SH
8520 9806 MT
(Intelligently compare two lines. If)SH
11 /Courier AF
25191 XM
(*ignore-case*)SH
12 /Times-Roman AF
34071 XM
(is)SH
11 /Courier AF
35172 XM
(t)SH
12 /Times-Roman AF
(, uses case-insensitive)SH
8520 11092 MT
(comparison. If)SH
11 /Courier AF
15821 XM
(*ignore-whitespace*)SH
12 /Times-Roman AF
28661 XM
(is)SH
11 /Courier AF
29762 XM
(t)SH
12 /Times-Roman AF
(, ignores spaces and tabs at the beginning)SH
8520 12378 MT
(of the line. If)SH
11 /Courier AF
15088 XM
(*ignore-comments*)SH
12 /Times-Roman AF
26608 XM
(is)SH
11 /Courier AF
27709 XM
(t)SH
12 /Times-Roman AF
(, tries to ignore comments at the end of the)SH
8520 13664 MT
(line.)SH
11 /Courier AF
6120 15556 MT
(line-end)SH
12 /Times-Roman AF
11700 XM
(\050line file line-no &optional \050start 0\051 end\051)SH
47852 XM
([Function])SH
8520 17339 MT
(Returns the position of where in)SH
/Times-Italic SF
24256 XM
(line)SH
/Times-Roman SF
26357 XM
(to end the comparison.  If the comparison should)SH
8520 18625 MT
(end at the end of the line, returns)SH
11 /Courier AF
24622 XM
(nil)SH
12 /Times-Roman AF
(.)SH
/Times-Italic SF
27502 XM
(start)SH
/Times-Roman SF
(, if supplied, is where to start looking for)SH
8520 19911 MT
(the end.)SH
11 /Courier AF
6120 21803 MT
(line-start)SH
12 /Times-Roman AF
13020 XM
(\050line &optional \050start 0\051\051)SH
47852 XM
([Function])SH
8520 23586 MT
(Returns the position of where in)SH
/Times-Italic SF
24256 XM
(line)SH
/Times-Roman SF
26357 XM
(to start the comparison.)SH
11 /Courier AF
6120 25478 MT
(first-non-whitespace-char)SH
12 /Times-Roman AF
22920 XM
(\050line &key from-end \050start 0\051 end\051)SH
47852 XM
([Function])SH
8520 27261 MT
(Finds the position of the first character of)SH
/Times-Italic SF
28725 XM
(line)SH
/Times-Roman SF
30826 XM
(which is neither a space or a tab.)SH
8520 28547 MT
(Returns)SH
11 /Courier AF
12554 XM
(nil)SH
12 /Times-Roman AF
14834 XM
(if no character found.)SH
11 /Courier AF
6120 30439 MT
(get-comment-position)SH
12 /Times-Roman AF
19620 XM
(\050line file line-no &optional \050start 0\051 end\051)SH
47852 XM
([Function])SH
8520 32222 MT
(Returns the position of the beginning of the semicolon variety comment on this line.)SH
6120 34882 MT
(The function)180 W
11 /Courier AF
12947 XM
(find-comment-position)SH
12 /Times-Roman AF
27287 XM
(has been carefully)
180 W( constructed to return the correct)181 W
6120 36440 MT
(position of the comment)
239 W( character, despite the many interactions of slashification, delimited)238 W
6120 37998 MT
(strings, delimited symbol names, balanced comments, and regular comments. For example,)
193 W( a)194 W
6120 39556 MT
(semicolon appearing inside)
86 W( a documentation string should not be counted as the beginning of a)85 W
6120 41114 MT
(comment. As another example, a slashified semicolon should not count as a)
42 W( comment unless the)43 W
6120 42672 MT
(slash is itself slashified.)SH
11 /Courier AF
6120 44564 MT
(find-comment-position)SH
12 /Times-Roman AF
20280 XM
(\050line &optional \050start 0\051 end &key)SH
47852 XM
([Function])SH
20880 45850 MT
(inside-string \050splat-bar-count 0\051\051)SH
8520 47633 MT
(Tries to find the position of the beginning of the comment at the end of)SH
/Times-Italic SF
42961 XM
(line)SH
/Times-Roman SF
(, if there is)SH
8520 48919 MT
(one.)SH
/Times-Italic SF
10853 XM
(start)SH
/Times-Roman SF
13355 XM
(and)SH
/Times-Italic SF
15388 XM
(end)SH
/Times-Roman SF
17421 XM
(delimit the search.)SH
/Times-Italic SF
26857 XM
(end)SH
/Times-Roman SF
28890 XM
(defaults to the end of the line. If)SH
/Times-Italic SF
8520 50205 MT
(inside-string)SH
/Times-Roman SF
14890 XM
(is non-nil, it is assumed that we're inside a string before we began \050if so,)SH
/Times-Italic SF
8520 51491 MT
(inside-string)SH
/Times-Roman SF
14890 XM
(is set to the character which will terminate the string \050)SH
11 /Courier AF
(#\134")SH
12 /Times-Roman AF
43043 XM
(or)SH
11 /Courier AF
44343 XM
(#\134|)SH
12 /Times-Roman AF
(\051.)SH
/Times-Italic SF
8520 52777 MT
(splat-bar-count)SH
/Times-Roman SF
16289 XM
(is the number of unbalanced begin balanced comments \050)SH
11 /Courier AF
(#|)SH
12 /Times-Roman AF
(\051 that have)SH
8520 54063 MT
(been seen so far.)SH
/Times-Bold SF
6120 57027 MT
(6.5.0.2. Outer Iteration Loop)SH
/Times-Roman SF
6120 59106 MT
(The function)31 W
11 /Courier AF
12649 XM
(source-compare-internal)SH
12 /Times-Roman AF
28160 XM
(maintains indices into both files, always)
31 W( positioned)30 W
6120 60664 MT
(so that they correspond to a match. If the next pair of lines are a mismatch, it calls the)
103 W( current)104 W
6120 62222 MT
(metric \050)122 W
11 /Courier AF
(*greedy-metric*)SH
12 /Times-Roman AF
(\051 to find the indices of the lines where the files)
122 W( match up again. It)121 W
6120 63780 MT
(then generates a report for)
288 W( the mismatch using)289 W
11 /Courier AF
30965 XM
(print-differences)SH
12 /Times-Roman AF
(, and continues from)289 W
6120 65338 MT
(where they match until it reaches the end of the files.)SH
ES
%%Page: 63 65
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(SOURCE-COMPARE)SH
10 SS 
(: A "diff" for Lisp)SH
/Times-Roman SF
54080 XM
(63)SH
12 /Times-Bold AF
8280 8004 MT
(6.5.0.3. Finding the Next Match)SH
/Times-Roman SF
8280 10083 MT
(The function)295 W
11 /Courier AF
15337 XM
(find-next-diagonal-match)SH
12 /Times-Roman AF
31772 XM
(explores successive diagonals)
295 W( of the dynamic)294 W
8280 11641 MT
(programming table)
61 W( in order of increasing sum x+y. It calls)62 W
11 /Courier AF
37282 XM
(find-diagonal-match)SH
12 /Times-Roman AF
50184 XM
(to explore)62 W
8280 13199 MT
(the diagonal from top to bottom, possibly truncating it at the ends of the table.)SH
8280 15859 MT
(The function)106 W
11 /Courier AF
14959 XM
(find-next-rectilinear-match)SH
12 /Times-Roman AF
33185 XM
(explores successive rectangular)
106 W( layers of the)105 W
8280 17417 MT
(dynamic programming table,)
11 W( calling)12 W
11 /Courier AF
26097 XM
(find-linear-match)SH
12 /Times-Roman AF
37629 XM
(alternately to explore horizontal and)12 W
8280 18975 MT
(vertical layers.)SH
8280 21635 MT
(Both)SH
11 /Courier AF
12449 XM
(find-next-diagonal-match)SH
12 /Times-Roman AF
30124 XM
(and)SH
11 /Courier AF
33692 XM
(find-next-rectilinear-match)SH
12 /Times-Roman AF
53346 XM
(call)SH
11 /Courier AF
8280 23193 MT
(found-match)SH
12 /Times-Roman AF
15912 XM
(to verify that a match)
72 W( has been found by checking that the next few lines \050up to)73 W
11 /Courier AF
8280 24751 MT
(*minimum-match-length*)SH
12 /Times-Roman AF
(\051 are identical. If)43 W
11 /Courier AF
31273 XM
(found-match)SH
12 /Times-Roman AF
38876 XM
(returns)SH
11 /Courier AF
42553 XM
(nil)SH
12 /Times-Roman AF
(, this has)
43 W( the effect of)42 W
8280 26309 MT
(clumping together differences separated only by a)
111 W( few matching lines.  If a definition changed)112 W
8280 27867 MT
(between the)
75 W( files, it is sometimes preferable to be given the entire definition as a change than a)74 W
8280 29425 MT
(lot of small slices of the definition.)SH
/Times-Bold SF
8280 32389 MT
(6.5.0.4. Report Generator)SH
/Times-Roman SF
8280 34468 MT
(The function)133 W
11 /Courier AF
15013 XM
(print-differences)SH
12 /Times-Roman AF
26666 XM
(prints the differences in the two files. It prints a one line)134 W
8280 36026 MT
(summary of)
56 W( the change in a format similar to diff, giving the ranges of lines from each file, and)55 W
8280 37584 MT
(using a single letter \050a, d,)
55 W( or c\051 to indicate additions, deletions and changes, respectively. It then)56 W
8280 39142 MT
(prints out the)
75 W( appropriate section of each file, possibly with a few lines before and after to give)74 W
8280 40700 MT
(context. Also for context, it hunts backwards in the file until it finds the nearest line)
14 W( that begins a)15 W
8280 42258 MT
(definition \050left parenthesis on column zero\051 and prints that line.)SH
ES
%%Page: 64 66
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(64)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
ES
%%Page: 65 67
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(USER-MANUAL)SH
10 SS 
(: Extracting Program Documentation)SH
/Times-Roman SF
54080 XM
(65)SH
16 /Times-Bold AF
8280 8272 MT
(7.)SH
14 SS 
9880 XM
(USER-MANUAL)SH
16 SS 
(: Extracting Program Documentation)SH
12 /Times-Roman AF
8280 10703 MT
(The)SH
10 SS 
10606 XM
(USER-MANUAL)SH
12 SS 
18343 XM
(program is a portable tool for extracting documentation)
160 W( from Lisp source)159 W
10 SS 
37749 11880 MT
(21)SH
12 SS 
8280 12261 MT
(code. It helps create user guides and program documentation.)SH
14 /Times-Bold AF
8280 16079 MT
(7.1. Overview)SH
10 /Times-Roman AF
8280 18334 MT
(USER-MANUAL)SH
12 SS 
16150 XM
(reads in)
293 W( the source code from a Lisp program, extracts the function name,)294 W
8280 19892 MT
(argument list, and documentation string, and formats it either for use as a Lisp comment or for)91 W
8280 21450 MT
(use in a Scribe document.)SH
10 SS 
8280 24110 MT
(USER-MANUAL)SH
12 SS 
16245 XM
(can format documentation for several types of definition)
388 W( forms, including)389 W
8280 25668 MT
(functions, macros, variable definitions, defstructs, class and method definitions, and defsetf)289 W
8280 27226 MT
(forms. It is easy to add documentation handlers for new types of definition forms.)SH
14 /Times-Bold AF
8280 31044 MT
(7.2. Using)SH
12 SS 
14503 XM
(USER-MANUAL)SH
/Times-Roman SF
8280 33299 MT
(The function)110 W
11 /Courier AF
14967 XM
(create-user-manual)SH
12 /Times-Roman AF
27257 XM
(is the main routine for)
110 W( generating the documentation for)111 W
8280 34857 MT
(the definitions of a program.)SH
11 /Courier AF
8280 36749 MT
(create-user-manual)SH
12 /Times-Roman AF
20460 XM
(\050filename &key \050output-format \050quote text\051\051)SH
50012 XM
([Function])SH
21060 38035 MT
(\050output-stream *standard-output*\051\051)SH
10680 39818 MT
(Automatically creates a user manual for the functions in a file by collecting the)SH
10680 41104 MT
(documentation strings and argument lists of the functions and formatting the output)SH
10680 42390 MT
(nicely. Returns a list of the definition types of the forms it couldn't handle.)SH
/Times-Italic SF
10680 43676 MT
(output-format)SH
/Times-Roman SF
17649 XM
(may be either)SH
11 /Courier AF
24483 XM
('text)SH
12 /Times-Roman AF
28083 XM
(or)SH
11 /Courier AF
29383 XM
('scribe)SH
12 /Times-Roman AF
(.)SH
14 /Times-Bold AF
8280 47494 MT
(7.3. An Example of Using)SH
12 SS 
23797 XM
(USER-MANUAL)SH
/Times-Roman SF
8280 49749 MT
(The definition entry in Section 7.2 was generated by evaluating)SH
10 /Courier-Bold AF
9480 51554 MT
(\050create-user-manual "user-manual.lisp" :output-format 'scribe\051)SH
12 /Times-Roman AF
8280 54214 MT
(The following is the same entry, but in)SH
11 /Courier AF
27184 XM
('text)SH
12 /Times-Roman AF
30784 XM
(format:)SH
9 /Courier-Bold AF
9360 55859 MT
(;;;)SH
9360 56897 MT
(;;; CREATE-USER-MANUAL \050filename &key \050output-format \050quote text\051\051)
SH( [FUNCTION])1080 W
9360 57935 MT
(;;; \050output-stream)
10800 W( *standard-output*\051\051)SH
9360 58973 MT
(;;; Automatically)
1620 W( creates a user manual for the functions in a file by)SH
9360 60011 MT
(;;; collecting)
1620 W( the documentation strings and argument lists of the)SH
9360 61049 MT
(;;; functions)
1620 W( and formatting the output nicely. Returns a list of the)SH
9360 62087 MT
(;;; definition)
1620 W( types of the forms it couldn't handle. Output-format)SH
9360 63125 MT
(;;; may)
1620 W( be either 'TEXT or 'SCRIBE.)SH
9360 64163 MT
(;;;)SH
10800 50 8280 69990 UL
8 /Times-Roman AF
9280 71655 MT
(21)SH
10 SS 
10080 72000 MT
(The documentation in this user guide was created using the)SH
8 SS 
34021 XM
(USER-MANUAL)SH
10 SS 
40095 XM
(program.)SH
ES
%%Page: 66 68
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(66)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
14 /Times-Bold AF
6120 8138 MT
(7.4. Extending)SH
12 SS 
15065 XM
(USER-MANUAL)SH
/Times-Roman SF
6120 10393 MT
(The macro)417 W
11 /Courier AF
12420 XM
(define-doc-handler)SH
12 /Times-Roman AF
25017 XM
(is used to define a new documentation)
417 W( handler. For)416 W
6120 11951 MT
(example, the documentation handler for)SH
11 /Courier AF
25589 XM
(defvar)SH
12 /Times-Roman AF
29849 XM
(was defined as follows:)SH
10 /Courier-Bold AF
7320 13756 MT
(\050define-doc-handler defvar \050form\051)SH
8520 14887 MT
("variable")SH
8520 16018 MT
(\050values \050second form\051)SH
13320 17149 MT
(\050third form\051)SH
13320 18280 MT
(\050fourth form\051\051\051)SH
12 /Times-Roman AF
6120 20234 MT
(Definitions with more complex syntax, such as)11 W
11 /Courier AF
29068 XM
(defmethod)SH
12 /Times-Roman AF
35319 XM
(have correspondingly more complex)11 W
6120 21792 MT
(documentation handlers.)SH
11 /Courier AF
6120 23684 MT
(define-doc-handler)SH
12 /Times-Roman AF
18300 XM
(\050definer arglist description &body body\051)SH
48987 XM
([Macro])SH
8520 25467 MT
(Defines a new documentation handler.)SH
/Times-Italic SF
27320 XM
(definer)SH
/Times-Roman SF
31021 XM
(is the car of the definition form handled)SH
8520 26753 MT
(\050e.g., defun\051,)SH
/Times-Italic SF
14986 XM
(description)SH
/Times-Roman SF
20688 XM
(is a one-word string equivalent of definer \050e.g., "function"\051,)SH
8520 28039 MT
(and)SH
/Times-Italic SF
10553 XM
(arglist)SH
/Times-Roman SF
13989 XM
(and)SH
/Times-Italic SF
16022 XM
(body)SH
/Times-Roman SF
18655 XM
(together define a function that takes the form as input and value-)SH
8520 29325 MT
(returns the name, argument-list, documentation string, and a list of any qualifiers of the)SH
8520 30611 MT
(form.)SH
14 /Times-Bold AF
6120 34429 MT
(7.5. Implementation Notes)SH
12 /Times-Roman AF
6120 36684 MT
(The only)
21 W( complicated aspect of)20 W
10 SS 
21589 XM
(USER-MANUAL)SH
12 SS 
29186 XM
(is the formatting of the argument lists. If Waters')20 W
6120 38242 MT
(XP Lisp pretty printer)
262 W( [9] [10])
SH( is present)
262 W( in the Lisp environment)263 W
10 SS 
40285 XM
(USER-MANUAL)SH
12 SS 
48125 XM
(uses it to)263 W
6120 39800 MT
(format the argument lists. If)
349 W( not,)348 W
10 SS 
24084 XM
(USER-MANUAL)SH
12 SS 
32009 XM
(uses several heuristics for formating the)348 W
6120 41358 MT
(argument lists nicely.)SH
6120 44018 MT
(The function)376 W
11 /Courier AF
13339 XM
(split-string)SH
12 /Times-Roman AF
21935 XM
(is used to)
376 W( break up both long argument lists and lines of)377 W
6120 45576 MT
(documentation that are too wide. It calls the functions)209 W
11 /Courier AF
34140 XM
(lambda-list-keyword-position)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
6120 47134 MT
(split-point)SH
12 /Times-Roman AF
(,)SH
11 /Courier AF
14355 XM
(balanced-parenthesis-position)SH
12 /Times-Roman AF
(, and)375 W
11 /Courier AF
36878 XM
(parse-with-delimiter)SH
12 /Times-Roman AF
(. The)376 W
6120 48692 MT
(basic idea is to split the argument)
85 W( list so that it fits on the line, and walk backwards to the first)84 W
6120 50250 MT
(balanced parenthesis on the line, unless it's the first character on the line. Then it)
12 W( checks whether)13 W
6120 51808 MT
(the previous "word" is a lambda-list)
120 W( keyword, and if so splits the argument list just before the)119 W
6120 53366 MT
(keyword, otherwise at the balanced parenthesis position.)SH
11 /Courier AF
6120 55258 MT
(split-string)SH
12 /Times-Roman AF
14340 XM
(\050string width &optional arglistp filled)SH
47852 XM
([Function])SH
14940 56544 MT
(\050trim-whitespace t\051\051)SH
8520 58327 MT
(Splits a string into a list of strings, each of which is shorter than the specified width.)SH
8520 59613 MT
(Tries to be intelligent about where to split the string if it is an argument list. If)SH
/Times-Italic SF
46267 XM
(filled)SH
/Times-Roman SF
49036 XM
(is)SH
11 /Courier AF
8520 60899 MT
(t)SH
12 /Times-Roman AF
(, tries to fill out the strings as much as possible. This function is used to break up long)SH
8520 62185 MT
(argument lists nicely, and to break up wide lines of documentation nicely.)SH
11 /Courier AF
6120 64077 MT
(split-point)SH
12 /Times-Roman AF
13680 XM
(\050string max-length &optional arglistp filled\051)SH
47852 XM
([Function])SH
8520 65860 MT
(Finds an appropriate point to break the string at given a target length. If arglistp is)SH
11 /Courier AF
48163 XM
(t)SH
12 /Times-Roman AF
(,)SH
8520 67146 MT
(tries to find an intelligent position to break the string. If filled is)SH
11 /Courier AF
39466 XM
(t)SH
12 /Times-Roman AF
(, tries to fill out the)SH
8520 68432 MT
(string as much as possible.)SH
ES
%%Page: 67 69
BS
0 SI
8 /Times-BoldItalic AF
8280 4291 MT
(USER-MANUAL)SH
10 SS 
(: Extracting Program Documentation)SH
/Times-Roman SF
54080 XM
(67)SH
11 /Courier AF
8280 8023 MT
(lambda-list-keyword-position)SH
12 /Times-Roman AF
27060 XM
(\050string &optional end trailer-only\051)SH
50012 XM
([Function])SH
10680 9806 MT
(If the previous symbol is a lambda-list keyword, returns its position. Otherwise returns)SH
10680 11092 MT
(end.)SH
11 /Courier AF
8280 12984 MT
(balanced-parenthesis-position)SH
12 /Times-Roman AF
27720 XM
(\050string &optional end\051)SH
50012 XM
([Function])SH
10680 14767 MT
(Finds the position of the left parenthesis which is closest to)SH
/Times-Italic SF
39389 XM
(end)SH
/Times-Roman SF
41422 XM
(but leaves the prefix of)SH
10680 16053 MT
(the string with balanced parentheses or at most one unbalanced left parenthesis.)SH
11 /Courier AF
8280 17945 MT
(parse-with-delimiter)SH
12 /Times-Roman AF
21780 XM
(\050line &optional \050delim #\134newline\051\051)SH
50012 XM
([Function])SH
10680 19728 MT
(Breaks)SH
/Times-Italic SF
14313 XM
(line)SH
/Times-Roman SF
16414 XM
(into a list of strings, using)SH
/Times-Italic SF
29187 XM
(delim)SH
/Times-Roman SF
32154 XM
(as a breaking point.)SH
ES
%%Page: 68 70
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(68)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
ES
%%Page: 69 71
BS
0 SI
10 /Times-BoldItalic AF
8280 4291 MT
(Test Source File for)SH
8 SS 
16780 XM
(XREF)SH
10 /Times-Roman AF
54080 XM
(69)SH
16 /Times-Bold AF
27834 8272 MT
(Appendix I)SH
23043 9830 MT
(Test Source File for)SH
14 SS 
36906 XM
(XREF)SH
12 /Times-Roman AF
8280 12261 MT
(The following is a short nonsense program used to test)77 W
10 SS 
35588 XM
(XREF)SH
12 SS 
38521 XM
(and produce the output in Section)78 W
8280 13819 MT
(2.4. It may be found in the file)SH
11 /Courier AF
23216 XM
(xref-test.lisp)SH
12 /Times-Roman AF
(.)SH
10 /Courier-Bold AF
9480 15624 MT
(\050defun top-level \050\051)SH
10680 16755 MT
("Top level function with null lambda list.")SH
10680 17886 MT
(\050let* \050\050input \050read\051\051)SH
14880 19017 MT
(\050key \050car input\051\051\051)SH
11880 20148 MT
(\050declare \050special key\051\051)SH
11880 21279 MT
(\050case key)SH
13080 22410 MT
(\050quit)SH
13680 23541 MT
(\050return \050values \050frob \050rest input\051\051 'quit\051\051\051)SH
13080 24672 MT
(\050otherwise)SH
13680 25803 MT
(\050cond \050\050member key '\050foo bar baz\051\051)SH
17880 26934 MT
(\050barf key \050rest input\051\051\051)SH
17280 28065 MT
(\050t)SH
17880 29196 MT
(\050frowz \050rest input\051 :key key\051\051\051\051\051\051\051)SH
9480 31458 MT
(\050defun frob \050items\051)SH
10680 32589 MT
("Here we test mapcar.")SH
10680 33720 MT
(\050mapcar #'frob-item items\051\051)SH
9480 35982 MT
(\050defun frob-item \050item\051)SH
10680 37113 MT
("Here we test apply.")SH
10680 38244 MT
(\050apply #'append-frobs item\051\051)SH
9480 40506 MT
(\050defun barf \050key &optional items\051)SH
10680 41637 MT
("Optional args test.")SH
10680 42768 MT
(\050cons key \050frowz items\051\051\051)SH
9480 45030 MT
(\050defun frowz \050items &key key\051)SH
10680 46161 MT
("Keyword args test.")SH
10680 47292 MT
(\050dolist \050item items\051)SH
11880 48423 MT
(\050let \050\050frowz)SH
16080 49554 MT
(\050if \050eq key 'quit\051)SH
18480 50685 MT
(\050intern)SH
19080 51816 MT
(\050format nil "FOO~A")SH
23880 52947 MT
(\050round \050+ \050length \050process-keys items\051\051)SH
29880 54078 MT
(10\051\051\051 'keyword\051)SH
18480 55209 MT
(\050snarf-item item\051\051\051\051)SH
13080 56340 MT
(\050when \050string-equal frowz \050process-key key\051\051)SH
14280 57471 MT
(\050setf \050node-position key\051 12\051)SH
14280 58602 MT
(\050return frowz\051\051\051\051\051)SH
9480 60864 MT
(\050defun process-key \050key\051)SH
10680 61995 MT
(\050funcall #'symbol-name-key key\051\051)SH
ES
%%Page: 70 72
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(70)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
ES
%%Page: 71 73
BS
0 SI
10 /Times-BoldItalic AF
8280 4291 MT
(Extensions to Common Lisp)SH
/Times-Roman SF
54080 XM
(71)SH
16 /Times-Bold AF
27523 8272 MT
(Appendix II)SH
22256 9830 MT
(Extensions to Common Lisp)SH
12 /Times-Roman AF
8280 12261 MT
(In the course of writing these)
230 W( utilities, often there were implementation-dependent functions)229 W
8280 13819 MT
(which represent functionality that is missing from)
142 W( Common Lisp. This appendix lists some of)143 W
8280 15377 MT
(those functions.)SH
11 /Courier AF
8280 17269 MT
(arglist)SH
12 /Times-Roman AF
13200 XM
(\050symbol\051)SH
50012 XM
([Function])SH
10680 19052 MT
(Returns the argument list of)SH
/Times-Italic SF
24384 XM
(symbol)SH
/Times-Roman SF
(.)SH
11 /Courier AF
8280 20944 MT
(append-directories)SH
12 /Times-Roman AF
20460 XM
(\050absolute-pathname relative-pathname\051)SH
50012 XM
([Function])SH
10680 22727 MT
(Tacks a subdirectory onto a directory. Returns the pathname)SH
/Times-Italic SF
39949 XM
(absolute-pathname)SH
/Times-Roman SF
49450 XM
(with)SH
10680 24013 MT
(the components of the directory of)SH
/Times-Italic SF
27549 XM
(relative-pathname)SH
/Times-Roman SF
36650 XM
(appended onto the end of its)SH
10680 25299 MT
(directory.)SH
11 /Courier AF
8280 27191 MT
(space)SH
12 /Times-Roman AF
11880 XM
(\050\051)SH
50012 XM
([Function])SH
10680 28974 MT
(Value returns three numbers relating to memory usage. The first is the number of bytes)SH
10680 30260 MT
(of dynamic storage currently allocated. The second is the amount of space remaining.)SH
10680 31546 MT
(The third is the total number of bytes consed since time zero \050alternately, since the first)SH
10680 32832 MT
(time)SH
11 /Courier AF
13115 XM
(space)SH
12 /Times-Roman AF
16715 XM
(was called, with the first time returning zero\051.)SH
10680 35220 MT
(The definition of)SH
11 /Courier AF
19115 XM
(room)SH
12 /Times-Roman AF
22055 XM
(is inadequate because it is implementation dependent and lacks)SH
10680 36506 MT
(a convenient interface for programs. Having to call)SH
11 /Courier AF
35515 XM
(parse-integer)SH
12 /Times-Roman AF
44395 XM
(on the output of)SH
11 /Courier AF
10680 37792 MT
(\050room nil\051)SH
12 /Times-Roman AF
17580 XM
(is unacceptable.)SH
8280 40452 MT
(The macro)92 W
11 /Courier AF
13930 XM
(defsetf)SH
12 /Times-Roman AF
18942 XM
(currently restricts the setf method to)
92 W( a single store variable. If we modify)91 W
11 /Courier AF
8280 42010 MT
(defsetf)SH
12 /Times-Roman AF
13383 XM
(to allow multiple store variables, with)
183 W( assignment via multiple values \050e.g.,)184 W
11 /Courier AF
51780 XM
(\050setf)SH
8280 43568 MT
(\050frob x\051 \050values 1 2\051\051)62 W
12 /Times-Roman AF
(\051, then)62 W
11 /Courier AF
26538 XM
(get-setf-method-multiple-values)SH
12 /Times-Roman AF
47359 XM
(can be removed)61 W
8280 45126 MT
(from the language.)SH
8280 47786 MT
(Some Lisps buffer the input lines at read-eval-print loop prompt. This interferes with the desired)35 W
8280 49344 MT
(operation of)150 W
11 /Courier AF
14714 XM
(listen)SH
12 /Times-Roman AF
19124 XM
(and)SH
11 /Courier AF
21307 XM
(read-char-no-hang)SH
12 /Times-Roman AF
(, since they should not have to wait)
150 W( until the)149 W
8280 50902 MT
(user hits a carriage return and linefeed to get their)
22 W( input. Perhaps Common Lisp should include a)23 W
11 /Courier AF
8280 52460 MT
(with-unbuffered-reading)SH
12 /Times-Roman AF
23793 XM
(macro. This macro could put the tty in RAW or CBREAK mode)32 W
8280 54018 MT
(to allow unbuffered reading, and back to COOKED mode afterwards.)SH
8280 56678 MT
(Common Lisp currently)
18 W( avoids discussing memory management and garbage collection. A set of)19 W
8280 58236 MT
(naming conventions for the basic gc functions for Lisps that involve garbage)
14 W( collection would be)13 W
8280 59794 MT
(helpful.)SH
8280 62454 MT
(Common Lisp should specify more of the keywords that should appear in the *features*)
26 W( list. For)27 W
8280 64012 MT
(example, each Lisp implementation should have symbols that distinguish)
25 W( it from other Lisps and)24 W
8280 65570 MT
(distinguish major versions of the implementation.)
247 W( Major subsystems such as CLOS, LOOP,)248 W
8280 67128 MT
(SERIES, etc., should have associated keywords.)SH
8280 69788 MT
(Miscellaneous minor functions:)SH
/Symbol SF
10428 71491 MT
(\267)SH
11 /Courier AF
11280 XM
(firstn)SH
12 /Times-Roman AF
15540 XM
(returns the list containing the first n elements of its argument.)SH
ES
%%Page: 72 74
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(72)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
12 /Symbol AF
8268 8160 MT
(\267)SH
/Times-Roman SF
9120 XM
(subst:sublis::substitute:? Add)
109 W( a definition)108 W
11 /Courier AF
29763 XM
(parallel-substitute)SH
12 /Times-Roman AF
42711 XM
(for performing)108 W
9120 9446 MT
(many substitutions on a sequence in parallel.)SH
/Symbol SF
8268 11475 MT
(\267)SH
/Times-Roman SF
9120 XM
(Equivalents of)SH
11 /Courier AF
16388 XM
(last)SH
12 /Times-Roman AF
19328 XM
(and)SH
11 /Courier AF
21361 XM
(butlast)SH
12 /Times-Roman AF
26281 XM
(for sequences.)SH
/Symbol SF
8268 13504 MT
(\267)SH
11 /Courier AF
9120 XM
(userid)SH
12 /Times-Roman AF
13380 XM
(and)SH
11 /Courier AF
15413 XM
(username)SH
12 /Times-Roman AF
20993 XM
(return the user's id and name, if available.)SH
/Symbol SF
8268 15533 MT
(\267)SH
11 /Courier AF
9120 XM
(copy-file)SH
12 /Times-Roman AF
15360 XM
(to make a copy of a file.)SH
/Symbol SF
8268 17562 MT
(\267)SH
11 /Courier AF
9120 XM
(create-directory)SH
12 /Times-Roman AF
19980 XM
(to create a new directory.)SH
6120 20222 MT
(It is unfortunate that a portable)37 W
10 SS 
21479 XM
(DEFSYSTEM)SH
12 SS 
27650 XM
(facility must be file-based. Nothing)
37 W( in the definition)38 W
6120 21780 MT
(of the Lisp language requires that definitions)
47 W( be stored in files, but there seems to be an implicit)46 W
6120 23338 MT
(assumption that this is so. In Common Lisp one may either compile an entire file or)
3 W( an individual)4 W
6120 24896 MT
(definition, but there is no mechanism)
102 W( for compiling a single definition and saving its compiled)101 W
6120 26454 MT
(code in a file.  This imposes artificial constraints)
105 W( on a system like)106 W
10 SS 
39233 XM
(DEFSYSTEM)SH
12 SS 
(. If instead Lisp)106 W
6120 28012 MT
(definitions and compiled code were stored in a database,)
22 W( one could still edit the definitions using)21 W
6120 29570 MT
(a text editor, but the compiler would be able to ensure that)
64 W( the compiled code in the database is)65 W
6120 31128 MT
(up to date on a package by package \050or even defun by defun\051 basis.)SH
ES
%%Page: 73 75
BS
0 SI
10 /Times-BoldItalic AF
8280 4291 MT
(Extensions to Common Lisp)SH
/Times-Roman SF
54080 XM
(73)SH
15 /Times-Bold AF
28181 8205 MT
(References)SH
12 /Times-Roman AF
8280 10944 MT
([1])SH
11880 XM
(Feldman, S. I.)SH
11880 12230 MT
(Make - A Program for Maintaining Computer Programs.)SH
/Times-Italic SF
11880 13516 MT
(Software - Practice and Experience)SH
/Times-Roman SF
29314 XM
(9\0503\051:255-265, March, 1979.)SH
8280 15625 MT
([2])SH
11880 XM
(Masinter, Larry M.)SH
/Times-Italic SF
11880 16911 MT
(Global Program Analysis in an Interactive Environment)SH
/Times-Roman SF
(.)SH
11880 18197 MT
(PhD thesis, Stanford University, 1980.)SH
8280 20306 MT
([3])SH
11880 XM
(Moon, David, Stallman, Richard, and Weinreb, Daniel.)SH
/Times-Italic SF
11880 21592 MT
(Lisp Machine Manual)SH
/Times-Roman SF
11880 22878 MT
(6th edition, MIT AI Laboratory, Cambridge, Massachusetts, June 1984.)SH
8280 24987 MT
([4])SH
/Times-Italic SF
11880 XM
(Program Development Utilities, Volume 4)SH
/Times-Roman SF
11880 26273 MT
(Symbolics, Cambridge, MA, August 1986.)SH
8280 28382 MT
([5])SH
11880 XM
(Robbins, Richard E.)SH
/Times-Italic SF
11880 29668 MT
(BUILD: a tool for maintaining consistency in modular systems)SH
/Times-Roman SF
(.)SH
11880 30954 MT
(AI Memo 874, MIT AI Laboratory, Cambridge, Massachusetts, 1985.)SH
8280 33063 MT
([6])SH
11880 XM
(Steele, Guy L. Jr.)SH
/Times-Italic SF
11880 34349 MT
(Common LISP: The Language.)SH
/Times-Roman SF
11880 35635 MT
(Digital Press, 30 North Avenue, Burlington, MA 01803, 1984.)SH
8280 37744 MT
([7])SH
11880 XM
(Steele, Guy L. Jr.)SH
/Times-Italic SF
11880 39030 MT
(Common LISP: The Language; 2nd Edition.)SH
/Times-Roman SF
11880 40316 MT
(Digital Press, 30 North Avenue, Burlington, MA 01803, 1990.)SH
8280 42425 MT
([8])SH
/Times-Italic SF
11880 XM
(User's Guide to Symbolics Computers, Volume 1)SH
/Times-Roman SF
11880 43711 MT
(Symbolics, Cambridge, MA, July 1986.)SH
8280 45820 MT
([9])SH
11880 XM
(Waters, Richard C.)SH
/Times-Italic SF
11880 47106 MT
(PP: A Lisp Pretty Printing System)SH
/Times-Roman SF
(.)SH
11880 48392 MT
(AI Memo 816, MIT AI Laboratory, Cambridge, Massachusetts, 1984.)SH
8280 50501 MT
([10])SH
11880 XM
(Waters, Richard C.)SH
/Times-Italic SF
11880 51787 MT
(XP: A Common Lisp Pretty Printing System)SH
/Times-Roman SF
(.)SH
11880 53073 MT
(AI Memo 1102, MIT AI Laboratory, Cambridge, Massachusetts, March, 1989.)SH
ES
%%Page: 74 76
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(74)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
ES
%%Page: i 77
BS
0 SI
10 /Times-BoldItalic AF
8280 4291 MT
(Table of Contents)SH
/Times-Roman SF
54802 XM
(i)SH
16 /Times-Bold AF
25591 8272 MT
(Table of Contents)SH
12 SS 
8280 10684 MT
(1. Introduction)SH
54480 XM
(1)SH
10 SS 
9780 12074 MT
(1.1. Why)
250 W( Portable Utilities?)
195 0 WX(..........................................................................................................................)SH
54580 XM
(1)SH
9780 13154 MT
(1.2. Design)
250 W( Philosophy)
137 0 WX(...................................................................................................................................)SH
54580 XM
(1)SH
9780 14234 MT
(1.3. Overview)
140 250 WX(..................................................................................................................................................)SH
54580 XM
(2)SH
9780 15314 MT
(1.4. Obtaining)
250 W( the Utilities)
249 0 WX(............................................................................................................................)SH
54580 XM
(3)SH
9780 16394 MT
(1.5. Acknowledgments)
167 250 WX(...................................................................................................................................)SH
54580 XM
(5)SH
12 SS 
8280 17918 MT
(2.)SH
10 SS 
9480 XM
(XREF)SH
12 SS 
(: Cross Referencer)SH
54480 XM
(7)SH
10 SS 
9780 19308 MT
(2.1. Overview)
140 250 WX(..................................................................................................................................................)SH
54580 XM
(7)SH
9780 20388 MT
(2.2. Loading)250 W
8 SS 
15587 XM
(XREF)SH
10 SS 
17780 XM
(...........................................................................................................................................)SH
54580 XM
(8)SH
9780 21468 MT
(2.3. Using)250 W
8 SS 
14475 XM
(XREF)SH
10 SS 
16780 XM
(...............................................................................................................................................)SH
54580 XM
(8)SH
11780 22548 MT
(2.3.1. Creating,)
250 W( Saving and Restoring the Reference Database)
3 0 WX(.........................................................)SH
54580 XM
(9)SH
11780 23628 MT
(2.3.2. Examining)
250 W( Symbol References)
195 0 WX(...................................................................................................)SH
54580 XM
(9)SH
11780 24708 MT
(2.3.3. Viewing)
250 W( and Graphing the Reference Database)
168 0 WX(.......................................................................)SH
54080 XM
(10)SH
11780 25788 MT
(2.3.4.)SH
8 SS 
14530 XM
(XREF)SH
10 SS 
16959 XM
(Variables)
210 MX(.............................................................................................................................)SH
54080 XM
(11)SH
9780 26868 MT
(2.4. An)
250 W( Example of Using)SH
8 SS 
21114 XM
(XREF)SH
10 SS 
23530 XM
(....................................................................................................................)SH
54080 XM
(11)SH
9780 27948 MT
(2.5. Extending)250 W
8 SS 
16420 XM
(XREF)SH
10 SS 
18780 XM
(.......................................................................................................................................)SH
54080 XM
(13)SH
9780 29028 MT
(2.6. Implementation)
250 W( Notes)
29 0 WX(.............................................................................................................................)SH
54080 XM
(15)SH
12 SS 
8280 30552 MT
(3.)SH
10 SS 
9480 XM
(METERING)SH
12 SS 
(: Code Timing and Consing Profiler)SH
53880 XM
(19)SH
10 SS 
9780 31942 MT
(3.1. Installing)250 W
8 SS 
16087 XM
(METERING)SH
10 SS 
20780 XM
(...............................................................................................................................)SH
54080 XM
(19)SH
9780 33022 MT
(3.2. Using)250 W
8 SS 
14475 XM
(METERING)SH
10 SS 
19030 XM
(......................................................................................................................................)SH
54080 XM
(20)SH
11780 34102 MT
(3.2.1. Suggested)
250 W( Usage)
167 0 WX(...........................................................................................................................)SH
54080 XM
(20)SH
11780 35182 MT
(3.2.2.)SH
8 SS 
14530 XM
(METERING)SH
10 SS 
19226 XM
(Primitives)
166 MX(...................................................................................................................)SH
54080 XM
(20)SH
9780 36262 MT
(3.3. An)
250 W( Example of)SH
8 SS 
18419 XM
(METERING)SH
10 SS 
23115 XM
(Output)
53 MX(.........................................................................................................)SH
54080 XM
(23)SH
9780 37342 MT
(3.4. Usage)
250 W( Notes)
57 0 WX(..............................................................................................................................................)SH
54080 XM
(23)SH
11780 38422 MT
(3.4.1. Clock)
250 W( Resolution)
194 0 WX(..........................................................................................................................)SH
54080 XM
(23)SH
11780 39502 MT
(3.4.2. Calculating)
250 W( Monitoring Overhead)
194 0 WX(.............................................................................................)SH
54080 XM
(24)SH
9780 40582 MT
(3.5. Implementation)
250 W( Notes)
29 0 WX(.............................................................................................................................)SH
54080 XM
(25)SH
12 SS 
8280 42106 MT
(4.)SH
10 SS 
9480 XM
(DEFSYSTEM)SH
12 SS 
(: A "make" for Lisp)SH
53880 XM
(27)SH
10 SS 
9780 43496 MT
(4.1. Installing)250 W
8 SS 
16087 XM
(DEFSYSTEM)SH
10 SS 
21030 XM
(..............................................................................................................................)SH
54080 XM
(27)SH
9780 44576 MT
(4.2. Overview)
140 250 WX(..................................................................................................................................................)SH
54080 XM
(28)SH
9780 45656 MT
(4.3. Using)250 W
8 SS 
14475 XM
(DEFSYSTEM)SH
10 SS 
19530 XM
(....................................................................................................................................)SH
54080 XM
(29)SH
11780 46736 MT
(4.3.1. Defining)
250 W( a System)
28 0 WX(.........................................................................................................................)SH
54080 XM
(29)SH
13780 47816 MT
(4.3.1.1. Component)
250 W( Types)
194 0 WX(.............................................................................................................)SH
54080 XM
(29)SH
13780 48896 MT
(4.3.1.2. Component)
250 W( Names)
112 0 WX(............................................................................................................)SH
54080 XM
(30)SH
13780 49976 MT
(4.3.1.3. Component)
250 W( Pathnames and File Types)
249 0 WX(..........................................................................)SH
54080 XM
(30)SH
13780 51056 MT
(4.3.1.4. Segregating)
250 W( Binaries for Different Lisps)
196 0 WX(........................................................................)SH
54080 XM
(31)SH
13780 52136 MT
(4.3.1.5. Including)
250 W( Foreign Systems)
110 0 WX(...............................................................................................)SH
54080 XM
(31)SH
13780 53216 MT
(4.3.1.6. Component)
250 W( Packages, Initializations and Finalizations)
53 0 WX(................................................)SH
54080 XM
(31)SH
13780 54296 MT
(4.3.1.7. Component)
250 W( Dependencies)
167 0 WX(................................................................................................)SH
54080 XM
(31)SH
13780 55376 MT
(4.3.1.8. Load-only)
250 W( and Compile-only Components)
81 0 WX(.....................................................................)SH
54080 XM
(32)SH
13780 56456 MT
(4.3.1.9. Component)
250 W( Definitions)
83 0 WX(.....................................................................................................)SH
54080 XM
(32)SH
11780 57536 MT
(4.3.2. Describing)
250 W( a System)
84 0 WX(.....................................................................................................................)SH
54080 XM
(34)SH
11780 58616 MT
(4.3.3. Removing)
250 W( a System)
112 0 WX(......................................................................................................................)SH
54080 XM
(34)SH
11780 59696 MT
(4.3.4. Loading)
250 W( and Compiling a System)
25 0 WX(...............................................................................................)SH
54080 XM
(34)SH
11780 60776 MT
(4.3.5. Other)
250 W( Operations on Systems)
167 0 WX(.....................................................................................................)SH
54080 XM
(37)SH
11780 61856 MT
(4.3.6. Changes)
250 W( to Require)
56 0 WX(......................................................................................................................)SH
54080 XM
(37)SH
11780 62936 MT
(4.3.7.)SH
8 SS 
14530 XM
(DEFSYSTEM)SH
10 SS 
19672 XM
(Variables)
247 MX(..................................................................................................................)SH
54080 XM
(37)SH
9780 64016 MT
(4.4. An)
250 W( Example of Using)SH
8 SS 
21114 XM
(DEFSYSTEM)SH
10 SS 
26030 XM
(..........................................................................................................)SH
54080 XM
(39)SH
9780 65096 MT
(4.5. Implementation)
250 W( Notes)
29 0 WX(.............................................................................................................................)SH
54080 XM
(41)SH
11780 66176 MT
(4.5.1. Structural)
250 W( vs. Procedural System Construction Tools)
140 0 WX(.............................................................)SH
54080 XM
(41)SH
11780 67256 MT
(4.5.2. Retrieving)
250 W( System Definitions)
29 0 WX(.....................................................................................................)SH
54080 XM
(42)SH
11780 68336 MT
(4.5.3. Appending)
250 W( Directories)
56 0 WX(.................................................................................................................)SH
54080 XM
(42)SH
ES
%%Page: ii 78
BS
0 SI
10 /Times-Roman AF
6120 4291 MT
(ii)SH
/Times-BoldItalic SF
38418 XM
(Portable Utilities for Common Lisp)SH
/Times-Bold SF
9620 7870 MT
(4.5.4. Defining)
250 W( a System)
28 0 WX(.........................................................................................................................)SH
51920 XM
(43)SH
9620 8950 MT
(4.5.5. Operating)
250 W( on a System.................................................................................................................)SH
51920 XM
(43)SH
9620 10030 MT
(4.5.6. Querying)
250 W( the User with Timeouts)
223 0 WX(..............................................................................................)SH
51920 XM
(43)SH
9620 11110 MT
(4.5.7. Debugging)
138 250 WX(.....................................................................................................................................)SH
51920 XM
(44)SH
12 SS 
6120 12634 MT
(5.)SH
10 SS 
7320 XM
(LOGICAL-PATHNAMES)SH
12 SS 
(: Portable Pathnames)SH
51720 XM
(45)SH
10 SS 
7620 14024 MT
(5.1. Overview)
140 250 WX(..................................................................................................................................................)SH
51920 XM
(45)SH
9620 15104 MT
(5.1.1. Logical)
250 W( Pathname Syntax)
55 0 WX(............................................................................................................)SH
51920 XM
(45)SH
9620 16184 MT
(5.1.2. Incompatibilities)
250 W( with the X3J13 Specification)
83 0 WX(.........................................................................)SH
51920 XM
(46)SH
7620 17264 MT
(5.2. Installing)250 W
8 SS 
13927 XM
(LOGICAL-PATHNAMES)SH
10 SS 
23120 XM
(.............................................................................................................)SH
51920 XM
(46)SH
7620 18344 MT
(5.3. Using)250 W
8 SS 
12315 XM
(LOGICAL-PATHNAMES)SH
10 SS 
21620 XM
(...................................................................................................................)SH
51920 XM
(47)SH
9620 19424 MT
(5.3.1. Physical)
250 W( Host Types)
138 0 WX(.....................................................................................................................)SH
51920 XM
(47)SH
9620 20504 MT
(5.3.2. Logical)
250 W( Pathname Translations)
110 0 WX(..................................................................................................)SH
51920 XM
(48)SH
9620 21584 MT
(5.3.3. Loading)
250 W( Logical Pathname Translations)
53 0 WX(...................................................................................)SH
51920 XM
(49)SH
9620 22664 MT
(5.3.4. Additional)
250 W( Transformations)
221 0 WX(.......................................................................................................)SH
51920 XM
(49)SH
11620 23744 MT
(5.3.4.1. Translation)
250 W( Rules)
110 0 WX(..............................................................................................................)SH
51920 XM
(49)SH
11620 24824 MT
(5.3.4.2. Canonical)
250 W( Types)
110 0 WX(................................................................................................................)SH
51920 XM
(50)SH
9620 25904 MT
(5.3.5. Using)
250 W( Logical Pathnames)
166 0 WX(............................................................................................................)SH
51920 XM
(50)SH
9620 26984 MT
(5.3.6.)SH
8 SS 
12370 XM
(LOGICAL-PATHNAMES)SH
10 SS 
21778 XM
(Variables)
231 MX(.................................................................................................)SH
51920 XM
(51)SH
7620 28064 MT
(5.4. Examples)
250 W( of Using)SH
8 SS 
17815 XM
(LOGICAL-PATHNAMES)SH
10 SS 
27120 XM
(.............................................................................................)SH
51920 XM
(51)SH
7620 29144 MT
(5.5. Implementation)
250 W( Notes)
29 0 WX(.............................................................................................................................)SH
51920 XM
(53)SH
12 SS 
6120 30668 MT
(6.)SH
10 SS 
7320 XM
(SOURCE-COMPARE)SH
12 SS 
(: A "diff" for Lisp)SH
51720 XM
(55)SH
10 SS 
7620 32058 MT
(6.1. Overview)
140 250 WX(..................................................................................................................................................)SH
51920 XM
(55)SH
7620 33138 MT
(6.2. Using)250 W
8 SS 
12315 XM
(SOURCE-COMPARE)SH
10 SS 
20120 XM
(.........................................................................................................................)SH
51920 XM
(56)SH
9620 34218 MT
(6.2.1. Comparing)
250 W( Files)
111 0 WX(...........................................................................................................................)SH
51920 XM
(56)SH
9620 35298 MT
(6.2.2.)SH
8 SS 
12370 XM
(SOURCE-COMPARE)SH
10 SS 
20355 XM
(Variables)
154 MX(.......................................................................................................)SH
51920 XM
(57)SH
7620 36378 MT
(6.3. Example)
250 W( of Using)SH
8 SS 
17426 XM
(SOURCE-COMPARE)SH
10 SS 
25370 XM
(....................................................................................................)SH
51920 XM
(58)SH
7620 37458 MT
(6.4. Proof)
250 W( of Average Case Linear Running Time)
85 0 WX(......................................................................................)SH
51920 XM
(59)SH
7620 38538 MT
(6.5. Implementation)
250 W( Notes)
29 0 WX(.............................................................................................................................)SH
51920 XM
(61)SH
11620 39618 MT
(6.5.0.1. Line)
250 W( Comparison)
27 0 WX(...............................................................................................................)SH
51920 XM
(61)SH
11620 40698 MT
(6.5.0.2. Outer)
250 W( Iteration Loop)
195 0 WX(........................................................................................................)SH
51920 XM
(62)SH
11620 41778 MT
(6.5.0.3. Finding)
250 W( the Next Match)
56 0 WX(....................................................................................................)SH
51920 XM
(63)SH
11620 42858 MT
(6.5.0.4. Report)
250 W( Generator)
58 0 WX(..............................................................................................................)SH
51920 XM
(63)SH
12 SS 
6120 44382 MT
(7.)SH
10 SS 
7320 XM
(USER-MANUAL)SH
12 SS 
(: Extracting Program Documentation)SH
51720 XM
(65)SH
10 SS 
7620 45772 MT
(7.1. Overview)
140 250 WX(..................................................................................................................................................)SH
51920 XM
(65)SH
7620 46852 MT
(7.2. Using)250 W
8 SS 
12315 XM
(USER-MANUAL)SH
10 SS 
18370 XM
(................................................................................................................................)SH
51920 XM
(65)SH
7620 47932 MT
(7.3. An)
250 W( Example of Using)SH
8 SS 
18954 XM
(USER-MANUAL)SH
10 SS 
25120 XM
(.....................................................................................................)SH
51920 XM
(65)SH
7620 49012 MT
(7.4. Extending)250 W
8 SS 
14260 XM
(USER-MANUAL)SH
10 SS 
20370 XM
(........................................................................................................................)SH
51920 XM
(66)SH
7620 50092 MT
(7.5. Implementation)
250 W( Notes)
29 0 WX(.............................................................................................................................)SH
51920 XM
(66)SH
12 SS 
6120 51616 MT
(Appendix I. Test Source File for)SH
10 SS 
22888 XM
(XREF)SH
12 SS 
51720 XM
(69)SH
6120 53140 MT
(Appendix II. Extensions to Common Lisp)SH
51720 XM
(71)SH
ES
%%Page: iii 79
BS
0 SI
10 /Times-BoldItalic AF
8280 4291 MT
(List of Figures)SH
/Times-Roman SF
54246 XM
(iii)SH
16 /Times-Bold AF
26702 8272 MT
(List of Figures)SH
10 SS 
9780 10550 MT
(Figure 2-1:)
SH( Sample)
500 W( PostScript Call Graph)SH
54080 XM
(13)SH
9780 11630 MT
(Figure 6-1:)
SH( Two)
500 W( Greedy Metrics)SH
54080 XM
(56)SH
ES
%%Trailer
%%Pages: 79
%%DocumentFonts: Times-Roman Times-Bold Times-Italic Times-BoldItalic Symbol Courier Courier-Bold
